{
  "version": 3,
  "sources": ["../../@jscad/io-utils/Blob.js", "../../@jscad/io-utils/makeBlob.js", "../../@jscad/io-utils/convertToBlob.js", "../../@jscad/io-utils/BinaryReader.js", "../../@jscad/io-utils/index.js", "../../@jscad/amf-serializer/node_modules/onml/lib/stringify.js", "../../@jscad/array-utils/src/flatten.js", "../../@jscad/array-utils/src/fnNumberSort.js", "../../@jscad/array-utils/src/head.js", "../../@jscad/array-utils/src/insertSorted.js", "../../@jscad/array-utils/src/nth.js", "../../@jscad/array-utils/src/padToLength.js", "../../@jscad/array-utils/src/toArray.js", "../../@jscad/array-utils/src/index.js", "../../@jscad/amf-serializer/index.js", "../../@jscad/dxf-serializer/autocad_AC2017.js", "../../@jscad/dxf-serializer/colorindex2017.js", "../../@jscad/dxf-serializer/index.js", "../../@jscad/json-serializer/index.js", "../../@jscad/obj-serializer/index.js", "../../@jscad/stl-serializer/CSGToStlb.js", "../../@jscad/stl-serializer/CSGToStla.js", "../../@jscad/stl-serializer/index.js", "../../@jscad/svg-serializer/node_modules/onml/lib/stringify.js", "../../@jscad/svg-serializer/package.json", "../../@jscad/svg-serializer/index.js", "../../@jscad/x3d-serializer/node_modules/onml/lib/stringify.js", "../../@jscad/x3d-serializer/src/index.js", "../../fflate/lib/worker.cjs", "../../fflate/lib/index.cjs", "../../onml/lib/stringify.js", "../../@jscad/3mf-serializer/src/index.js", "../../@jscad/io/formats.js", "../../@jscad/io/prepareOutput.js", "../../@jscad/amf-deserializer/package.json", "../../@jscad/amf-deserializer/src/objectBuilder.js", "../../../src/xml/1.0/ed5.ts", "../../../src/xml/1.1/ed2.ts", "../../../src/xmlns/1.0/ed3.ts", "../../../src/saxes.ts", "../../@jscad/amf-deserializer/src/helpers.js", "../../@jscad/amf-deserializer/src/constants.js", "../../@jscad/amf-deserializer/src/parse.js", "../../@jscad/amf-deserializer/src/translate.js", "../../@jscad/amf-deserializer/src/deserialize.js", "../../@jscad/amf-deserializer/src/index.js", "../../@jscad/dxf-deserializer/package.json", "../../@jscad/dxf-deserializer/autocad.js", "../../@jscad/dxf-deserializer/colorindex2017.js", "../../@jscad/dxf-deserializer/DxfReader.js", "../../@jscad/dxf-deserializer/helpers.js", "../../@jscad/dxf-deserializer/instantiate.js", "../../@jscad/dxf-deserializer/translate.js", "../../@jscad/dxf-deserializer/index.js", "../../@jscad/json-deserializer/package.json", "../../@jscad/json-deserializer/index.js", "../../@jscad/obj-deserializer/package.json", "../../@jscad/obj-deserializer/index.js", "../../@jscad/stl-deserializer/package.json", "../../@jscad/stl-deserializer/index.js", "../../@jscad/svg-deserializer/package.json", "../../@jscad/svg-deserializer/src/constants.js", "../../@jscad/svg-deserializer/src/helpers.js", "../../@jscad/svg-deserializer/src/svgElementHelpers.js", "../../@jscad/svg-deserializer/src/shapesMapGeometry.js", "../../@jscad/svg-deserializer/src/shapesMapJscad.js", "../../@jscad/svg-deserializer/src/index.js", "../../@jscad/x3d-deserializer/package.json", "../../@jscad/x3d-deserializer/src/createTransform.js", "../../@jscad/x3d-deserializer/src/objects.js", "../../@jscad/x3d-deserializer/src/extrudeX3D.js", "../../@jscad/x3d-deserializer/src/translateHelpers.js", "../../@jscad/x3d-deserializer/src/instantiateLine.js", "../../@jscad/x3d-deserializer/src/translateLine.js", "../../@jscad/x3d-deserializer/src/instantiateMesh.js", "../../@jscad/x3d-deserializer/src/translateMesh.js", "../../@jscad/x3d-deserializer/src/translateShape.js", "../../@jscad/x3d-deserializer/src/translateDefinitions.js", "../../@jscad/x3d-deserializer/src/parse.js", "../../@jscad/x3d-deserializer/src/constants.js", "../../@jscad/x3d-deserializer/src/translate.js", "../../@jscad/x3d-deserializer/src/instantiatePrimitive.js", "../../@jscad/x3d-deserializer/src/instantiateDefinitions.js", "../../@jscad/x3d-deserializer/src/instantiate.js", "../../@jscad/x3d-deserializer/src/index.js", "../../@jscad/io/deserializers.js", "../../@jscad/io/index.js"],
  "sourcesContent": ["/*\n * Blob.js\n *\n * Node and Browserify Compatible\n *\n * Copyright (c) 2015 by Z3 Dev (@zdev/www.z3dev.jp)\n * License: MIT License\n *\n * This implementation uses the Buffer class for all storage.\n * See https://nodejs.org/api/buffer.html\n *\n * URL.createObjectURL(blob)\n *\n * History:\n * 2020/10/07: converted to class\n * 2015/07/02: contributed to OpenJSCAD.org CLI openjscad\n */\n\n/**\n * The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  /**\n   * Returns a newly created Blob object which contains a concatenation of all of the data in the given contents.\n   * @param {Array} contents - an array of ArrayBuffer, or String objects that will be put inside the Blob.\n   */\n  constructor (contents, options) {\n    // make the optional options non-optional\n    options = options || {}\n    // the size of the byte sequence in number of bytes\n    this.size = 0 // contents, not allocation\n    // the media type, as an ASCII-encoded string in lower case, and parsable as a MIME type\n    this.type = ''\n    // readability state (CLOSED: true, OPENED: false)\n    this.isClosed = false\n    // encoding of given strings\n    this.encoding = 'utf8'\n    // storage\n    this.buffer = null\n    this.length = 0 // allocation, not contents\n\n    if (!contents) return\n    if (!Array.isArray(contents)) return\n\n    // Find content length\n    contents.forEach((content) => {\n      if (typeof (content) === 'string') {\n        this.length += content.length\n      } else if (content instanceof ArrayBuffer) {\n        this.length += content.byteLength\n      }\n    })\n\n    // process options if any\n    if (options.type) {\n      // TBD if type contains any chars outside range U+0020 to U+007E, then set type to the empty string\n      // Convert every character in type to lowercase\n      this.type = options.type.toLowerCase()\n    }\n    if (options.endings) {\n      // convert the EOL on strings\n    }\n    if (options.encoding) {\n      this.encoding = options.encoding.toLowerCase()\n    }\n    if (options.length) {\n      this.length = options.length\n    }\n\n    let wbytes\n    let object\n    // convert the contents (String, ArrayBufferView, ArrayBuffer, Blob)\n    // MAX_LENGTH : 2147483647\n    this.buffer = Buffer.allocUnsafe(this.length) // new Buffer(this.length)\n    for (let index = 0; index < contents.length; index++) {\n      switch (typeof (contents[index])) {\n        case 'string':\n          wbytes = this.buffer.write(contents[index], this.size, this.encoding)\n          this.size = this.size + wbytes\n          break\n        case 'object':\n          object = contents[index] // this should be a reference to an object\n          // FIXME if (Buffer.isBuffer(object)) { }\n          if (object instanceof ArrayBuffer) {\n            const view = new DataView(object)\n            for (let bindex = 0; bindex < object.byteLength; bindex++) {\n              const xbyte = view.getUint8(bindex)\n              wbytes = this.buffer.writeUInt8(xbyte, this.size, false)\n              this.size++\n            }\n          }\n          break\n        default:\n          break\n      }\n    }\n  }\n\n  asBuffer () {\n    // return a deep copy as blobs are written to files with full length, not size\n    return this.buffer.slice(0, this.size)\n  }\n\n  arrayBuffer () {\n    return this.buffer.slice(0, this.size)\n  }\n\n  slice (start, end, type) {\n    start = start || 0\n    end = end || this.size\n    type = type || ''\n    // TODO\n    return new Blob()\n  }\n\n  stream () {\n    // TODO\n    return null\n  }\n\n  text () {\n    // TODO\n    return ''\n  }\n\n  close () {\n    // if state of context objext is already CLOSED then return\n    if (this.isClosed) return\n    // set the readbility state of the context object to CLOSED and remove storage\n    this.isClosed = true\n  }\n\n  toString () {\n    // TODO\n    return ''\n  }\n}\n\nmodule.exports = Blob\n", "const nodeBlob = require('./Blob.js')\n\n/**\n * Make a constructor for Blob objects.\n * @return {Function} constructor of Blob objects\n * @alias module:io/utils.makeBlob\n * @example\n * const Blob = makeBlob()\n * const ablob = new Blob(data, { type: mimeType })\n */\nconst makeBlob = () => {\n  const blob = typeof window !== 'undefined' ? window.Blob : nodeBlob\n  return blob\n}\n\nmodule.exports = makeBlob\n", "const makeBlob = require('./makeBlob')\n\nconst Blob = makeBlob()\n\n/**\n * Convert the given input into a BLOB of data for export.\n * @param {Object} input - input object to convert\n * @param {Array} input.data - array of data to be inserted into the blob, either String or ArrayBuffer\n * @param {String} input.mimeType - mime type of the data to be inserted\n * @return {Blob} a new Blob\n * @alias module:io/utils.convertToBlob\n * @example\n * const blob1 = convertToBlob({ data: ['test'], mimeType: 'text/plain' })\n * const blob2 = convertToBlob({ data: [Int32Array.from('12345').buffer], mimeType: 'application/mine' })\n */\nconst convertToBlob = (input) => {\n  const { data, mimeType } = input\n  const blob = new Blob(data, { type: mimeType })\n  return blob\n}\n\nmodule.exports = convertToBlob\n", "// BinaryReader\n// Converted to ES5 Class by @z3dev\n// Refactored by Vjeux <vjeuxx@gmail.com>\n// http://blog.vjeux.com/2010/javascript/javascript-binary-reader.html\n\n// Original\n// + Jonas Raoni Soares Silva\n// @ http://jsfromhell.com/classes/binary-deserializer [rev. #1]\n\nclass BinaryReader {\n  /*\n   * Construct a BinaryReader from the given data.\n   * The data is a string created from the specified sequence of UTF-16 code units.\n   * See String.fromCharCode()\n   * See _readByte() below\n   */\n  constructor (data) {\n    this._buffer = data\n    this._pos = 0\n  }\n\n  /* Public */\n  readInt8 () { return this._decodeInt(8, true) }\n  readUInt8 () { return this._decodeInt(8, false) }\n  readInt16 () { return this._decodeInt(16, true) }\n  readUInt16 () { return this._decodeInt(16, false) }\n  readInt32 () { return this._decodeInt(32, true) }\n  readUInt32 () { return this._decodeInt(32, false) }\n\n  readFloat () { return this._decodeFloat(23, 8) }\n  readDouble () { return this._decodeFloat(52, 11) }\n\n  readChar () { return this.readString(1) }\n  readString (length) {\n    this._checkSize(length * 8)\n    const result = this._buffer.substr(this._pos, length)\n    this._pos += length\n    return result\n  }\n\n  seek (pos) {\n    this._pos = pos\n    this._checkSize(0)\n  }\n\n  getPosition () {\n    return this._pos\n  }\n\n  getSize () {\n    return this._buffer.length\n  }\n\n  /* Private */\n  _decodeFloat (precisionBits, exponentBits) {\n    const length = precisionBits + exponentBits + 1\n    const size = length >> 3\n    this._checkSize(length)\n\n    const bias = Math.pow(2, exponentBits - 1) - 1\n    const signal = this._readBits(precisionBits + exponentBits, 1, size)\n    const exponent = this._readBits(precisionBits, exponentBits, size)\n    let significand = 0\n    let divisor = 2\n    let curByte = 0 // length + (-precisionBits >> 3) - 1;\n    let startBit = 0\n    do {\n      const byteValue = this._readByte(++curByte, size)\n      startBit = precisionBits % 8 || 8\n      let mask = 1 << startBit\n      while ((mask >>= 1)) {\n        if (byteValue & mask) {\n          significand += 1 / divisor\n        }\n        divisor *= 2\n      }\n    } while ((precisionBits -= startBit))\n\n    this._pos += size\n\n    return exponent === (bias << 1) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity\n      : (1 + signal * -2) * (exponent || significand ? !exponent ? Math.pow(2, -bias + 1) * significand\n          : Math.pow(2, exponent - bias) * (1 + significand) : 0)\n  }\n\n  _decodeInt (bits, signed) {\n    const x = this._readBits(0, bits, bits / 8)\n    const max = Math.pow(2, bits)\n    const result = signed && x >= max / 2 ? x - max : x\n\n    this._pos += bits / 8\n    return result\n  }\n\n  // shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)\n  _shl (a, b) {\n    for (++b; --b; a = ((a %= 0x7fffffff + 1) & 0x40000000) === 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);\n    return a\n  }\n\n  _readByte (i, size) {\n    return this._buffer.charCodeAt(this._pos + size - i - 1) & 0xff\n  }\n\n  _readBits (start, length, size) {\n    const offsetLeft = (start + length) % 8\n    const offsetRight = start % 8\n    const curByte = size - (start >> 3) - 1\n    let lastByte = size + (-(start + length) >> 3)\n    let diff = curByte - lastByte\n\n    let sum = (this._readByte(curByte, size) >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1)\n\n    if (diff && offsetLeft) {\n      sum += (this._readByte(lastByte++, size) & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight\n    }\n\n    while (diff) {\n      sum += this._shl(this._readByte(lastByte++, size), (diff-- << 3) - offsetRight)\n    }\n\n    return sum\n  }\n\n  _checkSize (neededBits) {\n    if (!(this._pos + Math.ceil(neededBits / 8) < this._buffer.length)) {\n      // throw new Error(\"Index out of bound\");\n    }\n  }\n}\n\nmodule.exports = BinaryReader\n", "/**\n * Utility functions of various sorts in support of IO packages.\n * @module io/utils\n * @example\n * const { BinaryReader } = require('@jscad/io-utils')\n */\nmodule.exports = {\n  convertToBlob: require('./convertToBlob'),\n  makeBlob: require('./makeBlob'),\n  BinaryReader: require('./BinaryReader'),\n  Blob: require('./Blob')\n}\n", "'use strict';\n\nconst isObject = o => o && Object.prototype.toString.call(o) === '[object Object]';\n\nfunction indenter (indentation) {\n  if (!(indentation > 0)) {\n    return txt => txt;\n  }\n  var space = ' '.repeat(indentation);\n  return txt => {\n\n    if (typeof txt !== 'string') {\n      return txt;\n    }\n\n    const arr = txt.split('\\n');\n\n    if (arr.length === 1) {\n      return space + txt;\n    }\n\n    return arr\n      .map(e => (e.trim() === '') ? e : space + e)\n      .join('\\n');\n  };\n}\n\nconst clean = txt => txt\n  .split('\\n')\n  .filter(e => e.trim() !== '')\n  .join('\\n');\n\nfunction stringify (a, indentation) {\n  const cr = (indentation > 0) ? '\\n' : '';\n  const indent = indenter(indentation);\n\n  function rec(a) {\n    let body = '';\n    let isFlat = true;\n\n    let res;\n    const isEmpty = a.some((e, i, arr) => {\n      if (i === 0) {\n        res = '<' + e;\n        return (arr.length === 1);\n      }\n\n      if (i === 1) {\n        if (isObject(e)) {\n          Object.keys(e).map(key => {\n            let val = e[key];\n            if (Array.isArray(val)) {\n              val = val.join(' ');\n            }\n            res += ' ' + key + '=\"' + val + '\"';\n          });\n          if (arr.length === 2) {\n            return true;\n          }\n          res += '>';\n          return;\n        }\n        res += '>';\n      }\n\n      switch (typeof e) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n      case 'undefined':\n        body += e + cr;\n        return;\n      }\n\n      isFlat = false;\n      body += rec(e);\n    });\n\n    if (isEmpty) {\n      return res + '/>' + cr; // short form\n    }\n\n    return isFlat\n      ? res + clean(body) + '</' + a[0] + '>' + cr\n      : res + cr + indent(body) + '</' + a[0] + '>' + cr;\n  }\n\n  return rec(a);\n}\n\nmodule.exports = stringify;\n", "/**\n * Flatten the given array into a single array of elements.\n * The given array can be composed of multiple depths of objects and or arrays.\n * @param {Array} array - array to flatten\n * @returns {Array} a flat array with a single list of elements\n * @alias module:array-utils.flatten\n * @example\n * const flat = flatten([[1], [2, 3, [4, 5]], 6]) // returns [1, 2, 3, 4, 5, 6]\n */\nconst flatten = (arr) => arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), [])\n\nmodule.exports = flatten\n", "/**\n * Compare function for sorting arrays of numbers.\n * @param {Number} a - first number\n * @param {Number} b - second number\n * @return {Number} result of a - b\n * @alias module:array-utils.fnNumberSort\n * @example\n * const numbers = [2, 1, 4, 3, 6, 5, 8, 7, 9, 0]\n * const sorted = numbers.sort(fnNumberSort)\n */\nconst fnNumberSort = (a, b) => a - b\n\nmodule.exports = fnNumberSort\n", "/**\n * Return the first element of the given array.\n * @param {*} array - anything\n * @returns {*} first element of the array, or undefined\n * @alias module:array-utils.head\n * @example\n * let element = head([1, 2])\n */\nconst head = (array) => {\n  if (!Array.isArray(array) || array.length === 0) {\n    return undefined\n  }\n  return array[0]\n}\n\nmodule.exports = head\n", "/**\n * Insert the given element into the give array using the compareFunction.\n * @param {Array} array - array in which to insert\n * @param {*} element - element to insert into the array\n * @param {Function} compareFunction - a function that defines the sort order of elements\n * @alias module:array-utils.insertSorted\n * @example\n * const numbers = [1, 5]\n * const result = insertSorted(numbers, 3, fnNumberSort)\n */\nconst insertSorted = (array, element, compareFunction) => {\n  let leftbound = 0\n  let rightbound = array.length\n  while (rightbound > leftbound) {\n    const testindex = Math.floor((leftbound + rightbound) / 2)\n    const testelement = array[testindex]\n    const compareresult = compareFunction(element, testelement)\n    if (compareresult > 0) { // element > testelement\n      leftbound = testindex + 1\n    } else {\n      rightbound = testindex\n    }\n  }\n  array.splice(leftbound, 0, element)\n  return array\n}\n\nmodule.exports = insertSorted\n", "/**\n * Return the Nth element of the given array.\n * @param {*} array - anything\n * @param {Number} index - index of the element to return\n * @returns {*} Nth element of the array, or undefined\n * @alias module:array-utils.nth\n * @example\n * let value = nth([1], 2) // undefined\n * let value = nth([1, 2, 3, 4, 5], 3) // 4\n */\nconst nth = (array, index) => {\n  if (!Array.isArray(array) || array.length < index) {\n    return undefined\n  }\n  return array[index]\n}\n\nmodule.exports = nth\n", "/**\n * Build an array of the given target length from an existing array and a padding value.\n * If the array is already larger than the target length, it will not be shortened.\n * @param {Array} anArray - the source array to copy into the result.\n * @param {*} padding - the value to add to the new array to reach the desired length.\n * @param {Number} targetLength - The desired length of the returned array.\n * @returns {Array} an array with at least 'target length\" elements\n * @alias module:array-utils.padToLength\n * @example\n * const srcArray = [2, 3, 4]\n * const paddedArray = padToLength(srcArray, 0, 5)\n */\nconst padToLength = (anArray, padding, targetLength) => {\n  anArray = anArray.slice()\n  while (anArray.length < targetLength) {\n    anArray.push(padding)\n  }\n  return anArray\n}\n\nmodule.exports = padToLength\n", "/**\n * Convert the given array to an array if not already an array.\n * @param {*} array - anything\n * @returns {Array} an array\n * @alias module:array-utils.toArray\n * @example\n * const array = toArray(1) // [1]\n */\nconst toArray = (array) => {\n  if (Array.isArray(array)) return array\n  if (array === undefined || array === null) return []\n  return [array]\n}\n\nmodule.exports = toArray\n", "/**\n * Utility functions for arrays.\n * @module array-utils\n * @example\n * const { flatten, head } = require('@jscad/array-utils')\n */\n\nmodule.exports = {\n  flatten: require('./flatten'),\n  fnNumberSort: require('./fnNumberSort'),\n  head: require('./head'),\n  insertSorted: require('./insertSorted'),\n  nth: require('./nth'),\n  padToLength: require('./padToLength'),\n  toArray: require('./toArray')\n}\n", "/*\nJSCAD Object to AMF (XML) Format Serialization\n\n## License\n\nCopyright (c) 2018 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     none\n2) geom3 conversion to:\n     mesh\n3) path2 conversion to:\n     none\n\nTBD\n1) support zip output\n*/\n\n/**\n * Serializer of JSCAD geometries to AMF source data (XML)\n *\n * The serialization of the following geometries are possible.\n * - serialization of 3D geometry (geom3) to AMF object (a unique mesh containing both vertices and volumes)\n *\n * Colors are added to volumes when found on the 3D geometry.\n * Colors are added to triangles when found on individual polygons.\n *\n * @module io/amf-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/amf-serializer')\n */\n\nconst stringify = require('onml/lib/stringify')\n\nconst { geometries, modifiers } = require('@jscad/modeling')\n\nconst { flatten, toArray } = require('@jscad/array-utils')\n\nconst mimeType = 'application/amf+xml'\n\n/**\n * Serialize the give objects (geometry) to AMF source data (XML).\n * @param {Object} options - options for serialization\n * @param {String} [options.unit='millimeter'] - unit of design; millimeter, inch, feet, meter or micrometer\n * @param {Function} [options.statusCallback] - call back function for progress ({ progress: 0-100 })\n * @param {...Object} objects - objects to serialize into AMF source data\n * @returns {Array} serialized contents, AMF source data(XML)\n * @alias module:io/amf-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const amfData = serializer({unit: 'meter'}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    statusCallback: null,\n    unit: 'millimeter' // millimeter, inch, feet, meter or micrometer\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n\n  // convert only 3D geometries\n  let objects3d = objects.filter((object) => geometries.geom3.isA(object))\n\n  if (objects3d.length === 0) throw new Error('only 3D geometries can be serialized to AMF')\n  if (objects.length !== objects3d.length) console.warn('some objects could not be serialized to AMF')\n\n  // convert to triangles\n  objects3d = toArray(modifiers.generalize({ snap: true, triangulate: true }, objects3d))\n\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // construct the contents of the XML\n  let body = ['amf',\n    {\n      unit: options.unit,\n      version: '1.1'\n    },\n    ['metadata', { type: 'author' }, 'Created by JSCAD']\n  ]\n  body = body.concat(translateObjects(objects3d, options))\n\n  // convert the contents to AMF (XML) format\n  const amf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n${stringify(body, 2)}`\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return [amf]\n}\n\nconst translateObjects = (objects, options) => {\n  const contents = []\n  objects.forEach((object, i) => {\n    const polygons = geometries.geom3.toPolygons(object)\n    if (polygons.length > 0) {\n      options.id = i\n      contents.push(convertToObject(object, options))\n    }\n  })\n  return contents\n}\n\nconst convertToObject = (object, options) => {\n  const contents = ['object', { id: options.id }, convertToMesh(object, options)]\n  return contents\n}\n\nconst convertToMesh = (object, options) => {\n  let contents = ['mesh', {}, convertToVertices(object, options)]\n  contents = contents.concat(convertToVolumes(object, options))\n  return contents\n}\n\n/*\n * This section converts each 3D geometry to a list of vertex / coordinates\n */\n\nconst convertToVertices = (object, options) => {\n  const contents = ['vertices', {}]\n\n  const vertices = []\n  const polygons = geometries.geom3.toPolygons(object)\n  polygons.forEach((polygon) => {\n    for (let i = 0; i < polygon.vertices.length; i++) {\n      vertices.push(convertToVertex(polygon.vertices[i], options))\n    }\n  })\n\n  return contents.concat(vertices)\n}\n\nconst convertToVertex = (vertex, options) => {\n  const contents = ['vertex', {}, convertToCoordinates(vertex, options)]\n  return contents\n}\n\nconst convertToCoordinates = (vertex, options) => {\n  const contents = ['coordinates', {}, ['x', {}, vertex[0]], ['y', {}, vertex[1]], ['z', {}, vertex[2]]]\n  return contents\n}\n\n/*\n * This section converts each 3D geometry to a list of volumes consisting of indexes into the list of vertices\n */\n\nconst convertToVolumes = (object, options) => {\n  const objectcolor = convertColor(object.color)\n  const polygons = geometries.geom3.toPolygons(object)\n\n  const contents = []\n\n  let volume = ['volume', {}]\n\n  // add color specification if available\n  if (objectcolor) {\n    volume.push(objectcolor)\n  }\n\n  let vcount = 0\n  polygons.forEach((polygon) => {\n    if (polygon.vertices.length < 3) {\n      return\n    }\n\n    const triangles = convertToTriangles(polygon, vcount, options)\n\n    volume = volume.concat(triangles)\n\n    vcount += polygon.vertices.length\n  })\n  contents.push(volume)\n  return contents\n}\n\nconst convertColor = (color) => {\n  if (color) {\n    if (color.length < 4) color.push(1.0)\n    return ['color', {}, ['r', {}, color[0]], ['g', {}, color[1]], ['b', {}, color[2]], ['a', {}, color[3]]]\n  }\n  return null\n}\n\nconst convertToColor = (polygon, options) => {\n  const color = polygon.color\n  return convertColor(color)\n}\n\nconst convertToTriangles = (polygon, index, options) => {\n  const polycolor = convertToColor(polygon, options)\n\n  // making sure they are all triangles (triangular polygons)\n  const contents = []\n  for (let i = 0; i < polygon.vertices.length - 2; i++) {\n    if (polycolor) {\n      contents.push(['triangle', {}, polycolor, ['v1', {}, index], ['v2', {}, (index + i + 1)], ['v3', {}, (index + i + 2)]])\n    } else {\n      contents.push(['triangle', {}, ['v1', {}, index], ['v2', {}, (index + i + 1)], ['v3', {}, (index + i + 2)]])\n    }\n  }\n  return contents\n}\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "/*\nAutoCAD DXF Content\n\nThese are the common headers, classes, tables, blocks, and objects required for AC2017 DXF files.\n\n## License\n\nCopyright (c) 2018 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n*/\n\n// Important Variables\n//   ANGDIR = 0 : counter clockwise angles\n//   INSUNITS = 4 : millimeters\n//\nconst dxfHeaders = function () {\n  const content = `  0\nSECTION\n  2\nHEADER\n  9\n$ACADVER\n  1\nAC1027\n  9\n$ACADMAINTVER\n 70\n8\n  9\n$DWGCODEPAGE\n  3\nANSI_1252\n  9\n$LASTSAVEDBY\n  1\nunknown\n  9\n$REQUIREDVERSIONS\n160\n0\n  9\n$INSBASE\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$EXTMIN\n 10\n1e+20\n 20\n1e+20\n 30\n1e+20\n  9\n$EXTMAX\n 10\n-1e+20\n 20\n-1e+20\n 30\n-1e+20\n  9\n$LIMMIN\n 10\n0.0\n 20\n0.0\n  9\n$LIMMAX\n 10\n12.0\n 20\n9.0\n  9\n$ORTHOMODE\n 70\n0\n  9\n$REGENMODE\n 70\n1\n  9\n$FILLMODE\n 70\n1\n  9\n$QTEXTMODE\n 70\n0\n  9\n$MIRRTEXT\n 70\n0\n  9\n$LTSCALE\n 40\n1.0\n  9\n$ATTMODE\n 70\n1\n  9\n$TEXTSIZE\n 40\n0.2\n  9\n$TRACEWID\n 40\n0.05\n  9\n$TEXTSTYLE\n  7\nNotes\n  9\n$CLAYER\n  8\n0\n  9\n$CELTYPE\n  6\nByLayer\n  9\n$CECOLOR\n 62\n256\n  9\n$CELTSCALE\n 40\n1.0\n  9\n$DISPSILH\n 70\n0\n  9\n$DIMSCALE\n 40\n1.0\n  9\n$DIMASZ\n 40\n3.0\n  9\n$DIMEXO\n 40\n1.5\n  9\n$DIMDLI\n 40\n6.0\n  9\n$DIMRND\n 40\n0.0\n  9\n$DIMDLE\n 40\n0.0\n  9\n$DIMEXE\n 40\n3.0\n  9\n$DIMTP\n 40\n0.0\n  9\n$DIMTM\n 40\n0.0\n  9\n$DIMTXT\n 40\n3.0\n  9\n$DIMCEN\n 40\n3.0\n  9\n$DIMTSZ\n 40\n0.0\n  9\n$DIMTOL\n 70\n0\n  9\n$DIMLIM\n 70\n0\n  9\n$DIMTIH\n 70\n0\n  9\n$DIMTOH\n 70\n0\n  9\n$DIMSE1\n 70\n0\n  9\n$DIMSE2\n 70\n0\n  9\n$DIMTAD\n 70\n1\n  9\n$DIMZIN\n 70\n3\n  9\n$DIMBLK\n  1\n\n  9\n$DIMASO\n 70\n1\n  9\n$DIMSHO\n 70\n1\n  9\n$DIMPOST\n  1\n\n  9\n$DIMAPOST\n  1\n\n  9\n$DIMALT\n 70\n0\n  9\n$DIMALTD\n 70\n2\n  9\n$DIMALTF\n 40\n25.4\n  9\n$DIMLFAC\n 40\n1.0\n  9\n$DIMTOFL\n 70\n0\n  9\n$DIMTVP\n 40\n0.0\n  9\n$DIMTIX\n 70\n0\n  9\n$DIMSOXD\n 70\n0\n  9\n$DIMSAH\n 70\n0\n  9\n$DIMBLK1\n  1\n\n  9\n$DIMBLK2\n  1\n\n  9\n$DIMSTYLE\n  2\nCivil-Metric\n  9\n$DIMCLRD\n 70\n0\n  9\n$DIMCLRE\n 70\n0\n  9\n$DIMCLRT\n 70\n0\n  9\n$DIMTFAC\n 40\n1.0\n  9\n$DIMGAP\n 40\n2.0\n  9\n$DIMJUST\n 70\n0\n  9\n$DIMSD1\n 70\n0\n  9\n$DIMSD2\n 70\n0\n  9\n$DIMTOLJ\n 70\n1\n  9\n$DIMTZIN\n 70\n0\n  9\n$DIMALTZ\n 70\n0\n  9\n$DIMALTTZ\n 70\n0\n  9\n$DIMUPT\n 70\n0\n  9\n$DIMDEC\n 70\n2\n  9\n$DIMTDEC\n 70\n2\n  9\n$DIMALTU\n 70\n2\n  9\n$DIMALTTD\n 70\n2\n  9\n$DIMTXSTY\n  7\nStandard\n  9\n$DIMAUNIT\n 70\n0\n  9\n$DIMADEC\n 70\n2\n  9\n$DIMALTRND\n 40\n0.0\n  9\n$DIMAZIN\n 70\n2\n  9\n$DIMDSEP\n 70\n46\n  9\n$DIMATFIT\n 70\n3\n  9\n$DIMFRAC\n 70\n1\n  9\n$DIMLDRBLK\n  1\n\n  9\n$DIMLUNIT\n 70\n2\n  9\n$DIMLWD\n 70\n-2\n  9\n$DIMLWE\n 70\n-2\n  9\n$DIMTMOVE\n 70\n0\n  9\n$DIMFXL\n 40\n1.0\n  9\n$DIMFXLON\n 70\n0\n  9\n$DIMJOGANG\n 40\n0.785398163397\n  9\n$DIMTFILL\n 70\n0\n  9\n$DIMTFILLCLR\n 70\n0\n  9\n$DIMARCSYM\n 70\n0\n  9\n$DIMLTYPE\n  6\n\n  9\n$DIMLTEX1\n  6\n\n  9\n$DIMLTEX2\n  6\n\n  9\n$DIMTXTDIRECTION\n 70\n0\n  9\n$LUNITS\n 70\n2\n  9\n$LUPREC\n 70\n4\n  9\n$SKETCHINC\n 40\n0.1\n  9\n$FILLETRAD\n 40\n0.0\n  9\n$AUNITS\n 70\n4\n  9\n$AUPREC\n 70\n5\n  9\n$MENU\n  1\n.\n  9\n$ELEVATION\n 40\n0.0\n  9\n$PELEVATION\n 40\n0.0\n  9\n$THICKNESS\n 40\n0.0\n  9\n$LIMCHECK\n 70\n0\n  9\n$CHAMFERA\n 40\n0.0\n  9\n$CHAMFERB\n 40\n0.0\n  9\n$CHAMFERC\n 40\n0.0\n  9\n$CHAMFERD\n 40\n0.0\n  9\n$SKPOLY\n 70\n0\n  9\n$TDCREATE\n 40\n2457986.69756\n  9\n$TDUCREATE\n 40\n2455631.2632\n  9\n$TDUPDATE\n 40\n2457986.69756\n  9\n$TDUUPDATE\n 40\n2456436.43179\n  9\n$TDINDWG\n 40\n0.0003490741\n  9\n$TDUSRTIMER\n 40\n0.0003487153\n  9\n$USRTIMER\n 70\n1\n  9\n$ANGBASE\n 50\n0.0\n  9\n$ANGDIR\n 70\n0\n  9\n$PDMODE\n 70\n0\n  9\n$PDSIZE\n 40\n0.0\n  9\n$PLINEWID\n 40\n0.0\n  9\n$SPLFRAME\n 70\n0\n  9\n$SPLINETYPE\n 70\n6\n  9\n$SPLINESEGS\n 70\n8\n  9\n$HANDSEED\n  5\n5C7\n  9\n$SURFTAB1\n 70\n6\n  9\n$SURFTAB2\n 70\n6\n  9\n$SURFTYPE\n 70\n6\n  9\n$SURFU\n 70\n6\n  9\n$SURFV\n 70\n6\n  9\n$UCSBASE\n  2\n\n  9\n$UCSNAME\n  2\n\n  9\n$UCSORG\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSXDIR\n 10\n1.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSYDIR\n 10\n0.0\n 20\n1.0\n 30\n0.0\n  9\n$UCSORTHOREF\n  2\n\n  9\n$UCSORTHOVIEW\n 70\n0\n  9\n$UCSORGTOP\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGBOTTOM\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGLEFT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGRIGHT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGFRONT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGBACK\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSBASE\n  2\n\n  9\n$PUCSNAME\n  2\n\n  9\n$PUCSORG\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSXDIR\n 10\n1.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSYDIR\n 10\n0.0\n 20\n1.0\n 30\n0.0\n  9\n$PUCSORTHOREF\n  2\n\n  9\n$PUCSORTHOVIEW\n 70\n0\n  9\n$PUCSORGTOP\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGBOTTOM\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGLEFT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGRIGHT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGFRONT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGBACK\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$USERI1\n 70\n0\n  9\n$USERI2\n 70\n0\n  9\n$USERI3\n 70\n0\n  9\n$USERI4\n 70\n0\n  9\n$USERI5\n 70\n0\n  9\n$USERR1\n 40\n0.0\n  9\n$USERR2\n 40\n0.0\n  9\n$USERR3\n 40\n0.0\n  9\n$USERR4\n 40\n0.0\n  9\n$USERR5\n 40\n0.0\n  9\n$WORLDVIEW\n 70\n1\n  9\n$SHADEDGE\n 70\n3\n  9\n$SHADEDIF\n 70\n70\n  9\n$TILEMODE\n 70\n1\n  9\n$MAXACTVP\n 70\n64\n  9\n$PINSBASE\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PLIMCHECK\n 70\n0\n  9\n$PEXTMIN\n 10\n0.628866766397\n 20\n0.799999952316\n 30\n0.0\n  9\n$PEXTMAX\n 10\n9.02886638493\n 20\n7.19999957085\n 30\n0.0\n  9\n$PLIMMIN\n 10\n-0.700541819174\n 20\n-0.228100386192\n  9\n$PLIMMAX\n 10\n10.2994579405\n 20\n8.27189937351\n  9\n$UNITMODE\n 70\n0\n  9\n$VISRETAIN\n 70\n1\n  9\n$PLINEGEN\n 70\n0\n  9\n$PSLTSCALE\n 70\n1\n  9\n$TREEDEPTH\n 70\n3020\n  9\n$CMLSTYLE\n  2\nStandard\n  9\n$CMLJUST\n 70\n0\n  9\n$CMLSCALE\n 40\n1.0\n  9\n$PROXYGRAPHICS\n 70\n1\n  9\n$MEASUREMENT\n 70\n1\n  9\n$CELWEIGHT\n370\n-1\n  9\n$ENDCAPS\n280\n0\n  9\n$JOINSTYLE\n280\n0\n  9\n$LWDISPLAY\n290\n0\n  9\n$INSUNITS\n 70\n4\n  9\n$HYPERLINKBASE\n  1\n\n  9\n$STYLESHEET\n  1\n\n  9\n$XEDIT\n290\n1\n  9\n$CEPSNTYPE\n380\n0\n  9\n$PSTYLEMODE\n290\n1\n  9\n$FINGERPRINTGUID\n  2\n{39DB1BDD-BC6C-46D3-A333-DFCC0DC4782D}\n  9\n$VERSIONGUID\n  2\n{69EEBB2D-7039-498F-9366-3F994E4A07E7}\n  9\n$EXTNAMES\n290\n1\n  9\n$PSVPSCALE\n 40\n0.0\n  9\n$OLESTARTUP\n290\n0\n  9\n$SORTENTS\n280\n127\n  9\n$INDEXCTL\n280\n0\n  9\n$HIDETEXT\n280\n1\n  9\n$XCLIPFRAME\n280\n0\n  9\n$HALOGAP\n280\n0\n  9\n$OBSCOLOR\n 70\n257\n  9\n$OBSLTYPE\n280\n0\n  9\n$INTERSECTIONDISPLAY\n280\n0\n  9\n$INTERSECTIONCOLOR\n 70\n257\n  9\n$DIMASSOC\n280\n2\n  9\n$PROJECTNAME\n  1\n\n  9\n$CAMERADISPLAY\n290\n0\n  9\n$LENSLENGTH\n 40\n50.0\n  9\n$CAMERAHEIGHT\n 40\n0.0\n  9\n$STEPSPERSEC\n 40\n2.0\n  9\n$STEPSIZE\n 40\n6.0\n  9\n$3DDWFPREC\n 40\n2.0\n  9\n$PSOLWIDTH\n 40\n0.25\n  9\n$PSOLHEIGHT\n 40\n4.0\n  9\n$LOFTANG1\n 40\n1.57079632679\n  9\n$LOFTANG2\n 40\n1.57079632679\n  9\n$LOFTMAG1\n 40\n0.0\n  9\n$LOFTMAG2\n 40\n0.0\n  9\n$LOFTPARAM\n 70\n7\n  9\n$LOFTNORMALS\n280\n1\n  9\n$LATITUDE\n 40\n37.795\n  9\n$LONGITUDE\n 40\n-122.394\n  9\n$NORTHDIRECTION\n 40\n0.0\n  9\n$TIMEZONE\n 70\n-8000\n  9\n$LIGHTGLYPHDISPLAY\n280\n1\n  9\n$TILEMODELIGHTSYNCH\n280\n1\n  9\n$CMATERIAL\n347\n96\n  9\n$SOLIDHIST\n280\n1\n  9\n$SHOWHIST\n280\n1\n  9\n$DWFFRAME\n280\n2\n  9\n$DGNFRAME\n280\n0\n  9\n$REALWORLDSCALE\n290\n1\n  9\n$INTERFERECOLOR\n 62\n1\n  9\n$INTERFEREOBJVS\n345\nA3\n  9\n$INTERFEREVPVS\n346\nA0\n  9\n$CSHADOW\n280\n0\n  9\n$SHADOWPLANELOCATION\n 40\n0.0\n  0\nENDSEC`\n  return content\n}\n\nconst dxfClasses = function () {\n  const content = `  0\nSECTION\n  2\nCLASSES\n  0\nCLASS\n  1\nACDBDICTIONARYWDFLT\n  2\nAcDbDictionaryWithDefault\n  3\nObjectDBX Classes\n 90\n0\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nDICTIONARYVAR\n  2\nAcDbDictionaryVar\n  3\nObjectDBX Classes\n 90\n0\n 91\n15\n280\n0\n281\n0\n  0\nCLASS\n  1\nTABLESTYLE\n  2\nAcDbTableStyle\n  3\nObjectDBX Classes\n 90\n4095\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nMATERIAL\n  2\nAcDbMaterial\n  3\nObjectDBX Classes\n 90\n1153\n 91\n3\n280\n0\n281\n0\n  0\nCLASS\n  1\nVISUALSTYLE\n  2\nAcDbVisualStyle\n  3\nObjectDBX Classes\n 90\n4095\n 91\n26\n280\n0\n281\n0\n  0\nCLASS\n  1\nSCALE\n  2\nAcDbScale\n  3\nObjectDBX Classes\n 90\n1153\n 91\n17\n280\n0\n281\n0\n  0\nCLASS\n  1\nMLEADERSTYLE\n  2\nAcDbMLeaderStyle\n  3\nACDB_MLEADERSTYLE_CLASS\n 90\n4095\n 91\n3\n280\n0\n281\n0\n  0\nCLASS\n  1\nCELLSTYLEMAP\n  2\nAcDbCellStyleMap\n  3\nObjectDBX Classes\n 90\n1152\n 91\n2\n280\n0\n281\n0\n  0\nCLASS\n  1\nEXACXREFPANELOBJECT\n  2\nExAcXREFPanelObject\n  3\nEXAC_ESW\n 90\n1025\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nNPOCOLLECTION\n  2\nAcDbImpNonPersistentObjectsCollection\n  3\nObjectDBX Classes\n 90\n1153\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nLAYER_INDEX\n  2\nAcDbLayerIndex\n  3\nObjectDBX Classes\n 90\n0\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nSPATIAL_INDEX\n  2\nAcDbSpatialIndex\n  3\nObjectDBX Classes\n 90\n0\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nIDBUFFER\n  2\nAcDbIdBuffer\n  3\nObjectDBX Classes\n 90\n0\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nDIMASSOC\n  2\nAcDbDimAssoc\n  3\n\"AcDbDimAssoc|Product Desc:     AcDim ARX App For Dimension|Company:          Autodesk, Inc.|WEB Address:      www.autodesk.com\"\n 90\n0\n 91\n0\n280\n0\n281\n0\n  0\nCLASS\n  1\nACDBSECTIONVIEWSTYLE\n  2\nAcDbSectionViewStyle\n  3\nObjectDBX Classes\n 90\n1025\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nACDBDETAILVIEWSTYLE\n  2\nAcDbDetailViewStyle\n  3\nObjectDBX Classes\n 90\n1025\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nIMAGEDEF\n  2\nAcDbRasterImageDef\n  3\nISM\n 90\n0\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nRASTERVARIABLES\n  2\nAcDbRasterVariables\n  3\nISM\n 90\n0\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nIMAGEDEF_REACTOR\n  2\nAcDbRasterImageDefReactor\n  3\nISM\n 90\n1\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nIMAGE\n  2\nAcDbRasterImage\n  3\nISM\n 90\n2175\n 91\n1\n280\n0\n281\n1\n  0\nCLASS\n  1\nPDFDEFINITION\n  2\nAcDbPdfDefinition\n  3\nObjectDBX Classes\n 90\n1153\n 91\n1\n280\n0\n281\n0\n  0\nCLASS\n  1\nPDFUNDERLAY\n  2\nAcDbPdfReference\n  3\nObjectDBX Classes\n 90\n4095\n 91\n1\n280\n0\n281\n1\n  0\nCLASS\n  1\nDWFDEFINITION\n  2\nAcDbDwfDefinition\n  3\nObjectDBX Classes\n 90\n1153\n 91\n2\n280\n0\n281\n0\n  0\nCLASS\n  1\nDWFUNDERLAY\n  2\nAcDbDwfReference\n  3\nObjectDBX Classes\n 90\n1153\n 91\n1\n280\n0\n281\n1\n  0\nCLASS\n  1\nDGNDEFINITION\n  2\nAcDbDgnDefinition\n  3\nObjectDBX Classes\n 90\n1153\n 91\n2\n280\n0\n281\n0\n  0\nCLASS\n  1\nDGNUNDERLAY\n  2\nAcDbDgnReference\n  3\nObjectDBX Classes\n 90\n1153\n 91\n1\n280\n0\n281\n1\n  0\nENDSEC`\n  return content\n}\n\nconst dxfTables = function () {\n  const content = `  0\nSECTION\n  2\nTABLES\n  0\nTABLE\n  2\nVPORT\n  5\n8\n330\n0\n100\nAcDbSymbolTable\n 70\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nLTYPE\n  5\n5F\n330\n0\n100\nAcDbSymbolTable\n 70\n7\n  0\nLTYPE\n  5\n14\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nByBlock\n 70\n0\n  3\n\n 72\n65\n 73\n0\n 40\n0.0\n  0\nLTYPE\n  5\n15\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nByLayer\n 70\n0\n  3\n\n 72\n65\n 73\n0\n 40\n0.0\n  0\nLTYPE\n  5\n16\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nContinuous\n 70\n0\n  3\nSolid line\n 72\n65\n 73\n0\n 40\n0.0\n  0\nLTYPE\n  5\n1B1\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nCENTER\n 70\n0\n  3\nCenter ____ _ ____ _ ____ _ ____ _ ____ _ ____\n 72\n65\n 73\n4\n 40\n2.0\n 49\n1.25\n 74\n0\n 49\n-0.25\n 74\n0\n 49\n0.25\n 74\n0\n 49\n-0.25\n 74\n0\n  0\nLTYPE\n  5\n1B2\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nDASHED\n 70\n0\n  3\nDashed __ __ __ __ __ __ __ __ __ __ __ __ __ _\n 72\n65\n 73\n2\n 40\n0.75\n 49\n0.5\n 74\n0\n 49\n-0.25\n 74\n0\n  0\nLTYPE\n  5\n1B3\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nPHANTOM\n 70\n0\n  3\nPhantom ______  __  __  ______  __  __  ______\n 72\n65\n 73\n6\n 40\n2.5\n 49\n1.25\n 74\n0\n 49\n-0.25\n 74\n0\n 49\n0.25\n 74\n0\n 49\n-0.25\n 74\n0\n 49\n0.25\n 74\n0\n 49\n-0.25\n 74\n0\n  0\nLTYPE\n  5\n39E\n330\n5F\n100\nAcDbSymbolTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nHIDDEN\n 70\n0\n  3\nHidden __ __ __ __ __ __ __ __ __ __ __ __ __ __\n 72\n65\n 73\n2\n 40\n9.525\n 49\n6.35\n 74\n0\n 49\n-3.175\n 74\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nLAYER\n  5\n2\n330\n0\n100\nAcDbSymbolTable\n 70\n3\n  0\nLAYER\n  5\n10\n330\n2\n100\nAcDbSymbolTableRecord\n100\nAcDbLayerTableRecord\n  2\n0\n 70\n0\n  6\nContinuous\n370\n-3\n390\nF\n347\n98\n348\n0\n  0\nLAYER\n  5\n1B4\n330\n2\n100\nAcDbSymbolTableRecord\n100\nAcDbLayerTableRecord\n  2\nView Port\n 70\n0\n  6\nContinuous\n290\n0\n370\n-3\n390\nF\n347\n98\n348\n0\n  0\nLAYER\n  5\n21D\n330\n2\n100\nAcDbSymbolTableRecord\n100\nAcDbLayerTableRecord\n  2\nDefpoints\n 70\n0\n  6\nContinuous\n290\n0\n370\n-3\n390\nF\n347\n98\n348\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nSTYLE\n  5\n3\n330\n0\n100\nAcDbSymbolTable\n 70\n3\n  0\nSTYLE\n  5\n11\n330\n3\n100\nAcDbSymbolTableRecord\n100\nAcDbTextStyleTableRecord\n  2\nStandard\n 70\n0\n 40\n0.0\n 41\n1.0\n 50\n0.0\n 71\n0\n 42\n0.2\n  3\narial.ttf\n  4\n\n  0\nSTYLE\n  5\nDC\n330\n3\n100\nAcDbSymbolTableRecord\n100\nAcDbTextStyleTableRecord\n  2\nAnnotative\n 70\n0\n 40\n0.0\n 41\n1.0\n 50\n0.0\n 71\n0\n 42\n0.2\n  3\narial.ttf\n  4\n\n  0\nSTYLE\n  5\n178\n330\n3\n100\nAcDbSymbolTableRecord\n100\nAcDbTextStyleTableRecord\n  2\nNotes\n 70\n0\n 40\n3.0\n 41\n1.0\n 50\n0.0\n 71\n0\n 42\n0.2\n  3\narial.ttf\n  4\n\n  0\nENDTAB\n  0\nTABLE\n  2\nVIEW\n  5\n6\n330\n0\n100\nAcDbSymbolTable\n 70\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nUCS\n  5\n7\n330\n0\n100\nAcDbSymbolTable\n 70\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nAPPID\n  5\n9\n330\n0\n100\nAcDbSymbolTable\n 70\n12\n  0\nAPPID\n  5\n12\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD\n 70\n0\n  0\nAPPID\n  5\nDD\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nAcadAnnoPO\n 70\n0\n  0\nAPPID\n  5\nDE\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nAcadAnnotative\n 70\n0\n  0\nAPPID\n  5\nDF\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_DSTYLE_DIMJAG\n 70\n0\n  0\nAPPID\n  5\nE0\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_DSTYLE_DIMTALN\n 70\n0\n  0\nAPPID\n  5\n107\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_MLEADERVER\n 70\n0\n  0\nAPPID\n  5\n1B5\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nAcAecLayerStandard\n 70\n0\n  0\nAPPID\n  5\n1BA\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_EXEMPT_FROM_CAD_STANDARDS\n 70\n0\n  0\nAPPID\n  5\n237\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_DSTYLE_DIMBREAK\n 70\n0\n  0\nAPPID\n  5\n28E\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_PSEXT\n 70\n0\n  0\nAPPID\n  5\n4B0\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD_NAV_VCDISPLAY\n 70\n0\n  0\nAPPID\n  5\n4E3\n330\n9\n100\nAcDbSymbolTableRecord\n100\nAcDbRegAppTableRecord\n  2\nHATCHBACKGROUNDCOLOR\n 70\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nDIMSTYLE\n  5\nA\n330\n0\n100\nAcDbSymbolTable\n 70\n3\n100\nAcDbDimStyleTable\n 71\n3\n340\n242\n340\n27\n340\nE1\n  0\nDIMSTYLE\n105\n27\n330\nA\n100\nAcDbSymbolTableRecord\n100\nAcDbDimStyleTableRecord\n  2\nStandard\n 70\n0\n 41\n3.0\n 42\n2.0\n 43\n9.0\n 44\n5.0\n140\n3.0\n141\n2.0\n147\n2.0\n340\n11\n1001\nACAD_DSTYLE_DIMJAG\n1070\n388\n1040\n38.0\n1001\nACAD_DSTYLE_DIMBREAK\n1070\n391\n1040\n90.0\n1001\nACAD_DSTYLE_DIMTALN\n1070\n392\n1070\n0\n  0\nDIMSTYLE\n105\nE1\n330\nA\n100\nAcDbSymbolTableRecord\n100\nAcDbDimStyleTableRecord\n  2\nAnnotative\n 70\n0\n 40\n0.0\n 41\n3.0\n 42\n2.5\n 43\n10.0\n 44\n5.0\n140\n3.0\n141\n2.0\n147\n2.0\n340\n11\n1001\nAcadAnnotative\n1000\nAnnotativeData\n1002\n{\n1070\n1\n1070\n1\n1002\n}\n1001\nACAD_DSTYLE_DIMJAG\n1070\n388\n1040\n38.0\n1001\nACAD_DSTYLE_DIMBREAK\n1070\n391\n1040\n90.0\n1001\nACAD_DSTYLE_DIMTALN\n1070\n392\n1070\n0\n  0\nDIMSTYLE\n105\n242\n330\nA\n100\nAcDbSymbolTableRecord\n100\nAcDbDimStyleTableRecord\n  2\nCivil-Metric\n 70\n0\n 41\n3.0\n 42\n1.5\n 43\n6.0\n 44\n3.0\n 73\n0\n 74\n0\n 77\n1\n 78\n3\n 79\n2\n140\n3.0\n141\n3.0\n147\n2.0\n179\n2\n271\n2\n272\n2\n276\n1\n340\n11\n1001\nACAD_DSTYLE_DIMBREAK\n1070\n391\n1040\n3.0\n1001\nACAD_DSTYLE_DIMJAG\n1070\n388\n1040\n38.0\n1001\nACAD_DSTYLE_DIMTALN\n1070\n392\n1070\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nBLOCK_RECORD\n  5\n1\n330\n0\n100\nAcDbSymbolTable\n 70\n4\n  0\nBLOCK_RECORD\n  5\n1F\n330\n1\n100\nAcDbSymbolTableRecord\n100\nAcDbBlockTableRecord\n  2\n*Model_Space\n340\n530\n 70\n0\n280\n1\n281\n0\n  0\nBLOCK_RECORD\n  5\n58\n330\n1\n100\nAcDbSymbolTableRecord\n100\nAcDbBlockTableRecord\n  2\n*Paper_Space\n340\n531\n 70\n0\n280\n1\n281\n0\n  0\nBLOCK_RECORD\n  5\n238\n330\n1\n100\nAcDbSymbolTableRecord\n100\nAcDbBlockTableRecord\n  2\n_ArchTick\n340\n0\n 70\n0\n280\n1\n281\n0\n  0\nBLOCK_RECORD\n  5\n23C\n330\n1\n100\nAcDbSymbolTableRecord\n100\nAcDbBlockTableRecord\n  2\n_Open30\n340\n0\n 70\n0\n280\n1\n281\n0\n  0\nENDTAB\n  0\nENDSEC`\n  return content\n}\n\nconst dxfBlocks = function () {\n  const content = `  0\nSECTION\n  2\nBLOCKS\n  0\nBLOCK\n  5\n23A\n330\n238\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockBegin\n  2\n_ArchTick\n 70\n0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n_ArchTick\n  1\n\n  0\nENDBLK\n  5\n23B\n330\n238\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockEnd\n  0\nBLOCK\n  5\n20\n330\n1F\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockBegin\n  2\n*Model_Space\n 70\n0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n*Model_Space\n  1\n\n  0\nENDBLK\n  5\n21\n330\n1F\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockEnd\n  0\nBLOCK\n  5\n5A\n330\n58\n100\nAcDbEntity\n 67\n1\n  8\n0\n100\nAcDbBlockBegin\n  2\n*Paper_Space\n 70\n0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n*Paper_Space\n  1\n\n  0\nENDBLK\n  5\n5B\n330\n58\n100\nAcDbEntity\n 67\n1\n  8\n0\n100\nAcDbBlockEnd\n  0\nBLOCK\n  5\n240\n330\n23C\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockBegin\n  2\n_Open30\n 70\n0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n_Open30\n  1\n\n  0\nENDBLK\n  5\n241\n330\n23C\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockEnd\n  0\nENDSEC`\n  return content\n}\n\nconst dxfObjects = function () {\n  const content = `  0\nSECTION\n  2\nOBJECTS\n  0\nDICTIONARY\n  5\nC\n330\n0\n100\nAcDbDictionary\n281\n1\n  3\nACAD_COLOR\n350\n524\n  3\nACAD_GROUP\n350\n525\n  3\nACAD_LAYOUT\n350\n526\n  3\nACAD_MATERIAL\n350\n527\n  3\nACAD_MLEADERSTYLE\n350\n528\n  3\nACAD_MLINESTYLE\n350\n529\n  3\nACAD_PLOTSETTINGS\n350\n52A\n  3\nACAD_PLOTSTYLENAME\n350\n52C\n  3\nACAD_SCALELIST\n350\n52D\n  3\nACAD_TABLESTYLE\n350\n52E\n  3\nACAD_VISUALSTYLE\n350\n52F\n  0\nDICTIONARY\n  5\n524\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n525\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n526\n330\nC\n100\nAcDbDictionary\n281\n1\n  3\nModel\n350\n530\n  3\nLayout1\n350\n531\n  0\nDICTIONARY\n  5\n527\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n528\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n529\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n52A\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nACDBPLACEHOLDER\n  5\n52B\n330\n52C\n  0\nACDBDICTIONARYWDFLT\n  5\n52C\n330\nC\n100\nAcDbDictionary\n281\n1\n  3\nNormal\n350\n52B\n100\nAcDbDictionaryWithDefault\n340\n52B\n  0\nDICTIONARY\n  5\n52D\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n52E\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nDICTIONARY\n  5\n52F\n330\nC\n100\nAcDbDictionary\n281\n1\n  0\nLAYOUT\n  5\n530\n330\n526\n100\nAcDbPlotSettings\n  1\n\n  2\nDWFx ePlot (XPS Compatible).pc3\n  4\nANSI_A_(8.50_x_11.00_Inches)\n  6\n\n 40\n5.8\n 41\n17.8\n 42\n5.8\n 43\n17.8\n 44\n215.9\n 45\n279.4\n 46\n0.0\n 47\n0.0\n 48\n0.0\n 49\n0.0\n140\n0.0\n141\n0.0\n142\n1.0\n143\n14.53\n 70\n11952\n 72\n0\n 73\n1\n 74\n0\n  7\n\n 75\n0\n147\n0.069\n148\n114.98\n149\n300.29\n100\nAcDbLayout\n  1\nModel\n 70\n1\n 71\n0\n 10\n0.0\n 20\n0.0\n 11\n12.0\n 21\n9.0\n 12\n0.0\n 22\n0.0\n 32\n0.0\n 14\n0.0\n 24\n0.0\n 34\n0.0\n 15\n0.0\n 25\n0.0\n 35\n0.0\n146\n0.0\n 13\n0.0\n 23\n0.0\n 33\n0.0\n 16\n1.0\n 26\n0.0\n 36\n0.0\n 17\n0.0\n 27\n1.0\n 37\n0.0\n 76\n0\n330\n1F\n  0\nLAYOUT\n  5\n531\n330\n526\n100\nAcDbPlotSettings\n  1\n\n  2\nDWFx ePlot (XPS Compatible).pc3\n  4\nANSI_A_(8.50_x_11.00_Inches)\n  6\n\n 40\n5.8\n 41\n17.8\n 42\n5.8\n 43\n17.8\n 44\n215.9\n 45\n279.4\n 46\n0.0\n 47\n0.0\n 48\n0.0\n 49\n0.0\n140\n0.0\n141\n0.0\n142\n1.0\n143\n1.0\n 70\n688\n 72\n0\n 73\n1\n 74\n5\n  7\nacad.ctb\n 75\n16\n147\n1.0\n148\n0.0\n149\n0.0\n100\nAcDbLayout\n  1\nLayout1\n 70\n1\n 71\n1\n 10\n-0.7\n 20\n-0.23\n 11\n10.3\n 21\n8.27\n 12\n0.0\n 22\n0.0\n 32\n0.0\n 14\n0.63\n 24\n0.8\n 34\n0.0\n 15\n9.0\n 25\n7.2\n 35\n0.0\n146\n0.0\n 13\n0.0\n 23\n0.0\n 33\n0.0\n 16\n1.0\n 26\n0.0\n 36\n0.0\n 17\n0.0\n 27\n1.0\n 37\n0.0\n 76\n0\n330\n58\n  0\nENDSEC`\n  return content\n}\n\nmodule.exports = {\n  dxfHeaders,\n  dxfClasses,\n  dxfTables,\n  dxfBlocks,\n  dxfObjects\n}\n", "/*\n * AutoCAD 2017 2018 Color Index (1-255) as RGB + ALPHA colors\n */\n\nconst colorIndex = [\n  [0, 0, 0, 255], // index 0, added for easy maintenance\n  // 1\n  [255, 0, 0, 255],\n  [255, 255, 0, 255],\n  [0, 255, 0, 255],\n  [0, 255, 255, 255],\n  [0, 0, 255, 255],\n  [255, 0, 255, 255],\n  [255, 255, 255, 255],\n  [128, 128, 128, 255],\n  [192, 192, 192, 255],\n  [255, 0, 0, 255],\n  // 11\n  [255, 127, 127, 255],\n  [165, 0, 0, 255],\n  [165, 82, 82, 255],\n  [127, 0, 0, 255],\n  [127, 63, 63, 255],\n  [76, 0, 0, 255],\n  [76, 38, 38, 255],\n  [38, 0, 0, 255],\n  [38, 19, 19, 255],\n  [255, 63, 0, 255],\n  // 21\n  [255, 159, 127, 255],\n  [165, 41, 0, 255],\n  [165, 103, 82, 255],\n  [127, 31, 0, 255],\n  [127, 79, 63, 255],\n  [76, 19, 0, 255],\n  [76, 47, 38, 255],\n  [38, 9, 0, 255],\n  [38, 28, 19, 255],\n  [255, 127, 0, 255],\n  // 31\n  [255, 191, 127, 255],\n  [165, 82, 0, 255],\n  [165, 124, 82, 255],\n  [127, 63, 0, 255],\n  [127, 95, 63, 255],\n  [76, 38, 0, 255],\n  [76, 57, 38, 255],\n  [38, 19, 0, 255],\n  [38, 28, 19, 255],\n  [255, 191, 0, 255],\n  // 41\n  [255, 223, 127, 255],\n  [165, 124, 0, 255],\n  [165, 145, 82, 255],\n  [127, 95, 0, 255],\n  [127, 111, 63, 255],\n  [76, 57, 0, 255],\n  [76, 66, 38, 255],\n  [38, 28, 0, 255],\n  [38, 33, 19, 255],\n  [255, 255, 0, 255],\n  // 51\n  [255, 255, 127, 255],\n  [165, 165, 0, 255],\n  [165, 165, 82, 255],\n  [127, 127, 0, 255],\n  [127, 127, 63, 255],\n  [76, 76, 0, 255],\n  [76, 76, 38, 255],\n  [38, 38, 0, 255],\n  [38, 38, 19, 255],\n  [191, 255, 0, 255],\n  // 61\n  [223, 255, 127, 255],\n  [124, 165, 0, 255],\n  [145, 165, 82, 255],\n  [95, 127, 0, 255],\n  [111, 127, 63, 255],\n  [57, 76, 0, 255],\n  [66, 76, 38, 255],\n  [28, 38, 0, 255],\n  [33, 38, 19, 255],\n  [127, 255, 0, 255],\n  // 71\n  [191, 255, 127, 255],\n  [82, 165, 0, 255],\n  [124, 165, 82, 255],\n  [63, 127, 0, 255],\n  [95, 127, 63, 255],\n  [38, 76, 0, 255],\n  [57, 76, 38, 255],\n  [19, 38, 0, 255],\n  [28, 38, 19, 255],\n  [63, 255, 0, 255],\n  // 81\n  [159, 255, 127, 255],\n  [41, 165, 0, 255],\n  [103, 165, 82, 255],\n  [31, 127, 0, 255],\n  [79, 127, 63, 255],\n  [19, 76, 0, 255],\n  [47, 76, 38, 255],\n  [9, 38, 0, 255],\n  [23, 38, 19, 255],\n  [0, 255, 0, 255],\n  // 91\n  [125, 255, 127, 255],\n  [0, 165, 0, 255],\n  [82, 165, 82, 255],\n  [0, 127, 0, 255],\n  [63, 127, 63, 255],\n  [0, 76, 0, 255],\n  [38, 76, 38, 255],\n  [0, 38, 0, 255],\n  [19, 38, 19, 255],\n  [0, 255, 63, 255],\n  // 101\n  [127, 255, 159, 255],\n  [0, 165, 41, 255],\n  [82, 165, 103, 255],\n  [0, 127, 31, 255],\n  [63, 127, 79, 255],\n  [0, 76, 19, 255],\n  [38, 76, 47, 255],\n  [0, 38, 9, 255],\n  [19, 88, 23, 255],\n  [0, 255, 127, 255],\n  // 111\n  [127, 255, 191, 255],\n  [0, 165, 82, 255],\n  [82, 165, 124, 255],\n  [0, 127, 63, 255],\n  [63, 127, 95, 255],\n  [0, 76, 38, 255],\n  [38, 76, 57, 255],\n  [0, 38, 19, 255],\n  [19, 88, 28, 255],\n  [0, 255, 191, 255],\n  // 121\n  [127, 255, 223, 255],\n  [0, 165, 124, 255],\n  [82, 165, 145, 255],\n  [0, 127, 95, 255],\n  [63, 127, 111, 255],\n  [0, 76, 57, 255],\n  [38, 76, 66, 255],\n  [0, 38, 28, 255],\n  [19, 88, 88, 255],\n  [0, 255, 255, 255],\n  // 131\n  [127, 255, 255, 255],\n  [0, 165, 165, 255],\n  [82, 165, 165, 255],\n  [0, 127, 127, 255],\n  [63, 127, 127, 255],\n  [0, 76, 76, 255],\n  [38, 76, 76, 255],\n  [0, 38, 38, 255],\n  [19, 88, 88, 255],\n  [0, 191, 255, 255],\n  // 141\n  [127, 223, 255, 255],\n  [0, 124, 165, 255],\n  [82, 145, 165, 255],\n  [0, 95, 127, 255],\n  [63, 111, 217, 255],\n  [0, 57, 76, 255],\n  [38, 66, 126, 255],\n  [0, 28, 38, 255],\n  [19, 88, 88, 255],\n  [0, 127, 255, 255],\n  // 151\n  [127, 191, 255, 255],\n  [0, 82, 165, 255],\n  [82, 124, 165, 255],\n  [0, 63, 127, 255],\n  [63, 95, 127, 255],\n  [0, 38, 76, 255],\n  [38, 57, 126, 255],\n  [0, 19, 38, 255],\n  [19, 28, 88, 255],\n  [0, 63, 255, 255],\n  // 161\n  [127, 159, 255, 255],\n  [0, 41, 165, 255],\n  [82, 103, 165, 255],\n  [0, 31, 127, 255],\n  [63, 79, 127, 255],\n  [0, 19, 76, 255],\n  [38, 47, 126, 255],\n  [0, 9, 38, 255],\n  [19, 23, 88, 255],\n  [0, 0, 255, 255],\n  // 171\n  [127, 127, 255, 255],\n  [0, 0, 165, 255],\n  [82, 82, 165, 255],\n  [0, 0, 127, 255],\n  [63, 63, 127, 255],\n  [0, 0, 76, 255],\n  [38, 38, 126, 255],\n  [0, 0, 38, 255],\n  [19, 19, 88, 255],\n  [63, 0, 255, 255],\n  // 181\n  [159, 127, 255, 255],\n  [41, 0, 165, 255],\n  [103, 82, 165, 255],\n  [31, 0, 127, 255],\n  [79, 63, 127, 255],\n  [19, 0, 76, 255],\n  [47, 38, 126, 255],\n  [9, 0, 38, 255],\n  [23, 19, 88, 255],\n  [127, 0, 255, 255],\n  // 191\n  [191, 127, 255, 255],\n  [165, 0, 82, 255],\n  [124, 82, 165, 255],\n  [63, 0, 127, 255],\n  [95, 63, 127, 255],\n  [38, 0, 76, 255],\n  [57, 38, 126, 255],\n  [19, 0, 38, 255],\n  [28, 19, 88, 255],\n  [191, 0, 255, 255],\n  // 201\n  [223, 127, 255, 255],\n  [124, 0, 165, 255],\n  [142, 82, 165, 255],\n  [95, 0, 127, 255],\n  [111, 63, 127, 255],\n  [57, 0, 76, 255],\n  [66, 38, 76, 255],\n  [28, 0, 38, 255],\n  [88, 19, 88, 255],\n  [255, 0, 255, 255],\n  // 211\n  [255, 127, 255, 255],\n  [165, 0, 165, 255],\n  [165, 82, 165, 255],\n  [127, 0, 127, 255],\n  [127, 63, 127, 255],\n  [76, 0, 76, 255],\n  [76, 38, 76, 255],\n  [38, 0, 38, 255],\n  [88, 19, 88, 255],\n  [255, 0, 191, 255],\n  // 221\n  [255, 127, 223, 255],\n  [165, 0, 124, 255],\n  [165, 82, 145, 255],\n  [127, 0, 95, 255],\n  [127, 63, 111, 255],\n  [76, 0, 57, 255],\n  [76, 38, 66, 255],\n  [38, 0, 28, 255],\n  [88, 19, 88, 255],\n  [255, 0, 127, 255],\n  // 231\n  [255, 127, 191, 255],\n  [165, 0, 82, 255],\n  [165, 82, 124, 255],\n  [127, 0, 63, 255],\n  [127, 63, 95, 255],\n  [76, 0, 38, 255],\n  [76, 38, 57, 255],\n  [38, 0, 19, 255],\n  [88, 19, 28, 255],\n  [255, 0, 63, 255],\n  // 241\n  [255, 127, 159, 255],\n  [165, 0, 41, 255],\n  [165, 82, 103, 255],\n  [127, 0, 31, 255],\n  [127, 63, 79, 255],\n  [76, 0, 19, 255],\n  [76, 38, 47, 255],\n  [38, 0, 9, 255],\n  [88, 19, 23, 255],\n  [0, 0, 0, 255],\n  // 251\n  [101, 101, 101, 255],\n  [102, 102, 102, 255],\n  [153, 153, 153, 255],\n  [204, 204, 204, 255],\n  [255, 255, 255, 255]\n]\n\nmodule.exports = colorIndex\n", "/*\nJSCAD Object to AutoCAD DXF Entity Serialization\n\n## License\n\nCopyright (c) 2018 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     POLYLINE\n     LWPOLYLINE\n2) geom3 conversion to:\n     3DFACE\n     POLYLINE (face mesh)\n3) path2 conversion to:\n     LWPOLYLINE\nTBD\n1) support binary output\n2) add color conversion\n*/\n\nconst { geometries, modifiers } = require('@jscad/modeling')\nconst { geom3, geom2, path2 } = geometries\n\nconst { flatten, toArray } = require('@jscad/array-utils')\n\nconst { dxfHeaders, dxfClasses, dxfTables, dxfBlocks, dxfObjects } = require('./autocad_AC2017')\nconst colorindex2017 = require('./colorindex2017')\n\nconst mimeType = 'application/dxf'\n\n/**\n * Serializer of JSCAD geometries to DXF entities.\n * @module io/dxf-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/dxf-serializer')\n */\n\n/**\n * Serialize the give objects to AutoCad DXF format.\n * @param {Object} options - options for serialization, REQUIRED\n * @param {String} [options.geom2To='lypolyline'] - target entity for 2D geometries, 'lwpolyline' or 'polyline'\n * @param {String} [options.geom3To='3dface'] - target entity for 3D geometries, '3dface' or 'polyline'\n * @param {Object|Array} objects - objects to serialize as DXF\n * @returns {Array} serialized contents, DXF format\n * @alias module:io/dxf-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const dxfData = serializer({geom3To: '3dface'}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    geom2To: 'lwpolyline', // or polyline\n    geom3To: '3dface', // or polyline\n    pathTo: 'lwpolyline',\n    statusCallback: null,\n    colorIndex: colorindex2017\n  }\n  options = Object.assign({}, defaults, options)\n\n  options.entityId = 0 // sequence id for entities created\n\n  objects = flatten(objects)\n\n  objects = objects.filter((object) => geom3.isA(object) || geom2.isA(object) || path2.isA(object))\n\n  if (objects.length === 0) throw new Error('only JSCAD geometries can be serialized to DXF')\n\n  // convert to triangles\n  objects = toArray(modifiers.generalize({ snap: true, triangulate: true }, objects))\n\n  const dxfContent = `999\nCreated by JSCAD\n${dxfHeaders(options)}\n${dxfClasses(options)}\n${dxfTables(options)}\n${dxfBlocks(options)}\n${dxfEntities(objects, options)}\n${dxfObjects(options)}\n  0\nEOF\n`\n  return [dxfContent]\n}\n\n/**\n * Serialize the given objects as a DXF entity section\n * @param {Array} objects - objects to serialize as DXF\n * @param {Object} options - options for serialization\n * @returns {Object} serialized contents, DXF format\n */\nconst dxfEntities = (objects, options) => {\n  const entityContents = objects.map((object, i) => {\n    if (geom2.isA(object)) {\n      const color = object.color\n      const name = object.name\n      const outlines = geom2.toOutlines(object)\n      const paths = outlines.map((outline) => ({ closed: true, points: outline, color, name }))\n      if (options.geom2To === 'polyline') {\n        return PathsToPolyine(paths, options)\n      }\n      return PathsToLwpolyline(paths, options)\n    }\n    if (geom3.isA(object)) {\n      // TODO object = ensureManifoldness(object)\n      if (options.geom3To === 'polyline') {\n        return PolygonsToPolyline(object, options)\n      }\n      return PolygonsTo3DFaces(object, options)\n    }\n    if (path2.isA(object)) {\n      // mimic a path (outline) from geom2\n      const color = object.color\n      const name = object.name\n      const path = { closed: object.isClosed, points: path2.toPoints(object), color, name }\n      return PathsToLwpolyline([path], options)\n    }\n    return ''\n  })\n  let section = `  0\nSECTION\n  2\nENTITIES\n`\n  entityContents.forEach((content) => {\n    if (content) {\n      section += content\n    }\n  })\n  section += `  0\nENDSEC`\n  return section\n}\n\n//\n// convert the given paths (from 2D outlines) to DXF lwpolyline entities\n// @return array of strings\n//\n// Group Codes Used:\n// 5 - Handle, unique HEX value, e.g. 5C6\n// 8 - layer name (0 is default layer)\n// 67 (0 - model space, 1 - paper space)\n// 100 -\n//\nconst PathsToLwpolyline = (paths, options) => {\n  options.statusCallback && options.statusCallback({ progress: 0 })\n  let str = ''\n  paths.forEach((path, i) => {\n    if (path.points.length < 1) return\n    const numpointsClosed = path.points.length + (path.closed ? 1 : 0)\n    str += `  0\nLWPOLYLINE\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  3\n${getName(path, options)}\n  8\n0\n  67\n0\n  62\n${getColorNumber(path, options)}\n  100\nAcDbPolyline\n  90\n${numpointsClosed}\n  70\n${(path.closed ? 1 : 0)}\n`\n    for (let pointindex = 0; pointindex < numpointsClosed; pointindex++) {\n      let pointindexwrapped = pointindex\n      if (pointindexwrapped >= path.points.length) pointindexwrapped -= path.points.length\n      const point = path.points[pointindexwrapped]\n      str += `  10\n${point[0]}\n  20\n${point[1]}\n`\n    }\n    options.statusCallback && options.statusCallback({ progress: 100 * i / paths.length })\n  })\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [str]\n}\n\n//\n// convert the given paths (from outlines) to DXF polyline (2D line) entities\n// @return array of strings\n//\nconst PathsToPolyine = (paths, options) => {\n  options.statusCallback && options.statusCallback({ progress: 0 })\n  let str = ''\n  paths.forEach((path, i) => {\n    const numpointsClosed = path.points.length + (path.closed ? 1 : 0)\n    str += `  0\nPOLYLINE\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  3\n${getName(path, options)}\n  8\n0\n  62\n${getColorNumber(path, options)}\n  100\nAcDb2dPolyline\n`\n    for (let pointindex = 0; pointindex < numpointsClosed; pointindex++) {\n      let pointindexwrapped = pointindex\n      if (pointindexwrapped >= path.points.length) pointindexwrapped -= path.points.length\n      const point = path.points[pointindexwrapped]\n      str += `  0\nVERTEX\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  8\n0\n  100\nAcDbVertex\n  100\nAcDb2dVertex\n 10\n${point[0]}\n 20\n${point[1]}\n`\n    }\n    str += `  0\nSEQEND\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n`\n    options.statusCallback && options.statusCallback({ progress: 100 * i / paths.length })\n  })\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [str]\n}\n\n//\n// convert the given object (geom3) to DXF 3D face entities\n// @return array of strings\n//\nconst PolygonsTo3DFaces = (object, options) => {\n  options.statusCallback && options.statusCallback({ progress: 0 })\n  let str = ''\n  const polygons = geom3.toPolygons(object)\n  const objectColor = getColorNumber(object, options)\n  polygons.forEach((polygon, i) => {\n    const polyColor = polygon.color ? getColorNumber(polygon, options) : objectColor\n    const triangles = polygonToTriangles(polygon)\n    triangles.forEach((triangle, i) => {\n      str += triangleTo3DFaces(triangle, options, polyColor)\n    })\n  })\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [str]\n}\n\n//\n// convert the given polygon to triangles\n//\n// NOTE: This only works for CONVEX polygons\nconst polygonToTriangles = (polygon) => {\n  const length = polygon.vertices.length - 2\n  if (length < 1) return []\n\n  const pivot = polygon.vertices[0]\n  const triangles = []\n  for (let i = 0; i < length; i++) {\n    triangles.push([pivot, polygon.vertices[i + 1], polygon.vertices[i + 2]])\n  }\n  return triangles\n}\n\n//\n// convert the given triangle to DXF 3D face entity\n//\nconst triangleTo3DFaces = (triangle, options, color) => {\n  const corner10 = triangle[0]\n  const corner11 = triangle[1]\n  const corner12 = triangle[2]\n  const corner13 = triangle[2] // same in DXF\n  const str = `  0\n3DFACE\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  8\n0\n  62\n${color}\n  100\nAcDbFace\n  70\n0\n  10\n${corner10[0]}\n  20\n${corner10[1]}\n  30\n${corner10[2]}\n  11\n${corner11[0]}\n  21\n${corner11[1]}\n  31\n${corner11[2]}\n  12\n${corner12[0]}\n  22\n${corner12[1]}\n  32\n${corner12[2]}\n  13\n${corner13[0]}\n  23\n${corner13[1]}\n  33\n${corner13[2]}\n`\n  return str\n}\n\n// convert the given object (geom3) to DXF POLYLINE (polyface mesh)\n// FIXME The entity types are wrong, resulting in imterpretation as a 3D lines, not faces\n// @return array of strings\nconst PolygonsToPolyline = (object, options) => {\n  let str = ''\n  const mesh = polygons2polyfaces(geom3.toPolygons(object))\n  if (mesh.faces.length > 0) {\n    str += `  0\nPOLYLINE\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  3\n${getName(object, options)}\n  8\n0\n  62\n${getColorNumber(object, options)}\n  100\nAcDb3dPolyline\n  70\n64\n  71\n${mesh.vertices.length}\n  72\n${mesh.faces.length}\n`\n    mesh.vertices.forEach((vertex) => {\n      str += `  0\nVERTEX\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  8\n0\n  100\nAcDbVertex\n  100\nAcDb3dPolylineVertex\n  10\n${vertex[0]}\n  20\n${vertex[1]}\n  30\n${vertex[2]}\n  70\n192\n`\n    })\n    mesh.faces.forEach((face) => {\n      str += `  0\nVERTEX\n  5\n${getEntityId(options)}\n  100\nAcDbEntity\n  8\n0\n  100\nAcDbVertex\n  100\nAcDb3dPolylineVertex\n  10\n0\n  20\n0\n  30\n0\n  70\n128\n  71\n${face[0]}\n  72\n${face[1]}\n  73\n${face[2]}\n  74\n${face[3]}\n`\n    })\n  }\n  return [str]\n}\n\n// convert the given polygons to polyfaces (DXF)\n// @return array of faces, array of vertices\nconst polygons2polyfaces = (polygons) => {\n  const faces = []\n  const vertices = []\n  for (let i = 0; i < polygons.length; ++i) {\n    const polygon = polygons[i]\n    const face = []\n    for (let j = 0; j < polygon.vertices.length; ++j) {\n      const vv = polygon.vertices[j]\n      vertices.push([vv[0], vv[1], vv[2]])\n      face.push(vertices.length)\n    }\n    while (face.length < 4) { face.push(0) }\n    faces.push(face)\n  }\n  return { faces: faces, vertices: vertices }\n}\n\n// get a unique id for a DXF entity\n// @return unique id string\nconst getEntityId = (options) => {\n  options.entityId++\n  // add more zeros if the id needs to be larger\n  const padded = '00000' + options.entityId.toString(16).toUpperCase()\n  return 'CAD' + padded.substr(padded.length - 5)\n}\n\nconst getName = (object, options) => {\n  if (object.name) return object.name\n  // add more zeros if the id needs to be larger\n  const padded = '00000' + options.entityId.toString(16).toUpperCase()\n  return 'CAD' + padded.substr(padded.length - 5)\n}\n\nconst getColorNumber = (object, options) => {\n  let colorNumber = 256\n  if (object.color) {\n    const r = Math.floor(object.color[0] * 255)\n    const g = Math.floor(object.color[1] * 255)\n    const b = Math.floor(object.color[2] * 255)\n    // find the closest Autocad color number\n    const index = options.colorIndex\n    let closest = 255 + 255 + 255\n    for (let i = 1; i < index.length; i++) {\n      const rgb = index[i]\n      const diff = Math.abs(r - rgb[0]) + Math.abs(g - rgb[1]) + Math.abs(b - rgb[2])\n      if (diff < closest) {\n        colorNumber = i\n        if (diff === 0) break\n        closest = diff\n      }\n    }\n  }\n  return colorNumber\n}\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "/*\nJSCAD Object to JSON Notation Serialization\n\n## License\n\nCopyright (c) JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     JSON\n2) geom3 conversion to:\n     JSON\n3) path2 conversion to:\n     JSON\n*/\n\n/**\n * Serializer of JSCAD geometries to JSON strings.\n * @module io/json-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/json-serializer')\n */\n\nconst { utils } = require('@jscad/modeling')\n\n// Replace all typed arrays in geometries with standard Arrays\n// NOTE: 'this' in replacer is the object in which key was found\nconst replacer = (key, value) => {\n  switch (key) {\n    case 'transforms':\n    case 'plane':\n      return Array.from(value)\n    case 'points':\n    case 'vertices':\n      return value.map((v) => Array.from(v))\n    case 'sides':\n      return value.map((s) => [Array.from(s[0]), Array.from(s[1])])\n    default:\n      break\n  }\n  return value\n}\n\n/**\n * Serialize the give objects to JSON.\n * @param {Object} options - options for serialization, REQUIRED\n * @param {Object|Array} objects - objects to serialize as JSON\n * @returns {Array} serialized contents as JSON string\n * @alias module:io/json-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const jsonData = serializer({}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    statusCallback: null\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = utils.flatten(objects)\n\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  const notation = JSON.stringify(objects, replacer)\n\n  options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return [notation]\n}\n\nconst mimeType = 'application/json'\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "/*\nJSCAD Object to OBJ Format Serialization\n\n## License\n\nCopyright (c) 2021 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     none\n2) geom3 conversion to:\n     mesh\n3) path2 conversion to:\n     none\n\n*/\n\n/**\n * Serializer of JSCAD geometries to OBJ source data\n *\n * The serialization of the following geometries are possible.\n * - serialization of 3D geometry (geom3) to OBJ object (a unique mesh containing both vertices and volumes)\n *\n * @module io/obj-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/obj-serializer')\n */\n\nconst { colors, geometries, modifiers } = require('@jscad/modeling')\n\nconst { flatten, toArray } = require('@jscad/array-utils')\n\nconst mimeType = 'application/object'\n\n/**\n * Serialize the give objects (geometry) to OBJ source data.\n * @param {Object} options - options for serialization\n * @param {Boolean} [options.triangulate=true] - triangle or polygon faces\n * @param {Function} [options.statusCallback] - call back function for progress ({ progress: 0-100 })\n * @param {...Object} objects - objects to serialize into OBJ source data\n * @returns {Array} serialized contents, OBJ source data\n * @alias module:io/obj-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const objData = serializer({}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    statusCallback: null,\n    triangulate: true // OBJ file supports polygon faces, but triangulate by default for safety\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n\n  // convert only 3D geometries\n  let objects3d = objects.filter((object) => geometries.geom3.isA(object))\n\n  if (objects3d.length === 0) throw new Error('only 3D geometries can be serialized to OBJ')\n  if (objects.length !== objects3d.length) console.warn('some objects could not be serialized to OBJ')\n\n  // snap to grid and convert to triangles\n  objects3d = toArray(modifiers.generalize({ snap: true, triangulate: options.triangulate }, objects3d))\n\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // construct the contents of the OBJ file\n  let body = '# Wavefront OBJ file generated by JSCAD\\n'\n\n  // find unique vertices\n  const vertices = []\n\n  // convert objects\n  // TODO: group objects together\n  let previousColor = 'default'\n  objects3d.forEach((object, i) => {\n    options.statusCallback && options.statusCallback({ progress: 100 * i / objects3d.length })\n    body += '\\n'\n\n    const objectColor = getColorName(object)\n    const polygons = geometries.geom3.toPolygons(object)\n      .filter((p) => p.vertices.length >= 3)\n\n    polygons.forEach((polygon) => {\n      polygon.vertices.forEach((vertex) => {\n        const vertexString = convertVertex(vertex)\n        if (vertices.indexOf(vertexString) < 0) {\n          // add unique vertices\n          vertices.push(vertexString)\n          body += `${vertexString}\\n`\n        }\n      })\n    })\n    body += '\\n'\n\n    // convert faces\n    polygons.forEach((polygon) => {\n      // convert vertices to indices\n      const indices = polygon.vertices\n        .map((v) => vertices.indexOf(convertVertex(v)) + 1)\n      // set face color\n      const color = getColorName(polygon) || objectColor || 'default'\n      if (color !== previousColor) {\n        body += `usemtl ${color}\\n`\n        previousColor = color\n      }\n      body += `f ${indices.join(' ')}\\n`\n    })\n  })\n\n  options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return [body]\n}\n\n/**\n * Convert a vertex to an obj \"v\" string\n */\nconst convertVertex = (vertex) => `v ${vertex[0]} ${vertex[1]} ${vertex[2]}`\n\n/**\n * Get the closest css color name\n */\nconst getColorName = (object) => {\n  let colorName\n  if (object.color) {\n    const r = object.color[0]\n    const g = object.color[1]\n    const b = object.color[2]\n    // find the closest css color\n    let closest = 255 + 255 + 255\n    for (const name in colors.cssColors) {\n      const rgb = colors.cssColors[name]\n      const diff = Math.abs(r - rgb[0]) + Math.abs(g - rgb[1]) + Math.abs(b - rgb[2])\n      if (diff < closest) {\n        colorName = name\n        if (diff === 0) break\n        closest = diff\n      }\n    }\n  }\n  return colorName\n}\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "const { geometries } = require('@jscad/modeling')\n\n// see http://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\n\n// objects must be an array of 3D geometries\nconst serializeBinary = (objects, options) => {\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // first check if the host is little-endian:\n  const buffer = new ArrayBuffer(4)\n  const int32buffer = new Int32Array(buffer, 0, 1)\n  const int8buffer = new Int8Array(buffer, 0, 4)\n  int32buffer[0] = 0x11223344\n  if (int8buffer[0] !== 0x44) {\n    throw new Error('Binary STL output is currently only supported on little-endian (Intel) processors')\n  }\n\n  let numtriangles = 0\n  let numpolygons = 0\n  objects.forEach((object, i) => {\n    const polygons = geometries.geom3.toPolygons(object)\n    polygons.forEach((polygon) => {\n      const numvertices = polygon.vertices.length\n      const thisnumtriangles = (numvertices >= 3) ? numvertices - 2 : 0\n      numtriangles += thisnumtriangles\n      numpolygons += 1\n    })\n  })\n\n  const headerarray = new Uint8Array(80)\n  for (let i = 0; i < 80; i++) {\n    headerarray[i] = 65\n  }\n\n  const ar1 = new Uint32Array(1)\n  ar1[0] = numtriangles\n\n  // write the triangles to allTrianglesBuffer:\n  const allTrianglesBuffer = new ArrayBuffer(50 * numtriangles)\n  const allTrianglesBufferAsInt8 = new Int8Array(allTrianglesBuffer)\n\n  // a tricky problem is that a Float32Array must be aligned at 4-byte boundaries (at least in certain browsers)\n  // while each triangle takes 50 bytes. Therefore we write each triangle to a temporary buffer, and copy that\n  // into allTrianglesBuffer:\n  const triangleBuffer = new ArrayBuffer(50)\n  const triangleBufferAsInt8 = new Int8Array(triangleBuffer)\n\n  // each triangle consists of 12 floats:\n  const triangleFloat32array = new Float32Array(triangleBuffer, 0, 12)\n  // and one uint16:\n  const triangleUint16array = new Uint16Array(triangleBuffer, 48, 1)\n\n  let byteoffset = 0\n\n  objects.forEach((object) => {\n    const polygons = geometries.geom3.toPolygons(object)\n    polygons.forEach((polygon, index) => {\n      const vertices = polygon.vertices\n      const numvertices = vertices.length\n      const plane = geometries.poly3.plane(polygon)\n      for (let i = 0; i < numvertices - 2; i++) {\n        triangleFloat32array[0] = plane[0]\n        triangleFloat32array[1] = plane[1]\n        triangleFloat32array[2] = plane[2]\n        let arindex = 3\n        for (let v = 0; v < 3; v++) {\n          const vv = v + ((v > 0) ? i : 0)\n          const vertex = vertices[vv]\n          triangleFloat32array[arindex++] = vertex[0]\n          triangleFloat32array[arindex++] = vertex[1]\n          triangleFloat32array[arindex++] = vertex[2]\n        }\n        triangleUint16array[0] = 0\n        // copy the triangle into allTrianglesBuffer:\n        allTrianglesBufferAsInt8.set(triangleBufferAsInt8, byteoffset)\n        byteoffset += 50\n      }\n\n      options.statusCallback && options.statusCallback({ progress: 100 * index / numpolygons })\n    })\n  })\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [headerarray.buffer, ar1.buffer, allTrianglesBuffer] // 'blobable array'\n}\n\nmodule.exports = {\n  serializeBinary\n}\n", "const { geometries } = require('@jscad/modeling')\n\n// objects must be an array of 3D geomertries (with polygons)\nconst serializeText = (objects, options) => {\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  const result = `solid JSCAD\n${convertToStl(objects, options)}\nendsolid JSCAD\n`\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [result]\n}\n\nconst convertToStl = (objects, options) => {\n  const result = []\n  objects.forEach((object, i) => {\n    result.push(convertToFacets(object, options))\n    options.statusCallback && options.statusCallback({ progress: 100 * i / objects.length })\n  })\n  return result.join('\\n')\n}\n\nconst convertToFacets = (object, options) => {\n  const result = []\n  const polygons = geometries.geom3.toPolygons(object)\n  polygons.forEach((polygon, i) => {\n    result.push(convertToFacet(polygon))\n  })\n  return result.join('\\n')\n}\n\nconst vector3DtoStlString = (v) => `${v[0]} ${v[1]} ${v[2]}`\n\nconst vertextoStlString = (vertex) => `vertex ${vector3DtoStlString(vertex)}`\n\nconst convertToFacet = (polygon) => {\n  const result = []\n  if (polygon.vertices.length >= 3) {\n    // STL requires triangular polygons. If our polygon has more vertices, create multiple triangles:\n    const firstVertexStl = vertextoStlString(polygon.vertices[0])\n    for (let i = 0; i < polygon.vertices.length - 2; i++) {\n      const facet = `facet normal ${vector3DtoStlString(geometries.poly3.plane(polygon))}\nouter loop\n${firstVertexStl}\n${vertextoStlString(polygon.vertices[i + 1])}\n${vertextoStlString(polygon.vertices[i + 2])}\nendloop\nendfacet`\n      result.push(facet)\n    }\n  }\n  return result.join('\\n')\n}\n\nmodule.exports = {\n  serializeText\n}\n", "/*\nJSCAD Geometry to STL Format Serialization\n\n## License\n\nCopyright (c) 2018-2019 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     none\n2) geom3 conversion to:\n     STL mesh\n3) path2 conversion to:\n     none\n*/\n\n/**\n * Serializer of JSCAD geometries to STL mesh.\n * @module io/stl-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/stl-serializer')\n */\n\nconst { geometries, modifiers } = require('@jscad/modeling')\n\nconst { flatten, toArray } = require('@jscad/array-utils')\n\nconst { serializeBinary } = require('./CSGToStlb')\nconst { serializeText } = require('./CSGToStla')\n\nconst mimeType = 'application/sla'\n\n/**\n * Serialize the give objects to STL mesh.\n * @param {Object} options - options for serialization\n * @param {String} [options.binary='true'] - target format for data\n * @param {Function} [options.statusCallback] - call back function for progress ({ progress: 0-100 })\n * @param {...Object} objects - objects to serialize as STL\n * @returns {Array} serialized contents with one STL mesh (either string or binary data)\n * @alias module:io/stl-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const stlData = serializer({binary: false}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    binary: true,\n    statusCallback: null\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n\n  // convert only 3D geometries\n  let objects3d = objects.filter((object) => geometries.geom3.isA(object))\n\n  if (objects3d.length === 0) throw new Error('only 3D geometries can be serialized to STL')\n  if (objects.length !== objects3d.length) console.warn('some objects could not be serialized to STL')\n\n  // convert to triangles\n  objects3d = toArray(modifiers.generalize({ snap: true, triangulate: true }, objects3d))\n\n  return options.binary ? serializeBinary(objects3d, options) : serializeText(objects3d, options)\n}\n\nmodule.exports = {\n  mimeType,\n  serialize\n}\n", "'use strict';\n\nconst isObject = o => o && Object.prototype.toString.call(o) === '[object Object]';\n\nfunction indenter (indentation) {\n  if (!(indentation > 0)) {\n    return txt => txt;\n  }\n  var space = ' '.repeat(indentation);\n  return txt => {\n\n    if (typeof txt !== 'string') {\n      return txt;\n    }\n\n    const arr = txt.split('\\n');\n\n    if (arr.length === 1) {\n      return space + txt;\n    }\n\n    return arr\n      .map(e => (e.trim() === '') ? e : space + e)\n      .join('\\n');\n  };\n}\n\nconst clean = txt => txt\n  .split('\\n')\n  .filter(e => e.trim() !== '')\n  .join('\\n');\n\nfunction stringify (a, indentation) {\n  const cr = (indentation > 0) ? '\\n' : '';\n  const indent = indenter(indentation);\n\n  function rec(a) {\n    let body = '';\n    let isFlat = true;\n\n    let res;\n    const isEmpty = a.some((e, i, arr) => {\n      if (i === 0) {\n        res = '<' + e;\n        return (arr.length === 1);\n      }\n\n      if (i === 1) {\n        if (isObject(e)) {\n          Object.keys(e).map(key => {\n            let val = e[key];\n            if (Array.isArray(val)) {\n              val = val.join(' ');\n            }\n            res += ' ' + key + '=\"' + val + '\"';\n          });\n          if (arr.length === 2) {\n            return true;\n          }\n          res += '>';\n          return;\n        }\n        res += '>';\n      }\n\n      switch (typeof e) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n      case 'undefined':\n        body += e + cr;\n        return;\n      }\n\n      isFlat = false;\n      body += rec(e);\n    });\n\n    if (isEmpty) {\n      return res + '/>' + cr; // short form\n    }\n\n    return isFlat\n      ? res + clean(body) + '</' + a[0] + '>' + cr\n      : res + cr + indent(body) + '</' + a[0] + '>' + cr;\n  }\n\n  return rec(a);\n}\n\nmodule.exports = stringify;\n", "{\n  \"name\": \"@jscad/svg-serializer\",\n  \"version\": \"2.3.13\",\n  \"description\": \"SVG Serializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m './tests/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Rene K. Mueller\",\n      \"url\": \"http://renekmueller.com\"\n    },\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"export\",\n    \"serializer\",\n    \"svg\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/modeling\": \"2.12.0\",\n    \"onml\": \"1.3.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "/*\nJSCAD Object to SVG Format Serialization\n\n## License\n\nCopyright (c) 2018 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     SVG GROUP containing a continous SVG PATH that contains the outlines of the geometry\n2) geom3 conversion to:\n     none\n3) path2 conversion to:\n     SVG GROUP containing a SVG PATH for each path\n*/\n\n/**\n * Serializer of JSCAD geometries to SVG source (XML).\n *\n * The serialization of the following geometries are possible.\n * - serialization of 2D geometry (geom2) to SVG path (a continous path containing the outlines of the geometry)\n * - serialization of 2D geometry (path2) to SVG path\n *\n * Colors are added to SVG shapes when found on the geometry.\n * Special attributes (id and class) are added to SVG shapes when found on the geometry.\n *\n * @module io/svg-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/svg-serializer')\n */\n\nconst { geometries, maths, measurements, utils } = require('@jscad/modeling')\n\nconst stringify = require('onml/lib/stringify')\n\nconst version = require('./package.json').version\n\nconst mimeType = 'image/svg+xml'\n\n/**\n * Serialize the give objects to SVG code (XML).\n * @see https://www.w3.org/TR/SVG/Overview.html\n * @param {Object} options - options for serialization, REQUIRED\n * @param {String} [options.unit='mm'] - unit of design; em, ex, px, in, cm, mm, pt, pc\n * @param {Function} [options.statusCallback] - call back function for progress ({ progress: 0-100 })\n * @param {Object|Array} objects - objects to serialize as SVG\n * @returns {Array} serialized contents, SVG code (XML string)\n * @alias module:io/svg-serializer.serialize\n * @example\n * const geometry = primitives.square()\n * const svgData = serializer({unit: 'mm'}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    unit: 'mm', // em | ex | px | in | cm | mm | pt | pc\n    decimals: 10000,\n    version,\n    statusCallback: null\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = utils.flatten(objects)\n\n  // convert only 2D geometries\n  const objects2d = objects.filter((object) => geometries.geom2.isA(object) || geometries.path2.isA(object))\n\n  if (objects2d.length === 0) throw new Error('only 2D geometries can be serialized to SVG')\n  if (objects.length !== objects2d.length) console.warn('some objects could not be serialized to SVG')\n\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // get the lower and upper bounds of ALL convertable objects\n  const bounds = getBounds(objects2d)\n\n  let width = 0\n  let height = 0\n  if (bounds) {\n    width = Math.round((bounds[1][0] - bounds[0][0]) * options.decimals) / options.decimals\n    height = Math.round((bounds[1][1] - bounds[0][1]) * options.decimals) / options.decimals\n  }\n\n  let body = ['svg',\n    {\n      width: width + options.unit,\n      height: height + options.unit,\n      viewBox: ('0 0 ' + width + ' ' + height),\n      fill: 'none',\n      'fill-rule': 'evenodd',\n      'stroke-width': '0.1px',\n      version: '1.1',\n      baseProfile: 'tiny',\n      xmlns: 'http://www.w3.org/2000/svg',\n      'xmlns:xlink': 'http://www.w3.org/1999/xlink'\n    }\n  ]\n  if (bounds) {\n    body = body.concat(convertObjects(objects2d, bounds, options))\n  }\n\n  const svg = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Created by JSCAD SVG Serializer -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1 Tiny//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd\">\n${stringify(body, 2)}`\n\n  options.statusCallback && options.statusCallback({ progress: 100 })\n  return [svg]\n}\n\n/*\n * Measure the bounds of the given objects, which is required to offset all points to positive X/Y values.\n */\nconst getBounds = (objects) => {\n  const allbounds = measurements.measureBoundingBox(objects)\n\n  if (objects.length === 1) return allbounds\n\n  // create a sum of the bounds\n  const sumofbounds = allbounds.reduce((sum, bounds) => {\n    maths.vec3.min(sum[0], sum[0], bounds[0])\n    maths.vec3.max(sum[1], sum[1], bounds[1])\n    return sum\n  }, [[0, 0, 0], [0, 0, 0]])\n  return sumofbounds\n}\n\nconst convertObjects = (objects, bounds, options) => {\n  const xoffset = 0 - bounds[0][0] // offset to X=0\n  const yoffset = 0 - bounds[1][1] // offset to Y=0\n\n  const contents = []\n  objects.forEach((object, i) => {\n    options.statusCallback && options.statusCallback({ progress: 100 * i / objects.length })\n\n    if (geometries.geom2.isA(object)) {\n      contents.push(convertGeom2(object, [xoffset, yoffset], options))\n    }\n    if (geometries.path2.isA(object)) {\n      contents.push(convertPaths([object], [xoffset, yoffset], options))\n    }\n  })\n  return contents\n}\n\nconst reflect = (x, y, px, py) => {\n  const ox = x - px\n  const oy = y - py\n  if (x === px && y === px) return [x, y]\n  if (x === px) return [x, py - (oy)]\n  if (y === py) return [px - (-ox), y]\n  return [px - (-ox), py - (oy)]\n}\n\nconst convertGeom2 = (object, offsets, options) => {\n  const outlines = geometries.geom2.toOutlines(object)\n  const paths = outlines.map((outline) => geometries.path2.fromPoints({ closed: true }, outline))\n\n  options.color = 'black' // SVG initial color\n  if (object.color) options.color = convertColor(object.color)\n  options.id = null\n  if (object.id) options.id = object.id\n  options.class = null\n  if (object.class) options.class = object.class\n\n  return convertToContinousPath(paths, offsets, options)\n}\n\nconst convertToContinousPath = (paths, offsets, options) => {\n  let instructions = ''\n  paths.forEach((path) => (instructions += convertPath(path, offsets, options)))\n  const d = { fill: options.color, d: instructions }\n  if (options.id) d.id = options.id\n  if (options.class) d.class = options.class\n  return ['g', ['path', d]]\n}\n\nconst convertPaths = (paths, offsets, options) => paths.reduce((res, path, i) => {\n  const d = { d: convertPath(path, offsets, options) }\n  if (path.color) d.stroke = convertColor(path.color)\n  if (path.id) d.id = path.id\n  if (path.class) d.class = path.class\n  return res.concat([['path', d]])\n}, ['g'])\n\nconst convertPath = (path, offsets, options) => {\n  let str = ''\n  const numpointsClosed = path.points.length + (path.isClosed ? 1 : 0)\n  for (let pointindex = 0; pointindex < numpointsClosed; pointindex++) {\n    let pointindexwrapped = pointindex\n    if (pointindexwrapped >= path.points.length) pointindexwrapped -= path.points.length\n    const point = path.points[pointindexwrapped]\n    const offpoint = [point[0] + offsets[0], point[1] + offsets[1]]\n    const svgpoint = reflect(offpoint[0], offpoint[1], 0, 0)\n    const x = Math.round(svgpoint[0] * options.decimals) / options.decimals\n    const y = Math.round(svgpoint[1] * options.decimals) / options.decimals\n    if (pointindex > 0) {\n      str += `L${x} ${y}`\n    } else {\n      str += `M${x} ${y}`\n    }\n  }\n  return str\n}\n\nconst convertColor = (color) => `rgb(${color[0] * 255},${color[1] * 255},${color[2] * 255},${color[3] * 255})`\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "'use strict';\n\nconst isObject = o => o && Object.prototype.toString.call(o) === '[object Object]';\n\nfunction indenter (indentation) {\n  if (!(indentation > 0)) {\n    return txt => txt;\n  }\n  var space = ' '.repeat(indentation);\n  return txt => {\n\n    if (typeof txt !== 'string') {\n      return txt;\n    }\n\n    const arr = txt.split('\\n');\n\n    if (arr.length === 1) {\n      return space + txt;\n    }\n\n    return arr\n      .map(e => (e.trim() === '') ? e : space + e)\n      .join('\\n');\n  };\n}\n\nconst clean = txt => txt\n  .split('\\n')\n  .filter(e => e.trim() !== '')\n  .join('\\n');\n\nfunction stringify (a, indentation) {\n  const cr = (indentation > 0) ? '\\n' : '';\n  const indent = indenter(indentation);\n\n  function rec(a) {\n    let body = '';\n    let isFlat = true;\n\n    let res;\n    const isEmpty = a.some((e, i, arr) => {\n      if (i === 0) {\n        res = '<' + e;\n        return (arr.length === 1);\n      }\n\n      if (i === 1) {\n        if (isObject(e)) {\n          Object.keys(e).map(key => {\n            let val = e[key];\n            if (Array.isArray(val)) {\n              val = val.join(' ');\n            }\n            res += ' ' + key + '=\"' + val + '\"';\n          });\n          if (arr.length === 2) {\n            return true;\n          }\n          res += '>';\n          return;\n        }\n        res += '>';\n      }\n\n      switch (typeof e) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n      case 'undefined':\n        body += e + cr;\n        return;\n      }\n\n      isFlat = false;\n      body += rec(e);\n    });\n\n    if (isEmpty) {\n      return res + '/>' + cr; // short form\n    }\n\n    return isFlat\n      ? res + clean(body) + '</' + a[0] + '>' + cr\n      : res + cr + indent(body) + '</' + a[0] + '>' + cr;\n  }\n\n  return rec(a);\n}\n\nmodule.exports = stringify;\n", "/*\nJSCAD Object to X3D (XML) Format Serialization\n\n## License\n\nCopyright (c) 2018-2022 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     Polyline2D with lineSegment and Color\n2) geom3 conversion to:\n     IndexedTriangleSet with Coordinates and Colors\n3) path2 conversion to:\n     Polyline2D with lineSegment and Color\n*/\n\n/**\n * Serializer of JSCAD geometries to X3D source data (XML).\n *\n * The serialization of the following geometries are possible.\n * - serialization of 3D geometries (geom3) to X3D IndexedTriangleSet (a unique mesh containing coordinates)\n * - serialization of 2D geometries (geom2) to X3D Polyline2D\n * - serialization of 2D paths (path2) to X3D Polyline2D\n *\n * Material (color) is added to X3D shapes when found on the geometry.\n *\n * @module io/x3d-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/x3d-serializer')\n */\n\nconst { geometries, modifiers } = require('@jscad/modeling')\nconst { geom2, geom3, path2, poly2, poly3 } = geometries\n\nconst { flatten } = require('@jscad/array-utils')\n\nconst stringify = require('onml/lib/stringify')\n\n// http://www.web3d.org/x3d/content/X3dTooltips.html\n// http://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#Meshes\n// https://x3dgraphics.com/examples/X3dForWebAuthors/Chapter13GeometryTrianglesQuadrilaterals/\n\nconst mimeType = 'model/x3d+xml'\nconst defNames = new Map()\n\n/**\n * Serialize the give objects to X3D elements (XML).\n * @param {Object} options - options for serialization, REQUIRED\n * @param {Array} [options.color=[0,0,1,1]] - default color for objects\n * @param {Number} [options.shininess=8/256] - x3d shininess for specular highlights\n * @param {Boolean} [options.smooth=false] - use averaged vertex normals\n * @param {Number} [options.decimals=1000] - multiplier before rounding to limit precision\n * @param {Boolean} [options.metadata=true] - add metadata to 3MF contents, such at CreationDate\n * @param {String} [options.unit='millimeter'] - unit of design; millimeter, inch, feet, meter or micrometer\n * @param {Function} [options.statusCallback] - call back function for progress ({ progress: 0-100 })\n * @param {Object|Array} objects - objects to serialize as X3D\n * @returns {Array} serialized contents, X3D format (XML)\n * @alias module:io/x3d-serializer.serialize\n * @example\n * const geometry = primitives.cube()\n * const x3dData = serializer({unit: 'meter'}, geometry)\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    color: [0, 0, 1, 1.0], // default colorRGBA specification\n    shininess: 8 / 256,\n    smooth: false,\n    decimals: 1000,\n    metadata: true,\n    unit: 'millimeter', // millimeter, inch, feet, meter or micrometer\n    statusCallback: null\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n\n  objects = objects.filter((object) => geom3.isA(object) || geom2.isA(object) || path2.isA(object))\n\n  if (objects.length === 0) throw new Error('expected one or more geom3/geom2/path2 objects')\n\n  options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // construct the contents of the XML\n  let body = ['X3D',\n    {\n      profile: 'Interchange',\n      version: '3.3',\n      'xmlns:xsd': 'http://www.w3.org/2001/XMLSchema-instance',\n      'xsd:noNamespaceSchemaLocation': 'http://www.web3d.org/specifications/x3d-3.3.xsd'\n    }\n  ]\n  if (options.metadata) {\n    body.push(['head', {},\n      ['meta', { name: 'creator', content: 'Created by JSCAD' }],\n      ['meta', { name: 'reference', content: 'https://www.openjscad.xyz' }],\n      ['meta', { name: 'created', content: new Date().toISOString() }]\n    ])\n  } else {\n    body.push(['head', {},\n      ['meta', { name: 'creator', content: 'Created by JSCAD' }]\n    ])\n  }\n  body = body.concat(convertObjects(objects, options))\n\n  // convert the contents to X3D (XML) format\n  const contents = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n${stringify(body, 2)}`\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return [contents]\n}\n\nconst convertObjects = (objects, options) => {\n  const shapes = []\n  objects.forEach((object, i) => {\n    options.statusCallback && options.statusCallback({ progress: 100 * i / objects.length })\n\n    if (geom3.isA(object)) {\n      // convert to triangles\n      object = modifiers.generalize({ snap: true, triangulate: true }, object)\n      const polygons = geom3.toPolygons(object)\n      if (polygons.length > 0) {\n        shapes.push(convertGeom3(object, options))\n      }\n    }\n    if (geom2.isA(object)) {\n      shapes.push(convertGeom2(object, options))\n    }\n    if (path2.isA(object)) {\n      shapes.push(convertPath2(object, options))\n    }\n  })\n  const transform = ['Transform', { rotation: '1 0 0 -1.5708' }, ...shapes]\n  const scene = ['Scene', {}, transform]\n  return [scene]\n}\n\n/*\n * Convert the given object (path2) to X3D source\n */\nconst convertPath2 = (object, options) => {\n  const points = path2.toPoints(object).slice()\n  if (points.length > 1 && object.isClosed) points.push(points[0])\n  const shape = ['Shape', shapeAttributes(object), convertPolyline2D(poly2.create(points), options)]\n  if (object.color) {\n    shape.push(convertAppearance(object, 'emissiveColor', options))\n  }\n  return shape\n}\n\n/*\n * Convert the given object (geom2) to X3D source\n */\nconst convertGeom2 = (object, options) => {\n  const outlines = geom2.toOutlines(object)\n  const group = ['Group', {}]\n  outlines.forEach((outline) => {\n    if (outline.length > 1) outline.push(outline[0]) // close the outline for conversion\n    const shape = ['Shape', shapeAttributes(object), convertPolyline2D(poly2.create(outline), options)]\n    if (object.color) {\n      shape.push(convertAppearance(object, 'emissiveColor', options))\n    }\n    group.push(shape)\n  })\n  return group\n}\n\n/*\n * generate attributes for Shape node\n */\n\nconst shapeAttributes = (object, attributes = {}) => {\n  if (object.id) {\n    Object.assign(attributes, { DEF: checkDefName(object.id) })\n  }\n  return attributes\n}\n\nconst checkDefName = (defName) => {\n  const count = defNames.get(defName) || 0\n  defNames.set(defName, count + 1)\n  if (count > 0) console.warn(`Warning: object.id set as DEF but not unique. ${defName} set ${count + 1} times.`)\n  return defName\n}\n\n/*\n * Convert the given object (poly2) to X3D source\n */\nconst convertPolyline2D = (object, options) => {\n  const lineSegments = object.vertices.map((p) => `${p[0]} ${p[1]}`).join(' ')\n  return ['Polyline2D', { lineSegments }]\n}\n\n/*\n * Convert color to Appearance\n */\nconst convertAppearance = (object, colorField, options) => {\n  const colorRGB = object.color.slice(0, 3)\n  const color = colorRGB.join(' ')\n  const transparency = roundToDecimals(1.0 - object.color[3], options)\n  const materialFields = { [colorField]: color, transparency }\n  if (colorField === 'diffuseColor') {\n    Object.assign(\n      materialFields,\n      { specularColor: '0.2 0.2 0.2', shininess: options.shininess })\n  }\n  return ['Appearance', ['Material', materialFields]]\n}\n\n/*\n * Convert the given object (geom3) to X3D source\n */\nconst convertGeom3 = (object, options) => {\n  const shape = ['Shape', shapeAttributes(object), convertMesh(object, options)]\n  let appearance = ['Appearance', {}, ['Material']]\n  if (object.color) {\n    appearance = convertAppearance(object, 'diffuseColor', options)\n  }\n  shape.push(appearance)\n  return shape\n}\n\nconst convertMesh = (object, options) => {\n  const mesh = convertToTriangles(object, options)\n  const lists = polygons2coordinates(mesh, options)\n\n  const indexList = lists[0].join(' ')\n  const pointList = lists[1].join(' ')\n  const colorList = lists[2].join(' ')\n\n  const faceset = [\n    'IndexedTriangleSet',\n    { ccw: 'true', colorPerVertex: 'false', normalPerVertex: options.smooth, solid: 'false', index: indexList },\n    ['Coordinate', { point: pointList }]\n  ]\n  if (!object.color) {\n    faceset.push(['Color', { color: colorList }])\n  }\n  return faceset\n}\n\nconst convertToTriangles = (object, options) => {\n  const triangles = []\n  const polygons = geom3.toPolygons(object)\n  polygons.forEach((poly) => {\n    const firstVertex = poly.vertices[0]\n    for (let i = poly.vertices.length - 3; i >= 0; i--) {\n      const triangle = poly3.fromPoints([\n        firstVertex,\n        poly.vertices[i + 1],\n        poly.vertices[i + 2]\n      ])\n\n      let color = options.color\n      if (object.color) color = object.color\n      if (poly.color) color = poly.color\n      triangle.color = color\n\n      triangles.push(triangle)\n    }\n  })\n  return triangles\n}\n\nconst convertToColor = (polygon, options) => {\n  let color = options.color\n  if (polygon.color) color = polygon.color\n\n  return `${color[0]} ${color[1]} ${color[2]}`\n}\n\nconst roundToDecimals = (float, options) => Math.round(float * options.decimals) / options.decimals\n\n/*\n * This function converts the given polygons into three lists\n * - indexList : index of each vertex in the triangle (tuples)\n * - pointList : coordinates of each vertex (X Y Z)\n * - colorList : color of each triangle (R G B)\n */\nconst polygons2coordinates = (polygons, options) => {\n  const indexList = []\n  const pointList = []\n  const colorList = []\n\n  const vertexTagToCoordIndexMap = new Map()\n  polygons.forEach((polygon) => {\n    const polygonVertexIndices = []\n    const numvertices = polygon.vertices.length\n    for (let i = 0; i < numvertices; i++) {\n      const vertex = polygon.vertices[i]\n      const id = `${vertex[0]},${vertex[1]},${vertex[2]}`\n\n      // add the vertex to the list of points (and index) if not found\n      if (!vertexTagToCoordIndexMap.has(id)) {\n        const x = roundToDecimals(vertex[0], options)\n        const y = roundToDecimals(vertex[1], options)\n        const z = roundToDecimals(vertex[2], options)\n        pointList.push(`${x} ${y} ${z}`)\n        vertexTagToCoordIndexMap.set(id, pointList.length - 1)\n      }\n      // add the index (of the vertex) to the list for this polygon\n      polygonVertexIndices.push(vertexTagToCoordIndexMap.get(id))\n    }\n    indexList.push(polygonVertexIndices.join(' '))\n    colorList.push(convertToColor(polygon, options))\n  })\n  vertexTagToCoordIndexMap.clear()\n\n  return [indexList, pointList, colorList]\n}\n\nmodule.exports = {\n  serialize,\n  mimeType\n}\n", "\"use strict\";\nvar ch2 = {};\nexports[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n", "\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar node_worker_1 = require(\"./node-worker.cjs\");\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return node_worker_1[\"default\"](ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, out) {\n    return inflt(data, out);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295;\n        if (z) {\n            e = b4(data, e - 12);\n            if (b4(data, e) != 0x6064B50) {\n                cbd(err(13, 0, 1), null);\n                return tAll;\n            }\n            c = lft = b4(data, e + 32);\n            o = b4(data, e + 48);\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            err(13);\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n", "'use strict';\n\nfunction isObject (o) {\n    return o && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction indenter (indentation) {\n    var space = ' '.repeat(indentation);\n    return function (txt) {\n        var arr, res = [];\n\n        if (typeof txt !== 'string') {\n            return txt;\n        }\n\n        arr = txt.split('\\n');\n\n        if (arr.length === 1) {\n            return space + txt;\n        }\n\n        arr.forEach(function (e) {\n            if (e.trim() === '') {\n                res.push(e);\n                return;\n            }\n            res.push(space + e);\n        });\n\n        return res.join('\\n');\n    };\n}\n\nfunction clean (txt) {\n    var arr = txt.split('\\n');\n    var res = [];\n    arr.forEach(function (e) {\n        if (e.trim() === '') {\n            return;\n        }\n        res.push(e);\n    });\n    return res.join('\\n');\n}\n\nfunction stringify (a, indentation) {\n\n    var cr = '';\n    var indent = function (t) { return t; };\n\n    if (indentation > 0) {\n        cr = '\\n';\n        indent = indenter(indentation);\n    }\n\n    function rec (a) {\n        var res, body, isEmpty, isFlat;\n\n        body = '';\n        isFlat = true;\n        isEmpty = a.some(function (e, i, arr) {\n            if (i === 0) {\n                res = '<' + e;\n                if (arr.length === 1) {\n                    return true;\n                }\n                return;\n            }\n\n            if (i === 1) {\n                if (isObject(e)) {\n                    Object.keys(e).forEach(function (key) {\n                        res += ' ' + key + '=\"' + e[key] + '\"';\n                    });\n                    if (arr.length === 2) {\n                        return true;\n                    }\n                    res += '>';\n                    return;\n                } else {\n                    res += '>';\n                }\n            }\n\n            switch (typeof e) {\n            case 'string':\n            case 'number':\n            case 'boolean':\n            case 'undefined':\n                body += e + cr;\n                return;\n            }\n\n            isFlat = false;\n            body += rec(e);\n        });\n\n        if (isEmpty) {\n            return res + '/>' + cr; // short form\n        } else {\n            if (isFlat) {\n                return res + clean(body) + '</' + a[0] + '>' + cr;\n            } else {\n                return res + cr + indent(body) + '</' + a[0] + '>' + cr;\n            }\n        }\n    }\n\n    return rec(a);\n}\n\nmodule.exports = stringify;\n", "/*\nJSCAD Object to 3MF (XML) Format Serialization\n\n## License\n\nCopyright (c) 2022 JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n\nNotes:\n1) geom2 conversion to:\n     none\n2) geom3 conversion to:\n     mesh\n3) path2 conversion to:\n     none\n*/\n\n/**\n * Serializer of JSCAD geometries to 3D manufacturing format (XML)\n *\n * The serialization of the following geometries are possible.\n * - serialization of 3D geometry (geom3) to 3MF object (a unique mesh containing both vertices and triangles)\n *\n * Colors are added to base materials when found on the 3D geometry, i.e. attribute color.\n * Names are added to meshs when found on the 3D geometry, i.e. attribute name.\n *\n * @module io/3mf-serializer\n * @example\n * const { serializer, mimeType } = require('@jscad/3mf-serializer')\n */\n\n\nconst zipSync = require('fflate').zipSync\nconst strToU8 = require('fflate').strToU8\n\nconst stringify = require('onml/lib/stringify')\n\nconst { colors, geometries, modifiers } = require('@jscad/modeling')\nconst { flatten, toArray } = require('@jscad/array-utils')\n\n\nconst mimeType = 'model/3mf'\nconst fileExtension = '3mf'\n\n/**\n * Serialize the give objects to 3MF contents (XML) or 3MF packaging (OPC).\n * @see https://3mf.io/specification/\n * @param {Object} [options] - options for serialization\n * @param {String} [options.unit='millimeter'] - unit of design; millimeter, inch, feet, meter or micrometer\n * @param {Boolean} [options.metadata=true] - add metadata to 3MF contents, such at CreationDate\n * @param {Array} [options.defaultcolor=[0,0,0,1]] - default color for objects\n * @param {Boolean} [options.compress=true] - package and compress the contents\n * @param {Object|Array} objects - objects to serialize into 3D manufacturing format\n * @returns {Array} serialized contents, 3MF contents (XML) or 3MF packaging (ZIP)\n * @example\n * const geometry = primitives.cube()\n * const package = serializer({unit: 'meter'}, geometry) // 3MF package, ZIP format\n */\nconst serialize = (options, ...objects) => {\n  const defaults = {\n    unit: 'millimeter', // micron, millimeter, centimeter, inch, foot, meter\n    metadata: true,\n    defaultcolor: [255/255, 160/255, 0, 1], // JSCAD Orange\n    compress: true\n  }\n  options = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n\n  // convert only 3D geometries\n  let objects3d = objects.filter((object) => geometries.geom3.isA(object))\n\n  if (objects3d.length === 0) throw new Error('only 3D geometries can be serialized to 3MF')\n  if (objects.length !== objects3d.length) console.warn('some objects could not be serialized to 3MF')\n\n  // convert to triangles\n  objects = toArray(modifiers.generalize({ snap: true, triangulate: true }, objects3d))\n\n  // construct the contents of the 3MF 'model'\n  const body = ['model',\n    {\n      unit: options.unit,\n      'xml:lang': 'und'\n    },\n    ['metadata', { name: 'Application' }, 'JSCAD']\n  ]\n  if (options.metadata) {\n    body.push(['metadata', { name: 'CreationDate' }, new Date().toISOString()])\n  }\n  body.push(translateResources(objects, options))\n  body.push(translateBuild(objects, options))\n\n  // convert the contents to 3MF (XML) format\n  const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n${stringify(body, 2)}`\n\n  // compress and package the contents if requested\n  if (options.compress) {\n    const data = {\n      '3D': {\n        '3dmodel.model': strToU8(xml)\n      },\n      '_rels': {\n        '.rels': strToU8(rels)\n      },\n      '[Content_Types].xml': strToU8(contenttype)\n    }\n    const opts = {\n      comment: 'created by JSCAD'\n    }\n    const zipData = zipSync(data, opts)\n    return [zipData.buffer]\n  }\n  return [xml]\n}\n\nconst contenttype = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\">\n  </Default>\n  <Default Extension=\"model\" ContentType=\"application/vnd.ms-package.3dmanufacturing-3dmodel+xml\">\n  </Default>\n</Types>`\n\nconst rels = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  <Relationship Target=\"/3D/3dmodel.model\" Id=\"rel0\" Type=\"http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel\">\n  </Relationship>\n</Relationships>`\n\nconst translateResources = (objects, options) => {\n  let resources = ['resources', {}, translateMaterials(objects, options)]\n  resources = resources.concat(translateObjects(objects, options))\n  return resources\n}\n\nconst translateMaterials = (objects, options) => {\n  let basematerials = ['basematerials', { id: '0' }]\n\n  const materials = []\n  objects.forEach((object, i) => {\n    let srgb = colors.rgbToHex(options.defaultcolor).toUpperCase()\n    if (object.color) {\n      srgb = colors.rgbToHex(object.color).toUpperCase()\n    }\n    materials.push(['base', { name: `mat${i}`, displaycolor: srgb }])\n  })\n\n  basematerials = basematerials.concat(materials)\n  return basematerials\n}\n\nconst translateObjects = (objects, options) => {\n  const contents = []\n  objects.forEach((object, i) => {\n    if (geometries.geom3.isA(object)) {\n      const polygons = geometries.geom3.toPolygons(object)\n      if (polygons.length > 0) {\n        options.id = i\n        contents.push(convertToObject(object, options))\n      }\n    }\n  })\n  return contents\n}\n\nconst translateBuild = (objects, options) => {\n  let build = ['build', { }]\n\n  const items = []\n  objects.forEach((object, i) => {\n    items.push(['item', { objectid: `${i + 1}` }])\n  })\n\n  build = build.concat(items)\n  return build\n}\n\n/*\n * This section converts each 3D geometry to object / mesh\n */\n\nconst convertToObject = (object, options) => {\n  const name = object.name ? object.name : `Part ${options.id}`\n  const contents = ['object', { id: `${options.id + 1}`, type: 'model', pid: '0', pindex: `${options.id}`, name: name }, convertToMesh(object, options)]\n  return contents\n}\n\nconst convertToMesh = (object, options) => {\n  const contents = ['mesh', {}, convertToVertices(object, options), convertToVolumes(object, options)]\n  return contents\n}\n\n/*\n * This section converts each 3D geometry to mesh vertices\n */\n\nconst convertToVertices = (object, options) => {\n  const contents = ['vertices', {}]\n\n  const vertices = []\n  const polygons = geometries.geom3.toPolygons(object)\n  polygons.forEach((polygon) => {\n    for (let i = 0; i < polygon.vertices.length; i++) {\n      vertices.push(convertToVertex(polygon.vertices[i], options))\n    }\n  })\n\n  return contents.concat(vertices)\n}\n\nconst convertToVertex = (vertex, options) => {\n  const contents = ['vertex', { x: vertex[0], y: vertex[1], z: vertex[2] }]\n  return contents\n}\n\n/*\n * This section converts each 3D geometry to mesh triangles\n */\n\nconst convertToVolumes = (object, options) => {\n  let n = 0\n  const polygons = geometries.geom3.toPolygons(object)\n\n  let contents = ['triangles', {}]\n  polygons.forEach((polygon) => {\n    if (polygon.vertices.length < 3) {\n      return\n    }\n\n    const triangles = convertToTriangles(polygon, n)\n\n    contents = contents.concat(triangles)\n\n    n += polygon.vertices.length\n  })\n  return contents\n}\n\nconst convertToTriangles = (polygon, index) => {\n  const contents = []\n\n  // making sure they are all triangles (triangular polygons)\n  for (let i = 0; i < polygon.vertices.length - 2; i++) {\n    const triangle = ['triangle', { v1: index, v2: (index + i + 1), v3: (index + i + 2) }]\n    contents.push(triangle)\n  }\n  return contents\n}\n\nmodule.exports = {\n  serialize,\n  mimeType,\n  fileExtension\n}\n", "const { geometries } = require('@jscad/modeling')\n\n// handled format descriptions\n// note: order is important as regular expressions are created from extentions\nconst formats = {\n  stl: {\n    displayName: 'STL (Binary)',\n    description: 'STereoLithography, Binary',\n    extension: 'stl',\n    mimetype: 'application/sla',\n    deserializable: true,\n    convertGeom3: false,\n    convertGeom2: false\n  },\n  stla: {\n    displayName: 'STL (ASCII)',\n    description: 'STereoLithography, ASCII',\n    extension: 'stl',\n    mimetype: 'application/sla',\n    deserializable: false, // just once\n    convertGeom3: true,\n    convertGeom2: false\n  },\n  stlb: {\n    displayName: 'STL (Binary)',\n    description: 'STereoLithography, Binary',\n    extension: 'stl',\n    mimetype: 'application/sla',\n    deserializable: false, // just once\n    convertGeom3: true,\n    convertGeom2: false\n  },\n  amf: {\n    displayName: 'AMF (experimental)',\n    description: 'Additive Manufacturing File Format',\n    extension: 'amf',\n    mimetype: 'application/amf+xml',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: false\n  },\n  dxf: {\n    displayName: 'DXF (ASCII)',\n    description: 'AutoCAD Drawing Exchange Format',\n    extension: 'dxf',\n    mimetype: 'application/dxf',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: true\n  },\n  jscad: {\n    displayName: 'JSCAD',\n    description: 'JSCAD Design Source',\n    extension: 'jscad',\n    mimetype: 'application/javascript',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: true\n  },\n  json: {\n    displayName: 'json',\n    description: 'JavaScript Object Notation Format',\n    extension: 'json',\n    mimetype: 'application/json',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: true\n  },\n  js: {\n    displayName: 'js',\n    description: 'JavaScript Source',\n    extension: 'js',\n    mimetype: 'application/javascript',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: true\n  },\n  obj: {\n    displayName: 'OBJ',\n    description: 'Wavefront OBJ File',\n    extension: 'obj',\n    mimetype: 'text/plain',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: false\n  },\n  svg: {\n    displayName: 'SVG',\n    description: 'Scalable Vector Graphics Format',\n    extension: 'svg',\n    mimetype: 'image/svg+xml',\n    deserializable: true,\n    convertGeom3: false,\n    convertGeom2: true\n  },\n  x3d: {\n    displayName: 'X3D',\n    description: 'X3D File Format',\n    extension: 'x3d',\n    mimetype: 'model/x3d+xml',\n    deserializable: true,\n    convertGeom3: true,\n    convertGeom2: true\n  },\n  '3mf': {\n    displayName: '3MF',\n    description: '3D Manufacturing Format',\n    extension: '3mf',\n    mimetype: 'model/3mf',\n    deserializable: false,\n    convertGeom3: true,\n    convertGeom2: false\n  }\n}\n\n// handled input formats that can be converted to jscad code\nconst conversionFormats = [\n// 3D file formats\n  'amf',\n  'js',\n  'jscad',\n  'obj',\n  'scad',\n  'stl',\n  'dxf',\n  // 2D file formats\n  'svg',\n  'ttf',\n  'woff'\n]\n\nconst supportedFormatsForObjects = (objects) => {\n  const objectFormats = []\n  let found3Dsolid = false\n  let found2Dsolid = false\n  for (let i = 0; i < objects.length; i++) {\n    if (geometries.geom3.isA(objects[i])) { found3Dsolid = true }\n    if (geometries.geom2.isA(objects[i]) || geometries.path2.isA(objects[i])) { found2Dsolid = true }\n  }\n  for (const format in formats) {\n    if (found3Dsolid && formats[format].convertGeom3 === true) {\n      objectFormats[objectFormats.length] = format\n      continue // only add once\n    }\n    if (found2Dsolid && formats[format].convertGeom2 === true) {\n      objectFormats[objectFormats.length] = format\n    }\n  }\n  return objectFormats\n}\n\n// Return a list of extensions as used by the serializers\nconst supportedOutputExtensions = () => {\n  const supported = []\n  for (const format in formats) {\n    if (formats[format].convertGeom3 === true || formats[format].convertGeom2 === true) {\n      if (supported.indexOf(formats[format].extension) < 0) {\n        supported.push(formats[format].extension)\n      }\n    }\n  }\n  return supported\n}\n\n// Return a list of formats as used by the serializers\nconst supportedOutputFormats = () => {\n  const supported = []\n  for (const format in formats) {\n    if (formats[format].convertGeom3 === true || formats[format].convertGeom2 === true) {\n      supported.push(format)\n    }\n  }\n  return supported\n}\n\n// Return a list of file extensions as used by the deserializers\n// See also code-loading/transfromSources.js\nconst supportedInputExtensions = () => {\n  const supported = []\n  for (const format in formats) {\n    if (formats[format].deserializable === true) {\n      supported.push(formats[format].extension)\n    }\n  }\n  return supported\n}\n\nmodule.exports = {\n  formats,\n  conversionFormats,\n  supportedInputExtensions,\n  supportedOutputExtensions,\n  supportedOutputFormats,\n  supportedFormatsForObjects\n}\n", "\nconst { toArray } = require('@jscad/array-utils')\nconst { formats } = require('./formats')\nconst amfSerializer = require('@jscad/amf-serializer')\nconst dxfSerializer = require('@jscad/dxf-serializer')\nconst jsonSerializer = require('@jscad/json-serializer')\nconst objSerializer = require('@jscad/obj-serializer')\nconst stlSerializer = require('@jscad/stl-serializer')\nconst svgSerializer = require('@jscad/svg-serializer')\nconst x3dSerializer = require('@jscad/x3d-serializer')\nconst m3fSerializer = require('@jscad/3mf-serializer') // UG javascript doesn't allow names with leading #\n\nconst prepareOutput = (objects, params) => {\n  const defaults = {\n    format: undefined,\n    version: '0.0.0'\n  }\n  const { format, version } = Object.assign({}, defaults, params)\n\n  const metaData = {\n    producer: 'JSCAD ' + version,\n    date: new Date(),\n    version\n  }\n\n  const outputFormatHandlers = {\n    amf: amfSerializer, // Geom3 to AMF\n    stl: stlSerializer, // Geom3 to STL ASCII // NOTE: now using binary output by default !!\n    stla: {\n      mimeType: stlSerializer.mimeType,\n      serialize: (options, data) => stlSerializer.serialize(Object.assign({}, { binary: false }, options), data)\n    }, // Geom3 to STL ASCII\n    stlb: stlSerializer, // Geom3 to STL BINARY\n    dxf: dxfSerializer, // Geom2 to DXF\n    obj: objSerializer,\n    svg: svgSerializer, // Geom2 to SVG\n    x3d: x3dSerializer, // Geom3 to X3D\n    '3mf': m3fSerializer, // Geom3 to 3MF\n    json: jsonSerializer, // Geom3 or Geom2 to JSON\n    js: {\n      mimeType: formats.js.mimetype,\n      serialize: (options, objects) => toArray(objects) // js , pass through\n    },\n    jscad: {\n      mimeType: formats.jscad.mimetype,\n      serialize: (options, objects) => toArray(objects) // jscad , pass through\n    },\n    undefined: () => {\n      throw new Error('Not supported : only jscad, stl, amf, dxf, svg or json as output format')\n    }\n  }\n  const options = Object.assign({}, metaData, params)\n  const data = outputFormatHandlers[format].serialize(options, objects)\n  const mimeType = outputFormatHandlers[format].mimeType\n  return { data, mimeType }\n}\n\nmodule.exports = prepareOutput\n", "{\n  \"name\": \"@jscad/amf-deserializer\",\n  \"version\": \"2.3.5\",\n  \"description\": \"AMF Deserializer for JSCAD\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org/\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m 'tests/**/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Rene K. Mueller\",\n      \"url\": \"http://renekmueller.com\"\n    },\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"amf\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/modeling\": \"2.12.0\",\n    \"saxes\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "const { maths, geometries } = require('@jscad/modeling')\n\nlet lastmaterial\n\nconst findMaterial = (materials, id) => {\n  if (lastmaterial && lastmaterial.id === id) return lastmaterial\n  for (let i = 0; i < materials.length; i++) {\n    if (materials[i].id && materials[i].id === id) {\n      lastmaterial = materials[i]\n      return lastmaterial\n    }\n  }\n  return null\n}\n\nconst getValue = (objects, type) => {\n  for (let i = 0; i < objects.length; i++) {\n    if (objects[i].type === type) return objects[i].value\n  }\n  return null\n}\n\nconst getColor = (objects) => {\n  for (let i = 0; i < objects.length; i++) {\n    const obj = objects[i]\n    if (obj.type === 'color') {\n      let r = parseFloat(getValue(obj.objects, 'r'))\n      let g = parseFloat(getValue(obj.objects, 'g'))\n      let b = parseFloat(getValue(obj.objects, 'b'))\n      let a = parseFloat(getValue(obj.objects, 'a'))\n      if (Number.isNaN(r)) r = 1.0 // AMF default color\n      if (Number.isNaN(g)) g = 1.0\n      if (Number.isNaN(b)) b = 1.0\n      if (Number.isNaN(a)) a = 1.0\n      return [r, g, b, a]\n    }\n  }\n  return null\n}\n\nconst findColorByMaterial = (materials, id) => {\n  const m = findMaterial(materials, id)\n  if (m) {\n    return getColor(m.objects)\n  }\n  return null\n}\n\n// convert all objects to CSG based code\nconst createObject = (obj, index, data, options) => {\n  const vertices = [] // [x,y,z]\n  const faces = [] // [v1,v2,v3]\n  const colors = [] // [r,g,b,a]\n  const materials = data.amfMaterials\n\n  const addCoord = (coord, cidx) => {\n    if (coord.type === 'coordinates') {\n      const x = parseFloat(getValue(coord.objects, 'x'))\n      const y = parseFloat(getValue(coord.objects, 'y'))\n      const z = parseFloat(getValue(coord.objects, 'z'))\n      vertices.push([x, y, z])\n    }\n    // normal is possible\n  }\n\n  const addVertex = (vertex, vidx) => {\n    if (vertex.type === 'vertex') {\n      vertex.objects.forEach(addCoord)\n    }\n    // edge is possible\n  }\n\n  const addTriangle = (tri, tidx) => {\n    if (tri.type === 'triangle') {\n      const v1 = parseInt(getValue(tri.objects, 'v1'))\n      const v2 = parseInt(getValue(tri.objects, 'v2'))\n      const v3 = parseInt(getValue(tri.objects, 'v3'))\n      faces.push([v1, v2, v3]) // HINT: reverse order for polyhedron()\n      const c = getColor(tri.objects)\n      if (c) {\n        colors.push(c)\n      } else {\n        colors.push(tricolor)\n      }\n    }\n  }\n\n  let tricolor = null // for found colors\n\n  const addPart = (part, pidx) => {\n    switch (part.type) {\n      case 'vertices':\n        part.objects.forEach(addVertex)\n        break\n      case 'volume':\n        tricolor = getColor(part.objects)\n        if (part.materialid) {\n        // convert material to color\n          tricolor = findColorByMaterial(materials, part.materialid)\n        }\n        part.objects.forEach(addTriangle)\n        break\n      default:\n        break\n    }\n  }\n\n  const addMesh = (mesh, midx) => {\n    if (mesh.type === 'mesh') {\n      mesh.objects.forEach(addPart)\n    }\n  }\n\n  // const output =\n  if (options.instantiate === true) {\n    const scale = options.amf.scale\n    const vertex = scale !== 1.0\n      ? ([x, y, z]) => maths.vec3.fromValues(x * scale, y * scale, z * scale)\n      : (v) => maths.vec3.clone(v)\n\n    obj.objects.forEach(addMesh)\n    const ocolor = getColor(obj.objects)\n\n    const fcount = faces.length\n    const vcount = vertices.length\n\n    const polygons = []\n    for (let i = 0; i < fcount; i++) {\n      const subData = []\n      for (let j = 0; j < faces[i].length; j++) {\n        if (faces[i][j] < 0 || faces[i][j] >= vcount) {\n          continue\n        }\n        subData.push(vertex(vertices[faces[i][j]]))\n      }\n      const polygon = geometries.poly3.fromPoints(subData)\n      const pcolor = colors[i] ? colors[i] : undefined\n      if (pcolor) polygon.color = pcolor\n      polygons.push(polygon)\n    }\n    let shape = geometries.geom3.create(polygons)\n    if (ocolor) {\n      shape = shape.color = ocolor\n    }\n    return shape\n  }\n\n  let code = ''\n  if (obj.objects.length > 0) {\n    // build a list of faces and vertices\n    obj.objects.forEach(addMesh)\n    const ocolor = getColor(obj.objects)\n\n    const fcount = faces.length\n    const vcount = vertices.length\n\n    code += `\n// Object ${obj.id}\n//  faces   : ${fcount}\n//  vertices: ${vcount}\nconst createObject${obj.id} = () => {\n  let polygons = []\n  let polygon\n`\n\n    // convert the results into function calls\n    for (let i = 0; i < fcount; i++) {\n      code += '  polygon = geometries.poly3.fromPoints([\\n'\n      for (let j = 0; j < faces[i].length; j++) {\n        if (faces[i][j] < 0 || faces[i][j] >= vcount) {\n          continue\n        }\n        code += `      [${vertices[faces[i][j]]}],\\n`\n      }\n      code += '  ])\\n'\n\n      const c = colors[i]\n      if (c) {\n        code += `  polygon.color = [${c}]\\n`\n      }\n      code += '  polygons.push(polygon)\\n'\n    }\n    code += '  let shape = geometries.geom3.create(polygons)\\n'\n\n    const scale = options.scale ? options.scale : 1.0\n    if (scale !== 1.0) {\n      code += `  shape = transforms.scale([${scale},${scale},${scale}], shape)\\n`\n    }\n    if (ocolor) {\n      code += `  shape = colors.colorize([${ocolor}], shape)\\n`\n    }\n\n    code += '  return shape\\n}\\n'\n  }\n  return code\n}\n\nmodule.exports = createObject\n", null, null, null, null, "\nconst amfMesh = (element) => {\n  const obj = { type: 'mesh' }\n  obj.objects = []\n  return obj\n}\n\n// Note: TBD Vertices can have a color, which is used to interpolate a face color (from the 3 vertices)\nconst amfVertices = (element) => {\n  const obj = { type: 'vertices' }\n  obj.objects = []\n  return obj\n}\n\nconst amfCoordinates = (element) => {\n  const obj = { type: 'coordinates' }\n  obj.objects = []\n  return obj\n}\n\nconst amfNormal = (element) => {\n  const obj = { type: 'normal' }\n  obj.objects = []\n  return obj\n}\n\nconst amfX = (element) => ({ type: 'x', value: '0' })\nconst amfY = (element) => ({ type: 'y', value: '0' })\nconst amfZ = (element) => ({ type: 'z', value: '0' })\n\nconst amfVolume = (element) => {\n  const obj = { type: 'volume' }\n\n  if (element.materialid) { obj.materialid = element.materialid }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfTriangle = (element) => {\n  const obj = { type: 'triangle' }\n  obj.objects = []\n  return obj\n}\n\nconst amfV1 = (element) => ({ type: 'v1', value: '0' })\nconst amfV2 = (element) => ({ type: 'v2', value: '0' })\nconst amfV3 = (element) => ({ type: 'v3', value: '0' })\n\nconst amfVertex = (element) => {\n  const obj = { type: 'vertex' }\n  obj.objects = []\n  return obj\n}\n\nconst amfEdge = (element) => {\n  const obj = { type: 'edge' }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfMetadata = (element) => {\n  const obj = { type: 'metadata' }\n\n  if (element.type) { obj.mtype = element.type }\n  if (element.id) { obj.id = element.id }\n\n  return obj\n}\n\nconst amfMaterial = (element) => {\n  const obj = { type: 'material' }\n\n  if (element.id) { obj.id = element.id }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfColor = (element) => {\n  const obj = { type: 'color' }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfR = (element) => ({ type: 'r', value: '1' })\nconst amfG = (element) => ({ type: 'g', value: '1' })\nconst amfB = (element) => ({ type: 'b', value: '1' })\nconst amfA = (element) => ({ type: 'a', value: '1' })\n\nconst amfMap = (element) => {\n  const obj = { type: 'map' }\n\n  if (element.gtexid) { obj.gtexid = element.gtexid }\n  if (element.btexid) { obj.btexid = element.btexid }\n  if (element.rtexid) { obj.rtexid = element.rtexid }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfU1 = (element) => ({ type: 'u1', value: '0' })\nconst amfU2 = (element) => ({ type: 'u2', value: '0' })\nconst amfU3 = (element) => ({ type: 'u3', value: '0' })\n\nmodule.exports = {\n  amfMesh,\n  amfVertices,\n  amfCoordinates,\n  amfX,\n  amfY,\n  amfZ,\n  amfNormal,\n  amfVolume,\n  amfTriangle,\n  amfV1,\n  amfV2,\n  amfV3,\n  amfVertex,\n  amfEdge,\n  amfMetadata,\n  amfMaterial,\n  amfColor,\n  amfR,\n  amfG,\n  amfB,\n  amfA,\n  amfMap,\n  amfU1,\n  amfU2,\n  amfU3\n}\n", "const inchMM = (1 / 0.039370) // used for scaling AMF (inch) to coordinates (mm)\n\nmodule.exports = {\n  inchMM\n}\n", "const saxes = require('saxes')\n\nconst {\n  amfMesh, amfVertices, amfCoordinates,\n  amfX, amfY, amfZ, amfNormal,\n  amfVolume, amfTriangle, amfV1,\n  amfV2, amfV3, amfVertex, amfEdge,\n  amfMetadata, amfMaterial, amfColor,\n  amfR, amfG, amfB, amfA, amfMap,\n  amfU1, amfU2, amfU3\n} = require('./helpers')\nconst { inchMM } = require('./constants')\n\nlet amfLast = null // last object found\nlet amfDefinition = 0 // definitions beinging created\n// 0-AMF, 1-object, 2-material, 3-texture, 4-constellation, 5-metadata\n// high level elements / definitions\nconst amfObjects = [] // list of objects\nconst amfMaterials = [] // list of materials\nconst amfTextures = [] // list of textures\nconst amfConstels = [] // list of constellations\n// let amfMetadata = [] // list of metadata\nlet amfObj = null // amf in object form\n\nconst amfAmf = (element) => {\n  // default AMF with no objects\n  const obj = { type: 'amf', unit: 'mm', scale: 1.0 }\n\n  if (element.unit) { obj.unit = element.unit.toLowerCase() }\n  // set scaling\n  switch (obj.unit.toLowerCase()) {\n    case 'inch':\n      obj.scale = inchMM\n      break\n    case 'foot':\n      obj.scale = inchMM * 12.0\n      break\n    case 'meter':\n      obj.scale = 1000.0\n      break\n    case 'micron':\n      obj.scale = 0.001\n      break\n    case 'millimeter':\n    default:\n      break\n  }\n\n  obj.objects = []\n  return obj\n}\n\nconst amfObject = (element) => {\n  const obj = { type: 'object', id: `JSCAD${amfObjects.length}` } // default ID\n\n  if (element.id) { obj.id = element.id }\n\n  obj.objects = []\n  return obj\n}\n\nconst createAmfParser = (src, pxPmm) => {\n  // create a parser for the XML\n  const parser = new saxes.SaxesParser()\n\n  parser.on('error', (e) => {\n    console.log(`ERROR: AMF file line ${e.line}, column ${e.column}, bad character [${e.c}]`)\n  })\n\n  parser.on('opentag', (node) => {\n    const objMap = {\n      AMF: amfAmf,\n      OBJECT: (node) => {\n        const tmp = amfObject(node)\n        if (amfDefinition === 0) amfDefinition = 1 // OBJECT processing\n        return tmp\n      }, //\n      MESH: amfMesh,\n      VERTICES: amfVertices,\n      VERTEX: amfVertex,\n      EDGE: amfEdge,\n      VOLUME: amfVolume,\n      MATERIAL: (node) => {\n        const tmp = amfMaterial(node)\n        if (amfDefinition === 0) amfDefinition = 2 // MATERIAL processing\n        return tmp\n      },\n      TEXTURE: (node) => {\n        if (amfDefinition === 0) amfDefinition = 3 // TEXTURE processing\n      },\n      CONSTELLATION: (node) => {\n        if (amfDefinition === 0) amfDefinition = 4 // CONSTELLATION processing\n      },\n      METADATA: (node) => {\n        const tmp = amfMetadata(node)\n        if (amfDefinition === 0) amfDefinition = 5 // METADATA processing\n        return tmp\n      },\n      COORDINATES: amfCoordinates,\n      NORMAL: amfNormal,\n      NX: amfX,\n      X: amfX,\n      NY: amfY,\n      Y: amfY,\n      NZ: amfZ,\n      Z: amfZ,\n      TRIANGLE: amfTriangle,\n      V1: amfV1,\n      VTEX1: amfV1,\n      V2: amfV2,\n      VTEX2: amfV2,\n      V3: amfV3,\n      VTEX3: amfV3,\n      COLOR: amfColor,\n      R: amfR,\n      G: amfG,\n      B: amfB,\n      A: amfA,\n      MAP: amfMap,\n      TEXMAP: amfMap,\n      U1: amfU1,\n      UTEX1: amfU1,\n      WTEX1: amfU1,\n      U2: amfU2,\n      UTEX2: amfU2,\n      WTEX2: amfU2,\n      U3: amfU3,\n      UTEX3: amfU3,\n      WTEX3: amfU3,\n      COMPOSITE: () => undefined, // ignored by design\n      undefined: () => console.log(`WARNING: unsupported AMF element: ${node.name}`)\n    }\n\n    const elementName = node.name.toUpperCase()\n    const obj = objMap[elementName] ? objMap[elementName](node.attributes, { amfObjects }) : null\n\n    if (obj) {\n      switch (amfDefinition) {\n        case 0: // definition of AMF\n          if ('objects' in obj) {\n            amfObjects.push(obj)\n          }\n          break\n        case 1: // definition of OBJECT\n          if (amfObjects.length > 0) {\n            const group = amfObjects.pop()\n            // add the object to the active group if necessary\n            if ('objects' in group) {\n              group.objects.push(obj)\n            }\n            amfObjects.push(group)\n            // and push this object as a group object if necessary\n            if ('objects' in obj) {\n              amfObjects.push(obj)\n            }\n          }\n          break\n        case 2: // definition of MATERIAL\n          if (obj.type === 'material') {\n            amfMaterials.push(obj)\n          } else {\n            if (amfMaterials.length > 0) {\n              const group = amfMaterials.pop()\n              // add the object to the active group if necessary\n              if ('objects' in group) {\n                group.objects.push(obj)\n              }\n              amfMaterials.push(group)\n              // and push this object as a group object if necessary\n              if ('objects' in obj) {\n                amfMaterials.push(obj)\n              }\n            }\n          }\n          break\n        case 3: // definition of TEXTURE\n          break\n        case 4: // definition of CONSTELLATION\n          break\n        case 5: // definition of METADATA\n          break\n        default:\n          console.log('WARNING: invalid AMF definition')\n          break\n      }\n      amfLast = obj // retain this object in order to add values\n    }\n  })\n\n  parser.on('closetag', (node) => {\n    const elementName = node.name.toUpperCase()\n    switch (elementName) {\n      // list those which have objects\n      case 'AMF':\n      case 'OBJECT':\n      case 'MESH':\n      case 'VERTICES':\n      case 'VERTEX':\n      case 'EDGE':\n      case 'COORDINATES':\n      case 'NORMAL':\n      case 'VOLUME':\n      case 'TRIANGLE':\n      case 'MATERIAL':\n      case 'COLOR':\n      case 'MAP':\n      case 'TEXMAP':\n        break\n      case 'TEXTURE':\n        if (amfDefinition === 3) { amfDefinition = 0 } // resume processing\n        return\n      case 'CONSTELLATION':\n        if (amfDefinition === 4) { amfDefinition = 0 } // resume processing\n        return\n      case 'METADATA':\n        if (amfDefinition === 5) { amfDefinition = 0 } // resume processing\n        return\n      default:\n        return\n    }\n\n    let obj = null\n    switch (amfDefinition) {\n      case 0: // definition of AMF\n      case 1: // definition of OBJECT\n        if (amfObjects.length > 0) {\n          obj = amfObjects.pop()\n          if (obj.type === 'object') {\n            amfDefinition = 0 // AMF processing\n          }\n        }\n        // check for completeness\n        if (amfObjects.length === 0) {\n          amfObj = obj\n        }\n        break\n      case 2: // definition of MATERIAL\n        if (amfMaterials.length > 0) {\n          obj = amfMaterials.pop()\n          if (obj.type === 'material') {\n            amfMaterials.push(obj) // keep a list of materials\n            amfDefinition = 0 // AMF processing\n          }\n        }\n        break\n      case 3: // definition of TEXTURE\n        amfDefinition = 0 // AMF processing\n        break\n      case 4: // definition of CONSTELLATION\n        amfDefinition = 0 // AMF processing\n        break\n      case 5: // definition of METADATA\n        amfDefinition = 0 // AMF processing\n        break\n      default:\n        break\n    }\n  })\n\n  parser.on('text', (value) => {\n    if (value !== null) {\n      value = value.trim()\n      if (value.length > 0 && amfLast && amfDefinition !== 0) {\n        amfLast.value = value\n        amfLast = null\n      }\n    }\n  })\n\n  parser.on('end', () => {\n    // console.log('AMF parsing completed')\n  })\n\n  // start the parser\n  parser.write(src).close()\n}\n\nconst parse = (src, pxPmm) => {\n  createAmfParser(src, pxPmm)\n  return { amfObj, amfMaterials, amfTextures, amfConstels }\n}\n\nmodule.exports = parse\n", "const createObject = require('./objectBuilder')\nconst parse = require('./parse')\n\nconst translate = (options, src) => {\n  const defaults = {\n    pxPmm: require('./constants').pxPmm\n  }\n  options = Object.assign({}, defaults, options)\n  const { version, pxPmm, addMetaData, filename } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // parse the AMF source\n  const { amfObj, amfMaterials, amfTextures, amfConstels } = parse(src, pxPmm)\n\n  // convert the internal objects to JSCAD code\n  let code = addMetaData\n    ? `//\n// Produced by JSCAD IO Library : AMF Deserializer (${version})\n// date: ${new Date()}\n// source: ${filename}\n//\n`\n    : ''\n\n  if (!amfObj) {\n    throw new Error('AMF parsing failed, no valid AMF data retrieved')\n  }\n\n  options && options.statusCallback && options.statusCallback({ progress: 50 })\n\n  code += codify(amfObj, { amfMaterials, amfTextures, amfConstels })\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return code\n}\n\n//\n// convert the internal repreentation into JSCAD code\n//\nconst codify = (amf, data) => {\n  if (amf.type !== 'amf' || (!amf.objects)) throw new Error('AMF parsing failed, malformed')\n\n  let code = ''\n\n  // hack due to lack of this in array map()\n  const objects = amf.objects\n  const materials = data.amfMaterials\n\n  // convert high level definitions\n  // this ~= data\n  const createDefinition = (object, index) => {\n    switch (object.type) {\n      case 'object':\n        code += createObject(object, index, data, { instantiate: false, scale: amf.scale })\n        break\n      case 'metadata':\n        break\n      case 'material':\n        break\n      default:\n        console.log('WARNING: unknown object type: ' + object.type)\n        break\n    }\n  }\n\n  // start everthing\n  code = `// Objects  : ${objects.length}\n// Materials: ${materials.length}\n// Scale    : ${amf.scale} from Units (${amf.unit})\n\nconst {colors, geometries, transforms} = require('@jscad/modeling')\n\nconst main = () => {\n  let objects = []\n`\n\n  for (let i = 0; i < objects.length; i++) {\n    const obj = objects[i]\n    if (obj.type === 'object') {\n      code += `  objects.push(createObject${obj.id}())\\n`\n    }\n  }\n\n  code += '  return objects\\n}\\n'\n\n  objects.forEach(createDefinition)\n\n  code += 'module.exports = {main}\\n'\n\n  return code\n}\n\nmodule.exports = translate\n", "\nconst createObject = require('./objectBuilder')\n\nconst parse = require('./parse')\n\nconst instantiate = (options, src) => {\n  const defaults = {\n    pxPmm: require('./constants').pxPmm\n  }\n  options = Object.assign({}, defaults, options)\n\n  const { pxPmm } = options\n\n  // parse the AMF data\n  const { amfObj, amfMaterials, amfTextures, amfConstels } = parse(src, pxPmm)\n  if (!amfObj) {\n    throw new Error('AMF parsing failed, no valid AMF data retrieved')\n  }\n\n  return objectify(amfObj, { amfMaterials, amfTextures, amfConstels })\n}\n\nconst objectify = (amf, data) => {\n  const objects = amf.objects.filter((o) => o.type === 'object')\n  return objects.map((object, index) => createObject(object, index, data, { amf, instantiate: true }))\n}\n\nmodule.exports = instantiate\n", "/*\n## License\n\nCopyright (c) 2016 Z3 Development https://github.com/z3dev\nCopyright (c) 2013-2016 by Rene K. Mueller <spiritdude@gmail.com>\n\nAll code released under MIT license\n*/\n\n// //////////////////////////////////////////\n//\n// AMF is a language for describing three-dimensional graphics in XML\n// See ASTM for Documentation, http://www.astm.org/Standards/ISOASTM52915.htm\n//\n// //////////////////////////////////////////\n\n/**\n * Deserializer of AMF source data (XML) to JSCAD geometries.\n * @see {@link https://github.com/jscad/OpenJSCAD.org/blob/master/packages/io/amf-deserializer/README.md|README} for supported conversion of AMF objects.\n * @module io/amf-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/amf-serializer')\n */\n\nconst version = require('../package.json').version\nconst translate = require('./translate')\nconst instantiate = require('./deserialize')\n\n/**\n * Deserialize the given AMF source (XML) into either a script or an array of geometry\n * @see {@link https://en.wikipedia.org/wiki/Additive_manufacturing_file_format|AMF File Format}\n * @see README for supported conversions\n * @param {Object} options - options used during deserializing\n * @param {String} [options.filename='amf'] - filename of original AMF source\n * @param {String} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {String} [options.version] - version added to the script metadata, default is package version\n * @param {Boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {String} input - AMF source data (XML)\n * @returns {(Array|String)} either an array of objects (geometry) or a string (script)\n * @alias module:io/amf-deserializer.deserialize\n */\nconst deserialize = (options, input) => {\n  const defaults = {\n    filename: 'amf',\n    output: 'script',\n    version,\n    addMetaData: true\n  }\n  options = Object.assign({}, defaults, options)\n\n  return options.output === 'script' ? translate(options, input) : instantiate(options, input)\n}\n\nconst extension = 'amf'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/dxf-deserializer\",\n  \"version\": \"2.3.22\",\n  \"description\": \"DXF Deserializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m './tests/test*.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"dxf\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/modeling\": \"2.12.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "/*\nAutoCAD Constants\n\n## License\n\nCopyright (c) 2017 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n*/\n\n//\n// translate group codes to names for use as object attributes\n//\nconst dxfTLA = [\n  [0, 'etyp'], [1, 'text'], [2, 'name'], [3, 'nam1'],\n  [5, 'hdle'], [6, 'ltyp'], [7, 'lsty'], [8, 'lnam'], [9, 'vari'],\n  [10, 'pptx'], [11, 'sptx'], [12, 'tptx'], [13, 'fptx'],\n  [20, 'ppty'], [21, 'spty'], [22, 'tpty'], [23, 'fpty'],\n  [30, 'pptz'], [31, 'sptz'], [32, 'tptz'], [33, 'fptz'],\n  [38, 'elev'], [39, 'lthk'],\n  [40, 'swid'], [41, 'ewid'], [42, 'bulg'], [43, 'cwid'],\n  [48, 'lscl'],\n  [50, 'ang0'], [51, 'ang1'],\n  [60, 'visb'], [62, 'cnmb'],\n  [67, 'spac'],\n  [70, 'lflg'], [71, 'fvia'], [72, 'fvib'], [73, 'fvic'], [74, 'fvid'],\n  [75, 'cflg'],\n  [90, 'vlen'], [91, 'slen'], [92, 'plen'], [93, 'flen'], [94, 'elen'],\n  [95, 'clen'],\n  [100, 'sbnm'],\n  [210, 'etrx'],\n  [220, 'etry'],\n  [230, 'etrz']\n]\n\nconst dxfMap = new Map(dxfTLA)\n\nconst getTLA = (group) => dxfMap.get(group)\n\n/*\n * AutoCAD Drawing Units\n */\nconst drawingUnits = [\n  [0, 'none'],\n  [1, 'inches'],\n  [2, 'feet'],\n  [3, 'miles'],\n  [4, 'millimeters'],\n  [5, 'centimeters'],\n  [6, 'meters'],\n  [7, 'kilometers'],\n  [8, 'microinches'],\n  [9, 'mils'],\n  [10, 'yards'],\n  [11, 'angstroms'],\n  [12, 'nanometers'],\n  [13, 'microns'],\n  [14, 'decimeters'],\n  [15, 'dekameters'],\n  [16, 'hectometers'],\n  [17, 'gigameters'],\n  [18, 'astrounits'],\n  [19, 'lightyears'],\n  [20, 'parsecs']\n]\n\nconst BYBLOCK = 0\nconst BYLAYER = 256\n\nmodule.exports = {\n  drawingUnits,\n  BYBLOCK,\n  BYLAYER,\n  getTLA\n}\n", "/*\n * AutoCAD 2017 2018 Color Index (1-255) as RGB + ALPHA colors\n */\n\nconst colorIndex = [\n  [0, 0, 0, 255], // index 0, added for easy maintenance\n  // 1\n  [255, 0, 0, 255],\n  [255, 255, 0, 255],\n  [0, 255, 0, 255],\n  [0, 255, 255, 255],\n  [0, 0, 255, 255],\n  [255, 0, 255, 255],\n  [255, 255, 255, 255],\n  [128, 128, 128, 255],\n  [192, 192, 192, 255],\n  [255, 0, 0, 255],\n  // 11\n  [255, 127, 127, 255],\n  [165, 0, 0, 255],\n  [165, 82, 82, 255],\n  [127, 0, 0, 255],\n  [127, 63, 63, 255],\n  [76, 0, 0, 255],\n  [76, 38, 38, 255],\n  [38, 0, 0, 255],\n  [38, 19, 19, 255],\n  [255, 63, 0, 255],\n  // 21\n  [255, 159, 127, 255],\n  [165, 41, 0, 255],\n  [165, 103, 82, 255],\n  [127, 31, 0, 255],\n  [127, 79, 63, 255],\n  [76, 19, 0, 255],\n  [76, 47, 38, 255],\n  [38, 9, 0, 255],\n  [38, 28, 19, 255],\n  [255, 127, 0, 255],\n  // 31\n  [255, 191, 127, 255],\n  [165, 82, 0, 255],\n  [165, 124, 82, 255],\n  [127, 63, 0, 255],\n  [127, 95, 63, 255],\n  [76, 38, 0, 255],\n  [76, 57, 38, 255],\n  [38, 19, 0, 255],\n  [38, 28, 19, 255],\n  [255, 191, 0, 255],\n  // 41\n  [255, 223, 127, 255],\n  [165, 124, 0, 255],\n  [165, 145, 82, 255],\n  [127, 95, 0, 255],\n  [127, 111, 63, 255],\n  [76, 57, 0, 255],\n  [76, 66, 38, 255],\n  [38, 28, 0, 255],\n  [38, 33, 19, 255],\n  [255, 255, 0, 255],\n  // 51\n  [255, 255, 127, 255],\n  [165, 165, 0, 255],\n  [165, 165, 82, 255],\n  [127, 127, 0, 255],\n  [127, 127, 63, 255],\n  [76, 76, 0, 255],\n  [76, 76, 38, 255],\n  [38, 38, 0, 255],\n  [38, 38, 19, 255],\n  [191, 255, 0, 255],\n  // 61\n  [223, 255, 127, 255],\n  [124, 165, 0, 255],\n  [145, 165, 82, 255],\n  [95, 127, 0, 255],\n  [111, 127, 63, 255],\n  [57, 76, 0, 255],\n  [66, 76, 38, 255],\n  [28, 38, 0, 255],\n  [33, 38, 19, 255],\n  [127, 255, 0, 255],\n  // 71\n  [191, 255, 127, 255],\n  [82, 165, 0, 255],\n  [124, 165, 82, 255],\n  [63, 127, 0, 255],\n  [95, 127, 63, 255],\n  [38, 76, 0, 255],\n  [57, 76, 38, 255],\n  [19, 38, 0, 255],\n  [28, 38, 19, 255],\n  [63, 255, 0, 255],\n  // 81\n  [159, 255, 127, 255],\n  [41, 165, 0, 255],\n  [103, 165, 82, 255],\n  [31, 127, 0, 255],\n  [79, 127, 63, 255],\n  [19, 76, 0, 255],\n  [47, 76, 38, 255],\n  [9, 38, 0, 255],\n  [23, 38, 19, 255],\n  [0, 255, 0, 255],\n  // 91\n  [125, 255, 127, 255],\n  [0, 165, 0, 255],\n  [82, 165, 82, 255],\n  [0, 127, 0, 255],\n  [63, 127, 63, 255],\n  [0, 76, 0, 255],\n  [38, 76, 38, 255],\n  [0, 38, 0, 255],\n  [19, 38, 19, 255],\n  [0, 255, 63, 255],\n  // 101\n  [127, 255, 159, 255],\n  [0, 165, 41, 255],\n  [82, 165, 103, 255],\n  [0, 127, 31, 255],\n  [63, 127, 79, 255],\n  [0, 76, 19, 255],\n  [38, 76, 47, 255],\n  [0, 38, 9, 255],\n  [19, 88, 23, 255],\n  [0, 255, 127, 255],\n  // 111\n  [127, 255, 191, 255],\n  [0, 165, 82, 255],\n  [82, 165, 124, 255],\n  [0, 127, 63, 255],\n  [63, 127, 95, 255],\n  [0, 76, 38, 255],\n  [38, 76, 57, 255],\n  [0, 38, 19, 255],\n  [19, 88, 28, 255],\n  [0, 255, 191, 255],\n  // 121\n  [127, 255, 223, 255],\n  [0, 165, 124, 255],\n  [82, 165, 145, 255],\n  [0, 127, 95, 255],\n  [63, 127, 111, 255],\n  [0, 76, 57, 255],\n  [38, 76, 66, 255],\n  [0, 38, 28, 255],\n  [19, 88, 88, 255],\n  [0, 255, 255, 255],\n  // 131\n  [127, 255, 255, 255],\n  [0, 165, 165, 255],\n  [82, 165, 165, 255],\n  [0, 127, 127, 255],\n  [63, 127, 127, 255],\n  [0, 76, 76, 255],\n  [38, 76, 76, 255],\n  [0, 38, 38, 255],\n  [19, 88, 88, 255],\n  [0, 191, 255, 255],\n  // 141\n  [127, 223, 255, 255],\n  [0, 124, 165, 255],\n  [82, 145, 165, 255],\n  [0, 95, 127, 255],\n  [63, 111, 217, 255],\n  [0, 57, 76, 255],\n  [38, 66, 126, 255],\n  [0, 28, 38, 255],\n  [19, 88, 88, 255],\n  [0, 127, 255, 255],\n  // 151\n  [127, 191, 255, 255],\n  [0, 82, 165, 255],\n  [82, 124, 165, 255],\n  [0, 63, 127, 255],\n  [63, 95, 127, 255],\n  [0, 38, 76, 255],\n  [38, 57, 126, 255],\n  [0, 19, 38, 255],\n  [19, 28, 88, 255],\n  [0, 63, 255, 255],\n  // 161\n  [127, 159, 255, 255],\n  [0, 41, 165, 255],\n  [82, 103, 165, 255],\n  [0, 31, 127, 255],\n  [63, 79, 127, 255],\n  [0, 19, 76, 255],\n  [38, 47, 126, 255],\n  [0, 9, 38, 255],\n  [19, 23, 88, 255],\n  [0, 0, 255, 255],\n  // 171\n  [127, 127, 255, 255],\n  [0, 0, 165, 255],\n  [82, 82, 165, 255],\n  [0, 0, 127, 255],\n  [63, 63, 127, 255],\n  [0, 0, 76, 255],\n  [38, 38, 126, 255],\n  [0, 0, 38, 255],\n  [19, 19, 88, 255],\n  [63, 0, 255, 255],\n  // 181\n  [159, 127, 255, 255],\n  [41, 0, 165, 255],\n  [103, 82, 165, 255],\n  [31, 0, 127, 255],\n  [79, 63, 127, 255],\n  [19, 0, 76, 255],\n  [47, 38, 126, 255],\n  [9, 0, 38, 255],\n  [23, 19, 88, 255],\n  [127, 0, 255, 255],\n  // 191\n  [191, 127, 255, 255],\n  [165, 0, 82, 255],\n  [124, 82, 165, 255],\n  [63, 0, 127, 255],\n  [95, 63, 127, 255],\n  [38, 0, 76, 255],\n  [57, 38, 126, 255],\n  [19, 0, 38, 255],\n  [28, 19, 88, 255],\n  [191, 0, 255, 255],\n  // 201\n  [223, 127, 255, 255],\n  [124, 0, 165, 255],\n  [142, 82, 165, 255],\n  [95, 0, 127, 255],\n  [111, 63, 127, 255],\n  [57, 0, 76, 255],\n  [66, 38, 76, 255],\n  [28, 0, 38, 255],\n  [88, 19, 88, 255],\n  [255, 0, 255, 255],\n  // 211\n  [255, 127, 255, 255],\n  [165, 0, 165, 255],\n  [165, 82, 165, 255],\n  [127, 0, 127, 255],\n  [127, 63, 127, 255],\n  [76, 0, 76, 255],\n  [76, 38, 76, 255],\n  [38, 0, 38, 255],\n  [88, 19, 88, 255],\n  [255, 0, 191, 255],\n  // 221\n  [255, 127, 223, 255],\n  [165, 0, 124, 255],\n  [165, 82, 145, 255],\n  [127, 0, 95, 255],\n  [127, 63, 111, 255],\n  [76, 0, 57, 255],\n  [76, 38, 66, 255],\n  [38, 0, 28, 255],\n  [88, 19, 88, 255],\n  [255, 0, 127, 255],\n  // 231\n  [255, 127, 191, 255],\n  [165, 0, 82, 255],\n  [165, 82, 124, 255],\n  [127, 0, 63, 255],\n  [127, 63, 95, 255],\n  [76, 0, 38, 255],\n  [76, 38, 57, 255],\n  [38, 0, 19, 255],\n  [88, 19, 28, 255],\n  [255, 0, 63, 255],\n  // 241\n  [255, 127, 159, 255],\n  [165, 0, 41, 255],\n  [165, 82, 103, 255],\n  [127, 0, 31, 255],\n  [127, 63, 79, 255],\n  [76, 0, 19, 255],\n  [76, 38, 47, 255],\n  [38, 0, 9, 255],\n  [88, 19, 23, 255],\n  [0, 0, 0, 255],\n  // 251\n  [101, 101, 101, 255],\n  [102, 102, 102, 255],\n  [153, 153, 153, 255],\n  [204, 204, 204, 255],\n  [255, 255, 255, 255]\n]\n\nmodule.exports = colorIndex\n", "/*\n## License\n\nCopyright (c) 2017 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\nThanks to @issacs for the sax js library, and inspiration for this reader\n\n*/\n\n// DXF reader to emit groups of interest to handlers\n\n;(function (dxf) { // wrapper for non-node envs\n  dxf.reader = function (options) { return new DxfReader(options) }\n\n  dxf.STATES = [\n    'start',\n    'end',\n    'error'\n  ]\n\n  /**\n   * Class DxfReader\n   * A class to hold state while reading DXF formatted data.\n   * @param {Object} [options] - options for parsing\n   * @param {Boolean} [options.track=true] - track position for error reporting\n   * @param {Boolean} [options.strict=false] - obey strict DXF specifications\n   * @constructor\n   *\n   * @example\n   * const dxfPath = path.resolve(__dirname, 'circle10.dxf')\n   * let src = fs.readFileSync(dxfPath, 'UTF8')\n   * let reader = dxf.reader({track: true})\n   * // setup state handling\n   * reader.on('error',handleError)\n   * reader.on('start',handleStart)\n   * reader.on('end'  ,handleEnd)\n   * // setup handling for groups of interest, skip the rest\n   * reader.absorb(0,handleEntity)\n   * // start the reader\n   * reader.write(src).close()\n   */\n  function DxfReader (options) {\n    const reader = this\n    reader.options = options || {}\n\n    reader.trackPosition = (reader.options.track !== false)\n    if (reader.trackPosition) {\n      reader.line = reader.column = reader.c = 0\n    }\n  }\n\n  DxfReader.prototype = {\n  // set a handler for the given state\n  // see dxf.STATES above\n    on: function (state, callback) {\n    // verify the state\n    // set the callback\n      const reader = this\n      reader['on' + state] = callback\n    },\n\n    // set a handler for the given group and value\n    absorb: function (group, callback) {\n      if (this.absorbers === undefined) {\n        this.absorbers = new Map()\n      }\n      this.absorbers.set(group, callback)\n    },\n\n    // write the given data into the reader, initiating parsing\n    write: function (data) {\n      const reader = this\n      parse(reader, data)\n      return reader\n    },\n\n    // close and clear all state\n    close: function () {\n      const reader = this\n      reader.isclosed = true\n      return reader\n    }\n  }\n\n  //\n  // emit the start of processing to the onstart handler if any\n  //\n  const emitstart = (reader) => emitstate(reader, 'onstart', reader.data)\n\n  //\n  // emit the group (code and value) to asorbers\n  //\n  const emitgroup = (reader, group, value) => {\n    // console.log(group+\": \"+value)\n    // emit this group to all listeners\n    if (reader.absorbers !== undefined) {\n      const absorber = reader.absorbers.get(group)\n      if (absorber !== undefined) {\n        absorber(reader, group, value)\n      }\n    }\n  }\n\n  //\n  // wrap and emit the given error to the onerror handler if any\n  //\n  const emiterror = (reader, er) => {\n    // closeText(reader)\n    if (reader.trackPosition) {\n      er += `\nLine: ${reader.line}\nColumn: ${reader.column}\nChar: ${reader.c}`\n    }\n    er = new Error(er)\n    reader.error = er\n    return emitstate(reader, 'onerror', er)\n  }\n\n  //\n  // emit the end of processing to the onend handler if any\n  //\n  const emitend = (reader) => emitstate(reader, 'onend', reader.data)\n\n  const emitstate = (reader, state, data) => {\n    const onhandler = state.toString()\n    reader[onhandler] && reader[onhandler](reader, data)\n    return reader\n  }\n\n  //\n  // parse the given data in the context of the given reader\n  //\n  const parse = (reader, data) => {\n  // check reader state\n    if (reader.error) {\n      throw reader.error // throw the last error\n    }\n    if (reader.isclosed) {\n      return emiterror(reader, 'Cannot write after close')\n    }\n\n    emitstart(reader)\n\n    if (data === null) {\n      return emitend(reader)\n    }\n\n    // initial state to initiate parsing\n    reader.group = null\n    reader.value = null\n    reader.error = null\n\n    reader.position = 0\n    reader.line = 0\n    reader.column = 0\n\n    // use or convert the data to String\n    let i = 0\n    let c = ''\n    let l = ''\n    while (reader.error === null) {\n      c = charAt(data, i++)\n      if (!c) {\n        break\n      }\n      if (reader.trackPosition) {\n        reader.position++\n        if (c === '\\n') {\n          reader.line++\n          reader.column = 0\n        } else {\n          reader.column++\n        }\n      }\n      // dxf files are parsed line by line\n      if (c === '\\n') {\n        parseLine(reader, l)\n        l = ''\n      } else {\n        l += c\n      }\n    }\n    // emit state change\n    emitend(reader)\n    return reader\n  }\n\n  /** Parse the given line in the context of the given reader, emitting group value pairs\n   * @param reader {DxfReader} - context DxfReader to use\n   * @param line {String} - line to parse\n   */\n  const parseLine = (reader, line) => {\n    line = line.trim()\n    if (reader.group === null) {\n      setDxfGroup(reader, line)\n      reader.value = null\n    } else {\n      setDxfValue(reader, line)\n    }\n    // handle group and value pairs\n    if (reader.group !== null && reader.value !== null) {\n      // emit events for group and value pairs\n      emitgroup(reader, reader.group, reader.value)\n\n      reader.group = null\n      reader.value = null\n    }\n  }\n\n  /** Parse the given line in the context of the given reader, and update the group\n   * @param reader {DxfReader} - context DxfReader to use\n   * @param line {String} - line to parse\n   */\n  const setDxfGroup = (reader, line) => {\n  // groups are numeric\n    const code = parseInt(line)\n    if (isNaN(code)) {\n      emiterror(reader, 'Invalid group (int)')\n      reader.group = null\n    } else {\n      reader.group = code\n    }\n  }\n\n  /** Parse the given line in the context of the given reader, and update the (group) value\n   * @param reader {DxfReader} - context DxfReader to use\n   * @param line {String} - line to parse\n   */\n  const setDxfValue = (reader, line) => {\n    if (reader.options.strict) {\n      // TODO evaluate the value based on DXF specifications\n      reader.value = line\n    } else {\n      reader.value = line\n    }\n  }\n\n  //\n  // helper function to return expected values\n  //\n  const charAt = (data, i) => {\n    if (data && data.length > i) {\n      return data.charAt(i)\n    }\n    return ''\n  }\n})(typeof exports === 'undefined' ? this.dxf = {} : exports)\n", "/*\n## License\n\nCopyright (c) 2017-2019 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\n*/\n\nconst { BYBLOCK, BYLAYER } = require('./autocad')\n\n//\n// find the layer referenced by the given object\n//\nconst findLayer = (obj, layers) => {\n  const lname = obj.lnam || '0'\n  for (const layer of layers) {\n    if (layer.name === lname) {\n      return layer\n    }\n  }\n  return null\n}\n\n//\n// get the color number of the object, possibly looking at layer\n// returns -1 if a color number was not found\n//\nconst getColorNumber = (obj, layers) => {\n  let cn = obj.cnmb || -1\n  if (cn === BYLAYER) {\n    // use the color number from the layer\n    cn = -1\n    const layer = findLayer(obj, layers)\n    if (layer !== null) {\n      cn = layer.cnmb || -1\n    }\n  } else\n  if (cn === BYBLOCK) {\n    // use the color number from the block\n  }\n  return cn\n}\n\nconst mod = (num, mod) => {\n  const remain = num % mod\n  return Math.floor(remain >= 0 ? remain : remain + mod)\n}\n\n//\n// instantiate color using the given index into the given color index\n// Note: 0 > index <= length of colorindex\nconst getColor = (index, colorindex) => {\n  if (index < 1) { return null }\n\n  index = mod(index, colorindex.length)\n  const color = colorindex[index]\n  const rgba = [color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255]\n  return rgba\n}\n\nmodule.exports = {\n  findLayer,\n  getColor,\n  getColorNumber\n}\n", "/*\n## License\n\nCopyright (c) 2017 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\n*/\nconst { geometries, maths, primitives } = require('@jscad/modeling')\nconst EPS = 1e-5 // FIXME\n\nconst { getColor, getColorNumber } = require('./helpers')\n\n//\n// instantiate the given object (3dface) as a polygon\n//\nconst instantiatePolygon = (obj, layers, options) => {\n  const vertices = []\n  // FIXME: should check global variable to instantiate in the proper orientation\n  vertices.push(maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz))\n  vertices.push(maths.vec3.fromValues(obj.sptx, obj.spty, obj.sptz))\n  vertices.push(maths.vec3.fromValues(obj.tptx, obj.tpty, obj.tptz))\n  if (obj.fptx) {\n    let pushit = false\n    if (obj.tptx !== obj.fptx) { pushit = true }\n    if (obj.tpty !== obj.fpty) { pushit = true }\n    if (obj.tptz !== obj.fptz) { pushit = true }\n    if (pushit) {\n      vertices.push(maths.vec3.fromValues(obj.fptx, obj.fpty, obj.fptz))\n    }\n  }\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  const polygon = geometries.poly3.create(vertices)\n  if (color) polygon.color = color\n  return polygon\n}\n\n//\n// instantiate the given object (line) as a 2D line or a 3D line\n//\nconst instantiateLine = (obj, layers, options) => {\n  // console.log('***** instantiateLine',obj)\n  if (obj.pptz === obj.sptz && obj.pptz === 0) {\n    const p1 = maths.vec2.fromValues(obj.pptx, obj.ppty)\n    const p2 = maths.vec2.fromValues(obj.sptx, obj.spty)\n    return primitives.line([p1, p2])\n  }\n\n  const p1 = maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz)\n  const p2 = maths.vec3.fromValues(obj.sptx, obj.spty, obj.sptz)\n  // FIXME what should this really create?\n  return primitives.line([p1, p2])\n}\n\n//\n// instantiate the give object as 2D Vector or 3D Vector wrapped as an object\n//\nconst instantiateVector = (obj) => {\n  const d3line = parseInt('00000000000100000', 2)\n  const d3mesh = parseInt('00000000001000000', 2)\n  const d3face = parseInt('00000000010000000', 2)\n\n  const flags = obj.lflg\n  const vtype = {}\n  if ((flags & d3line) === d3line) {\n    vtype.vec = maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz)\n  } else\n  if ((flags & d3mesh) === d3mesh) {\n    vtype.vec = maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz)\n  } else\n  if ((flags & d3face) === d3face) {\n    vtype.vec = maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz)\n    // pass on face indexes\n    vtype.fvia = obj.fvia\n    vtype.fvib = obj.fvib\n    vtype.fvic = obj.fvic\n    vtype.fvid = obj.fvid\n  } else {\n    vtype.vec = maths.vec2.fromValues(obj.pptx, obj.ppty)\n    vtype.bulg = obj.bulg // for rendering curved sections\n  }\n  return vtype\n}\n\n//\n// append a section to the given path\n//\nconst addSection = (path, x1, y1, bulg) => {\n  if (bulg === 0) {\n  // add straight line to the end of the path\n    path = geometries.path2.appendPoints([[x1, y1]], path)\n  } else {\n  // add arc to the end of the path\n    const points = geometries.path2.toPoints(path)\n    const prev = points[points.length - 1]\n    const curr = maths.vec2.fromValues(x1, y1)\n    const u = maths.vec2.distance(prev, curr)\n    const r = u * ((1 + Math.pow(bulg, 2)) / (4 * bulg))\n    const clockwise = (bulg < 0)\n    const large = false // FIXME how to determine?\n    const d = Math.atan(bulg) * 4\n    // FIXME; how to determine resolution\n    const res = 16\n    path = geometries.path2.appendArc({ endpoint: [x1, y1], radius: [r, r], xaxisrotation: d, clockwise: clockwise, large: large, segments: res }, path)\n  }\n  return path\n}\n\n//\n// instantiate the given object (lwpolyline) into a 2D path\n//\nconst instantiatePath2D = (obj, layers, options) => {\n  // console.log('***** instantiatePath2D',obj)\n  const closed = parseInt('00000000000000001', 2)\n\n  // expected values\n  const vlen = obj.vlen\n  const pptxs = obj.pptxs\n  const pptys = obj.pptys\n  const bulgs = obj.bulgs\n  const flags = obj.lflg\n\n  // conversion\n  let path = geometries.path2.create()\n  const isclosed = ((flags & closed) === closed)\n  if (vlen === pptxs.length && vlen === pptys.length && vlen === bulgs.length) {\n    pptxs.forEach((item, index, array) => {\n      let bulg = 0\n      if (index > 0) {\n        bulg = bulgs[index - 1] // apply the previous bulg\n      }\n      path = addSection(path, pptxs[index], pptys[index], bulg)\n    })\n  } else {\n  // FIXME flag this DXF error\n    return path\n  }\n  if (isclosed && (!path.isClosed)) {\n  // apply the last section between last and first points\n    path = addSection(path, pptxs[0], pptys[0], bulgs[vlen - 1])\n    path = geometries.path2.close(path)\n    // FIXME add optional to create 2D geometry from the path\n  }\n  return path\n}\n\n//\n// instantiate the given object (arc) into 2D path (or extruded to 3D)\n//\nconst instantiateArc = (obj, layers, options) => {\n  // expected values\n  const lthk = obj.lthk\n  const pptx = obj.pptx\n  const ppty = obj.ppty\n  // const pptz = obj.pptz\n  const swid = obj.swid\n  let ang0 = obj.ang0 // start angle\n  ang0 = ang0 * 0.017453292519943295 // radians\n  let ang1 = obj.ang1 // end angle\n  ang1 = ang1 * 0.017453292519943295 // radians\n  // FIXME need to determine resolution from object/layer/variables\n  const res = 16\n\n  // conversion\n  if (lthk === 0.0) {\n    // convert to 2D object\n    return primitives.arc({ center: [pptx, ppty], radius: swid, startAngle: ang0, endAngle: ang1, segments: res })\n  }\n  // FIXME how to represent 3D arc?\n  return primitives.arc({ center: [pptx, ppty], radius: swid, startAngle: ang0, endAngle: ang1, segments: res })\n}\n\n//\n// instantiate the given object (circle) into 2D circle (or extrude to 3D)\n//\nconst instantiateCircle = (obj, layers, options) => {\n  // expected values\n  const lthk = obj.lthk\n  const pptx = obj.pptx\n  const ppty = obj.ppty\n  // let pptz = obj.pptz\n  const swid = obj.swid\n\n  // conversion\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n  // FIXME need to determine resolution from object/layer/variables\n  const res = 16\n\n  // convert to 2D object\n  if (lthk === 0.0) {\n    const cag = primitives.circle({ center: [pptx, ppty], radius: swid, segments: res })\n    if (color) cag.color = color\n    return cag\n  }\n  // convert to 3D object\n  const cag = primitives.circle({ center: [pptx, ppty], radius: swid, segments: res })\n  const csg = cag.extrude({ offset: [0, 0, lthk] })\n  // FIXME need to use 210/220/230 for direction of extrusion\n  if (color) csg.color = color\n  return csg\n}\n\n//\n// instantiate the give object (ellipse) into 2D ellipse (or extrude to 3D)\n//\nconst instantiateEllipse = (obj, layers, options) => {\n  // expected values\n  const pptx = obj.pptx // center point\n  const ppty = obj.ppty\n  const pptz = obj.pptz\n  const sptx = obj.sptx // MAJOR axis point (about center point)\n  const spty = obj.spty\n  const sptz = obj.sptz\n  const swid = obj.swid // Ratio of minor axis to major axis\n  // FIXME need to determine resolution from object/layer/variables\n  const res = 16\n\n  // convert to 2D object\n  if (pptz === 0.0 && sptz === 0.0) {\n    const center = maths.vec2.fromValues(0, 0)\n    const mjaxis = maths.vec2.fromValues(sptx, spty)\n    const rx = maths.vec2.distance(center, mjaxis)\n    const ry = rx * swid\n    let angle = Math.atan2(spty, sptx) * 180 / Math.PI\n    if (angle < EPS) angle = 0\n    angle = angle * 0.017453292519943295 // radians\n\n    // FIXME add start and end angle when supported\n    const cag = primitives.ellipse({ center: [0, 0], radius: [rx, ry], segments: res })\n    const matrix = maths.mat4.fromZRotation(maths.mat4.create(), angle)\n    maths.mat4.multiply(matrix, matrix, maths.mat4.fromTranslation(maths.mat4.create(), [pptx, ppty, 0]))\n    return geometries.geom2.transform(matrix, cag)\n  }\n  // convert to 3D object\n}\n\nconst instantiateFaces = (fvals) => {\n  const faces = []\n  let vi = 0\n  while (vi < fvals.length) {\n    let fi = fvals[vi++]\n    const face = []\n    while (fi > 0) {\n      face.push(fvals[vi++])\n      fi--\n    }\n    faces.push(face)\n  }\n  return faces\n}\n\nconst instantiatePoints = (pptxs, pptys, pptzs) => {\n  const points = []\n  let vi = 0\n  while (vi < pptxs.length) {\n    const x = pptxs[vi]\n    const y = pptys[vi]\n    const z = pptzs[vi]\n    points.push([x, y, z])\n    vi++\n  }\n  return points\n}\n\n//\n// instantiate the given object (mesh) into a 3D geometry\n//\n// Note: See Face-Vertex meshes on Wikipedia\n//\nconst instantiateMesh = (obj, layers, options) => {\n  // expected values\n  const vlen = obj.vlen\n  const pptxs = obj.pptxs // vertices\n  const pptys = obj.pptys\n  const pptzs = obj.pptzs\n\n  const flen = obj.flen\n  const fvals = obj.fvals // faces\n\n  // conversion\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  const polygons = []\n  if (vlen === pptxs.length && vlen === pptys.length && vlen === pptzs.length) {\n    if (flen === fvals.length) {\n      const faces = instantiateFaces(fvals)\n      const points = instantiatePoints(pptxs, pptys, pptzs)\n\n      let fi = 0\n      while (fi < faces.length) {\n        const face = faces[fi]\n        let vertices = []\n        let vi = 0\n        while (vi < face.length) {\n          const pi = face[vi]\n          const vertex = maths.vec3.clone(points[pi])\n          vertices.push(vertex)\n          vi++\n        }\n        if (options.dxf.angdir === 1) {\n          vertices = vertices.reverse()\n        }\n        // FIXME how to correct bad normals?\n\n        const poly = geometries.poly3.create(vertices)\n        if (color) poly.color = color\n        polygons.push(poly)\n\n        fi++\n      }\n    } else {\n      // invalid flen\n    }\n  } else {\n    // invalid vlen\n  }\n  return geometries.geom3.create(polygons)\n}\n\n// works for both POLYLINE\nconst getPolyType = (obj) => {\n  const closedM = parseInt('00000000000000001', 2)\n  const d3line = parseInt('00000000000001000', 2)\n  const d3mesh = parseInt('00000000000010000', 2)\n  const closedN = parseInt('00000000000100000', 2)\n  const d3face = parseInt('00000000001000000', 2)\n\n  const flags = obj.lflg\n  let ptype = null\n  if ((flags & d3line) === d3line) {\n    // const isclosed = ((flags & closedM) === closedM)\n    ptype = null // FIXME what to do?\n  } else\n  if ((flags & d3mesh) === d3mesh) {\n    ptype = geometries.geom3.create()\n    ptype.closedM = ((flags & closedM) === closedM)\n    ptype.closedN = ((flags & closedN) === closedN)\n  } else\n  if ((flags & d3face) === d3face) {\n    ptype = geometries.geom3.create()\n    ptype.closedM = ((flags & closedM) === closedM)\n    ptype.closedN = ((flags & closedN) === closedN)\n  } else {\n    ptype = geometries.path2.create()\n    ptype.closedM = ((flags & closedM) === closedM)\n  }\n  if ('cnmb' in obj) { ptype.cnmb = obj.cnmb }\n  return ptype\n}\n\n//\n// complete a complex object from the given base object and parts\n// - a series of 3dfaces => polygons => 3D geometry\n// - a series of vertex => vectors => 2D geometry\n//\nconst completeCurrent = (objects, baseobj, polygons, vectors, options) => {\n  if (geometries.path2.isA(baseobj)) {\n    // console.log('##### completing 2D geometry')\n    const points = vectors.map((vector) => vector.vec)\n    // FIXME add color support\n    objects.push(geometries.path2.fromPoints({ closed: baseobj.closed }, points))\n  }\n  if (geometries.geom3.isA(baseobj)) {\n    // console.log('##### completing 3D geometry')\n    // FIXME add color support\n    objects.push(geometries.geom3.create(polygons))\n  }\n  return null\n}\n\nconst instantiateAsciiDxf = (reader, options) => {\n  // console.log('**************************************************')\n  // console.log(JSON.stringify(reader.objstack));\n  // console.log('**************************************************')\n\n  const layers = [] // list of layers with various information like color\n  let current = null // the object being created\n  const polygons = [] // the list of 3D polygons\n  const objects = [] // the list of objects instantiated\n  const vectors = [] // the list of vectors for paths or meshes\n\n  let p = null\n  for (const obj of reader.objstack) {\n    p = null\n\n    if (!('type' in obj)) {\n      // console.log('##### skip')\n      continue\n    }\n    // console.log(JSON.stringify(obj));\n\n    switch (obj.type) {\n    // control objects\n      case 'dxf':\n        break\n      case 'layer':\n        // console.log('##### layer')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        layers.push(obj)\n        break\n      case 'variable':\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        break\n\n      // 3D entities\n      case '3dface':\n        // console.log('##### 3dface')\n        p = instantiatePolygon(obj, layers, options)\n        if (current === null) {\n          // console.log('##### start of 3dfaces')\n          current = geometries.geom3.create()\n        }\n        break\n      case 'mesh':\n        // console.log('##### mesh')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiateMesh(obj, layers, options))\n        break\n\n      // 2D or 3D entities\n      case 'arc':\n        // console.log('##### arc')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiateArc(obj, layers, options))\n        break\n      case 'circle':\n        // console.log('##### circle')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiateCircle(obj, layers, options))\n        break\n      case 'ellipse':\n        // console.log('##### ellipse')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiateEllipse(obj, layers, options))\n        break\n      case 'line':\n        // console.log('##### line')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiateLine(obj, layers, options))\n        break\n      case 'polyline':\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        if (current === null) {\n          // console.log('##### start of polyline')\n          current = getPolyType(obj)\n        }\n        break\n      case 'vertex':\n        // console.log('##### vertex')\n        p = instantiateVector(obj)\n        break\n      case 'seqend':\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        break\n\n      // 2D entities\n      case 'lwpolyline':\n        // console.log('##### lwpolyline')\n        current = completeCurrent(objects, current, polygons, vectors, options)\n        objects.push(instantiatePath2D(obj, layers, options))\n        break\n\n      default:\n        // console.log('##### ERROR')\n        // console.log(obj.type)\n        break\n    }\n    // accumlate polygons if necessary\n    if (geometries.poly3.isA(p)) {\n      polygons.push(p)\n    }\n    // accumlate vectors if necessary\n    if (p && 'vec' in p && p.vec.length === 3) {\n      vectors.push(p)\n    }\n    if (p && 'vec' in p && p.vec.length === 2) {\n      vectors.push(p)\n    }\n  }\n  // instantiate the last object if necessary\n  current = completeCurrent(objects, current, polygons, vectors, options)\n\n  // debug output\n  // console.log('**************************************************')\n  // objects.forEach(\n  //   (e) => {\n  //     console.log(JSON.stringify(e));\n  //   }\n  // );\n  // console.log('**************************************************')\n  return objects\n}\n\nmodule.exports = {\n  instantiatePolygon,\n  instantiateVector,\n  instantiateAsciiDxf\n}\n", "/*\n## License\n\nCopyright (c) 2017-2019 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\n*/\nconst { maths, geometries } = require('@jscad/modeling')\n\nconst { instantiatePolygon, instantiateVector } = require('./instantiate')\n\nconst { findLayer, getColor, getColorNumber } = require('./helpers')\n\n//\n// translate the give 2D vector to JSCAD script\n//\nconst translateVector2D = (vector) => {\n  const script = `${vector[0]},${vector[1]}`\n  return script\n}\n\n//\n// translate the give 3D vector to JSCAD script\n//\nconst translateVector3D = (vector) => {\n  const script = `${vector[0]},${vector[1]},${vector[2]}`\n  return script\n}\n\n//\n// translate the given polygon into JSCAD script\n//\nconst translatePolygon = (polygon) => {\n  const vertices = geometries.poly3.toPoints(polygon)\n  let script = 'createPolygon(['\n  vertices.forEach((vertice) => {\n    script += `[${translateVector3D(vertice)}],`\n  })\n  script += `],${translateColor(polygon)})`\n  return script\n}\n\n//\n// translate the given color attribute of the given polygon to JSCAD script\n//\nconst translateColor = (polygon) => {\n  let script = 'null'\n  if ('color' in polygon) {\n    const rgb = polygon.color\n    script = `[${rgb[0]},${rgb[1]},${rgb[2]},${rgb[3]}]`\n  }\n  return script\n}\n\n//\n// translate the given DXF object (line) into 2D or 3D line\n//\nconst translateLine = (obj, layers, options) => {\n  const name = obj.name\n\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  let script = ''\n  if (!obj.pptz || (obj.pptz === obj.sptz && obj.pptz === 0)) {\n    const p1 = maths.vec2.fromValues(obj.pptx, obj.ppty)\n    const p2 = maths.vec2.fromValues(obj.sptx, obj.spty)\n    script = `  let ${name} = primitives.line([[${translateVector2D(p1)}],[${translateVector2D(p2)}]])\\n`\n  } else {\n    const p1 = maths.vec3.fromValues(obj.pptx, obj.ppty, obj.pptz)\n    const p2 = maths.vec3.fromValues(obj.sptx, obj.spty, obj.sptz)\n    script = `  let ${name} = primitives.line([[${translateVector3D(p1)}],[${translateVector3D(p2)}]])\\n`\n  }\n  if (color) {\n    script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n  }\n  obj.script = script\n  addToLayer(obj, layers)\n}\n\n//\n// append a Path section to the given script\n//\nconst translateSection = (name, x1, y1, bulg, px, py) => {\n  // console.log('translateSection',x1,y1,bulg,px,py)\n  if (bulg === 0) {\n  // add straight line to the end of the path\n    return `geometries.path2.appendPoints([[${x1},${y1}]], ${name})\n`\n  }\n\n  // add arc to the end of the path\n  const prev = maths.vec2.fromValues(px, py)\n  const curr = maths.vec2.fromValues(x1, y1)\n  const u = maths.vec2.distance(prev, curr)\n  const r = u * ((1 + Math.pow(bulg, 2)) / (4 * bulg))\n  const clockwise = (bulg < 0)\n  const large = false // FIXME how to determine?\n  const d = Math.atan(bulg) * 4\n  // FIXME need to determine segments from object/layer/variables\n  const res = 16\n  return `geometries.path2.appendArc({endpoint: [${x1},${y1}],radius: [${r},${r}],xaxisrotation: ${d},clockwise: ${clockwise},large: ${large},segments: ${res}}, ${name})\n`\n}\n\n//\n// translate the given obj (lwpolyline) into a 2D path\n//\nconst translatePath2D = (obj, layers, options) => {\n  const closed = parseInt('00000000000000001', 2)\n\n  // expected values\n  const vlen = obj.vlen\n  const pptxs = obj.pptxs\n  const pptys = obj.pptys\n  const bulgs = obj.bulgs\n  const flags = obj.lflg\n  const name = obj.name\n\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  // translation\n  let script = `  let ${name} = geometries.path2.create()\\n`\n  const isclosed = ((flags & closed) === closed)\n  if (vlen === pptxs.length && vlen === pptys.length && vlen === bulgs.length) {\n    // add initial point\n    script += `  ${name} = geometries.path2.appendPoints([[${pptxs[0]}, ${pptys[0]}]], ${name})\\n`\n    // add sections\n    for (let i = 0; i < pptxs.length; i++) {\n      const j = (i + 1) % pptxs.length\n      const cx = pptxs[j]\n      const cy = pptys[j]\n      const px = pptxs[i]\n      const py = pptys[i]\n      const bulg = bulgs[i] // apply the previous bulg\n      if (j !== 0) {\n        script += `  ${name} = ${translateSection(name, cx, cy, bulg, px, py)}`\n      } else {\n        if (bulg !== 0) {\n          // apply the last bulge\n          script += `  ${name} = ${translateSection(name, cx, cy, bulg, px, py)}`\n        }\n      }\n    }\n  } else {\n  // FIXME flag this DXF error\n    return\n  }\n  if (isclosed) {\n    script += `  ${name} = geometries.path2.close(${name})\\n`\n  } else {\n    script += '\\n'\n  }\n  if (color) {\n    script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n  }\n  obj.script = script\n  addToLayer(obj, layers)\n}\n\n//\n// translate the given object (arc) into 2D path or 3D path??\n//\nconst translateArc = (obj, layers, options) => {\n// expected values\n  const lthk = obj.lthk\n  const pptx = obj.pptx\n  const ppty = obj.ppty\n  // const pptz = obj.pptz\n  const swid = obj.swid\n  let ang0 = obj.ang0 // start angle (degrees)\n  let ang1 = obj.ang1 // end angle (degrees)\n  const name = obj.name\n\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  // convert angles to radians\n  ang0 *= 0.017453292519943295\n  ang1 *= 0.017453292519943295\n\n  // FIXME need to determine segements from object/layer/variables\n  const res = 16\n\n  // convert to 2D object\n  if (lthk === 0.0) {\n    let script = `  let ${name} = primitives.arc({center: [${pptx}, ${ppty}], radius: ${swid}, startAngle: ${ang0}, endAngle: ${ang1}, segements: ${res}})\\n`\n    if (color) {\n      script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n    }\n    obj.script = script\n    addToLayer(obj, layers)\n    return\n  }\n  // FIXME how to represent 3D arc?\n  let script = `  let ${name} = primitives.arc({center: [${pptx}, ${ppty}], radius: ${swid}, startAngle: ${ang0}, endAngle: ${ang1}, segements: ${res}})\\n`\n  if (color) {\n    script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n  }\n  obj.script = script\n  addToLayer(obj, layers)\n}\n\n//\n// translate the given obj (circle) into a 2D circle (or extrude to 3D)\n//\nconst translateCircle = (obj, layers, options) => {\n// expected values\n  const lthk = obj.lthk\n  const pptx = obj.pptx\n  const ppty = obj.ppty\n  // const pptz = obj.pptz\n  const swid = obj.swid\n  const name = obj.name\n\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  // FIXME need to determine segments from object/layer/variables\n  const res = 16\n\n  // convert to 2D object\n  if (lthk === 0.0) {\n    let script = `  let ${name} = primitives.circle({center: [${pptx}, ${ppty}], radius: ${swid}, segments: ${res}})\\n`\n    if (color) {\n      script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n    }\n    obj.script = script\n    addToLayer(obj, layers)\n    return\n  }\n\n  // convert to 3D object\n  let script = `  let ${name} = primitives.circle({center: [${pptx}, ${ppty}], radius: ${swid}, segments: ${res}}).extrude({offset: [0,0,${lthk}]}))\\n`\n  if (color) {\n    script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n  }\n\n  // FIXME need to use 210/220/230 for direction of rotation\n  obj.script = script\n  addToLayer(obj, layers)\n}\n\n//\n// translate the given object (ellipse) into a 2D ellipse (or extrude to 3D)\n//\nconst translateEllipse = (obj, layers, options) => {\n// expected values\n  const pptx = obj.pptx // center point\n  const ppty = obj.ppty\n  const pptz = obj.pptz\n  const sptx = obj.sptx // MAJOR axis point (relative to center point)\n  const spty = obj.spty\n  const sptz = obj.sptz\n  const swid = obj.swid // Ratio of minor axis to major axis\n  const name = obj.name\n\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  // FIXME need to determine segments from object/layer/variables\n  const res = 16\n\n  // convert to 2D object\n  if (pptz === 0.0 && sptz === 0.0) {\n    const center = maths.vec2.fromValues(0, 0)\n    const mjaxis = maths.vec2.fromValues(sptx, spty)\n    const rx = maths.vec2.distance(center, mjaxis)\n    const ry = rx * swid\n    const angle = Math.atan2(spty, sptx) // * 180 / Math.PI\n    // FIXME add start and end angle when supported\n\n    let script = `  let ${name} = primitives.ellipse({center: [0, 0, 0], radius: [${rx}, ${ry}], segments: ${res}})\n  let ${name}matrix = maths.mat4.multiply(maths.mat4.create(), maths.mat4.fromTranslation(maths.mat4.create(), [${pptx}, ${ppty}, 0]), maths.mat4.fromZRotation(maths.mat4.create(), ${angle}))\n  ${name} = geometries.geom2.transform(${name}matrix, ${name})\n`\n    if (color) {\n      script += `  ${name} = colors.colorize([${color[0]}, ${color[1]}, ${color[2]}, 1], ${name})\\n`\n    }\n    obj.script = script\n    addToLayer(obj, layers)\n  }\n  // convert to 3D object\n}\n\nconst instantiateFaces = (fvals) => {\n  const faces = []\n  let vi = 0\n  while (vi < fvals.length) {\n    let fi = fvals[vi++]\n    const face = []\n    while (fi > 0) {\n      face.push(fvals[vi++])\n      fi--\n    }\n    faces.push(face)\n  }\n  return faces\n}\n\nconst instantiatePoints = (pptxs, pptys, pptzs) => {\n  const points = []\n  let vi = 0\n  while (vi < pptxs.length) {\n    const x = pptxs[vi]\n    const y = pptys[vi]\n    const z = pptzs[vi]\n    points.push([x, y, z])\n    vi++\n  }\n  return points\n}\n\n//\n// instantiate the MESH as a 3D geometry, consisting of the polygons given\n//\n// Note: See Face-Vertex meshes on Wikipedia\n//\nconst translateMesh = (obj, layers, options) => {\n// expected values\n  const vlen = obj.vlen\n  const pptxs = obj.pptxs // vertices\n  const pptys = obj.pptys\n  const pptzs = obj.pptzs\n\n  const flen = obj.flen\n  const fvals = obj.fvals // faces\n\n  // conversion\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  const polygons = []\n  if (vlen === pptxs.length && vlen === pptys.length && vlen === pptzs.length) {\n    if (flen === fvals.length) {\n      const faces = instantiateFaces(fvals)\n      const points = instantiatePoints(pptxs, pptys, pptzs)\n\n      let fi = 0\n      while (fi < faces.length) {\n        const face = faces[fi]\n        let vertices = []\n        let vi = 0\n        while (vi < face.length) {\n          const pi = face[vi]\n          const vector = maths.vec3.clone(points[pi])\n          vertices.push(vector)\n          vi++\n        }\n        if (options.dxf.angdir === 1) {\n          vertices = vertices.reverse()\n        }\n        // FIXME how to correct bad normals?\n\n        const poly = geometries.poly3.create(vertices)\n        if (color) poly.color = color\n        polygons.push(poly)\n\n        fi++\n      }\n    } else {\n      console.warn('invalid mesh: faces')\n    }\n  } else {\n    console.warn('invalid mesh: vertices')\n  }\n  // convert the polygons into a script\n  const name = obj.name\n  let script = `  const ${name}_polygons = [\n`\n  for (const polygon of polygons) {\n    script += '    ' + translatePolygon(polygon) + ',\\n'\n  }\n  script += `  ]\n  let ${name} = geometries.geom3.create(${name}_polygons)\n`\n  obj.script = script\n  addToLayer(obj, layers)\n  return null\n}\n\nconst findLayer0 = (layers) => {\n  for (const layer of layers) {\n    if (layer.name === '0') {\n      return layer\n    }\n  }\n  // this DXF did not specify so create\n  const layer = { type: 'layer' }\n  layer.lnam = 'layer0'\n  layer.name = '0'\n  layer.lscl = 1.0\n  layer.visb = 0\n  layer.spac = 0\n  layer.objects = []\n\n  layers.push(layer)\n  return layer\n}\n\nconst addToLayer = (obj, layers) => {\n  let layer = findLayer(obj, layers)\n  if (layer === null) {\n    // hmmm... add to layer '0'\n    layer = findLayer0(layers)\n  }\n  if (!('objects' in layer)) {\n    layer.objects = []\n  }\n  layer.objects.push(obj)\n}\n\n//\n// get the (internal) object type from the given object\n//\n// This assumes the given object is a POLYLINE.\n// DXF POLYLINE entities are over-loaded objects with various shapes.\n// - 2D line, with following 2D VERTEX entities\n// - 3D line, with following 3D VERTEX entities\n// - 3D polymesh, with following 3D VERTEX entities\n// - 3D polyface, with following 3D VERTEX entities\n//\nconst getPolyType = (obj) => {\n  const closedM = parseInt('00000000000000001', 2)\n  const d3line = parseInt('00000000000001000', 2)\n  const d3mesh = parseInt('00000000000010000', 2)\n  const closedN = parseInt('00000000000100000', 2)\n  const d3face = parseInt('00000000001000000', 2)\n\n  const flags = obj.lflg\n  let ptype = null\n  if ((flags & d3line) === d3line) {\n    const isclosed = ((flags & closedM) === closedM)\n    ptype = { type: '3dline', isclosed: isclosed }\n  } else\n  if ((flags & d3mesh) === d3mesh) {\n    ptype = { type: '3dpolymesh' }\n    // need the mesh shape for interpretation\n    ptype.fvia = obj.fvia\n    ptype.fvib = obj.fvib\n    ptype.closedM = ((flags & closedM) === closedM)\n    ptype.closedN = ((flags & closedN) === closedN)\n  } else\n  if ((flags & d3face) === d3face) {\n    ptype = { type: '3dpolyfaces' }\n    // need the vertex and face counts for interpretation\n    ptype.fvia = obj.fvia\n    ptype.fvib = obj.fvib\n  } else {\n    const isclosed = ((flags & closedM) === closedM)\n    ptype = { type: '2dline', isclosed: isclosed }\n  }\n  if ('cnmb' in obj) { ptype.cnmb = obj.cnmb }\n  if ('lnam' in obj) { ptype.lnam = obj.lnam }\n  return ptype\n}\n\n//\n// Instantiate the facets of the POLYLINE poly-mesh as a set of polygons.\n//\n// DXF POLYLINE entities can contain a mesh defined by a MxN set of vertices.\n// The mesh is defined in terms of a matrix of M and N vertices, like a grid consisting of columns and rows.\n// M and N specify the column and row position, respectively, of any given vertex.\n// The mesh is constructed row by row; M rows which contain N vertexes.\n//\nconst instantiateFacets = (meshM, meshN, parts, color, options) => {\n  // console.log('##### instantiateFacets',meshM,meshN,parts.length)\n\n  const getVector = (x, y) => {\n    const n = (((x - 1) * meshN) + (y - 1))\n    const part = parts[n]\n    return part.vec\n  }\n\n  const facets = []\n\n  // sanity check\n  const fcount = meshM * meshN\n  if (fcount !== parts.length) {\n    return facets\n  }\n  if (meshM < 2 | meshN < 2) {\n    return facets\n  }\n  // instantiate VALID polygons\n  let i = 1\n  while (i < meshM) {\n    let j = 1\n    while (j < meshN) {\n      const v0 = getVector(i, j)\n      const v1 = getVector(i + 1, j)\n      const v2 = getVector(i + 1, j + 1)\n      const v3 = getVector(i, j + 1) // CCW vectors\n      let facet = [v0, v1, v2, v3]\n      if (options.dxf.angdir === 1) {\n        facet = facet.reverse()\n      }\n      const polygon = geometries.poly3.create(facet)\n      const plane = geometries.poly3.plane(polygon)\n      if (Number.isFinite(plane[3])) {\n        if (color) polygon.color = color\n        facets.push(polygon)\n      }\n      j++\n    }\n    i++\n  }\n  return facets\n}\n\n//\n// Instantiate the faces of the POLYLINE face-mesh as a set of polygons.\n//\n// DXF POLYLINE entities can contain a face mesh defined by a series of vertices.\n// The first part of the series are the (meshM) vertices.\n// The second part of the series are the (meshN) faces.\n// Each face of the mesh is defined by the indexes provided by the face (group codes 71-74).\n// The first zero(0) index marks the end of the vertices.\n// Negative indexes indicate invisible edges (not implemented).\n//\nconst instantiatePolyFaces = (meshM, meshN, parts, color, options) => {\n  // console.log('##### instantiatePolyFaces',meshM,meshN,parts.length)\n  const faces = []\n\n  // sanity check\n  if ((meshM + meshN) !== parts.length) {\n    return faces\n  }\n  // conversion\n  let i = meshM // skip to the faces\n  while (i < parts.length) {\n    let part = parts[i]\n    const indexes = [Math.abs(part.fvia), Math.abs(part.fvib), Math.abs(part.fvic), Math.abs(part.fvid)]\n    let vertices = []\n    if (indexes[0] > 0) {\n      part = parts[indexes[0] - 1]\n      vertices.push(part.vec)\n      if (indexes[1] > 0) {\n        part = parts[indexes[1] - 1]\n        vertices.push(part.vec)\n        if (indexes[2] > 0) {\n          part = parts[indexes[2] - 1]\n          vertices.push(part.vec)\n          if (indexes[3] > 0) {\n            part = parts[indexes[3] - 1]\n            vertices.push(part.vec)\n          }\n        }\n      }\n    }\n    // only use valid face definitions\n    if (vertices.length > 2) {\n      // reverse the order of vertices if necessary\n      if (options.dxf.angdir === 1) {\n        vertices = vertices.reverse()\n      }\n      const polygon = geometries.poly3.create(vertices)\n      faces.push(polygon)\n    }\n    i++\n  }\n  return faces\n}\n\n//\n// Translate a 2D line from the given base object and parts.\n// The translation uses the parts as 2D vertexes from POLYLINE.\n//\nconst translateAs2Dline = (obj, layers, parts, options) => {\n  // console.log('##### completing Path2D using vectors')\n  // convert the parts to a series of X/Y/BULG lists\n  obj.vlen = parts.length\n  obj.pptxs = []\n  obj.pptys = []\n  obj.bulgs = []\n  for (const part of parts) {\n    obj.pptxs.push(part.vec[0])\n    obj.pptys.push(part.vec[1])\n    obj.bulgs.push(part.bulg)\n  }\n  if (obj.isclosed) {\n    obj.lflg = parseInt('00000000000000001', 2)\n  } else {\n    obj.lflg = 0\n  }\n  translatePath2D(obj, layers, options)\n  return null\n}\n\n//\n// translate a complex object from the given base object and parts\n// - 3D solid a series of polygons => 3D geometry\n// - 2D line plus a series of 2D vectors => 2D path\n// - 3D solid plus a series of 3D vectors => 3D geometry\n//\nconst translateCurrent = (obj, layers, parts, options) => {\n  if (obj === null) return null\n  // console.log('***** translateCurrent',obj.type)\n\n  const type = obj.type\n  const cn = getColorNumber(obj, layers)\n  const color = getColor(cn, options.colorindex)\n\n  // console.log('##### translating Current as '+type)\n\n  if (type === '2dline') {\n    return translateAs2Dline(obj, layers, parts, options)\n  }\n\n  if (type === '3dline') {\n    // FIXME what to do?\n    return null\n  }\n\n  if (type === '3dpolymesh') {\n    const m = obj.fvia\n    const n = obj.fvib\n    // console.log('##### m: '+m+' n: '+n)\n    const facets = instantiateFacets(m, n, parts, color, options)\n    parts = facets\n    // fall through, translating the parts (polygons)\n  }\n\n  if (type === '3dpolyfaces') {\n    if ('fvia' in obj) {\n      const m = obj.fvia\n      const n = obj.fvib\n      const faces = instantiatePolyFaces(m, n, parts, color, options)\n      parts = faces\n      // fall through, translating the parts (polygons)\n    }\n  }\n  // convert the polygons into a script\n  const name = obj.name\n  let script = `  const ${name}_polygons = [\n`\n  for (const polygon of parts) {\n    script += '    ' + translatePolygon(polygon) + ',\\n'\n  }\n  script += `  ]\n  let ${name} = geometries.geom3.create(${name}_polygons)\n`\n  if (color) {\n    script += `  ${name}.color = [${color}]\n`\n  }\n  obj.script = script\n  addToLayer(obj, layers)\n  return null\n}\n\n//\n// translate the given layer into a wrapper function for the previous translated objects\n//\nconst translateLayer = (layer) => {\n  const name = layer.lnam || 'Unknown'\n\n  let script = `function ${name}() {\n`\n  for (const object of layer.objects) {\n    script += object.script\n  }\n  script += '  return ['\n  for (const object of layer.objects) {\n    script += object.name + ','\n  }\n  script += ']\\n}\\n'\n  return script\n}\n\nconst saveVariable = (obj, options) => {\n  const name = obj.name || 'Unknown'\n\n  switch (name) {\n    case '$ANGDIR':\n      if ('lflg' in obj) {\n        options.dxf.angdir = obj.lflg\n      }\n      break\n\n    default:\n      break\n  }\n}\n\nconst translateAsciiDxf = (reader, options) => {\n  // console.log('**************************************************')\n  // console.log(JSON.stringify(reader.objstack))\n  // console.log('**************************************************')\n\n  const layers = [] // list of layers with various information like color\n  let current = null // the object being created\n  let parts = [] // the list of object subparts (polygons or vectors)\n  let numobjs = 0\n\n  // findLayer0(layers)\n\n  let p = null\n  for (const obj of reader.objstack) {\n    p = null\n\n    if (!('type' in obj)) {\n      // console.log('##### skip')\n      continue\n    }\n    if (!('name' in obj)) {\n      obj.name = 'jscad' + numobjs\n      numobjs = numobjs + 1\n    } else {\n      // UGG... javascript variable names\n      let name = obj.name\n      name = name.replace(/ /g, '_')\n      name = name.replace(/-/g, '_')\n      name = name.replace(/\\./g, '_')\n      obj.name = name\n    }\n    // console.log(JSON.stringify(obj))\n\n    switch (obj.type) {\n      // control objects\n      case 'dxf':\n        break\n      case 'layer':\n        // console.log('##### layer')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        // save the layer for later reference\n        obj.objects = [] // with a list of objects\n        obj.lnam = 'layer' + layers.length\n        layers.push(obj)\n        break\n      case 'variable':\n        // console.log(JSON.stringify(obj))\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        saveVariable(obj, options)\n        break\n\n      // 3D entities\n      case '3dface':\n        // console.log('##### 3dface')\n        p = instantiatePolygon(obj, layers, options)\n        if (current === null) {\n          // console.log('##### start of 3dfaces')\n          current = { type: '3dfaces' }\n          current.name = 'jscad' + numobjs\n          numobjs = numobjs + 1\n        }\n        break\n      case 'mesh':\n        // console.log('##### mesh')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translateMesh(obj, layers, options)\n        break\n\n      // 2D or 3D entities\n      case 'arc':\n        // console.log('##### arc')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translateArc(obj, layers, options)\n        break\n      case 'circle':\n        // console.log('##### circle')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translateCircle(obj, layers, options)\n        break\n      case 'ellipse':\n        // console.log('##### ellipse')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translateEllipse(obj, layers, options)\n        break\n      case 'line':\n        // console.log('##### line')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translateLine(obj, layers, options)\n        break\n      case 'polyline':\n        // console.log('##### polyline')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        if (current === null) {\n          // console.log('##### start of polyline')\n          current = getPolyType(obj)\n          current.name = 'jscad' + numobjs\n          numobjs = numobjs + 1\n        }\n        break\n      case 'vertex':\n        // console.log('##### vertex')\n        p = instantiateVector(obj)\n        break\n      case 'seqend':\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        break\n\n      // 2D entities\n      case 'lwpolyline':\n        // console.log('##### lwpolyline')\n        current = translateCurrent(current, layers, parts, options)\n        parts = []\n        translatePath2D(obj, layers, options)\n        break\n\n      default:\n        // console.log('##### ERROR')\n        // console.log(obj.type)\n        break\n    }\n    // accumlate polygons if necessary\n    if (geometries.poly3.isA(p)) {\n      // console.log('##### push Polygon')\n      parts.push(p)\n    }\n    // accumlate vectors if necessary\n    if (p && 'vec' in p && p.vec.length === 3) {\n      // console.log('##### push vec3')\n      parts.push(p)\n    }\n    if (p && 'vec' in p && p.vec.length === 2) {\n      // console.log('##### push vec2')\n      parts.push(p)\n    }\n  }\n  // translate the last object if necessary\n  current = translateCurrent(current, layers, parts, options)\n\n  // debug output\n  // console.log('**************************************************')\n  let script = `const {colors, geometries, maths, primitives, transforms} = require('@jscad/modeling')\n\nconst main = () => {\n  let layers = []\n  return layers.concat(`\n\n  layers.forEach((layer) => {\n    const name = layer.lnam || 'Unknown'\n    script += `${name}(),`\n  })\n  script += '[])\\n}\\n'\n\n  // add helper functions for polygons and lines\n  script +=\n`\nfunction createPolygon(listofpoints, color) {\n  let polygon = geometries.poly3.fromPoints(listofpoints)\n  if (color) polygon.color = color\n  return polygon\n}\n`\n\n  layers.forEach((layer) => {\n    script += translateLayer(layer)\n  })\n\n  script += 'module.exports = {main}\\n'\n\n  // console.log(script)\n  // console.log('**************************************************')\n  return script\n}\n\nmodule.exports = translateAsciiDxf\n", "/*\n## License\n\nCopyright (c) 2017 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n\n*/\n\nconst version = require('./package.json').version\nconst { BYLAYER, getTLA } = require('./autocad')\nconst colorIndex = require('./colorindex2017')\nconst dxf = require('./DxfReader')\nconst { instantiateAsciiDxf } = require('./instantiate')\nconst translateAsciiDxf = require('./translate')\n\n// //////////////////////////////////////////\n//\n// DXF (Drawing Exchange Format) is a CAD data file format developed by Autodesk\n//\n// //////////////////////////////////////////\n\n/**\n * Deserializer of DXF data to JSCAD geometries.\n * @module io/dxf-deserializer\n * @example\n * const { deserialize, extension } = require('@jscad/dxf-deserializer')\n */\n\nconst handleError = (reader, error) => {\n  if (reader.options.strict === true) {\n    throw error\n  } else {\n    console.log(`error: line ${error.line}, column ${error.column}, bad character [${error.c}]`)\n  }\n}\n\nconst handleStart = (reader, data) => {\n  // console.log('DXF reader started')\n}\n\nconst handleEnd = (reader, data) => {\n  // console.log('DXF reader completed')\n}\n\n//\n// handle a entity as provided by the reader\n// groups: 0\n// special handling to set defaults as per DXF specifications\n//\nconst handleEntity = (reader, group, value) => {\n  // console.log('entity: '+group+','+value)\n\n  let obj = null\n  switch (value) {\n    case 'LAYER':\n      obj = { type: 'layer' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      // obj[getTLA(62)] = 256\n      obj[getTLA(67)] = 0\n      // layer defaults\n      reader.objstack.push(obj)\n      break\n    case 'LINE':\n      obj = { type: 'line' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // line defaults\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 0\n\n      reader.objstack.push(obj)\n      break\n    case 'LWPOLYLINE':\n      obj = { type: 'lwpolyline' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // lwpolyline defaults\n      obj[getTLA(38)] = 0\n      obj[getTLA(39)] = 0\n      obj[getTLA(43)] = 0\n      obj[getTLA(70)] = 0\n      obj[getTLA(90)] = 0\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 1\n\n      reader.objstack.push(obj)\n      break\n    case 'MESH':\n      obj = { type: 'mesh' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // mesh defaults\n      obj[getTLA(91)] = 0 // initialize lengths\n      obj[getTLA(92)] = 0\n      obj[getTLA(93)] = 0\n      obj[getTLA(94)] = 0\n      obj[getTLA(95)] = 0\n      obj.state = 0 // keep a state\n      reader.objstack.push(obj)\n      break\n    case 'POLYLINE':\n      obj = { type: 'polyline' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // polyline defaults\n      obj[getTLA(10)] = 0\n      obj[getTLA(20)] = 0\n      obj[getTLA(30)] = 0\n      obj[getTLA(39)] = 0\n      obj[getTLA(40)] = 0\n      obj[getTLA(41)] = 0\n      obj[getTLA(70)] = 0\n      obj[getTLA(71)] = 0\n      obj[getTLA(72)] = 0\n      obj[getTLA(73)] = 0\n      obj[getTLA(74)] = 0\n      obj[getTLA(75)] = 0\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 1\n\n      reader.objstack.push(obj)\n      break\n    case 'ARC':\n      obj = { type: 'arc' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // arc defaults\n      obj[getTLA(39)] = 0\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 1\n\n      reader.objstack.push(obj)\n      break\n    case 'CIRCLE':\n      obj = { type: 'circle' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // circle defaults\n      obj[getTLA(39)] = 0\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 1\n\n      reader.objstack.push(obj)\n      break\n    case 'ELLIPSE':\n      obj = { type: 'ellipse' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // ellipse defaults\n      obj[getTLA(210)] = 0\n      obj[getTLA(220)] = 0\n      obj[getTLA(230)] = 1\n\n      reader.objstack.push(obj)\n      break\n    case 'VERTEX':\n      obj = { type: 'vertex' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // vertex defaults\n      obj[getTLA(10)] = 0\n      obj[getTLA(20)] = 0\n      obj[getTLA(30)] = 0\n      obj[getTLA(40)] = 0\n      obj[getTLA(41)] = 0\n      obj[getTLA(42)] = 0\n      obj[getTLA(70)] = 0\n      // polyface defaults (optional)\n      obj[getTLA(71)] = 0\n      obj[getTLA(72)] = 0\n      obj[getTLA(73)] = 0\n      obj[getTLA(74)] = 0\n\n      reader.objstack.push(obj)\n      break\n    case '3DFACE':\n      obj = { type: '3dface' }\n      // entity defaults\n      obj[getTLA(48)] = 1.0\n      obj[getTLA(60)] = 0\n      obj[getTLA(62)] = BYLAYER\n      obj[getTLA(67)] = 0\n      // face defaults\n      obj[getTLA(70)] = 0\n\n      reader.objstack.push(obj)\n      break\n    case 'SEQEND':\n      obj = { type: 'seqend' }\n      reader.objstack.push(obj)\n      break\n    default:\n      // push on an anonymous object which does not have type / attributes / values\n      obj = {}\n      reader.objstack.push(obj)\n      break\n  }\n}\n\n//\n// handle a varible as provided by the reader\n// groups: 9\n//\nconst handleVariable = (reader, group, value) => {\n  // console.log('variable: '+group+','+value)\n  const obj = { type: 'variable', name: value }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a int as provided by the reader\n// groups: 62, 70, 71, 72, 73, 74, 75, 210, 220, 230\n//\nconst handleInt = (reader, group, value) => {\n  // console.log('int: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    obj[getTLA(group)] = parseFloat(value)\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a double as provided by the reader\n// groups: 11, 12, 13, 21, 22, 23, 31, 32, 33, 39, 40, 41, 50, 51\n//\nconst handleDouble = (reader, group, value) => {\n  // console.log('double: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    obj[getTLA(group)] = parseFloat(value)\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a X coordinate as provided by the reader\n// groups: 10\n// special handling of (lwpolyline and mesh) float values\n//\nconst handleXcoord = (reader, group, value) => {\n  // console.log('xcoord: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'lwpolyline') {\n    // special handling to build a list of vertices\n      if (obj.pptxs === undefined) {\n        obj.pptxs = []\n        obj.bulgs = []\n      }\n      obj.pptxs.push(parseFloat(value))\n      obj.bulgs.push(0)\n    } else {\n      if (obj.type === 'mesh') {\n      // special handling to build a list of vertices\n        if (obj.pptxs === undefined) {\n          obj.pptxs = []\n        }\n        obj.pptxs.push(parseFloat(value))\n      } else {\n        obj[getTLA(group)] = parseFloat(value)\n      }\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a Y coordinate as provided by the reader\n// groups: 20\n// special handling of (lwpolyline and mesh) float values\n//\nconst handleYcoord = (reader, group, value) => {\n  // console.log('ycoord: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'lwpolyline' || obj.type === 'mesh') {\n    // special handling to build a list of vertices\n      if (obj.pptys === undefined) {\n        obj.pptys = []\n      }\n      obj.pptys.push(parseFloat(value))\n    } else {\n      obj[getTLA(group)] = parseFloat(value)\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a Z coordinate as provided by the reader\n// groups: 30\n// special handling of (mesh) float values\n//\nconst handleZcoord = (reader, group, value) => {\n  // console.log('ycoord: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'mesh') {\n    // special handling to build a list of vertices\n      if (obj.pptzs === undefined) {\n        obj.pptzs = []\n      }\n      obj.pptzs.push(parseFloat(value))\n    } else {\n      obj[getTLA(group)] = parseFloat(value)\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a bulge as provided by the reader\n// groups: 41\n// special handling of (lwpolyline) float values\n//\nconst handleBulge = (reader, group, value) => {\n  // console.log('bulg: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'lwpolyline') {\n    // special handling to build a list of vertices\n      const bulgs = obj.bulgs\n      if (bulgs !== undefined) {\n        const pptxs = obj.pptxs\n        if (pptxs.length === bulgs.length) {\n          bulgs[bulgs.length - 1] = parseFloat(value)\n        }\n      }\n    } else {\n      obj[getTLA(group)] = parseFloat(value)\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a len as provided by the reader\n// groups: 91, 92, 93, 94, 95\n// special handling of (mesh) float values based on group and state\n//\nconst handleLen = (reader, group, value) => {\n  // console.log('len: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'mesh') {\n    // mesh has an order of lengths\n      const state = obj.state\n      // console.log('mesh len: '+group+','+value+','+state)\n      switch (group) {\n        case 91: // length of subdivisions\n          obj[getTLA(group)] = parseFloat(value)\n          obj.state = 1\n          break\n        case 92: // vertex count OR overriden property count\n          if (state === 1) {\n            obj.vlen = parseFloat(value) // override attribute\n            obj.state = 2\n          } else {\n            obj.plen = parseFloat(value) // override attribute\n            obj.state = 6\n          }\n          break\n        case 93: // face count\n          obj[getTLA(group)] = parseFloat(value)\n          obj.state = 3\n          break\n        case 94: // edge count\n          obj[getTLA(group)] = parseFloat(value)\n          obj.state = 4\n          break\n        case 95: // edge crease count\n          obj[getTLA(group)] = parseFloat(value)\n          obj.state = 5\n          break\n        default:\n          obj.state = 7\n          break\n      }\n    } else {\n      obj[getTLA(group)] = parseFloat(value)\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a value as provided by the reader\n// groups: 90\n// special handling of (mesh) float values based on state\n//\nconst handleValue = (reader, group, value) => {\n  // console.log('int: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj.type === 'mesh') {\n      const state = obj.state\n      // console.log('mesh value: '+group+','+value+','+state)\n      // mesh has an order of values based on state\n      switch (state) {\n        case 3: // accumulate face values\n          if (obj.fvals === undefined) {\n            obj.fvals = []\n          }\n          obj.fvals.push(parseFloat(value))\n          break\n        case 4: // accumulate edge values\n          if (obj.evals === undefined) {\n            obj.evals = []\n          }\n          obj.evals.push(parseFloat(value))\n          break\n        default:\n          break\n      }\n    } else {\n      obj[getTLA(group)] = parseFloat(value)\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a string as provided by the reader\n// groups: 1,6,7,8,\n//\nconst handleString = (reader, group, value) => {\n  // console.log('string: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    obj[getTLA(group)] = value\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// handle a name as provided by the reader\n// groups: 2,3\n//\nconst handleName = (reader, group, value) => {\n  // console.log('name: '+group+','+value)\n  const obj = reader.objstack.pop()\n  if ('type' in obj) {\n    if (obj[getTLA(group)] === undefined) {\n      obj[getTLA(group)] = value\n    }\n  }\n  reader.objstack.push(obj)\n}\n\n//\n// Create a DXF reader using the given source and options.\n// This routine sets up a series of callbacks (absorb calls) to handle the various DXF groups, then starts the reader.\n// While reading, the callback routine (handle*) converts the value and then:\n// - pushes a new group onto the objstack\n// OR\n// - adds a new attribute to the current object\n//\nconst createReader = (src, options) => {\n  // create a reader for the DXF\n  const reader = dxf.reader(options)\n\n  // setup event handling from the reader\n  reader.on('error', handleError)\n  reader.on('start', handleStart)\n  reader.on('end', handleEnd)\n\n  // setup group handling\n  reader.absorb(0, handleEntity)\n  reader.absorb(1, handleString)\n  reader.absorb(2, handleName)\n  reader.absorb(3, handleName)\n  reader.absorb(6, handleString)\n  reader.absorb(7, handleString)\n  reader.absorb(8, handleString)\n  reader.absorb(9, handleVariable)\n  reader.absorb(10, handleXcoord)\n  reader.absorb(11, handleDouble)\n  reader.absorb(12, handleDouble)\n  reader.absorb(13, handleDouble)\n  reader.absorb(20, handleYcoord)\n  reader.absorb(21, handleDouble)\n  reader.absorb(22, handleDouble)\n  reader.absorb(23, handleDouble)\n  reader.absorb(30, handleZcoord)\n  reader.absorb(31, handleDouble)\n  reader.absorb(32, handleDouble)\n  reader.absorb(33, handleDouble)\n  reader.absorb(39, handleDouble)\n  reader.absorb(40, handleDouble)\n  reader.absorb(41, handleDouble)\n  reader.absorb(42, handleBulge)\n  reader.absorb(50, handleDouble)\n  reader.absorb(51, handleDouble)\n  reader.absorb(62, handleInt)\n  reader.absorb(70, handleInt)\n  reader.absorb(71, handleInt)\n  reader.absorb(72, handleInt)\n  reader.absorb(73, handleInt)\n  reader.absorb(74, handleInt)\n  reader.absorb(75, handleInt)\n  reader.absorb(90, handleValue)\n  reader.absorb(91, handleLen) // MESH\n  reader.absorb(92, handleLen) // MESH\n  reader.absorb(93, handleLen) // MESH\n  reader.absorb(94, handleLen) // MESH\n  reader.absorb(95, handleLen) // MESH\n  reader.absorb(210, handleInt)\n  reader.absorb(220, handleInt)\n  reader.absorb(230, handleInt)\n\n  // initial state\n  reader.objstack = []\n  reader.objstack.push({ type: 'dxf' })\n\n  // start the reader\n  reader.write(src).close()\n  return reader\n}\n\n//\n// instantiate the give DXF definition (src) into a set of CSG library objects\n//\nconst instantiate = (src, options) => {\n  const reader = createReader(src, options)\n  const objs = instantiateAsciiDxf(reader, options)\n  return objs\n}\n\n//\n// translate the give DXF definition (src) into a  JSCAD script\n//\nconst translate = (src, options) => {\n  const reader = createReader(src, options)\n\n  let code = `// Produced by JSCAD IO Library : DXF Deserializer (${options.version})\n\n`\n  // code += '// date: ' + (new Date()) + '\\n'\n  // code += '// source: ' + options.filename + '\\n'\n  code += translateAsciiDxf(reader, options)\n  return code\n}\n\n/**\n * Deserialize the given DXF source into either a script or an array of geometry\n * @param {Object} options - options used during deserializing, REQUIRED\n * @param {string} [options.filename='dxf'] - filename of original DXF data stream\n * @param {String} [options.version] - version added to the script metadata, default is package version\n * @param {string} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {boolean} [options.strict=true] - obey strict DXF specifications\n * @param {array} [options.colorindex=[]] - list of colors (256) for use during rendering\n * @param {string} src - DXF data stream\n * @return {string|[objects]} a string (script) or array of objects (geometry)\n * @alias module:io/dxf-deserializer.deserialize\n */\nconst deserialize = (options, src) => {\n  const defaults = {\n    filename: 'dxf',\n    version,\n    output: 'script',\n    strict: true,\n    colorindex: colorIndex,\n    dxf: {\n      angdir: 0, // counter clockwise\n      insunits: 4, // millimeters\n      pfacevmax: 4 // number of vertices per face\n    }\n  }\n  options = Object.assign({}, defaults, options)\n  return options.output === 'script' ? translate(src, options) : instantiate(src, options)\n}\n\nconst extension = 'dxf'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/json-deserializer\",\n  \"version\": \"2.0.26\",\n  \"description\": \"JSON Deserializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava 'tests/*.test.js' --verbose --timeout 2m\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"json\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/array-utils\": \"2.1.4\"\n  },\n  \"devDependencies\": {\n    \"@jscad/modeling\": \"2.12.0\",\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "/*\n## License\n\nCopyright (c) JSCAD Organization https://github.com/jscad\n\nAll code released under MIT license\n*/\n\n// //////////////////////////////////////////\n//\n// JSON (JavaScript Object Notation) is a lightweight data-interchange format\n// See https://www.json.org\n//\n// //////////////////////////////////////////\n\n/**\n * Deserializer of JSON data to JSCAD geometries.\n * @module io/json-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/json-deserializer')\n */\n\nconst { flatten, toArray } = require('@jscad/array-utils')\n\nconst version = require('./package.json').version\n\n/**\n * Deserialize the given JSON notation (string) into either a script or an array of geometry.\n * @param {Object} options - options used during deserializing, REQUIRED\n * @param {String} [options.filename='json'] - filename of original JSON source\n * @param {String} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {String} [options.version='0.0.0'] - version number to add to the metadata\n * @param {Boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {String} input - JSON source data\n * @return {[geometry]/String} either an array of objects (geometry) or a string (script)\n * @alias module:io/json-deserializer.deserialize\n */\nconst deserialize = (options, input) => {\n  const defaults = {\n    filename: 'json',\n    output: 'script',\n    version,\n    addMetaData: true\n  }\n  options = Object.assign({}, defaults, options)\n\n  // convert the JSON notation into anonymous object(s)\n  let objects = JSON.parse(input)\n\n  // cleanup the objects\n  objects = flatten(toArray(objects))\n\n  return options.output === 'script' ? translate(options, objects) : objects\n}\n\n//\n// translate the given objects (geometries) into a  JSCAD script\n//\nconst translate = (options, objects) => {\n  const { addMetaData, filename, version } = options\n\n  let script = addMetaData\n    ? `//\n// Produced by JSCAD IO Library : JSON Deserializer (${version})\n// date: ${new Date()}\n// source: ${filename}\n//\n`\n    : ''\n\n  script +=\n`\nconst { geometries } = require('@jscad/modeling')\n\nconst main = () => {\n  const objects = [${translateToList(objects)} ]\n  return objects\n}\n\n${translateToObjects(objects)}\n\nmodule.exports = { main }\n`\n\n  return script\n}\n\nconst translateToList = (objects) => objects.reduce((script, object, index) => script + ` json${index},`, '')\n\nconst translateToObjects = (objects) => objects.reduce((script, object, index) => script + translateToObject(object, index), '')\n\n// translate the given object to JSON notation (AGAIN)\n// NOTE: this implies that the original JSON was correct :)\nconst translateToObject = (object, index) => `const json${index} = ${JSON.stringify(object)}\\n`\n\nconst extension = 'json'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/obj-deserializer\",\n  \"version\": \"2.0.25\",\n  \"description\": \"OBJ Deserializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m './tests/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Rene K. Mueller\",\n      \"url\": \"http://renekmueller.com\"\n    },\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"obj\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/modeling\": \"2.12.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "const { colors, primitives } = require('@jscad/modeling')\n\nconst version = require('./package.json').version\n\n/**\n * Deserializer of OBJ data to JSCAD geometries.\n * @module io/obj-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/obj-deserializer')\n */\n\n/**\n * Parse the given OBJ data and return either a JSCAD script or a set of geometry\n * @see http://en.wikipedia.org/wiki/Wavefront_.obj_file\n * @param {Object} options - options used during deserializing, REQUIRED\n * @param {string} [options.filename='obj'] - filename of the original obj data\n * @param {string} [options.version='0.0.0'] - version number to add to the metadata\n * @param {boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {string} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param  {string} input - obj data\n * @return {[object]/string} either a script (script) or a set of objects (geometry)\n * @alias module:io/obj-deserializer.deserialize\n */\nconst deserialize = (options, input) => {\n  const defaults = {\n    filename: 'obj',\n    output: 'script',\n    orientation: 'outward',\n    version,\n    addMetaData: true\n  }\n  options = Object.assign({}, defaults, options)\n  const { output } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  const { positions, groups } = getGroups(input, options)\n\n  const result = output === 'script' ? stringify(positions, groups, options) : objectify(positions, groups, options)\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return result\n}\n\nconst getGroups = (data, options) => {\n  let groups = []\n  const positions = []\n  let material = null\n\n  groups.push({ faces: [], colors: [], name: 'default', line: 0 })\n\n  const handleG = (command, values) => {\n    const group = { faces: [], colors: [], name: '' }\n    if (values && values.length > 0) group.name = values.join(' ')\n    groups.push(group)\n  }\n\n  const handleV = (command, values) => {\n    const x = parseFloat(values[0])\n    const y = parseFloat(values[1])\n    const z = parseFloat(values[2])\n    positions.push([x, y, z])\n  }\n\n  const handleF = (command, values) => {\n    // values : v/vt/vn\n    const facerefs = values.map((value) => {\n      const refs = value.match(/[0-9+\\-eE]+/g)\n      let ref = parseInt(refs[0])\n      if (ref < 0) {\n        ref = positions.length + ref\n      } else {\n        ref--\n      }\n      return ref\n    })\n    const group = groups.pop()\n    group.faces.push(facerefs)\n    group.colors.push(material)\n    groups.push(group)\n  }\n\n  const handleMtl = (command, values) => {\n    material = null\n    if (values && values.length > 0) {\n      // try to convert the material to a color by name\n      const c = colors.colorNameToRgb(values[0])\n      if (c) material = [c[0], c[1], c[2], 1] // add alpha\n    }\n  }\n\n  // parse the input into groups of vertices and faces\n  const lines = data.split(/\\n/)\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim()\n    if (line && line.length > 0) {\n      let values = line.match(/\\S+/g)\n      if (values) {\n        const command = values[0]\n        values = values.slice(1)\n        switch (command) {\n          case 'g':\n            handleG(command, values)\n            break\n          case 'v':\n            handleV(command, values)\n            break\n          case 'f':\n            handleF(command, values)\n            break\n          case 'usemtl':\n            handleMtl(command, values)\n            break\n        }\n      }\n    }\n  }\n\n  // filter out groups without geometry\n  groups = groups.filter((group) => (group.faces.length > 0))\n\n  return { positions, groups }\n}\n\nconst objectify = (points, groups, options) => {\n  const geometries = groups.map((group) => primitives.polyhedron({ orientation: options.orientation, points, faces: group.faces, colors: group.colors }))\n  return geometries\n}\n\nconst translatePoints = (points) => {\n  let code = '  let points = [\\n'\n  points.forEach((point) => (code += `    [${point}],\\n`))\n  code += '  ]'\n  return code\n}\n\nconst translateFaces = (faces) => {\n  let code = '  let faces = [\\n'\n  faces.forEach((face) => (code += `    [${face}],\\n`))\n  code += '  ]'\n  return code\n}\n\nconst translateColors = (colors) => {\n  let code = '  let colors = [\\n'\n  colors.forEach((c) => {\n    if (c) {\n      code += `    [${c}],\\n`\n    } else {\n      code += '    null,\\n'\n    }\n  })\n  code += '  ]'\n  return code\n}\n\nconst translateGroupsToCalls = (groups) => {\n  let code = ''\n  groups.forEach((group, index) => (code += `    group${index}(points), // ${group.name}\\n`))\n  return code\n}\n\nconst translateGroupsToFunctions = (groups, options) => {\n  let code = ''\n  groups.forEach((group, index) => {\n    const faces = group.faces\n    const colors = group.colors\n    code += `\n// group : ${group.name}\n// faces: ${faces.length}\n`\n    code += `const group${index} = (points) => {\n${translateFaces(faces)}\n${translateColors(colors)}\n  return primitives.polyhedron({ orientation: '${options.orientation}', points, faces, colors })\n}\n`\n  })\n  return code\n}\n\nconst stringify = (positions, groups, options) => {\n  const { filename, addMetaData, version } = options\n\n  let code = addMetaData\n    ? `//\n// Produced by JSCAD IO Library : OBJ Deserializer (${version})\n// date: ${new Date()}\n// source: ${filename}\n//\n  `\n    : ''\n\n  // create the main function, with a list of points and translated groups\n  code += `const {primitives} = require('@jscad/modeling')\n\n// groups: ${groups.length}\n// points: ${positions.length}\nconst main = () => {\n  // points are common to all geometries\n${translatePoints(positions)}\n\n  let geometries = [\n${translateGroupsToCalls(groups)}  ]\n  return geometries\n}\n\n${translateGroupsToFunctions(groups, options)}\nmodule.exports = {main}\n`\n\n  // create a function for each group\n  return code\n}\n\nconst extension = 'obj'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/stl-deserializer\",\n  \"version\": \"2.1.22\",\n  \"description\": \"STL Deserializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m './tests/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Rene K. Mueller\",\n      \"url\": \"http://renekmueller.com\"\n    },\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"stl\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/io-utils\": \"2.0.25\",\n    \"@jscad/modeling\": \"2.12.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "const { maths, primitives } = require('@jscad/modeling')\n\nconst { BinaryReader } = require('@jscad/io-utils')\n\nconst packageVersion = require('./package.json').version\n\n// STL function from http://jsfiddle.net/Riham/yzvGD/35/\n// CC BY-SA by Riham\n// changes by Rene K. Mueller <spiritdude@gmail.com>\n// changes by Mark 'kaosat-dev' Moissette\n// 2017/10/14: refactoring, added support for object output etc\n// 2013/03/28: lot of rework and debugging included, and error handling\n// 2013/03/18: renamed functions, creating .jscad source direct via polyhedron()\n\n/**\n * Deserializer of STL data to JSCAD geometries.\n * @module io/stl-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/stl-deserializer')\n */\n\n/**\n * Parse the given STL data and return either a JSCAD script or a list of geometries\n * @param {Object} options - options used during deserializing, REQUIRED\n * @param {string} [options.filename='stl'] - filename of original STL source\n * @param {string} [options.version='0.0.0'] - version number to add to the metadata\n * @param {boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {string} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {string} input - stl data\n * @return {[objects]|string} a list of objects (geometry) or a string (script)\n * @alias module:io/stl-deserializer.deserialize\n */\nconst deserialize = (options, stl) => {\n  const defaults = {\n    filename: 'stl',\n    version: packageVersion,\n    addMetaData: true,\n    output: 'script'\n  }\n  options = Object.assign({}, defaults, options)\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  const { filename, version, output, addMetaData } = options\n\n  // if provided an ArrayBuffer then convert to String\n  stl = isBuffer(stl) ? bufferToBinaryString(stl) : stl\n\n  const isBinary = isDataBinaryRobust(stl)\n\n  options && options.statusCallback && options.statusCallback({ progress: 33 })\n\n  const elementFormatterJscad = ({ vertices, triangles, normals, colors, index }) => toScript(vertices, triangles, null, colors, index)\n  const elementFormatterObject = ({ vertices, triangles, normals, colors }) => toPolyhedron(vertices, triangles, null, colors)\n\n  options && options.statusCallback && options.statusCallback({ progress: 66 })\n\n  const deserializer = isBinary ? deserializeBinarySTL : deserializeAsciiSTL\n  const elementFormatter = output === 'script' ? elementFormatterJscad : elementFormatterObject\n  const outputFormatter = output === 'script' ? formatAsJscad : formatAsCsg\n\n  const result = outputFormatter(deserializer(stl, filename, version, elementFormatter), addMetaData, version, filename)\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n  return result\n\n  /*\n  TODO if (err) src += '// WARNING: import errors: ' + err + ' (some triangles might be misaligned or missing)\\n'\n  */\n}\n\n// convert ArrayBuffer to UTF-16 code units\nconst bufferToBinaryString = (buffer) => {\n  let binary = ''\n  const bytes = new Uint8Array(buffer)\n  const length = bytes.byteLength\n  for (let i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i])\n  }\n  return binary\n}\n\nconst isBuffer = (obj) => (obj.byteLength !== undefined && typeof obj.slice === 'function')\n\n// transforms input to string if it was not already the case\nconst ensureString = (buf) => {\n  if (typeof buf !== 'string') {\n    const arrayBuffer = new Uint8Array(buf)\n    let str = ''\n    for (let i = 0; i < buf.byteLength; i++) {\n      str += String.fromCharCode(arrayBuffer[i]) // implicitly assumes little-endian\n    }\n    return str\n  }\n  return buf\n}\n\n// reliable binary detection\nconst isDataBinaryRobust = (data) => {\n  const patternVertex = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g\n  const text = ensureString(data)\n  const isBinary = patternVertex.exec(text)\n  return (isBinary === null)\n}\n\nconst formatAsJscad = (data, addMetaData, version, filename) => {\n  // console.log('***** formatAsJscad')\n  let code = ''\n  if (addMetaData) {\n    code = `\n  //\n  // producer: JSCAD STL Deserializer ${version}\n  // date: ${new Date()}\n  // source: ${filename}\n  // objects: ${data.length}\n  //\n  `\n  }\n  code += 'const {primitives} = require(\\'@jscad/modeling\\')\\n'\n  code += data.join('\\n')\n  code += `\nconst main = () => {\n return [${data.map((d, i) => `solid${i + 1}()`)}]\n}\n\nmodule.exports = {main}\n`\n  return code\n}\n\nconst formatAsCsg = (data) => data\n\n/*\n * @see http://en.wikipedia.org/wiki/STL_(file_format)#Binary_STL\n */\nconst deserializeBinarySTL = (stl, filename, version, elementFormatter) => {\n  // console.log('***** deserializeBinary: ', stl.length)\n  const vertices = []\n  const triangles = []\n  const normals = []\n  const colors = []\n  let vertexIndex = 0\n  let err = 0\n  let mcolor = null\n  const umask = parseInt('01000000000000000', 2)\n  const rmask = parseInt('00000000000011111', 2)\n  const gmask = parseInt('00000001111100000', 2)\n  const bmask = parseInt('00111110000000000', 2)\n  const br = new BinaryReader(stl)\n\n  let m = 0\n  let c = 0\n  let r = 0\n  let g = 0\n  let b = 0\n  let a = 0\n  for (let i = 0; i < 80; i++) {\n    switch (m) {\n      case 6:\n        r = br.readUInt8()\n        m += 1\n        continue\n      case 7:\n        g = br.readUInt8()\n        m += 1\n        continue\n      case 8:\n        b = br.readUInt8()\n        m += 1\n        continue\n      case 9:\n        a = br.readUInt8()\n        m += 1\n        continue\n      default:\n        c = br.readChar()\n        switch (c) {\n          case 'C':\n          case 'O':\n          case 'L':\n          case 'R':\n          case '=':\n            m += 1\n            break\n          default:\n            break\n        }\n        break\n    }\n  }\n  if (m === 10) { // create the default color\n    mcolor = [r / 255, g / 255, b / 255, a / 255]\n  }\n\n  const totalTriangles = br.readUInt32() // Read # triangles\n\n  for (let tr = 0; tr < totalTriangles; tr++) {\n    /*\n      REAL32[3] . Normal vector\n      REAL32[3] . Vertex 1\n      REAL32[3] . Vertex 2\n      REAL32[3] . Vertex 3\n      UINT16 . Attribute byte count */\n    // -- Parse normal\n    const no = []; no.push(br.readFloat()); no.push(br.readFloat()); no.push(br.readFloat())\n\n    // -- Parse every 3 subsequent floats as a vertex\n    let v1 = []; v1.push(br.readFloat()); v1.push(br.readFloat()); v1.push(br.readFloat())\n    const v2 = []; v2.push(br.readFloat()); v2.push(br.readFloat()); v2.push(br.readFloat())\n    let v3 = []; v3.push(br.readFloat()); v3.push(br.readFloat()); v3.push(br.readFloat())\n\n    let skip = 0\n\n    for (let i = 0; i < 3; i++) {\n      if (isNaN(v1[i])) skip++\n      if (isNaN(v2[i])) skip++\n      if (isNaN(v3[i])) skip++\n      if (isNaN(no[i])) skip++\n    }\n    if (skip > 0) {\n      console.log('bad triangle vertice coords/normal: ', skip)\n    }\n\n    err += skip\n    // -- every 3 vertices create a triangle.\n    const triangle = []; triangle.push(vertexIndex++); triangle.push(vertexIndex++); triangle.push(vertexIndex++)\n\n    const abc = br.readUInt16()\n    let color = null\n    if (m === 10) {\n      const u = (abc & umask) // 0 if color is unique for this triangle\n      const r = (abc & rmask) / 31\n      const g = ((abc & gmask) >>> 5) / 31\n      const b = ((abc & bmask) >>> 10) / 31\n      const a = 255\n      if (u === 0) {\n        color = [r, g, b, a]\n      } else {\n        color = mcolor\n      }\n      colors.push(color)\n    }\n\n    // -- Add 3 vertices for every triangle\n    // -- TODO: OPTIMIZE: Check if the vertex is already in the array, if it is just reuse the index\n    if (skip === 0) { // checking cw vs ccw, given all normal/vertice are valid\n      // E1 = B - A\n      // E2 = C - A\n      // test = dot( Normal, cross( E1, E2 ) )\n      // test > 0: cw, test < 0 : ccw\n      const e1 = maths.vec3.subtract(maths.vec3.create(), v2, v1)\n      const e2 = maths.vec3.subtract(maths.vec3.create(), v3, v1)\n      const cr = maths.vec3.cross(maths.vec3.create(), e1, e2)\n      const t = maths.vec3.dot(no, cr)\n      if (t > 0) { // 1,2,3 -> 3,2,1\n        const tmp = v3\n        v3 = v1\n        v1 = tmp\n      }\n    }\n    vertices.push(v1)\n    vertices.push(v2)\n    vertices.push(v3)\n    triangles.push(triangle)\n    normals.push(no)\n  }\n\n  if (err) {\n    console.warn(`WARNING: import errors: ${err} (some triangles might be misaligned or missing)`)\n    // FIXME: this used to be added to the output script, which makes more sense\n  }\n\n  return [elementFormatter({ vertices, triangles, normals, colors, index: 1 })]\n}\n\nconst deserializeAsciiSTL = (stl, filename, version, elementFormatter) => {\n  // console.log('***** deserializeAscii: '+stl.length)\n  let converted = 0\n\n  // -- Find all models\n  const objects = stl.split('endsolid')\n  const elements = []\n  for (let o = 1; o < objects.length; o++) {\n    // -- Translation: a non-greedy regex for facet {...} endloop pattern\n    const patt = /\\bfacet[\\s\\S]*?endloop/mgi\n    const vertices = []\n    const triangles = []\n    const normals = []\n    const colors = []\n    let vertexIndex = 0\n    let err = 0\n\n    const match = stl.match(patt)\n    if (match == null) continue\n    for (let i = 0; i < match.length; i++) {\n      // -- 1 normal with 3 numbers, 3 different vertex objects each with 3 numbers:\n      const vpatt = /\\bfacet\\s+normal\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+outer\\s+loop\\s+vertex\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+vertex\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+vertex\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s*/mgi\n      const v = vpatt.exec(match[i])\n      if (v == null) continue\n      if (v.length !== 13) {\n        console.log('Failed to parse ' + match[i])\n        break\n      }\n      let skip = 0\n      for (let k = 0; k < v.length; k++) {\n        if (v[k] === 'NaN') {\n          console.log('bad normal or triangle vertice #' + converted + ' ' + k + \": '\" + v[k] + \"', skipped\")\n          skip++\n        }\n      }\n      err += skip\n      if (skip) {\n        continue\n      }\n\n      let j = 1\n      const no = []; no.push(parseFloat(v[j++])); no.push(parseFloat(v[j++])); no.push(parseFloat(v[j++]))\n      let v1 = []; v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++]))\n      const v2 = []; v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++]))\n      let v3 = []; v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++]))\n      const triangle = []; triangle.push(vertexIndex++); triangle.push(vertexIndex++); triangle.push(vertexIndex++)\n\n      // -- Add 3 vertices for every triangle\n      // TODO: OPTIMIZE: Check if the vertex is already in the array, if it is just reuse the index\n      if (skip === 0) {\n        // checking cw vs ccw\n        // E1 = B - A\n        // E2 = C - A\n        // test = dot( Normal, cross( E1, E2 ) )\n        // test > 0: cw, test < 0: ccw\n        const e1 = maths.vec3.subtract(maths.vec3.create(), v2, v1)\n        const e2 = maths.vec3.subtract(maths.vec3.create(), v3, v1)\n        const cr = maths.vec3.cross(maths.vec3.create(), e1, e2)\n        const t = maths.vec3.dot(no, cr)\n        if (t > 0) { // 1,2,3 -> 3,2,1\n          const tmp = v3\n          v3 = v1\n          v1 = tmp\n        }\n      }\n      vertices.push(v1)\n      vertices.push(v2)\n      vertices.push(v3)\n      normals.push(no)\n      triangles.push(triangle)\n      converted++\n    }\n    if (err) {\n      console.warn(`WARNING: import errors: ${err} (some triangles might be misaligned or missing)`)\n      // FIXME: this used to be added to the output script, which makes more sense\n    }\n\n    elements.push(\n      elementFormatter({ vertices, triangles, colors, index: o })\n    )\n  }\n\n  return elements\n}\n\n/*\n * Convert the given points, faces(triangles), normals, colors to geometry (polyhedron).\n */\nconst toPolyhedron = (points, faces, normals, colors) => {\n  if (colors && faces.length !== colors.length) colors = undefined\n  const options = {\n    orientation: 'inward',\n    points,\n    faces,\n    colors\n  }\n  return primitives.polyhedron(options)\n}\n\n/*\n * Convert the given points, faces(triangles), normals, colors to JSCAD script.\n */\nconst toScript = (points, faces, normals, colors, index) => {\n  // console.log('***** toScript',index,points.length,faces.length,colors.length)\n\n  let src = `\n//\n// solid ${index} : ${points.length} points, ${faces.length} faces, ${colors.length} colors\n//\nconst solid${index} = () => {\n`\n\n  src += '  const points = [\\n'\n  for (let i = 0; i < points.length; i++) {\n    src += `    [${points[i]}],\\n`\n  }\n  src += '  ]\\n'\n\n  src += '  const faces = [\\n'\n  for (let i = 0; i < faces.length; i++) {\n    src += `    [${faces[i]}],\\n`\n  }\n  src += '  ]\\n'\n\n  if (colors && faces.length === colors.length) {\n    src += '  const colors = [\\n'\n    for (let i = 0; i < colors.length; i++) {\n      src += `    [${colors[i]}],\\n`\n    }\n    src += '  ]\\n'\n  } else {\n    src += '  const colors = null\\n'\n  }\n  src += '  return primitives.polyhedron({points, faces, colors, orientation: \\'inside\\'})\\n}\\n'\n  return src\n}\n\nconst extension = 'stl'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/svg-deserializer\",\n  \"version\": \"2.5.6\",\n  \"description\": \"SVG Deserializer for JSCAD\",\n  \"homepage\": \"https://openjscad.xyz/\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m './tests/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Rene K. Mueller\",\n      \"url\": \"http://renekmueller.com\"\n    },\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"http://www.z3d.jp\"\n    },\n    {\n      \"name\": \"Mark 'kaosat-dev' Moissette\",\n      \"url\": \"http://kaosat.net\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"svg\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@jscad/array-utils\": \"2.1.4\",\n    \"@jscad/modeling\": \"2.12.0\",\n    \"saxes\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "// units for converting CSS2 points/length, i.e. CSS2 value / pxPmm\nconst pxPmm = 1 / 0.2822222 // used for scaling SVG coordinates(PX) to CAG coordinates(MM)\nconst inchMM = 1 / (1 / 0.039370) // used for scaling SVG coordinates(IN) to CAG coordinates(MM)\nconst ptMM = 1 / (1 / 0.039370 / 72) // used for scaling SVG coordinates(IN) to CAG coordinates(MM)\nconst pcMM = 1 / (1 / 0.039370 / 72 * 12) // used for scaling SVG coordinates(PC) to CAG coordinates(MM)\nconst cssPxUnit = 0.2822222 // standard pixel size at arms length on 90dpi screens\n\n// standard SVG named colors (sRGB values)\nconst svgColors = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n}\n\nmodule.exports = {\n  pxPmm,\n  inchMM,\n  ptMM,\n  pcMM,\n  cssPxUnit,\n  svgColors\n}\n", "const { inchMM, ptMM, pcMM, svgColors } = require('./constants')\n\n// Calculate the CAG length/size from the given SVG value (float)\nconst svg2cag = (vec, svgUnitsPmm) => [\n  vec[0] / svgUnitsPmm[0],\n  0 - vec[1] / svgUnitsPmm[1]\n]\n\n// Calculate the CAG length/size from the given CSS value (string)\nconst cagLengthX = (css, svgUnitsPmm, svgUnitsX) => {\n  if (css.indexOf('%') < 0) {\n    return css2cag(css, svgUnitsPmm[0])\n  }\n  // calculate the units as a percentage of the width\n  let v = parseFloat(css) // number part\n  if (isNaN(v)) { return 0.0 }\n  if (v === 0) return v\n  v = (v / 100) * svgUnitsX\n  // convert the units to mm\n  v = v / svgUnitsPmm[0]\n  return Math.round(v * 100000) / 100000\n}\n\nconst cagLengthY = (css, svgUnitsPmm, svgUnitsY) => {\n  if (css.indexOf('%') < 0) {\n    return css2cag(css, svgUnitsPmm[1])\n  }\n  // calculate the units as a percentage of the width\n  let v = parseFloat(css) // number part\n  if (isNaN(v)) { return 0.0 }\n  if (v === 0) return v\n  v = (v / 100) * svgUnitsY\n  // convert the units to mm\n  v = v / svgUnitsPmm[1]\n  return Math.round(v * 100000) / 100000\n}\n\nconst cagLengthP = (css, svgUnitsPmm, svgUnitsV) => {\n  if (css.indexOf('%') < 0) {\n    return css2cag(css, svgUnitsPmm[1])\n  }\n  // calculate the units as a percentage of the viewport\n  let v = parseFloat(css) // number part\n  if (isNaN(v)) { return 0.0 }\n  if (v === 0) return v\n  v = (v / 100) * svgUnitsV\n  // convert the units to mm\n  v = v / svgUnitsPmm[0] // FIXME should this use X units?\n  return v\n}\n\nconst css2cag = (css, unit) => {\n  let v = parseFloat(css) // number part\n  if (isNaN(v)) { return 0.0 }\n  if (v === 0) return v\n  if (css.search(/EM/i) > 0) { // FIXME self assignment , useless ?\n    // v = v // font size\n  } else\n  if (css.search(/EX/i) > 0) { // FIXME self assignment , useless ?\n    // v = v // x-height of font\n  } else\n  if (css.search(/MM/i) > 0) { // FIXME self assignment , useless ?\n    // v = v // absolute millimeters\n  } else\n  if (css.search(/CM/i) > 0) {\n    v = (v * 10) // absolute centimeters > millimeters\n  } else\n  if (css.search(/IN/i) > 0) {\n    v = (v / inchMM) // absolute inches > millimeters\n  } else\n  if (css.search(/PT/i) > 0) {\n    v = (v / ptMM) // absolute points > millimeters\n  } else\n  if (css.search(/PC/i) > 0) {\n    v = (v / pcMM) // absolute picas > millimeters\n  } else {\n    v = (v / unit) // absolute pixels(units) > millimeters\n  }\n  return v\n}\n\n// convert the SVG color specification to CAG RGB\nconst cagColor = (value) => {\n  // let rgb = [0,0,0]; // default is black\n  let rgb\n  value = value.toLowerCase()\n  if (value in svgColors) {\n    rgb = svgColors[value]\n    rgb = [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255] // converted to 0.0-1.0 values\n  } else {\n    if (value[0] === '#') {\n      if (value.length === 4) {\n      // short HEX specification\n        value = '#' + value[1] + value[1] + value[2] + value[2] + value[3] + value[3]\n      }\n      if (value.length === 7) {\n      // HEX specification\n        rgb = [\n          parseInt('0x' + value.slice(1, 3)) / 255,\n          parseInt('0x' + value.slice(3, 5)) / 255,\n          parseInt('0x' + value.slice(5, 7)) / 255\n        ]\n      }\n    } else {\n      const pat = /rgb\\(.+,.+,.+\\)/\n      let s = pat.exec(value)\n      if (s !== null) {\n      // RGB specification\n        s = s[0]\n        s = s.slice(s.indexOf('(') + 1, s.indexOf(')'))\n        rgb = s.split(',')\n        if (s.indexOf('%') > 0) {\n        // rgb(#%,#%,#%)\n          rgb = [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])]\n          rgb = [rgb[0] / 100, rgb[1] / 100, rgb[2] / 100] // converted to 0.0-1.0 values\n        } else {\n        // rgb(#,#,#)\n          rgb = [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])]\n          rgb = [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255] // converted to 0.0-1.0 values\n        }\n      }\n    }\n  }\n  return rgb\n}\n\nconst cssStyle = (element, name) => {\n  if ('style' in element) {\n    const list = element.style + ';'\n    const pat = name + '\\\\s*:\\\\s*(\\\\S+);'\n    const exp = new RegExp(pat, 'i')\n    let v = exp.exec(list)\n    if (v !== null) {\n      v = v[0] // name plus value\n      let i = v.indexOf(':') + 1 // skip past the ':'\n      while (v[i] === ' ') i++\n      v = v.slice(i, v.indexOf(';'))\n      return v\n    }\n  }\n  return undefined\n}\n\nconst reflect = (x, y, px, py) => {\n  const ox = x - px\n  const oy = y - py\n  if (x === px && y === px) return [x, y]\n  if (x === px) return [x, py + (-oy)]\n  if (y === py) return [px + (-ox), y]\n  return [px + (-ox), py + (-oy)]\n}\n\n// Return the value for the given attribute from the group hiearchy\nconst groupValue = (svgGroups, name) => {\n  let i = svgGroups.length\n  while (i > 0) {\n    const g = svgGroups[i - 1]\n    if (name in g) {\n      return g[name]\n    }\n    i--\n  }\n  return undefined\n}\n\nconst svgColorForTarget = (target, svgObject) => {\n  let color = null\n  if (target === 'path') {\n    if (svgObject.stroke) {\n      color = [svgObject.stroke[0], svgObject.stroke[1], svgObject.stroke[2], 1]\n    } else {\n      if (svgObject.fill) {\n        color = [svgObject.fill[0], svgObject.fill[1], svgObject.fill[2], 1]\n      }\n    }\n  } else {\n    // target is geom2\n    if (svgObject.fill) {\n      color = [svgObject.fill[0], svgObject.fill[1], svgObject.fill[2], 1]\n    } else {\n      if (svgObject.stroke) {\n        color = [svgObject.stroke[0], svgObject.stroke[1], svgObject.stroke[2], 1]\n      }\n    }\n  }\n  return color\n}\n\nmodule.exports = {\n  svg2cag,\n  cagLengthX,\n  cagLengthY,\n  cagLengthP,\n  css2cag,\n  cagColor,\n  cssStyle,\n  reflect,\n  groupValue,\n  svgColorForTarget\n}\n", "const { cagColor, cssStyle, css2cag } = require('./helpers')\nconst { pxPmm } = require('./constants')\n\nconst svgCore = (obj, element) => {\n  if ('id' in element) { obj.id = element.id }\n  if ('position' in element) { obj.position = element.position }\n}\n\nconst svgPresentation = (obj, element) => {\n  // presentation attributes for all\n  if ('display' in element) { obj.visible = element.display }\n  // presentation attributes for solids\n  if ('color' in element) { obj.fill = cagColor(element.color); obj.stroke = obj.fill }\n  if ('opacity' in element) { obj.opacity = element.opacity }\n  if ('fill' in element) {\n    obj.fill = cagColor(element.fill)\n  } else {\n    const s = cssStyle(element, 'fill')\n    if (s) {\n      obj.fill = cagColor(s)\n    }\n  }\n  if ('fill-opacity' in element) { obj.opacity = element['fill-opacity'] }\n  // presentation attributes for lines\n  if ('stroke-width' in element) {\n    obj.strokeWidth = element['stroke-width']\n  } else {\n    const sw = cssStyle(element, 'stroke-width')\n    if (sw) {\n      obj.strokeWidth = sw\n    }\n  }\n  if ('stroke' in element) {\n    obj.stroke = cagColor(element.stroke)\n  } else {\n    const s = cssStyle(element, 'stroke')\n    if (s) {\n      obj.stroke = cagColor(s)\n    }\n  }\n  if ('stroke-opacity' in element) { obj.strokeOpacity = element['stroke-opacity'] }\n}\n\nconst svgTransformsRegExp = /\\w+\\(.+\\)/i\n\nconst svgTransforms = (cag, element) => {\n  let list = null\n  if ('transform' in element) {\n    list = element.transform\n  } else {\n    const s = cssStyle(element, 'transform')\n    if (s) { list = s }\n  }\n  if (list !== null) {\n    cag.transforms = []\n    let v = svgTransformsRegExp.exec(list)\n    while (v !== null) {\n      const s = svgTransformsRegExp.lastIndex\n      const e = list.indexOf(')') + 1\n      let t = list.slice(s, e) // the transform\n      t = t.trim()\n      // add the transform to the CAG\n      // which are applied in the order provided\n      const n = t.slice(0, t.indexOf('('))\n      let a = t.slice(t.indexOf('(') + 1, t.indexOf(')')).trim()\n      if (a.indexOf(',') > 0) { a = a.split(',') } else { a = a.split(' ') }\n      let o\n      switch (n) {\n        case 'translate':\n          if (a.length === 1) a.push(0) // as per SVG\n          o = { translate: [a[0], a[1]] }\n          cag.transforms.push(o)\n          break\n        case 'scale':\n          if (a.length === 1) a.push(a[0]) // as per SVG\n          o = { scale: [a[0], a[1]] }\n          cag.transforms.push(o)\n          break\n        case 'rotate':\n          o = { rotate: a }\n          cag.transforms.push(o)\n          break\n        // case 'matrix':\n        // case 'skewX':\n        // case 'skewY':\n        default:\n          break\n      }\n      // shorten the list and continue\n      list = list.slice(e, list.length)\n      v = svgTransformsRegExp.exec(list)\n    }\n  }\n}\n\nconst viewBoxRegExp = /([\\d.-]+)[\\s,]+([\\d.-]+)[\\s,]+([\\d.-]+)[\\s,]+([\\d.-]+)/i\n\nconst svgSvg = (element, { customPxPmm }) => {\n  // default SVG with no viewport\n  const obj = { type: 'svg', x: 0, y: 0, width: '100%', height: '100%', strokeWidth: '1' }\n\n  // default units per mm\n  obj.unitsPmm = [pxPmm, pxPmm]\n\n  if ('pxpmm' in element) {\n    // WOW! a supplied value for pixels per milimeter!!!\n    obj.pxPmm = element.pxpmm\n    obj.unitsPmm = [obj.pxPmm, obj.pxPmm]\n  }\n  if ('width' in element) { obj.width = element.width }\n  if ('height' in element) { obj.height = element.height }\n  if ('viewBox' in element) {\n    const list = element.viewBox.trim()\n    const v = viewBoxRegExp.exec(list)\n    if (v !== null) {\n      obj.viewX = parseFloat(v[1])\n      obj.viewY = parseFloat(v[2])\n      obj.viewW = parseFloat(v[3])\n      obj.viewH = parseFloat(v[4])\n    }\n    // apply the viewbox\n    if (obj.width.indexOf('%') < 0) {\n      // calculate a scaling from width and viewW\n      let s = css2cag(obj.width, customPxPmm) // width in millimeters\n      s = obj.viewW / s\n      // scale the default units\n      // obj.unitsPmm[0] = obj.unitsPmm[0] * s;\n      obj.unitsPmm[0] = s\n    } else {\n      // scale the default units by the width (%)\n      const u = obj.unitsPmm[0] * (parseFloat(obj.width) / 100.0)\n      obj.unitsPmm[0] = u\n    }\n    if (obj.height.indexOf('%') < 0) {\n      // calculate a scaling from height and viewH\n      let s = css2cag(obj.height, pxPmm) // height in millimeters\n      s = obj.viewH / s\n      // scale the default units\n      // obj.unitsPmm[1] = obj.unitsPmm[1] * s;\n      obj.unitsPmm[1] = s\n    } else {\n      // scale the default units by the width (%)\n      const u = obj.unitsPmm[1] * (parseFloat(obj.height) / 100.0)\n      obj.unitsPmm[1] = u\n    }\n  } else {\n    obj.viewX = 0\n    obj.viewY = 0\n    obj.viewW = 1920 / obj.unitsPmm[0] // average screen size / pixels per unit\n    obj.viewH = 1080 / obj.unitsPmm[1] // average screen size / pixels per unit\n  }\n  obj.viewP = Math.sqrt((obj.viewW * obj.viewW) + (obj.viewH * obj.viewH)) / Math.SQRT2\n\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  obj.objects = []\n  return obj\n}\n\nconst svgEllipse = (element) => {\n  const obj = { type: 'ellipse', cx: '0', cy: '0', rx: '0', ry: '0' }\n  if ('cx' in element) { obj.cx = element.cx }\n  if ('cy' in element) { obj.cy = element.cy }\n  if ('rx' in element) { obj.rx = element.rx }\n  if ('ry' in element) { obj.ry = element.ry }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n  return obj\n}\n\nconst svgLine = (element) => {\n  const obj = { type: 'line', x1: '0', y1: '0', x2: '0', y2: '0' }\n  if ('x1' in element) { obj.x1 = element.x1 }\n  if ('y1' in element) { obj.y1 = element.y1 }\n  if ('x2' in element) { obj.x2 = element.x2 }\n  if ('y2' in element) { obj.y2 = element.y2 }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n  return obj\n}\n\nconst svgListOfPoints = (list) => {\n  const points = []\n  const exp = /([\\d\\-+.]+)[\\s,]+([\\d\\-+.]+)[\\s,]*/i\n  list = list.trim()\n  let v = exp.exec(list)\n  while (v !== null) {\n    let point = v[0]\n    const next = exp.lastIndex + point.length\n    point = { x: v[1], y: v[2] }\n    points.push(point)\n    list = list.slice(next, list.length)\n    v = exp.exec(list)\n  }\n  return points\n}\n\nconst svgPolyline = (element) => {\n  const obj = { type: 'polyline' }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  if ('points' in element) {\n    obj.points = svgListOfPoints(element.points)\n  }\n  return obj\n}\n\nconst svgPolygon = (element) => {\n  const obj = { type: 'polygon' }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  if ('points' in element) {\n    obj.points = svgListOfPoints(element.points)\n  }\n  return obj\n}\n\nconst svgRect = (element) => {\n  const obj = { type: 'rect', x: '0', y: '0', rx: '0', ry: '0', width: '0', height: '0' }\n\n  if ('x' in element) { obj.x = element.x }\n  if ('y' in element) { obj.y = element.y }\n  if ('rx' in element) {\n    obj.rx = element.rx\n    if (!('ry' in element)) { obj.ry = obj.rx } // by SVG specification\n  }\n  if ('ry' in element) {\n    obj.ry = element.ry\n    if (!('rx' in element)) { obj.rx = obj.ry } // by SVG specification\n  }\n  if (obj.rx !== obj.ry) {\n    console.log('Warning: Unsupported RECT with rx and ry radius')\n  }\n  if ('width' in element) { obj.width = element.width }\n  if ('height' in element) { obj.height = element.height }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n  return obj\n}\n\nconst svgCircle = (element) => {\n  const obj = { type: 'circle', x: '0', y: '0', radius: '0' }\n\n  if ('cx' in element) { obj.x = element.cx }\n  if ('cy' in element) { obj.y = element.cy }\n  if ('r' in element) { obj.radius = element.r }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n  return obj\n}\n\nconst svgGroup = (element) => {\n  const obj = { type: 'group' }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  if ('x' in element || 'y' in element) {\n    let x = '0'\n    let y = '0'\n    if ('x' in element) x = element.x\n    if ('y' in element) y = element.y\n    if (!('transforms' in obj)) obj.transforms = []\n    const o = { translate: [x, y] }\n    obj.transforms.push(o)\n  }\n\n  obj.objects = []\n  return obj\n}\n\n//\n// Convert the PATH element into object representation\n//\nconst svgPath = (element) => {\n  const obj = { type: 'path' }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  obj.commands = []\n  if ('d' in element) {\n    let co = null // current command\n    let bf = ''\n\n    let i = 0\n    const l = element.d.length\n    const offset = element.position[1] - l - 2\n    while (i < l) {\n      const c = element.d[i]\n      switch (c) {\n      // numbers\n      // FIXME support E notation numbers\n        case '-':\n          if (bf.length > 0) {\n            co.p.push(bf)\n            bf = ''\n          }\n          bf += c\n          break\n        case '.':\n          if (bf.length > 0) {\n            if (bf.indexOf('.') >= 0) {\n              co.p.push(bf)\n              bf = ''\n            }\n          }\n          bf += c\n          break\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          bf += c\n          break\n        // commands\n        case 'a':\n        case 'A':\n        case 'c':\n        case 'C':\n        case 'h':\n        case 'H':\n        case 'l':\n        case 'L':\n        case 'v':\n        case 'V':\n        case 'm':\n        case 'M':\n        case 'q':\n        case 'Q':\n        case 's':\n        case 'S':\n        case 't':\n        case 'T':\n        case 'z':\n        case 'Z':\n          if (co !== null) {\n            if (bf.length > 0) {\n              co.p.push(bf)\n              bf = ''\n            }\n            obj.commands.push(co)\n          }\n          co = { c: c, p: [], pos: i + offset }\n          break\n        // white space\n        case ',':\n        case ' ':\n        case '\\n':\n          if (co !== null) {\n            if (bf.length > 0) {\n              co.p.push(bf)\n              bf = ''\n            }\n          }\n          break\n        default:\n          break\n      }\n      i++\n    }\n    if (i === l && co !== null) {\n      if (bf.length > 0) {\n        co.p.push(bf)\n      }\n      obj.commands.push(co)\n    }\n  }\n  return obj\n}\n\n// generate GROUP with attributes from USE element\n// - expect x,y,height,width,XLINK:HREF\n// - append translate(x,y) if x,y available\n// deep clone the referenced OBJECT and add to group\n// - clone using JSON.parse(JSON.stringify(obj))\nconst svgUse = (element, { svgObjects }) => {\n  const obj = { type: 'group' }\n  // transforms\n  svgTransforms(obj, element)\n  // core attributes\n  svgCore(obj, element)\n  // presentation attributes\n  svgPresentation(obj, element)\n\n  if ('x' in element || 'y' in element) {\n    let x = '0'\n    let y = '0'\n    if ('x' in element) x = element.x\n    if ('y' in element) y = element.y\n    if (!('transforms' in obj)) obj.transforms = []\n    const o = { translate: [x, y] }\n    obj.transforms.push(o)\n  }\n\n  obj.objects = []\n  if ('xlink:href' in element) {\n  // lookup the named object\n    let ref = element['xlink:href']\n    if (ref[0] === '#') { ref = ref.slice(1, ref.length) }\n    if (svgObjects[ref] !== undefined) {\n      ref = svgObjects[ref]\n      ref = JSON.parse(JSON.stringify(ref))\n      obj.objects.push(ref)\n    }\n  }\n  return obj\n}\n\nmodule.exports = {\n  svgCore,\n  svgPresentation,\n  svgSvg,\n  svgRect,\n  svgCircle,\n  svgEllipse,\n  svgLine,\n  svgPolyline,\n  svgPolygon,\n  svgGroup,\n  svgPath,\n  svgUse\n}\n", "const { geometries, primitives } = require('@jscad/modeling')\n\nconst { svg2cag, cagLengthX, cagLengthY, cagLengthP, reflect } = require('./helpers')\n\nconst shapesMapGeometry = (obj, objectify, params) => {\n  const { svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, target, segments, pathSelfClosed } = params\n\n  const types = {\n    group: (obj) => objectify({ target, segments }, obj),\n\n    rect: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments) => {\n      let x = cagLengthX(obj.x, svgUnitsPmm, svgUnitsX)\n      let y = (0 - cagLengthY(obj.y, svgUnitsPmm, svgUnitsY))\n      const w = cagLengthX(obj.width, svgUnitsPmm, svgUnitsX)\n      const h = cagLengthY(obj.height, svgUnitsPmm, svgUnitsY)\n      const rx = cagLengthX(obj.rx, svgUnitsPmm, svgUnitsX)\n      // const ry = cagLengthY(obj.ry, svgUnitsPmm, svgUnitsY)\n\n      let shape\n      if (w > 0 && h > 0) {\n        x = (x + (w / 2)) // position the object via the center\n        y = (y - (h / 2)) // position the object via the center\n        if (rx === 0) {\n          shape = primitives.rectangle({ center: [x, y], size: [w, h] })\n        } else {\n          shape = primitives.roundedRectangle({ center: [x, y], segments, size: [w, h], roundRadius: rx })\n        }\n        if (target === 'path') {\n          shape = geometries.path2.fromPoints({ closed: true }, geometries.geom2.toPoints(shape))\n        }\n      }\n      return shape\n    },\n\n    circle: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments) => {\n      const x = cagLengthX(obj.x, svgUnitsPmm, svgUnitsX)\n      const y = (0 - cagLengthY(obj.y, svgUnitsPmm, svgUnitsY))\n      const r = cagLengthP(obj.radius, svgUnitsPmm, svgUnitsV)\n\n      let shape\n      if (r > 0) {\n        shape = primitives.circle({ center: [x, y], segments, radius: r })\n        if (target === 'path') {\n          shape = geometries.path2.fromPoints({ closed: true }, geometries.geom2.toPoints(shape))\n        }\n      }\n      return shape\n    },\n\n    ellipse: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments) => {\n      const rx = cagLengthX(obj.rx, svgUnitsPmm, svgUnitsX)\n      const ry = cagLengthY(obj.ry, svgUnitsPmm, svgUnitsY)\n      const cx = cagLengthX(obj.cx, svgUnitsPmm, svgUnitsX)\n      const cy = (0 - cagLengthY(obj.cy, svgUnitsPmm, svgUnitsY))\n\n      let shape\n      if (rx > 0 && ry > 0) {\n        shape = primitives.ellipse({ center: [cx, cy], segments, radius: [rx, ry] })\n        if (target === 'path') {\n          shape = geometries.path2.fromPoints({ closed: true }, geometries.geom2.toPoints(shape))\n        }\n      }\n      return shape\n    },\n\n    line: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV) => {\n      const x1 = cagLengthX(obj.x1, svgUnitsPmm, svgUnitsX)\n      const y1 = (0 - cagLengthY(obj.y1, svgUnitsPmm, svgUnitsY))\n      const x2 = cagLengthX(obj.x2, svgUnitsPmm, svgUnitsX)\n      const y2 = (0 - cagLengthY(obj.y2, svgUnitsPmm, svgUnitsY))\n      // let r = cssPxUnit // default\n      // if ('strokeWidth' in obj) {\n      //   r = cagLengthP(obj.strokeWidth, svgUnitsPmm, svgUnitsV) / 2\n      // } else {\n      //   const v = groupValue(svgGroups, 'strokeWidth')\n      //   if (v !== null) {\n      //     r = cagLengthP(v, svgUnitsPmm, svgUnitsV) / 2\n      //   }\n      // }\n\n      const shape = primitives.line([[x1, y1], [x2, y2]])\n      if (target === 'geom2') {\n        // TODO expand if 2D target\n      }\n      return shape\n    },\n\n    polygon: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY) => {\n      const points = []\n      for (let j = 0; j < obj.points.length; j++) {\n        const p = obj.points[j]\n        if ('x' in p && 'y' in p) {\n          const x = cagLengthX(p.x, svgUnitsPmm, svgUnitsX)\n          const y = (0 - cagLengthY(p.y, svgUnitsPmm, svgUnitsY))\n          points.push([x, y])\n        }\n      }\n      if (target === 'geom2') {\n        return geometries.geom2.fromPoints(points)\n      }\n      return geometries.path2.fromPoints({}, points)\n    },\n\n    polyline: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV) => {\n      const points = []\n      // let r = cssPxUnit // default\n      // if ('strokeWidth' in obj) {\n      //   r = cagLengthP(obj.strokeWidth, svgUnitsPmm, svgUnitsV) / 2\n      // } else {\n      //   const v = groupValue(svgGroups, 'strokeWidth')\n      //   if (v !== null) {\n      //     r = cagLengthP(v, svgUnitsPmm, svgUnitsV) / 2\n      //   }\n      // }\n      for (let j = 0; j < obj.points.length; j++) {\n        const p = obj.points[j]\n        if ('x' in p && 'y' in p) {\n          const x = cagLengthX(p.x, svgUnitsPmm, svgUnitsX)\n          const y = (0 - cagLengthY(p.y, svgUnitsPmm, svgUnitsY))\n          points.push([x, y])\n        }\n      }\n\n      const shape = primitives.line(points)\n      if (target === 'geom2') {\n        // TODO expand if 2D target\n        // .expandToCAG(r, CSG.defaultResolution2D)\n      }\n      return shape\n    },\n\n    path: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments) => {\n      const listofpaths = expandPath(obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments, pathSelfClosed)\n      // order is important\n      const listofentries = Object.entries(listofpaths).sort((a, b) => a[0].localeCompare(b[0]))\n      const shapes = listofentries.map((entry) => {\n        const path = entry[1]\n        if (target === 'geom2' && path.isClosed) {\n          const points = geometries.path2.toPoints(path).slice()\n          points.push(points[0]) // add first point again to create closing sides\n          return geometries.geom2.fromPoints(points)\n        }\n        return path\n      })\n      return shapes\n    }\n  }\n\n  return types[obj.type](obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments)\n}\n\nmodule.exports = shapesMapGeometry\n\nconst appendPoints = (points, geometry) => {\n  if (geometry) return geometries.path2.appendPoints(points, geometry)\n  return geometries.path2.fromPoints({ }, points)\n}\n\nconst expandPath = (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, segments, pathSelfClosed) => {\n  const paths = {}\n  const on = 'path'\n\n  // let r = cssPxUnit // default\n  // if ('strokeWidth' in obj) {\n  //   r = cagLengthP(obj.strokeWidth, svgUnitsPmm, svgUnitsV) / 2\n  // } else {\n  //   const v = groupValue(svgGroups, 'strokeWidth')\n  //   if (v !== null) {\n  //     r = cagLengthP(v, svgUnitsPmm, svgUnitsV) / 2\n  //   }\n  // }\n  // Note: All values are SVG values\n  let sx = 0 // starting position\n  let sy = 0\n  let cx = 0 // current position\n  let cy = 0\n  let pi = 0 // current path index\n  let pathName = on + pi // current path name\n  let pc = false // current path closed\n  let bx = 0 // 2nd control point from previous C command\n  let by = 0 // 2nd control point from previous C command\n  let qx = 0 // 2nd control point from previous Q command\n  let qy = 0 // 2nd control point from previous Q command\n\n  const newPath = () => {\n    pi++\n    pathName = on + pi\n    pc = false\n  }\n  const ensurePath = () => {\n    if (!paths[pathName]) paths[pathName] = geometries.path2.fromPoints({}, [])\n  }\n  for (let j = 0; j < obj.commands.length; j++) {\n    const co = obj.commands[j]\n    const pts = co.p\n    let i = 0\n    switch (co.c) {\n      case 'm': // relative move to X,Y\n        // special case, if at beginning of path then treat like absolute M\n        if (j === 0) {\n          cx = 0; cy = 0\n        }\n        // close the previous path\n        if (pi > 0 && pc === false) {\n          // FIXME paths[pathName] =  paths[pathName]\n        }\n        // open a new path\n        if (pts.length >= i + 2) {\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          newPath()\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)])\n          sx = cx; sy = cy\n        }\n        // optional implicit relative lineTo (cf SVG spec 8.3.2)\n        while (pts.length >= i + 2) {\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'M': // absolute move to X,Y\n        // close the previous path\n        if (pi > 0 && pc === false) {\n          // FIXME paths[pathName] = paths[pathName]\n        }\n        // open a new path\n        if (pts.length >= i + 2) {\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          newPath()\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)])\n          sx = cx; sy = cy\n        }\n        // optional implicit absolute lineTo (cf SVG spec 8.3.2)\n        while (pts.length >= i + 2) {\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'a': // relative elliptical arc\n        while (pts.length >= i + 7) {\n          const rx = parseFloat(pts[i++])\n          const ry = parseFloat(pts[i++])\n          const ro = 0 - parseFloat(pts[i++]) * 0.017453292519943295 // radians\n          const lf = (pts[i++] === '1')\n          const sf = (pts[i++] === '1')\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendArc({\n            segments,\n            endpoint: svg2cag([cx, cy], svgUnitsPmm),\n            radius: svg2cag([rx, ry], svgUnitsPmm),\n            xaxisrotation: ro,\n            clockwise: sf,\n            large: lf\n          }, paths[pathName])\n        }\n        break\n      case 'A': // absolute elliptical arc\n        while (pts.length >= i + 7) {\n          const rx = parseFloat(pts[i++])\n          const ry = parseFloat(pts[i++])\n          const ro = 0 - parseFloat(pts[i++]) * 0.017453292519943295 // radians\n          const lf = (pts[i++] === '1')\n          const sf = (pts[i++] === '1')\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendArc({\n            segments,\n            endpoint: svg2cag([cx, cy], svgUnitsPmm),\n            radius: svg2cag([rx, ry], svgUnitsPmm),\n            xaxisrotation: ro,\n            clockwise: sf,\n            large: lf\n          }, paths[pathName])\n        }\n        break\n      case 'c': // relative cubic Bézier\n        while (pts.length >= i + 6) {\n          const x1 = cx + parseFloat(pts[i++])\n          const y1 = cy + parseFloat(pts[i++])\n          bx = cx + parseFloat(pts[i++])\n          by = cy + parseFloat(pts[i++])\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag([x1, y1], svgUnitsPmm),\n              svg2cag([bx, by], svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'C': // absolute cubic Bézier\n        while (pts.length >= i + 6) {\n          const x1 = parseFloat(pts[i++])\n          const y1 = parseFloat(pts[i++])\n          bx = parseFloat(pts[i++])\n          by = parseFloat(pts[i++])\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag([x1, y1], svgUnitsPmm),\n              svg2cag([bx, by], svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'q': // relative quadratic Bézier\n        while (pts.length >= i + 4) {\n          const p0 = [cx, cy] // previous point\n          qx = cx + parseFloat(pts[i++])\n          qy = cy + parseFloat(pts[i++])\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag(q1, svgUnitsPmm),\n              svg2cag(q2, svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 'Q': // absolute quadratic Bézier\n        while (pts.length >= i + 4) {\n          const p0 = [cx, cy] // previous point\n          qx = parseFloat(pts[i++])\n          qy = parseFloat(pts[i++])\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag(q1, svgUnitsPmm),\n              svg2cag(q2, svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 't': // relative quadratic Bézier shorthand\n        while (pts.length >= i + 2) {\n          const p0 = [cx, cy] // previous point\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag(q1, svgUnitsPmm),\n              svg2cag(q2, svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 'T': // absolute quadratic Bézier shorthand\n        while (pts.length >= i + 2) {\n          const p0 = [cx, cy] // previous point\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag(q1, svgUnitsPmm),\n              svg2cag(q2, svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 's': // relative cubic Bézier shorthand\n        while (pts.length >= i + 4) {\n          const x1 = bx // reflection of 2nd control point from previous C\n          const y1 = by // reflection of 2nd control point from previous C\n          bx = cx + parseFloat(pts[i++])\n          by = cy + parseFloat(pts[i++])\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments, controlPoints: [\n              svg2cag([x1, y1], svgUnitsPmm),\n              svg2cag([bx, by], svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'S': // absolute cubic Bézier shorthand\n        while (pts.length >= i + 4) {\n          const x1 = bx // reflection of 2nd control point from previous C\n          const y1 = by // reflection of 2nd control point from previous C\n          bx = parseFloat(pts[i++])\n          by = parseFloat(pts[i++])\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          ensurePath()\n          paths[pathName] = geometries.path2.appendBezier({\n            segments,\n            controlPoints: [\n              svg2cag([x1, y1], svgUnitsPmm),\n              svg2cag([bx, by], svgUnitsPmm),\n              svg2cag([cx, cy], svgUnitsPmm)\n            ]\n          }, paths[pathName])\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'h': // relative Horzontal line to\n        while (pts.length >= i + 1) {\n          cx = cx + parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'H': // absolute Horzontal line to\n        while (pts.length >= i + 1) {\n          cx = parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'l': // relative line to\n        while (pts.length >= i + 2) {\n          cx = cx + parseFloat(pts[i++])\n          cy = cy + parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'L': // absolute line to\n        while (pts.length >= i + 2) {\n          cx = parseFloat(pts[i++])\n          cy = parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'v': // relative Vertical line to\n        while (pts.length >= i + 1) {\n          cy = cy + parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'V': // absolute Vertical line to\n        while (pts.length >= i + 1) {\n          cy = parseFloat(pts[i++])\n          paths[pathName] = appendPoints([svg2cag([cx, cy], svgUnitsPmm)], paths[pathName])\n        }\n        break\n      case 'z': // close current line\n      case 'Z':\n        paths[pathName] = geometries.path2.close(paths[pathName])\n        cx = sx\n        cy = sy // return to the starting point\n        pc = true\n        break\n      default:\n        console.log('Warning: Unknow PATH command [' + co.c + ']')\n        break\n    }\n\n    const isCloseCmd = (cmd) => cmd === 'z' || cmd === 'Z'\n\n    if (pc !== true && paths[pathName] && paths[pathName].isClosed) {\n      let coNext = obj.commands[j + 1]\n      // allow self close in the last command #1135 (coNext is null or undefined)\n      // if do have a next command use pathSelfClosed to decide how to react to closing in the middle of a path \n      if (coNext && !isCloseCmd(coNext.c)) {\n        if (pathSelfClosed === 'trim') {\n          while (coNext && !isCloseCmd(coNext.c)) {\n            j++\n            coNext = obj.commands[j + 1]\n          }\n        } else if (pathSelfClosed === 'split') {\n          newPath()\n        }else{ \n          throw new Error(`Malformed svg path at ${obj.position[0]}:${co.pos}. Path closed itself with command #${j} ${co.c}${pts.join(' ')}`)\n        }\n      }\n    }\n  }\n  return paths\n}\n", "const { svg2cag, cagLengthX, cagLengthY, cagLengthP, reflect } = require('./helpers')\n\nconst shapesMap = (obj, codify, params) => {\n  const { level, indent, on, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, svgGroups, target, segments } = params\n\n  const types = {\n    group: (obj) => {\n      let code = codify({ target, segments }, obj)\n      code += `${indent}${on} = levels.l${level + 1}\\n`\n      return code\n    },\n\n    rect: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, params, svgGroups, segments) => {\n      let x = cagLengthX(obj.x, svgUnitsPmm, svgUnitsX)\n      let y = (0 - cagLengthY(obj.y, svgUnitsPmm, svgUnitsY))\n      const w = cagLengthX(obj.width, svgUnitsPmm, svgUnitsX)\n      const h = cagLengthY(obj.height, svgUnitsPmm, svgUnitsY)\n      const rx = cagLengthX(obj.rx, svgUnitsPmm, svgUnitsX)\n      // const ry = cagLengthY(obj.ry, svgUnitsPmm, svgUnitsY)\n      let code\n      if (w > 0 && h > 0) {\n        x = (x + (w / 2)).toFixed(4) // position the object via the center\n        y = (y - (h / 2)).toFixed(4) // position the object via the center\n        if (rx === 0) {\n          code = `${indent}${on} = primitives.rectangle({center: [${x}, ${y}], size: [${w}, ${h}]}) // line ${obj.position}\\n`\n        } else {\n          code = `${indent}${on} = primitives.roundedRectangle({center: [${x}, ${y}], segments: ${segments}, size: [${w}, ${h}], roundRadius: ${rx}}) // line ${obj.position}\\n`\n        }\n        if (target === 'path') {\n          code += `${indent}${on} = geometries.path2.fromPoints({closed: true}, geometries.geom2.toPoints(${on}))\\n`\n        }\n      }\n      return code\n    },\n\n    circle: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, params, svgGroups, segments) => {\n      const x = cagLengthX(obj.x, svgUnitsPmm, svgUnitsX)\n      const y = (0 - cagLengthY(obj.y, svgUnitsPmm, svgUnitsY))\n      const r = cagLengthP(obj.radius, svgUnitsPmm, svgUnitsV)\n      let code\n      if (r > 0) {\n        code = `${indent}${on} = primitives.circle({center: [${x}, ${y}], segments: ${segments}, radius: ${r}}) // line ${obj.position}\\n`\n        if (target === 'path') {\n          code += `${indent}${on} = geometries.path2.fromPoints({closed: true}, geometries.geom2.toPoints(${on}))\\n`\n        }\n      }\n      return code\n    },\n\n    ellipse: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, params, svgGroups, segments) => {\n      const rx = cagLengthX(obj.rx, svgUnitsPmm, svgUnitsX)\n      const ry = cagLengthY(obj.ry, svgUnitsPmm, svgUnitsY)\n      const cx = cagLengthX(obj.cx, svgUnitsPmm, svgUnitsX)\n      const cy = (0 - cagLengthY(obj.cy, svgUnitsPmm, svgUnitsY))\n      let code\n      if (rx > 0 && ry > 0) {\n        code = `${indent}${on} = primitives.ellipse({center: [${cx}, ${cy}], segments: ${segments}, radius: [${rx}, ${ry}]}) // line ${obj.position}\\n`\n        if (target === 'path') {\n          code += `${indent}${on} = geometries.path2.fromPoints({closed: true}, geometries.geom2.toPoints(${on}))\\n`\n        }\n      }\n      return code\n    },\n\n    line: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV) => {\n      const x1 = cagLengthX(obj.x1, svgUnitsPmm, svgUnitsX)\n      const y1 = (0 - cagLengthY(obj.y1, svgUnitsPmm, svgUnitsY))\n      const x2 = cagLengthX(obj.x2, svgUnitsPmm, svgUnitsX)\n      const y2 = (0 - cagLengthY(obj.y2, svgUnitsPmm, svgUnitsY))\n      const code = `${indent}${on} = primitives.line([[${x1}, ${y1}], [${x2}, ${y2}]]) // line ${obj.position}\\n`\n      if (target === 'geom2') {\n        // TODO expand the line to 2D geom\n        // const r = getStrokeWidth(obj, svgUnitsPmm, svgUnitsV, svgGroups)\n      }\n      return code\n    },\n\n    polygon: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY) => {\n      let code = `${indent}${on} = primitives.polygon({points: [\\n`\n      for (let j = 0; j < obj.points.length; j++) {\n        const p = obj.points[j]\n        if ('x' in p && 'y' in p) {\n          const x = cagLengthX(p.x, svgUnitsPmm, svgUnitsX)\n          const y = (0 - cagLengthY(p.y, svgUnitsPmm, svgUnitsY))\n          code += `${indent}  [${x}, ${y}],\\n`\n        }\n      }\n      code += `${indent}]}) // line ${obj.position}\\n`\n      if (target === 'path') {\n        code += `${indent}${on} = geometries.path2.fromPoints({closed: true}, geometries.geom2.toPoints(${on}))\\n`\n      }\n      return code\n    },\n\n    polyline: (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV) => {\n      let code = `${indent}${on} = geometries.path2.fromPoints({}, [\\n`\n      for (let j = 0; j < obj.points.length; j++) {\n        const p = obj.points[j]\n        if ('x' in p && 'y' in p) {\n          const x = cagLengthX(p.x, svgUnitsPmm, svgUnitsX)\n          const y = (0 - cagLengthY(p.y, svgUnitsPmm, svgUnitsY))\n          code += `${indent}  [${x}, ${y}],\\n`\n        }\n      }\n      code += `${indent}]) // line ${obj.position}\\n`\n      if (target === 'geom2') {\n        // TODO expand the line to 2D geom\n        // const r = getStrokeWidth(obj, svgUnitsPmm, svgUnitsV, svgGroups)\n      }\n      return code\n    },\n\n    path\n  }\n\n  return types[obj.type](obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, params, svgGroups, segments)\n}\n\nmodule.exports = shapesMap\n\n// const getStrokeWidth = (obj, svgUnitsPmm, svgUnitsV, svgGroups) => {\n//   let r = cssPxUnit // default\n//   if ('strokeWidth' in obj) {\n//     r = cagLengthP(obj.strokeWidth, svgUnitsPmm, svgUnitsV) / 2\n//   } else {\n//     const v = groupValue(svgGroups, 'strokeWidth')\n//     if (v !== null) {\n//       r = cagLengthP(v, svgUnitsPmm, svgUnitsV) / 2\n//     }\n//   }\n//   return r\n// }\n\nconst path = (obj, svgUnitsPmm, svgUnitsX, svgUnitsY, svgUnitsV, params, svgGroups, segments) => {\n  const { indent, on, target } = params\n  let tmpCode = `${indent}parts = [] // line ${obj.position}\\n`\n\n  // Note: All values are SVG values\n  let sx = 0 // starting position\n  let sy = 0\n  let cx = 0 // current position\n  let cy = 0\n  let pi = 0 // current path index\n  let pathName = on + pi // current path name\n  let pc = false // current path closed\n  let bx = 0 // 2nd control point from previous C command\n  let by = 0 // 2nd control point from previous C command\n  let qx = 0 // 2nd control point from previous Q command\n  let qy = 0 // 2nd control point from previous Q command\n\n  for (let j = 0; j < obj.commands.length; j++) {\n    const co = obj.commands[j]\n    const pts = co.p\n    // console.log('postion: ['+cx+','+cy+'] before '+co.c);\n    switch (co.c) {\n      case 'm': // relative move to X,Y\n        // special case, if at beginning of path then treat like absolute M\n        if (j === 0) {\n          cx = 0; cy = 0\n        }\n        // complete the previous path\n        if (pi > 0 && pc === false) {\n          tmpCode += `${indent}parts.push(${pathName})\\n`\n        }\n        // open a new path\n        if (pts.length >= 2) {\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          pi++\n          pc = false\n          pathName = on + pi\n          tmpCode += `${indent}${pathName} = geometries.path2.fromPoints({}, [[${svg2cag([cx, cy], svgUnitsPmm)}]])\\n`\n          sx = cx; sy = cy\n        }\n        // optional implicit relative lineTo (cf SVG spec 8.3.2)\n        while (pts.length >= 2) {\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([${svg2cag([cx, cy], svgUnitsPmm)}], ${pathName})\\n`\n        }\n        break\n      case 'M': // absolute move to X,Y\n        // complete the previous path\n        if (pi > 0 && pc === false) {\n          tmpCode += `${indent}parts.push(${pathName})\\n`\n        }\n        // open a new path\n        if (pts.length >= 2) {\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          pi++\n          pc = false\n          pathName = on + pi\n          tmpCode += `${indent}${pathName} = geometries.path2.fromPoints({}, [[${svg2cag([cx, cy], svgUnitsPmm)}]])\\n`\n          sx = cx; sy = cy\n        }\n        // optional implicit absolute lineTo (cf SVG spec 8.3.2)\n        while (pts.length >= 2) {\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([${svg2cag([cx, cy], svgUnitsPmm)}], ${pathName})\\n`\n        }\n        break\n      case 'a': // relative elliptical arc\n        while (pts.length >= 7) {\n          const rx = parseFloat(pts.shift())\n          const ry = parseFloat(pts.shift())\n          const ro = 0 - parseFloat(pts.shift()) * 0.017453292519943295\n          const lf = (pts.shift() === '1')\n          const sf = (pts.shift() === '1')\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendArc({segments: ${segments}, endpoint: [${svg2cag([cx, cy], svgUnitsPmm)}], radius: [${svg2cag([rx, ry], svgUnitsPmm)}], xaxisrotation: ${ro}, clockwise: ${sf}, large: ${lf}}, ${pathName})\\n`\n        }\n        break\n      case 'A': // absolute elliptical arc\n        while (pts.length >= 7) {\n          const rx = parseFloat(pts.shift())\n          const ry = parseFloat(pts.shift())\n          const ro = 0 - parseFloat(pts.shift()) * 0.017453292519943295\n          const lf = (pts.shift() === '1')\n          const sf = (pts.shift() === '1')\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendArc({segments: ${segments}, endpoint: [${svg2cag([cx, cy], svgUnitsPmm)}], radius: [${svg2cag([rx, ry], svgUnitsPmm)}], xaxisrotation: ${ro}, clockwise: ${sf}, large: ${lf}}, ${pathName})\\n`\n        }\n        break\n      case 'c': // relative cubic Bézier\n        while (pts.length >= 6) {\n          const x1 = cx + parseFloat(pts.shift())\n          const y1 = cy + parseFloat(pts.shift())\n          bx = cx + parseFloat(pts.shift())\n          by = cy + parseFloat(pts.shift())\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag([x1, y1], svgUnitsPmm)}], [${svg2cag([bx, by], svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'C': // absolute cubic Bézier\n        while (pts.length >= 6) {\n          const x1 = parseFloat(pts.shift())\n          const y1 = parseFloat(pts.shift())\n          bx = parseFloat(pts.shift())\n          by = parseFloat(pts.shift())\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag([x1, y1], svgUnitsPmm)}], [${svg2cag([bx, by], svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'q': // relative quadratic Bézier\n        while (pts.length >= 4) {\n          const p0 = [cx, cy] // previous point\n          qx = cx + parseFloat(pts.shift())\n          qy = cy + parseFloat(pts.shift())\n          cx = cx + parseFloat(pts.shift()) // end point\n          cy = cy + parseFloat(pts.shift())\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag(q1, svgUnitsPmm)}], [${svg2cag(q2, svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 'Q': // absolute quadratic Bézier\n        while (pts.length >= 4) {\n          const p0 = [cx, cy] // previous point\n          qx = parseFloat(pts.shift())\n          qy = parseFloat(pts.shift())\n          cx = parseFloat(pts.shift()) // end point\n          cy = parseFloat(pts.shift())\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag(q1, svgUnitsPmm)}], [${svg2cag(q2, svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 't': // relative quadratic Bézier shorthand\n        while (pts.length >= 2) {\n          const p0 = [cx, cy] // previous point\n          cx = cx + parseFloat(pts.shift()) // end point\n          cy = cy + parseFloat(pts.shift())\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[[${svg2cag(q1, svgUnitsPmm)}], [${svg2cag(q2, svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 'T': // absolute quadratic Bézier shorthand\n        while (pts.length >= 2) {\n          const p0 = [cx, cy] // previous point\n          cx = parseFloat(pts.shift()) // end point\n          cy = parseFloat(pts.shift())\n          const q1 = [p0[0] + (2/3) * (qx - p0[0]), p0[1] + (2/3) * (qy - p0[1])]\n          const q2 = [q1[0] + (1/3) * (cx - p0[0]), q1[1] + (1/3) * (cy - p0[1])]\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[[${svg2cag(q1, svgUnitsPmm)}], [${svg2cag(q2, svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(qx, qy, cx, cy)\n          qx = rf[0]\n          qy = rf[1]\n        }\n        break\n      case 's': // relative cubic Bézier shorthand\n        while (pts.length >= 4) {\n          const x1 = bx // reflection of 2nd control point from previous C\n          const y1 = by // reflection of 2nd control point from previous C\n          bx = cx + parseFloat(pts.shift())\n          by = cy + parseFloat(pts.shift())\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag([x1, y1], svgUnitsPmm)}], [${svg2cag([bx, by], svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'S': // absolute cubic Bézier shorthand\n        while (pts.length >= 4) {\n          const x1 = bx // reflection of 2nd control point from previous C\n          const y1 = by // reflection of 2nd control point from previous C\n          bx = parseFloat(pts.shift())\n          by = parseFloat(pts.shift())\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendBezier({segments: ${segments}, controlPoints: [[${svg2cag([x1, y1], svgUnitsPmm)}], [${svg2cag([bx, by], svgUnitsPmm)}], [${svg2cag([cx, cy], svgUnitsPmm)}]]}, ${pathName})\\n`\n          const rf = reflect(bx, by, cx, cy)\n          bx = rf[0]\n          by = rf[1]\n        }\n        break\n      case 'h': // relative Horzontal line to\n        while (pts.length >= 1) {\n          cx = cx + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'H': // absolute Horzontal line to\n        while (pts.length >= 1) {\n          cx = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'l': // relative line to\n        while (pts.length >= 2) {\n          cx = cx + parseFloat(pts.shift())\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'L': // absolute line to\n        while (pts.length >= 2) {\n          cx = parseFloat(pts.shift())\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'v': // relative Vertical line to\n        while (pts.length >= 1) {\n          cy = cy + parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'V': // absolute Vertical line to\n        while (pts.length >= 1) {\n          cy = parseFloat(pts.shift())\n          tmpCode += `${indent}${pathName} = geometries.path2.appendPoints([[${svg2cag([cx, cy], svgUnitsPmm)}]], ${pathName})\\n`\n        }\n        break\n      case 'z': // close current line\n      case 'Z':\n        tmpCode += `${indent}${pathName} = geometries.path2.close(${pathName})\\n`\n        if (target === 'geom2') {\n          tmpCode += `${indent}${pathName} = geometries.geom2.fromPoints(geometries.path2.toPoints(${pathName}))\\n`\n        }\n        tmpCode += `${indent}parts.push(${pathName})\\n`\n\n        cx = sx\n        cy = sy // return to the starting point\n        pc = true\n        break\n      default:\n        console.log('Warning: Unknow PATH command [' + co.c + ']')\n        break\n    }\n    // console.log('postion: ['+cx+','+cy+'] after '+co.c);\n  }\n  if (pi > 0 && pc === false) {\n    tmpCode += `${indent}parts.push(${pathName})\\n`\n  }\n  tmpCode += `${indent}${on} = parts\\n`\n  return tmpCode\n}\n", "/*\n## License\n\nCopyright (c) 2016 Z3 Development https://github.com/z3dev\n              2017 Mark 'kaosat-dev' Moissette\n\nThe upgrades (direct geometry instantiation from this deserializer) and refactoring\nhave been very kindly sponsored by [Copenhagen Fabrication / Stykka](https://www.stykka.com/)\n\nAll code released under MIT license\n*/\n\nconst saxes = require('saxes')\n\nconst { colors, transforms } = require('@jscad/modeling')\nconst { toArray } = require('@jscad/array-utils')\n\nconst version = require('../package.json').version\n\nconst { cagLengthX, cagLengthY, svgColorForTarget } = require('./helpers')\nconst { svgSvg, svgRect, svgCircle, svgGroup, svgLine, svgPath, svgEllipse, svgPolygon, svgPolyline, svgUse } = require('./svgElementHelpers')\nconst shapesMapGeometry = require('./shapesMapGeometry')\nconst shapesMapJscad = require('./shapesMapJscad')\n\n/**\n * Deserializer of SVG source data to JSCAD geometries.\n * @see {@link https://github.com/jscad/OpenJSCAD.org/blob/master/packages/io/svg-deserializer/README.md|README} for supported conversion of SVG elements.\n * @module io/svg-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/svg-deserializer')\n */\n\n/**\n * Deserialize the given SVG source into either a script or an array of geometries\n * @see {@link https://www.w3.org/TR/SVG/intro.html|SVG Specification}\n * @param {Object} options - options used during deserializing, REQUIRED\n * @param {boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {string} [options.filename='svg'] - filename of original SVG source\n * @param {string} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {float} [options.pxPmm] - custom pixels per mm unit\n * @param {integer} [options.segments] - number of segments for rounded shapes\n * @param {string} [options.target] - target 2D geometry; 'geom2' or 'path2'\n * @param {string} [options.version='0.0.0'] - version number to add to the metadata\n * @param {string} [options.pathSelfClosed='error'] - [error||trim||split] if path self-closes with one of commands without stop command right after\n * @param {string} input - SVG source data\n * @returns {(Array|String)} either an array of objects (geometry) or a string (script)\n * @alias module:io/svg-deserializer.deserialize\n */\nconst deserialize = (options, input) => {\n  const defaults = {\n    addMetaData: true,\n    filename: 'svg',\n    output: 'script',\n    pxPmm: require('./constants').pxPmm,\n    segments: 32,\n    target: 'path', // target - 'geom2' or 'path'\n    pathSelfClosed: 'error',\n    version\n  }\n  options = Object.assign({}, defaults, options)\n  return options.output === 'script' ? translate(input, options) : instantiate(input, options)\n}\n\n/*\n * Parse the given SVG source and return a set of geometries.\n * @param  {string} src - svg data as text\n * @param  {object} options - options (optional) anonymous object with:\n *  pxPmm {number} pixels per milimeter for calcuations\n *  version: {string} version number to add to the metadata\n *  addMetadata: {boolean} flag to enable/disable injection of metadata (producer, date, source)\n *\n * @return {[geometry]} a set of geometries\n */\nconst instantiate = (src, options) => {\n  const { pxPmm } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // parse the SVG source\n  createSvgParser(src, pxPmm)\n  if (!svgObj) {\n    throw new Error('SVG parsing failed, no valid SVG data retrieved')\n  }\n\n  options && options.statusCallback && options.statusCallback({ progress: 50 })\n\n  const result = objectify(options, svgObj)\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n  return result\n}\n\n/*\n * Parse the given SVG source and return a JSCAD script\n * @param  {string} src svg data as text\n * @param  {object} options options (optional) anonymous object with:\n *  pxPmm {number: pixels per milimeter for calcuations\n *  version: {string} version number to add to the metadata\n *  addMetadata: {boolean} flag to enable/disable injection of metadata (producer, date, source)\n *    at the start of the file\n * @return {string} a string (JSCAD script)\n */\nconst translate = (src, options) => {\n  const { filename, version, pxPmm, addMetaData } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // parse the SVG source\n  createSvgParser(src, pxPmm)\n  if (!svgObj) {\n    throw new Error('SVG parsing failed, no valid SVG data retrieved')\n  }\n\n  // convert the internal objects to JSCAD code\n  let code = addMetaData\n    ? `//\n  // producer: JSCAD SVG Deserializer ${version}\n  // date: ${new Date()}\n  // source: ${filename}\n  //\n`\n    : ''\n  code += 'const { colors, geometries, primitives, transforms } = require(\\'@jscad/modeling\\')\\n\\n'\n\n  options && options.statusCallback && options.statusCallback({ progress: 50 })\n\n  const scadCode = codify(options, svgObj)\n  code += scadCode\n  code += '\\nmodule.exports = { main }'\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n  return code\n}\n\n// FIXME: should these be kept here ? any risk of side effects ?\nlet svgUnitsX\nlet svgUnitsY\nlet svgUnitsV\n// processing controls\nconst svgObjects = [] // named objects\nconst svgGroups = [] // groups of objects\nconst svgDefs = [] // defined objects\nlet svgInDefs = false // svg DEFS element in process\nlet svgObj // svg in object form\nlet svgUnitsPmm = [1, 1]\n\n/*\n * Convert the given group (of objects) into geometries\n */\nconst objectify = (options, group) => {\n  const { target, segments, pathSelfClosed } = options\n  const level = svgGroups.length\n  // add this group to the heiarchy\n  svgGroups.push(group)\n  // create an indent for the generated code\n  let i = level\n  while (i > 0) {\n    i--\n  }\n\n  let geometries = []\n\n  const params = {\n    svgUnitsPmm,\n    svgUnitsX,\n    svgUnitsY,\n    svgUnitsV,\n    level,\n    target,\n    svgGroups,\n    segments,\n    pathSelfClosed\n  }\n  // apply base level attributes to all shapes\n  for (i = 0; i < group.objects.length; i++) {\n    const obj = group.objects[i]\n    let shapes = toArray(shapesMapGeometry(obj, objectify, params))\n    shapes = shapes.map((shape) => {\n      if ('transforms' in obj) {\n        // NOTE: SVG specifications require that transforms are applied in the order given.\n        // But these are applied in the order as required by JSCAD\n        let rotateAttribute = null\n        let scaleAttribute = null\n        let translateAttribute = null\n\n        for (let j = 0; j < obj.transforms.length; j++) {\n          const t = obj.transforms[j]\n          if ('rotate' in t) { rotateAttribute = t }\n          if ('scale' in t) { scaleAttribute = t }\n          if ('translate' in t) { translateAttribute = t }\n        }\n        if (scaleAttribute !== null) {\n          let x = Math.abs(scaleAttribute.scale[0])\n          let y = Math.abs(scaleAttribute.scale[1])\n          shape = transforms.scale([x, y, 1], shape)\n          // and mirror if necessary\n          x = scaleAttribute.scale[0]\n          y = scaleAttribute.scale[1]\n          if (x < 0) {\n            shape = transforms.mirrorX(shape)\n          }\n          if (y < 0) {\n            shape = transforms.mirrorY(shape)\n          }\n        }\n        if (rotateAttribute !== null) {\n          const z = 0 - rotateAttribute.rotate * 0.017453292519943295 // radians\n          shape = transforms.rotateZ(z, shape)\n        }\n        if (translateAttribute !== null) {\n          const x = cagLengthX(translateAttribute.translate[0], svgUnitsPmm, svgUnitsX)\n          const y = (0 - cagLengthY(translateAttribute.translate[1], svgUnitsPmm, svgUnitsY))\n          shape = transforms.translate([x, y, 0], shape)\n        }\n      }\n      const color = svgColorForTarget(target, obj)\n      if (color) shape = colors.colorize(color, shape)\n      return shape\n    })\n    geometries = geometries.concat(shapes)\n  }\n\n  // remove this group from the hiearchy\n  svgGroups.pop()\n\n  return geometries\n}\n\n/*\n * Convert the given group into JSCAD script\n */\nconst codify = (options, group) => {\n  const { target, segments } = options\n  const level = svgGroups.length\n  // add this group to the heiarchy\n  svgGroups.push(group)\n  // create an indent for the generated code\n  let indent = '  '\n  let i = level\n  while (i > 0) {\n    indent += '  '\n    i--\n  }\n  // pre-code\n  let code = ''\n  if (level === 0) {\n    code += 'function main(params) {\\n  let levels = {}\\n  let paths = {}\\n  let parts\\n'\n  }\n  const ln = 'levels.l' + level\n  code += `${indent}${ln} = []\\n`\n\n  // generate code for all objects\n  for (i = 0; i < group.objects.length; i++) {\n    const obj = group.objects[i]\n    const on = 'paths.p' + i\n\n    const params = {\n      level,\n      indent,\n      ln,\n      on,\n      svgUnitsPmm,\n      svgUnitsX,\n      svgUnitsY,\n      svgUnitsV,\n      svgGroups,\n      target,\n      segments\n    }\n\n    const tmpCode = shapesMapJscad(obj, codify, params)\n    code += tmpCode\n\n    if ('transforms' in obj) {\n      // NOTE: SVG specifications require that transforms are applied in the order given.\n      // But these are applied in the order as required by JSCAD\n      let rotateAttribute = null\n      let scaleAttribute = null\n      let translateAttribute = null\n\n      for (let j = 0; j < obj.transforms.length; j++) {\n        const t = obj.transforms[j]\n        if ('rotate' in t) { rotateAttribute = t }\n        if ('scale' in t) { scaleAttribute = t }\n        if ('translate' in t) { translateAttribute = t }\n      }\n      if (scaleAttribute !== null) {\n        let x = Math.abs(scaleAttribute.scale[0])\n        let y = Math.abs(scaleAttribute.scale[1])\n        code += `${indent}${on} = transforms.scale([${x}, ${y}, 1], ${on})\\n`\n        // and mirror if necessary\n        x = scaleAttribute.scale[0]\n        y = scaleAttribute.scale[1]\n        if (x < 0) {\n          code += `${indent}${on} = transforms.mirrorX(${on})\\n`\n        }\n        if (y < 0) {\n          code += `${indent}${on} = transforms.mirrorY(${on})\\n`\n        }\n      }\n      if (rotateAttribute !== null) {\n        const z = 0 - rotateAttribute.rotate * 0.017453292519943295 // radians\n        code += `${indent}${on} = transforms.rotateZ(${z}, ${on})\\n`\n      }\n      if (translateAttribute !== null) {\n        const x = cagLengthX(translateAttribute.translate[0], svgUnitsPmm, svgUnitsX)\n        const y = (0 - cagLengthY(translateAttribute.translate[1], svgUnitsPmm, svgUnitsY))\n        code += `${indent}${on} = transforms.translate([${x}, ${y}, 0], ${on})\\n`\n      }\n    }\n    const color = svgColorForTarget(target, obj)\n    if (color) {\n      code += `${indent}${on} = colors.colorize([${color}], ${on})\\n`\n    }\n    code += `${indent}${ln} = ${ln}.concat(${on})\\n\\n`\n  }\n  // post-code\n  if (level === 0) {\n    code += indent + 'return ' + ln + '\\n'\n    code += '}\\n'\n  }\n  // remove this group from the hiearchy\n  svgGroups.pop()\n\n  return code\n}\n\nconst createSvgParser = (src, pxPmm) => {\n  // create a parser for the XML\n  const parser = new saxes.SaxesParser()\n  if (pxPmm !== undefined && pxPmm > parser.pxPmm) {\n    parser.pxPmm = pxPmm\n  }\n  // extend the parser with functions\n  parser.on('error', (e) => {\n    console.log(`ERROR: SVG file, line ${parser.line}, column ${parser.column}`)\n    console.log(e)\n  })\n\n  parser.on('opentag', (node) => {\n    const objMap = {\n      SVG: svgSvg,\n      G: svgGroup,\n      RECT: svgRect,\n      CIRCLE: svgCircle,\n      ELLIPSE: svgEllipse,\n      LINE: svgLine,\n      POLYLINE: svgPolyline,\n      POLYGON: svgPolygon,\n      PATH: svgPath,\n      USE: svgUse,\n      DEFS: () => { svgInDefs = true; return undefined },\n      DESC: () => undefined, // ignored by design\n      TITLE: () => undefined, // ignored by design\n      STYLE: () => undefined, // ignored by design\n      undefined: () => console.log('WARNING: unsupported SVG element: ' + node.name)\n    }\n    node.attributes.position = [parser.line + 1, parser.column + 1]\n\n    const elementName = node.name.toUpperCase()\n    const obj = objMap[elementName] ? objMap[elementName](node.attributes, { svgObjects, customPxPmm: pxPmm }) : undefined\n\n    // case 'SYMBOL':\n    // this is just like an embedded SVG but does NOT render directly, only named\n    // this requires another set of control objects\n    // only add to named objects for later USE\n    //  break;\n\n    if (obj) {\n      // add to named objects if necessary\n      if ('id' in obj) {\n        svgObjects[obj.id] = obj\n      }\n      if (obj.type === 'svg') {\n        // initial SVG (group)\n        svgGroups.push(obj)\n        svgUnitsPmm = obj.unitsPmm\n        svgUnitsX = obj.viewW\n        svgUnitsY = obj.viewH\n        svgUnitsV = obj.viewP\n      } else {\n        // add the object to the active group if necessary\n        if (svgInDefs === true) {\n          if (svgDefs.length > 0) {\n            const group = svgDefs.pop()\n            if ('objects' in group) {\n              group.objects.push(obj)\n            }\n            svgDefs.push(group)\n          }\n          if (obj.type === 'group') {\n            svgDefs.push(obj)\n          }\n        } else {\n          if (svgGroups.length > 0) {\n            const group = svgGroups.pop()\n            if ('objects' in group) {\n            // TBD apply presentation attributes from the group\n              group.objects.push(obj)\n            }\n            svgGroups.push(group)\n          }\n          if (obj.type === 'group') {\n            svgGroups.push(obj)\n          }\n        }\n      }\n    }\n  })\n\n  parser.on('closetag', (node) => {\n    const popGroup = () => {\n      if (svgInDefs === true) {\n        return svgDefs.pop()\n      } else {\n        return svgGroups.pop()\n      }\n    }\n\n    const objMap = {\n      SVG: popGroup,\n      DEFS: () => { svgInDefs = false },\n      USE: popGroup,\n      G: popGroup,\n      undefined: () => {}\n    }\n    const elementName = node.name.toUpperCase()\n    const obj = objMap[elementName] ? objMap[elementName]() : undefined\n\n    // check for completeness\n    if (svgGroups.length === 0) {\n      svgObj = obj\n    }\n  })\n\n  parser.on('end', () => {\n    // console.log('SVG parsing completed')\n  })\n\n  // start the parser\n  parser.write(src).close()\n  return parser\n}\n\nconst extension = 'svg'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "{\n  \"name\": \"@jscad/x3d-deserializer\",\n  \"version\": \"2.2.5\",\n  \"description\": \"X3D Deserializer for JSCAD\",\n  \"repository\": \"https://github.com/jscad/OpenJSCAD.org/\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"coverage\": \"nyc --all --reporter=html --reporter=text npm test\",\n    \"test\": \"ava --verbose --timeout 2m 'tests/**/*.test.js'\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"z3dev\",\n      \"url\": \"https://github.com/z3dev\"\n    }\n  ],\n  \"keywords\": [\n    \"openjscad\",\n    \"jscad\",\n    \"import\",\n    \"deserializer\",\n    \"x3d\"\n  ],\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"dependencies\": {\n    \"@jscad/array-utils\": \"2.1.4\",\n    \"@jscad/modeling\": \"2.12.0\",\n    \"saxes\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"3.15.0\",\n    \"nyc\": \"15.1.0\"\n  },\n  \"gitHead\": \"e269f212db5a00cda740d2f7ad3e5206d1eb839f\"\n}\n", "const { maths } = require('@jscad/modeling')\n\nconst createTransform = (center, rotation, scale, scaleOrientation, translation) => {\n  const matrix = maths.mat4.create()\n  const temp = maths.mat4.create()\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromTranslation(temp, translation))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromTranslation(temp, center))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromRotation(temp, rotation[3], rotation))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromRotation(temp, scaleOrientation[3], scaleOrientation))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromScaling(temp, scale))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromRotation(temp, scaleOrientation[3], maths.vec3.negate(maths.vec3.create(), scaleOrientation)))\n  maths.mat4.multiply(matrix, matrix, maths.mat4.fromTranslation(temp, maths.vec3.negate(maths.vec3.create(), center)))\n\n  return matrix\n}\n\nmodule.exports = createTransform\n", "const { maths } = require('@jscad/modeling')\n\nconst x3dTypes = {\n  X3D: 0,\n  UNIT: 1,\n  META: 2,\n  SCENE: 3,\n  TRANSFORM: 4,\n  SHAPE: 5,\n  GROUP: 6,\n  APPEARANCE: 7,\n  // shapes with data nodes\n  TRIANGLESET: 10,\n  TRIANGLEFANSET: 11,\n  TRIANGLESTRIPSET: 12,\n  QUADSET: 13,\n  INDEXEDTRIANGLESET: 14,\n  INDEXEDTRIANGLEFANSET: 15,\n  INDEXEDTRIANGLESTRIPSET: 16,\n  INDEXEDQUADSET: 17,\n  ELEVATIONGRID: 18,\n  INDEXEDFACESET: 19,\n  LINESET: 20,\n  INDEXEDLINESET: 21,\n  // 3D primitives\n  BOX: 50,\n  CONE: 51,\n  CYLINDER: 52,\n  SPHERE: 53,\n  EXTRUSION: 54,\n  // 2D primitives\n  ARC2D: 61,\n  ARCCLOSE2D: 62,\n  CIRCLE2D: 63,\n  DISK2D: 64,\n  POLYLINE2D: 65,\n  RECTANGLE2D: 66,\n  TRIANGLESET2D: 67,\n  // data nodes\n  COLOR: 91,\n  COORDINATE: 92,\n  MATERIAL: 93\n}\n\n// document level node, basically a group\nconst x3dX3D = (element) => {\n  const obj = { definition: x3dTypes.X3D }\n\n  obj.objects = []\n  return obj\n}\n\nconst x3dUnit = (element) => {\n  const obj = { definition: x3dTypes.UNIT, category: '', name: '', conversionFactor: 1.0 }\n\n  if (element.category) obj.category = element.category\n  if (element.name) obj.name = element.name\n  if (element.conversionfactor) obj.conversionFactor = element.conversionfactor\n\n  return obj\n}\n\nconst x3dMeta = (element) => {\n  const obj = { definition: x3dTypes.META, content: '', name: '' }\n\n  if (element.content) obj.content = element.content\n  if (element.name) obj.name = element.name\n\n  return obj\n}\n\n// scenes contain various other nodes, basically a group\nconst x3dScene = (element) => {\n  const obj = { definition: x3dTypes.SCENE }\n  obj.objects = []\n  return obj\n}\n\n// transforms contain various other nodes, basically a group\n// horrific order of transforms... see http://edutechwiki.unige.ch/en/X3D_grouping_and_transforms\nconst x3dTransform = (element) => {\n  const obj = {\n    definition: x3dTypes.TRANSFORM,\n    center: [0, 0, 0],\n    rotation: [0, 0, 1, 0],\n    scale: [1, 1, 1],\n    scaleOrientation: [0, 0, 1, 0],\n    translation: [0, 0, 0]\n  }\n\n  if (element.center) {\n    const values = element.center.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      obj.center = values\n    }\n  }\n  if (element.rotation) {\n    const values = element.rotation.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 3) {\n      obj.rotation = values\n    }\n  }\n  if (element.scale) {\n    const values = element.scale.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      obj.scale = values\n    }\n  }\n  if (element.scaleorientation) {\n    const values = element.scaleorientation.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 3) {\n      obj.scaleOrientation = values\n    }\n  }\n  if (element.translation) {\n    const values = element.translation.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      obj.translation = values\n    }\n  }\n\n  obj.objects = []\n  return obj\n}\n\n// shapes contain geometry and appearance, in any order\nconst x3dShape = (element) => {\n  const obj = { definition: x3dTypes.SHAPE }\n  obj.objects = []\n  return obj\n}\n\n//\n// 3D shapes\n//\n\nconst x3dBox = (element) => {\n  const obj = { definition: x3dTypes.BOX, size: [2, 2, 2] }\n\n  if (element.size) {\n    const values = element.size.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      obj.size = values\n    }\n  }\n  return obj\n}\n\nconst x3dCone = (element) => {\n  const NEAR0 = 0.00001\n  const obj = { definition: x3dTypes.CONE, bottomRadius: 1, height: 2, subdivision: 32, topRadius: NEAR0 }\n\n  if (element.bottomRadius) {\n    obj.bottomRadius = Math.max(parseFloat(element.bottomRadius), NEAR0)\n  }\n  if (element.height) {\n    obj.height = parseFloat(element.height)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  if (element.topRadius) {\n    obj.topRadius = Math.max(parseFloat(element.topRadius), NEAR0)\n  }\n  return obj\n}\n\nconst x3dCylinder = (element) => {\n  const obj = { definition: x3dTypes.CYLINDER, height: 2, radius: 1, subdivision: 32 }\n\n  if (element.height) {\n    obj.height = parseFloat(element.height)\n  }\n  if (element.radius) {\n    obj.radius = parseFloat(element.radius)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  return obj\n}\n\nconst x3dSphere = (element) => {\n  const obj = { definition: x3dTypes.SPHERE, radius: 1, subdivision: 24 }\n\n  if (element.radius) {\n    obj.radius = parseFloat(element.radius)\n  }\n  if (element.subdivision) {\n    const values = element.subdivision.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 1) {\n      obj.subdivision = Math.max(...values)\n    }\n  }\n  return obj\n}\n\nconst x3dExtrusion = (element) => {\n  const obj = {\n    definition: x3dTypes.EXTRUSION,\n    ccw: true,\n    beginCap: true,\n    endCap: true,\n    crossSection: [[1, 1], [1, -1], [-1, -1], [-1, 1], [1, 1]],\n    orientations: [[0, 0, 1, 0]],\n    scales: [[1, 1]],\n    spine: [[0, 0, 0], [0, 1, 0]]\n  }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.beginCap) {\n    obj.beginCap = element.beginCap.includes('TRUE') || element.beginCap.includes('true')\n  }\n  if (element.endCap) {\n    obj.endCap = element.endCap.includes('TRUE') || element.endCap.includes('true')\n  }\n  if (element.crossSection) {\n    const values = element.crossSection.trim().split(/ +/).map((v) => parseFloat(v))\n    const numpoints = Math.trunc(values.length / 2)\n    const points = []\n    for (let i = 0; i < numpoints; i++) {\n      const vi = i * 2\n      points.push([values[vi], values[vi + 1]])\n    }\n    obj.ccw = (maths.utils.area(points) < 0) // WHAT!!!! X3D IS SICK!!!\n    obj.crossSection = points\n  }\n  if (element.orientation) {\n    const values = element.orientation.trim().split(/ +/).map((v) => parseFloat(v))\n    const numpoints = Math.trunc(values.length / 4)\n    const points = []\n    for (let i = 0; i < numpoints; i++) {\n      const vi = i * 4\n      points.push([values[vi], values[vi + 1], values[vi + 2], values[vi + 3]])\n    }\n    obj.orientations = points\n  }\n  if (element.scale) {\n    const values = element.scale.trim().split(/ +/).map((v) => parseFloat(v))\n    const numpoints = Math.trunc(values.length / 2)\n    const points = []\n    for (let i = 0; i < numpoints; i++) {\n      const vi = i * 2\n      // ug... X3D allows scaling to zero\n      if (values[vi] === 0) values[vi] = 0.000001\n      if (values[vi + 1] === 0) values[vi + 1] = 0.000001\n      points.push([values[vi], values[vi + 1]])\n    }\n    obj.scales = points\n  }\n  if (element.spine) {\n    const values = element.spine.trim().split(/ +/).map((v) => parseFloat(v))\n    const numpoints = Math.trunc(values.length / 3)\n    const points = []\n    for (let i = 0; i < numpoints; i++) {\n      const vi = i * 3\n      points.push([values[vi], values[vi + 1], values[vi + 2]])\n    }\n    obj.spine = points\n  }\n  return obj\n}\n\n//\n// 2D shapes\n//\n\nconst x3dArc2D = (element) => {\n  const obj = { definition: x3dTypes.ARC2D, endAngle: Math.PI / 2, radius: 1, startAngle: 0, subdivision: 32 }\n\n  if (element.endAngle) {\n    obj.endAngle = parseFloat(element.endAngle)\n  }\n  if (element.radius) {\n    obj.radius = parseFloat(element.radius)\n  }\n  if (element.startAngle) {\n    obj.startAngle = parseFloat(element.startAngle)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  return obj\n}\n\nconst x3dArcClose2D = (element) => {\n  const obj = { definition: x3dTypes.ARCCLOSE2D, closureType: 'PIE', endAngle: Math.PI / 2, radius: 1, startAngle: 0, subdivision: 32 }\n\n  if (element.closureType) {\n    obj.closureType = element.closureType\n  }\n  if (element.endAngle) {\n    obj.endAngle = parseFloat(element.endAngle)\n  }\n  if (element.radius) {\n    obj.radius = parseFloat(element.radius)\n  }\n  if (element.startAngle) {\n    obj.startAngle = parseFloat(element.startAngle)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  return obj\n}\n\nconst x3dCircle2D = (element) => {\n  const obj = { definition: x3dTypes.CIRCLE2D, radius: 1, subdivision: 32 }\n\n  if (element.radius) {\n    obj.radius = parseFloat(element.radius)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  return obj\n}\n\nconst x3dDisk2D = (element) => {\n  const obj = { definition: x3dTypes.DISK2D, innerRadius: 0, outerRadius: 1, subdivision: 32 }\n\n  if (element.innerRadius) {\n    obj.innerRadius = parseFloat(element.innerRadius)\n  }\n  if (element.outerRadius) {\n    obj.outerRadius = parseFloat(element.outerRadius)\n  }\n  if (element.subdivision) {\n    obj.subdivision = parseFloat(element.subdivision)\n  }\n  return obj\n}\n\nconst x3dPolyline2D = (element) => {\n  const obj = { definition: x3dTypes.POLYLINE2D, lineSegments: [] }\n\n  if (element.lineSegments) {\n    const values = element.lineSegments.trim().split(/ +/).map((v) => parseFloat(v))\n    for (let i = 0; i < values.length; i = i + 2) {\n      const point = [values[i], values[i + 1]]\n      obj.lineSegments.push(point)\n    }\n  }\n  return obj\n}\n\nconst x3dRectangle2D = (element) => {\n  const obj = { definition: x3dTypes.RECTANGLE2D, size: [2, 2] }\n\n  if (element.size) {\n    const values = element.size.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 1) {\n      obj.size = values\n    }\n  }\n  return obj\n}\n\nconst x3dTriangleSet2D = (element) => {\n  const obj = { definition: x3dTypes.TRIANGLESET2D, vertices: [] }\n\n  if (element.vertices) {\n    const values = element.vertices.trim().split(/ +/).map((v) => parseFloat(v))\n    for (let i = 0; i < values.length; i = i + 2) {\n      const point = [values[i], values[i + 1]]\n      obj.vertices.push(point)\n    }\n  }\n  return obj\n}\n\n//\n// Lines\n//\n\nconst x3dLineSet = (element) => {\n  const obj = { definition: x3dTypes.LINESET, vertexCount: [], colorPerVertex: true }\n\n  if (element.vertexCount) {\n    obj.vertexCount = element.vertexCount.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  // color attributes\n  if (element.colorPerVertex) {\n    obj.colorPerVertex = element.colorPerVertex.includes('TRUE') || element.colorPerVertex.includes('true')\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dIndexedLineSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDLINESET, indexes: [], colorPerVertex: true }\n\n  if (element.coordIndex) {\n    const indexes = element.coordIndex.trim().split(/ -1/)\n    obj.indexes = indexes.map((index) => index.trim().split(/ +/).map((v) => parseFloat(v)))\n    obj.indexes = obj.indexes.filter((index) => index.length > 1)\n  }\n  // color attributes\n  if (element.colorPerVertex) {\n    obj.colorPerVertex = element.colorPerVertex.includes('TRUE') || element.colorPerVertex.includes('true')\n  }\n  obj.objects = []\n  return obj\n}\n\n//\n// Meshs\n//\n\nconst x3dColor = (element) => {\n  const obj = { definition: x3dTypes.COLOR, colors: [] }\n\n  if (element.color) {\n    const values = element.color.trim().split(/ +/).map((v) => parseFloat(v))\n    const numvalues = values.length\n    const numcolors = Math.trunc(numvalues / 3)\n    for (let i = 0; i < numcolors; i++) {\n      const vi = i * 3\n      obj.colors.push([values[vi], values[vi + 1], values[vi + 2]])\n    }\n  }\n  return obj\n}\n\nconst x3dCoordinate = (element) => {\n  const obj = { definition: x3dTypes.COORDINATE, points: [] }\n\n  if (element.point) {\n    const values = element.point.trim().split(/ +/).map((v) => parseFloat(v))\n    const numvalues = values.length\n    const numpoints = Math.trunc(numvalues / 3)\n    for (let i = 0; i < numpoints; i++) {\n      const vi = i * 3\n      obj.points.push([values[vi], values[vi + 1], values[vi + 2]])\n    }\n  }\n  return obj\n}\n\nconst x3dTriangleSet = (element) => {\n  const obj = { definition: x3dTypes.TRIANGLESET, ccw: true, colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dTriangleFanSet = (element) => {\n  const obj = { definition: x3dTypes.TRIANGLEFANSET, ccw: true, fanCount: [], colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.fanCount) {\n    obj.fanCount = element.fanCount.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dTriangleStripSet = (element) => {\n  const obj = { definition: x3dTypes.TRIANGLESTRIPSET, ccw: true, stripCount: [], colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.stripCount) {\n    obj.stripCount = element.stripCount.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dQuadSet = (element) => {\n  const obj = { definition: x3dTypes.QUADSET, ccw: true, colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dIndexedTriangleSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDTRIANGLESET, ccw: true, index: [], colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.index) {\n    obj.index = element.index.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dIndexedTriangleFanSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDTRIANGLEFANSET, ccw: true, fans: [], colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.index) {\n    const indexes = element.index.trim().split(/ -1/)\n    obj.fans = indexes.map((index) => index.trim().split(/ +/).map((v) => parseFloat(v))).filter((index) => index.length > 2)\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dIndexedTriangleStripSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDTRIANGLESTRIPSET, ccw: true, strips: [], colorPerVertex: true }\n\n  obj.objects = []\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.index) {\n    const indexes = element.index.trim().split(/ -1/)\n    obj.strips = indexes.map((index) => index.trim().split(/ +/).map((v) => parseFloat(v))).filter((index) => index.length > 2)\n  }\n  return obj\n}\n\nconst x3dIndexedQuadSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDQUADSET, ccw: true, index: [], colorPerVertex: true }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.index) {\n    obj.index = element.index.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dIndexedFaceSet = (element) => {\n  const obj = { definition: x3dTypes.INDEXEDFACESET, ccw: true, convex: true, faces: [], colorPerVertex: true, colorIndex: null }\n\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.convex) {\n    obj.convex = element.convex.includes('TRUE') || element.convex.includes('true')\n  }\n  if (element.coordIndex) {\n    const indexes = element.coordIndex.trim().split(/ -1/)\n    obj.faces = indexes.map((index) => index.trim().split(/ +/).map((v) => parseFloat(v))).filter((index) => index.length > 2)\n  }\n  // color attributes\n  if (element.colorPerVertex) {\n    obj.colorPerVertex = element.colorPerVertex.includes('TRUE') || element.colorPerVertex.includes('true')\n  }\n  if (element.colorIndex) {\n    if (obj.colorPerVertex) {\n      // indexes are provided for each VERTEX\n      const indexes = element.colorIndex.trim().split(/ -1/)\n      obj.colorIndex = indexes.map((index) => index.trim().split(/ +/).map((v) => parseFloat(v))).filter((index) => index.length > 2)\n    } else {\n      // indexes are provided for each FACE\n      obj.colorIndex = element.colorIndex.trim().split(/ +/).map((v) => parseFloat(v))\n    }\n  } else {\n    // reuse the indexes for the FACES\n    obj.colorIndex = obj.faces\n  }\n  obj.objects = []\n  return obj\n}\n\nconst x3dElevationGrid = (element) => {\n  const obj = { definition: x3dTypes.ELEVATIONGRID, xDimension: 2, zDimension: 2, xSpacing: 1.0, zSpacing: 1.0, height: [0, 0, 0, 0], ccw: true, solid: false, colorPerVertex: true }\n\n  if (element.xDimension) {\n    obj.xDimension = parseFloat(element.xDimension)\n  }\n  if (element.zDimension) {\n    obj.zDimension = parseFloat(element.zDimension)\n  }\n  if (element.xSpacing) {\n    obj.xSpacing = parseFloat(element.xSpacing)\n  }\n  if (element.zSpacing) {\n    obj.zSpacing = parseFloat(element.zSpacing)\n  }\n  if (element.height) {\n    obj.height = element.height.trim().split(/ +/).map((v) => parseFloat(v))\n  }\n  if (element.ccw) {\n    obj.ccw = element.ccw.includes('TRUE') || element.ccw.includes('true')\n  }\n  if (element.solid) {\n    obj.solid = element.solid.includes('TRUE') || element.solid.includes('true')\n  }\n  // color attributes\n  if (element.colorPerVertex) {\n    obj.colorPerVertex = element.colorPerVertex.includes('TRUE') || element.colorPerVertex.includes('true')\n  }\n\n  obj.objects = []\n  return obj\n}\n\n//\n// Materials\n//\n\nconst x3dAppearance = (element) => {\n  const obj = { definition: x3dTypes.APPEARANCE }\n\n  obj.objects = []\n  return obj\n}\n\nconst x3dMaterial = (element) => {\n  const obj = { definition: x3dTypes.MATERIAL, color: [0.8, 0.8, 0.8, 1.0] }\n\n  // convert material to colors if possible\n  // - ambientIntensity=\"0.2\"\n  // - diffuseColor=\"0.8 0.8 0.8\" RGB, 0-1.0\n  // - emissiveColor=\"0 0 0\" RGB, 0-1.0\n  // - shininess=\"0.2\"\n  // - specularColor=\"0 0 0\" RGB, 0-1.0\n  // - transparency=\"0\" 1.0 transparent, 0 opaque\n  let alpha = 1.0 // JSCAD opaque\n  if (element.transparency) {\n    alpha = 1.0 - element.transparency\n  }\n  if (element.diffuseColor) {\n    const values = element.diffuseColor.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      if (values.length < 4) values.push(alpha)\n      obj.color = values\n    }\n  }\n  if (element.emissiveColor) {\n    const values = element.emissiveColor.trim().split(/ +/).map((v) => parseFloat(v))\n    if (values.length > 2) {\n      if (values.length < 4) values.push(alpha)\n      obj.color = values\n    }\n  }\n  return obj\n}\n\n// GROUPS\n\nconst x3dGroup = (element) => {\n  const obj = { definition: x3dTypes.GROUP }\n\n  obj.objects = []\n  return obj\n}\n\nmodule.exports = {\n  x3dTypes,\n\n  x3dX3D,\n  x3dUnit,\n  x3dMeta,\n  x3dScene,\n  x3dTransform,\n  x3dShape,\n  x3dGroup,\n\n  x3dBox,\n  x3dCone,\n  x3dCylinder,\n  x3dSphere,\n  x3dExtrusion,\n\n  x3dArc2D,\n  x3dArcClose2D,\n  x3dCircle2D,\n  x3dDisk2D,\n  x3dPolyline2D,\n  x3dRectangle2D,\n  x3dTriangleSet2D,\n\n  x3dColor,\n  x3dCoordinate,\n  x3dTriangleSet,\n  x3dTriangleFanSet,\n  x3dTriangleStripSet,\n  x3dQuadSet,\n  x3dIndexedTriangleSet,\n  x3dIndexedTriangleFanSet,\n  x3dIndexedTriangleStripSet,\n  x3dIndexedQuadSet,\n  x3dIndexedFaceSet,\n  x3dElevationGrid,\n\n  x3dLineSet,\n  x3dIndexedLineSet,\n\n  x3dAppearance,\n  x3dMaterial\n}\n", "const { extrusions, geometries, maths } = require('@jscad/modeling')\n\nconst { mat4, vec3, utils } = maths\nconst { extrudeFromSlices, slice } = extrusions\n\nconst calculateYaxes = (spine) => {\n  const slength = spine.length\n  const closed = vec3.equals(spine[0], spine[slength - 1])\n  const yaxes = []\n  for (let i = 0; i < slength; i++) {\n    const yaxis = vec3.create()\n    if (i === 0) {\n      if (closed) {\n        vec3.normalize(yaxis, vec3.subtract(yaxis, spine[1], spine[slength - 2]))\n        // 1.85 0 0.77 MINUS 1.85 0 -0.77\n      } else {\n        vec3.normalize(yaxis, vec3.subtract(yaxis, spine[1], spine[0]))\n      }\n    } else\n    if (i === slength - 1) {\n      if (closed) {\n        vec3.normalize(yaxis, vec3.subtract(yaxis, spine[1], spine[slength - 2]))\n      } else {\n        vec3.normalize(yaxis, vec3.subtract(yaxis, spine[slength - 1], spine[slength - 2]))\n      }\n    } else {\n      vec3.normalize(yaxis, vec3.subtract(yaxis, spine[i + 1], spine[i - 1]))\n    }\n    yaxes.push(yaxis)\n  }\n  return yaxes\n}\n\nconst isZeroVector = (vector) => {\n  if ((vector[0] + 0) === 0) {\n    if ((vector[1] + 0) === 0) {\n      if ((vector[2] + 0) === 0) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconst calculateZaxis = (z, p, i, n) => {\n  const a = vec3.subtract(vec3.create(), n, i)\n  const b = vec3.subtract(vec3.create(), p, i)\n  return vec3.normalize(z, vec3.cross(z, a, b)) // orthoganal vector to SCP Y (p,i,n)\n}\n\nconst calculateZaxes = (spine) => {\n  const slength = spine.length\n  const closed = vec3.equals(spine[0], spine[slength - 1])\n  const zaxes = []\n  let previousZaxis\n  for (let i = 0; i < slength; i++) {\n    const zaxis = vec3.create()\n    if (i === 0) {\n      if (closed) {\n        calculateZaxis(zaxis, spine[slength - 2], spine[0], spine[1])\n      } else {\n        if (slength > 2) calculateZaxis(zaxis, spine[0], spine[1], spine[2])\n      }\n    } else\n    if (i === slength - 1) {\n      if (closed) {\n        calculateZaxis(zaxis, spine[slength - 2], spine[0], spine[1])\n      } else {\n        if (slength > 2) calculateZaxis(zaxis, spine[slength - 3], spine[slength - 2], spine[slength - 1])\n      }\n    } else {\n      calculateZaxis(zaxis, spine[i - 1], spine[i], spine[i + 1])\n      // from Extrusion.js\n      // const a = vec3.subtract(vec3.create(), spine[i + 1], spine[i - 1])\n      // const b = vec3.subtract(vec3.create(), spine[i - 1], spine[i])\n      // vec3.normalize(zaxis, vec3.cross(zaxis, a, b)) // orthoganal vector to SCP Y (p,i,n)\n    }\n\n    if (previousZaxis && vec3.dot(previousZaxis, zaxis) < 0) vec3.negate(zaxis, zaxis)\n\n    zaxes.push(zaxis)\n\n    previousZaxis = zaxis\n  }\n  // special case #1 - if first zaxis is zero then use first non-zero zaxis\n  if (isZeroVector(zaxes[0])) {\n    for (let i = 1; i < zaxes.length; i++) {\n      if (!isZeroVector(zaxes[i])) {\n        zaxes[0] = zaxes[i]\n        break\n      }\n    }\n  }\n  // special case #2 - if zaxis is zero then use previous zaxis if available\n  for (let i = 1; i < zaxes.length; i++) {\n    if (isZeroVector(zaxes[i]) && !isZeroVector(zaxes[i - 1])) vec3.clone(zaxes[i], zaxes[i - 1])\n  }\n  return zaxes\n}\n\nconst calculateXaxes = (yaxes, zaxes) => {\n  const xaxes = []\n  for (let i = 0; i < yaxes.length; i++) {\n    const xaxis = vec3.create()\n    xaxes.push(vec3.normalize(xaxis, vec3.cross(xaxis, yaxes[i], zaxes[i])))\n  }\n  return xaxes\n}\n\n// from fields.js, line 748\nconst rotationMatrixFromSCP = (out, xaxis, yaxis, zaxis) => {\n  out[0] = xaxis[0]\n  out[1] = yaxis[0]\n  out[2] = zaxis[0]\n  out[3] = 0\n  out[4] = xaxis[1]\n  out[5] = yaxis[1]\n  out[6] = zaxis[1]\n  out[7] = 0\n  out[8] = xaxis[2]\n  out[9] = yaxis[2]\n  out[10] = zaxis[2]\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nconst extrudeX3D = (x3dshape) => {\n  // console.log(x3dshape)\n  let { beginCap, endCap, crossSection, orientations, scales, spine } = Object.assign({}, x3dshape)\n\n  // orientate the crossection for extruding\n  if (utils.area(crossSection) < 0) crossSection.reverse()\n\n  // complete scales if necessary\n  if (scales.length === 1) {\n    scales = spine.map((s) => scales[0]) // all scales are the same\n  }\n\n  // complete orientations if necessary\n  if (orientations.length === 1) {\n    orientations = spine.map((s) => orientations[0]) // all orientations are the same\n  }\n\n  // verify everything is ready\n  if (spine.length !== scales.length || spine.length !== orientations.length) {\n    throw new Error(`invalid X3D specification; spine scale orientaion length must be the same; ${spine.length}`)\n  }\n\n  // Create the initial slice\n  const initialShape = geometries.geom2.fromPoints(crossSection)\n  const initialSlice = slice.fromSides(geometries.geom2.toSides(initialShape))\n\n  // Calculate SCP values\n  let yaxes = calculateYaxes(spine)\n  // console.log(yaxes)\n  let zaxes = calculateZaxes(spine)\n  // console.log(zaxes)\n  let xaxes = calculateXaxes(yaxes, zaxes)\n  // console.log(xaxes)\n\n  // initial Y=0 matrix\n  const y0direction = [0, 1, 0]\n  const y0matrix = mat4.fromVectorRotation(mat4.create(), vec3.fromValues(0, 0, 1), y0direction)\n\n  // special case - if all Z zaxis are zero then rotate to first Y (and reset)\n  const allZero = zaxes.reduce((acc, axis) => acc && isZeroVector(axis), true)\n  if (allZero) {\n    vec3.subtract(y0direction, spine[1], spine[0])\n    mat4.fromVectorRotation(y0matrix, vec3.fromValues(0, 0, 1), y0direction)\n    xaxes = xaxes.map((axis) => [1, 0, 0])\n    yaxes = yaxes.map((axis) => [0, 1, 0])\n    zaxes = zaxes.map((axis) => [0, 0, 1])\n  }\n\n  // ...and extrude.\n  return extrudeFromSlices({\n    numberOfSlices: spine.length,\n    capStart: beginCap,\n    capEnd: endCap,\n    callback: function (progress, count, base) {\n      const position = spine[count]\n      const scale = vec3.fromVec2(vec3.create(), scales[count], 1.0)\n      const orientation = orientations[count]\n      const xaxis = xaxes[count]\n      const yaxis = yaxes[count]\n      const zaxis = zaxes[count]\n\n      const translationMatrix = mat4.fromTranslation(mat4.create(), position)\n      const scaleMatrix = mat4.fromScaling(mat4.create(), scale)\n      const scpMatrix = rotationMatrixFromSCP(mat4.create(), xaxis, yaxis, zaxis)\n      const orientationMatrix = mat4.fromRotation(mat4.create(), orientation[3], orientation)\n      const rotationMatrix = mat4.create()\n      // ORIENTAION y0, scale, trans, scp, ori\n      // ORIENTAION y0, scale, trans, ori, scp\n      // NON scale, y0, trans\n      // NON scale, y0, scp, ori, trans\n      // NON scale, y0, trans, scp, ori\n      mat4.multiply(rotationMatrix, y0matrix, rotationMatrix)\n      mat4.multiply(rotationMatrix, scpMatrix, rotationMatrix)\n      mat4.multiply(rotationMatrix, orientationMatrix, rotationMatrix)\n      mat4.multiply(rotationMatrix, translationMatrix, rotationMatrix)\n\n      let newslice = base\n      newslice = slice.transform(scaleMatrix, newslice)\n      newslice = slice.transform(rotationMatrix, newslice)\n      // newslice = slice.transform(translationMatrix, newslice)\n      return newslice\n    }\n  }, initialSlice)\n}\n\nmodule.exports = extrudeX3D\n", "const { x3dTypes } = require('./objects')\n\nconst findNode = (x3dtype, objects) => objects.find((object) => object.definition === x3dtype)\n\nconst findColor = (objects, options) => {\n  const appearance = findNode(x3dTypes.APPEARANCE, objects)\n  let material\n  if (appearance) {\n    material = findNode(x3dTypes.MATERIAL, appearance.objects)\n    if (material) {\n      return material.color ? material.color : null\n    }\n  }\n\n  material = findNode(x3dTypes.MATERIAL, objects)\n  if (material) {\n    return material.color ? material.color : null\n  }\n  return null\n}\n\nconst pointToString = (point) => `[${point}]`\n\nconst pointsToString = (triangle) => {\n  const strings = triangle.map((point) => pointToString(point))\n  return `[\n    ${strings.join(',\\n    ')}\n  ]`\n}\n\n// colorIndex - array of arrays, each subarray containing indexes into vertexColors\nconst createColorsFromVertexColors = (colorIndex, vertexColors) => {\n  if (!(Array.isArray(colorIndex) && Array.isArray(vertexColors))) return null\n  if (colorIndex.length < 0 || !Array.isArray(colorIndex[0])) {\n    console.log('ERROR: WRONG FORMAT FOR VERTEXCOLORS')\n    return null\n  }\n\n  // create a set of 'interpreted' colors for the faces\n  const colors = []\n  for (let i = 0; i < colorIndex.length; i++) {\n    const indexes = colorIndex[i]\n    let r = 0\n    let g = 0\n    let b = 0\n    const a = 1\n    for (let j = 0; j < indexes.length; j++) {\n      const vertexColor = vertexColors[indexes[j]]\n      if (vertexColor) {\n        r += vertexColor[0]\n        g += vertexColor[1]\n        b += vertexColor[2]\n      }\n    }\n    const color = [r / indexes.length, g / indexes.length, b / indexes.length, a]\n    colors.push(color)\n  }\n  return colors\n}\n\nconst createColorsFromFaceColors = (colorIndex, faceColors) => {\n  if (!(Array.isArray(colorIndex) && Array.isArray(faceColors))) return null\n\n  const colors = colorIndex.map((index) => faceColors[index] ? faceColors[index] : null)\n  return colors\n}\n\n// create a list of colors from the given shape and color objects\nconst createColors = (shape, color) => {\n  if (!color) return null\n  if (!Array.isArray(shape.colorIndex)) return null\n\n  let colors = null\n  if (shape.colorPerVertex === true) {\n    colors = createColorsFromVertexColors(shape.colorIndex, color.colors)\n  } else {\n    colors = createColorsFromFaceColors(shape.colorIndex, color.colors)\n  }\n  return colors\n}\n\nmodule.exports = {\n  findNode,\n  findColor,\n\n  createColors,\n\n  pointToString,\n  pointsToString\n}\n", "const jscad = require('@jscad/modeling')\n\nconst { createColors, findNode } = require('./translateHelpers')\nconst { x3dTypes } = require('./objects')\n\nconst convertLine = (options, objects) => {\n  let shape = findNode(x3dTypes.INDEXEDLINESET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const indexes = shape.indexes\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate && indexes) {\n      const pointsSet = indexes.map((index) => {\n        let points = index.map((i) => coordinate.points[i])\n        const is3D = points.findIndex((p) => p[2] !== 0)\n        if (is3D >= 0) {\n          console.warn('WARNING: unsupported 3D indexed line set was ignored')\n          points = []\n        }\n        return points\n      })\n      if (shape.colorPerVertex === true) {\n        shape.colorIndex = indexes\n      } else {\n        shape.colorIndex = indexes.map((index, i) => i)\n      }\n      const colors = createColors(shape, color)\n\n      return { pointsSet, colors }\n    }\n  }\n\n  shape = findNode(x3dTypes.LINESET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    const counts = shape.vertexCount\n    if (coordinate && counts) {\n      let vi = 0\n      const pointsSet = counts.map((count) => {\n        let points = []\n        for (let i = 0; i < count; i++) {\n          points.push(coordinate.points[vi])\n          vi++\n        }\n        const is3D = points.findIndex((p) => p[2] !== 0)\n        if (is3D >= 0) {\n          console.warn('WARNING: unsupported 3D line set was ignored')\n          points = []\n        }\n        return points\n      })\n      if (shape.colorPerVertex === true) {\n        let ci = 0\n        shape.colorIndex = counts.map((count) => {\n          const index = []\n          for (let i = 0; i < count; i++) {\n            index.push(ci)\n            ci++\n          }\n          return index\n        })\n      } else {\n        shape.colorIndex = pointsSet.map((ps, i) => i)\n      }\n      const colors = createColors(shape, color)\n\n      return { pointsSet, colors }\n    }\n  }\n  return null\n}\n\nconst instantiateLine = (options, objects) => {\n  let geometry\n\n  const components = convertLine(options, objects)\n  if (components) {\n    const { pointsSet, colors } = components\n    geometry = pointsSet.map((points, i) => {\n      let line\n      if (colors) {\n        line = jscad.colors.colorize(colors[i], jscad.primitives.line(points))\n      } else {\n        line = jscad.primitives.line(points)\n      }\n      return line\n    })\n  }\n\n  return geometry\n}\n\nmodule.exports = {\n  convertLine,\n  instantiateLine\n}\n", "const { pointsToString } = require('./translateHelpers')\n\nconst { convertLine } = require('./instantiateLine')\n\nconst translateLine = (options, objects) => {\n  const components = convertLine(options, objects)\n  if (components) {\n    const { pointsSet, colors } = components\n    let code = '  let lines = []\\n'\n    pointsSet.forEach((points, i) => {\n      if (colors) {\n        const lineColor = colors[i]\n        code += `  const line${i} = colorize([${lineColor}], primitives.line(${pointsToString(points)}))\n  lines.push(line${i})\n`\n      } else {\n        code += `  const line${i} = primitives.line(${pointsToString(points)})\n  lines.push(line${i})\n`\n      }\n    })\n    const primitive = '...lines'\n    return { primitive, code }\n  }\n  return null\n}\n\nmodule.exports = translateLine\n", "const { primitives } = require('@jscad/modeling')\n\nconst { x3dTypes } = require('./objects')\nconst { findNode, createColors } = require('./translateHelpers')\n\nconst convertMesh = (options, objects) => {\n  let shape = findNode(x3dTypes.TRIANGLESET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate) {\n      const points = coordinate.points\n      const numpoints = points.length\n      const numfaces = Math.trunc(numpoints / 3)\n      const faces = []\n      for (let ti = 0; ti < numfaces; ti++) {\n        const pi = ti * 3\n        faces.push([pi, pi + 1, pi + 2])\n      }\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const type = 'triangles'\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.TRIANGLEFANSET, objects)\n  if (shape) {\n    const fanCount = shape.fanCount\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate) {\n      const points = coordinate.points\n      const numfans = fanCount.length\n      const faces = []\n      let fo = 0\n      for (let fi = 0; fi < numfans; fi++) {\n        const numvertices = Math.trunc(fanCount[fi])\n        for (let vi = 1; vi < (numvertices - 1); vi++) {\n          faces.push([fo, fo + vi, fo + vi + 1])\n        }\n        fo += numvertices\n      }\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const type = `triangle fans (${numfans})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.TRIANGLESTRIPSET, objects)\n  if (shape) {\n    const stripCount = shape.stripCount\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate) {\n      const points = coordinate.points\n      const numstrips = stripCount.length\n      const faces = []\n      let so = 0\n      for (let si = 0; si < numstrips; si++) {\n        const numvertices = Math.trunc(stripCount[si])\n        for (let vi = 0; vi < (numvertices - 2); vi++) {\n          const face = [so + vi, so + vi + 1, so + vi + 2]\n          if ((vi % 2) === 1) face.reverse()\n          faces.push(face)\n        }\n        so += numvertices\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `triangle strip (${numstrips})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.QUADSET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate) {\n      const points = coordinate.points\n      const numpoints = points.length\n      const numquads = Math.trunc(numpoints / 4)\n      const faces = []\n      for (let qi = 0; qi < numquads; qi++) {\n        const pi = qi * 4\n        faces.push([pi, pi + 1, pi + 2, pi + 3])\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `quad (${numquads})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.INDEXEDTRIANGLESET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    const index = shape.index\n    if (coordinate && index && index.length > 2) {\n      const points = coordinate.points\n      const numfaces = Math.trunc(index.length / 3)\n      const faces = []\n      for (let fi = 0; fi < numfaces; fi++) {\n        const pi = fi * 3\n        faces.push([index[pi], index[pi + 1], index[pi + 2]])\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = 'indexed triangle'\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.INDEXEDTRIANGLEFANSET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    const fans = shape.fans\n    if (coordinate && fans && fans.length > 0) {\n      const points = coordinate.points\n      const numfans = fans.length\n      const faces = []\n      for (let fi = 0; fi < numfans; fi++) {\n        const fan = fans[fi]\n        const numvertices = fan.length\n        for (let vi = 1; vi < (numvertices - 1); vi++) {\n          faces.push([fan[0], fan[vi], fan[vi + 1]])\n        }\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `indexed triangle fan (${numfans})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.INDEXEDTRIANGLESTRIPSET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    const strips = shape.strips\n    if (coordinate && strips && strips.length > 0) {\n      const points = coordinate.points\n      const numstrips = strips.length\n      const faces = []\n      for (let si = 0; si < numstrips; si++) {\n        const strip = strips[si]\n        const numvertices = strip.length\n        for (let vi = 0; vi < (numvertices - 2); vi++) {\n          const face = [strip[vi], strip[vi + 1], strip[vi + 2]]\n          if ((vi % 2) === 1) face.reverse()\n          faces.push(face)\n        }\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `indexed triangle strip (${numstrips})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.INDEXEDQUADSET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    const index = shape.index\n    if (coordinate && index && index.length > 3) {\n      const points = coordinate.points\n      const numquads = Math.trunc(index.length / 4)\n      const faces = []\n      for (let qi = 0; qi < numquads; qi++) {\n        const ii = qi * 4\n        faces.push([index[ii], index[ii + 1], index[ii + 2], index[ii + 3]])\n      }\n      shape.colorIndex = faces\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `indexed quad (${numquads})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.INDEXEDFACESET, objects)\n  if (shape) {\n    const coordinate = findNode(x3dTypes.COORDINATE, shape.objects)\n    const faces = shape.faces\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (coordinate && faces && faces.length > 0) {\n      const points = coordinate.points\n      const numfaces = faces.length\n      const colors = createColors(shape, color)\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      const type = `indexed faces (${numfaces})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  shape = findNode(x3dTypes.ELEVATIONGRID, objects)\n  if (shape) {\n    const height = shape.height\n    const color = findNode(x3dTypes.COLOR, shape.objects)\n    if (height && height.length > 0) {\n      const xDimension = shape.xDimension\n      const xSpacing = shape.xSpacing\n      const zDimension = shape.zDimension\n      const zSpacing = shape.zSpacing\n\n      // convert the height map into a set of points\n      const points = []\n      let vi = 0\n      for (let z0 = 0; z0 < zDimension; ++z0) {\n        for (let x0 = 0; x0 < xDimension; ++x0) {\n          const x = x0 * xSpacing\n          const z = z0 * zSpacing\n          const y = height[vi]\n\n          vi++\n\n          points.push([x, y, z])\n        }\n      }\n      // convert the height map quadrilaterals into faces (2 triangles)\n      const faces = []\n      for (let z0 = 0; z0 < zDimension - 1; ++z0) {\n        for (let x0 = 0; x0 < xDimension - 1; ++x0) {\n          const iTL = x0 + (z0 * xDimension)\n          const iTR = (x0 + 1) + (z0 * xDimension)\n          const iBL = x0 + ((z0 + 1) * xDimension)\n          const iBR = (x0 + 1) + ((z0 + 1) * xDimension)\n          // determine apex of faces\n          const distances = [Math.abs(height[iTL]), Math.abs(height[iTR]), Math.abs(height[iBL]), Math.abs(height[iBR])]\n          let apexi = 0\n          if (distances[1] >= distances[0] && distances[1] >= distances[2] && distances[1] >= distances[3]) apexi = 1\n          if (distances[2] >= distances[0] && distances[2] >= distances[1] && distances[2] >= distances[3]) apexi = 2\n          if (distances[3] >= distances[0] && distances[3] >= distances[1] && distances[3] >= distances[2]) apexi = 3\n          // create faces\n          if (apexi === 0) faces.push([iTL, iBR, iTR], [iTL, iBL, iBR])\n          if (apexi === 1) faces.push([iTR, iBL, iBR], [iTR, iTL, iBL])\n          if (apexi === 2) faces.push([iBL, iTR, iTL], [iBL, iBR, iTR])\n          if (apexi === 3) faces.push([iBR, iTL, iBL], [iBR, iTR, iTL])\n        }\n      }\n      // TODO determine orientation from face 0\n      const orientation = shape.ccw ? 'outward' : 'inward'\n      // convert colors if necessary\n      if (shape.colorPerVertex === true) {\n        shape.colorIndex = faces // use the same indexs for colors\n      } else {\n        // create an color index per face\n      }\n      const colors = createColors(shape, color)\n      const type = `elevation grid (${xDimension} X ${zDimension})`\n\n      return { type, points, faces, colors, orientation }\n    }\n  }\n\n  return null\n}\n\nconst instantiateMesh = (options, objects) => {\n  let geometry\n\n  const components = convertMesh(options, objects)\n  if (components) {\n    geometry = primitives.polyhedron(components)\n  }\n  return geometry\n}\n\nmodule.exports = {\n  convertMesh,\n  instantiateMesh\n}\n", "const { pointsToString } = require('./translateHelpers')\n\nconst { convertMesh } = require('./instantiateMesh')\n\nconst translateToPolyhedron = (type, points, faces, colors, orientation) => {\n  const colorsCode = Array.isArray(colors) ? pointsToString(colors) : 'null'\n  const primitive = 'primitives.polyhedron({points, faces, colors, orientation})'\n  const code = `\n  // 3D ${type} set: ${points.length} points, ${faces.length} faces\n  const points = ${pointsToString(points)}\n  const faces = ${pointsToString(faces)}\n  const colors = ${colorsCode}\n  const orientation = '${orientation}'\n`\n  return { primitive, code }\n}\n\n/*\n * Translate the given objects into mesh (polyhedron).\n * @return { primitive, code }\n */\nconst translateMesh = (options, objects) => {\n  const components = convertMesh(options, objects)\n  if (components) {\n    const { type, points, faces, colors, orientation } = components\n    return translateToPolyhedron(type, points, faces, colors, orientation)\n  }\n  return null\n}\n\nmodule.exports = translateMesh\n", "const { geometries } = require('@jscad/modeling')\n\nconst { geom3, poly3 } = geometries\n\nconst extrudeX3D = require('./extrudeX3D')\n\nconst { x3dTypes } = require('./objects')\nconst { findNode, findColor, pointsToString } = require('./translateHelpers')\n\nconst translateLine = require('./translateLine')\nconst translateMesh = require('./translateMesh')\n\nconst translateShape = (options, object) => {\n  let code = `\n// shape\nconst createObjects${object.id} = (options) => {\n  let objects = []\n`\n\n  const objects = object.objects\n  // look for the color\n  const color = findColor(objects, options)\n\n  // look for one of the known shapes\n  let primitive\n\n  // 3D geometries\n  let shape = findNode(x3dTypes.BOX, objects)\n  if (shape) {\n    primitive = `primitives.cuboid({size: [${shape.size}]})`\n  } else {\n    shape = findNode(x3dTypes.CONE, objects)\n    if (shape) {\n      code += `  const shape = transforms.rotateX(-Math.PI/2, primitives.cylinderElliptic({startRadius: [${shape.bottomRadius},${shape.bottomRadius}], height: ${shape.height}, segments: ${shape.subdivision}, endRadius: [${shape.topRadius}, ${shape.topRadius}]}))\n`\n      primitive = 'shape'\n    } else {\n      shape = findNode(x3dTypes.CYLINDER, objects)\n      if (shape) {\n        code += `  const shape = transforms.rotateX(-Math.PI/2, primitives.cylinder({radius: ${shape.radius}, height: ${shape.height}, segments: ${shape.subdivision}}))\n`\n        primitive = 'shape'\n      } else {\n        shape = findNode(x3dTypes.SPHERE, objects)\n        if (shape) {\n          primitive = `primitives.sphere({radius: ${shape.radius}, segments: ${shape.subdivision}})`\n        } else {\n          shape = findNode(x3dTypes.EXTRUSION, objects)\n          if (shape) {\n            // convert the shape into 3D geometry\n            const geometry = extrudeX3D(shape)\n            // convert the 3D geometry into a call to polyhedron()\n            const polygons = geom3.toPolygons(geometry)\n            const polysAsStrings = polygons.map((polygon) => pointsToString(poly3.toPoints(polygon)))\n            code += `  const polygons = [\n  ${polysAsStrings.join(',\\n  ')}\n]\n`\n            primitive = 'geometries.geom3.fromPoints(polygons)'\n          }\n        }\n      }\n    }\n  }\n\n  if (!primitive) {\n    // 2D geometries\n    shape = findNode(x3dTypes.ARC2D, objects)\n    if (shape) {\n      primitive = `primitives.arc({radius: ${shape.radius}, startAngle: ${shape.startAngle}, endAngle: ${shape.endAngle}, segments: ${shape.subdivision}})`\n    } else {\n      shape = findNode(x3dTypes.ARCCLOSE2D, objects)\n      if (shape) {\n        if (shape.closureType === 'PIE') {\n          primitive = `primitives.circle({radius: ${shape.radius}, startAngle: ${shape.startAngle}, endAngle: ${shape.endAngle}, segments: ${shape.subdivision}})`\n        } else {\n          primitive = `geometries.geom2.fromPoints(geometries.path2.toPoints(geometries.path2.close(primitives.arc({radius: ${shape.radius}, startAngle: ${shape.startAngle}, endAngle: ${shape.endAngle}, segments: ${shape.subdivision}}))))`\n        }\n      } else {\n        shape = findNode(x3dTypes.CIRCLE2D, objects)\n        if (shape) {\n          // NOTE: X3D circles are really closed arcs (lines)\n          primitive = `primitives.arc({radius: ${shape.radius}, segments: ${shape.subdivision}})`\n        } else {\n          shape = findNode(x3dTypes.DISK2D, objects)\n          if (shape) {\n            if (shape.innerRadius === shape.outerRadius) {\n              primitive = `primitives.arc({radius: ${shape.outerRadius}, segments: ${shape.subdivision}})`\n            } else {\n              if (shape.innerRadius === 0) {\n                primitive = `primitives.circle({radius: ${shape.outerRadius}, segments: ${shape.subdivision}})`\n              } else {\n                primitive = `booleans.subtract(primitives.circle({radius: ${shape.outerRadius}, segments: ${shape.subdivision}}), primitives.circle({radius: ${shape.innerRadius}, segments: ${shape.subdivision}}))`\n              }\n            }\n          } else {\n            shape = findNode(x3dTypes.POLYLINE2D, objects)\n            if (shape) {\n              const lineSegments = shape.lineSegments.join('], [')\n              primitive = `primitives.line([[${lineSegments}]])`\n            } else {\n              shape = findNode(x3dTypes.RECTANGLE2D, objects)\n              if (shape) {\n                primitive = `primitives.rectangle({size: [${shape.size}]})`\n              } else {\n                shape = findNode(x3dTypes.TRIANGLESET2D, objects)\n                if (shape) {\n                  const numpoints = shape.vertices.length\n                  const numfaces = Math.trunc(numpoints / 3)\n                  code += `\n  // 2D triangle set: ${numpoints} points, ${numfaces} faces\n  const vertices = ${pointsToString(shape.vertices)}\n  const triangles = []\n  for (let i = 0; i < ${numfaces}; i = i + 3) {\n    triangles.push(geometries.geom2.fromPoints([vertices[i], vertices[i + 1], vertices[i + 2]]))\n  }\n`\n                  primitive = 'triangles'\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  let results = translateMesh(options, objects)\n  if (results) {\n    primitive = results.primitive\n    code += results.code\n  }\n\n  results = translateLine(options, objects)\n  if (results) {\n    primitive = results.primitive\n    code += results.code\n  }\n\n  if (primitive) {\n    if (color) {\n      code += `  objects.push(colorize([${color}], ${primitive}))`\n    } else {\n      code += `  objects.push(${primitive})`\n    }\n  }\n\n  code += `\n  return objects\n}\n`\n  return code\n}\n\nmodule.exports = translateShape\n", "const createTransform = require('./createTransform')\n\nconst { x3dTypes } = require('./objects')\n\nconst translateShape = require('./translateShape')\n\n// horrific order of transforms... see http://edutechwiki.unige.ch/en/X3D_grouping_and_transforms\nconst translateTransform = (options, object) => {\n  let code = `\n// transform\nconst createObjects${object.id} = (options) => {\n  let objects = []\n`\n\n  const objects = object.objects\n  for (let i = 0; i < objects.length; i++) {\n    const obj = objects[i]\n    code += `  objects.push(...createObjects${obj.id}(options))\\n`\n  }\n\n  const matrix = createTransform(object.center, object.rotation, object.scale, object.scaleOrientation, object.translation)\n\n  // apply the transforms if any\n  code += `\n  const matrix = [${matrix}]\n  return applyTransform(matrix, objects)\n}\n`\n\n  code += translateDefinitions(options, objects)\n\n  return code\n}\n\nconst translateGroup = (options, object) => {\n  let code = `\n// group\nconst createObjects${object.id} = (options) => {\n  let objects = []\n`\n\n  const objects = object.objects\n  for (let i = 0; i < objects.length; i++) {\n    const obj = objects[i]\n    code += `  objects.push(...createObjects${obj.id}(options))\\n`\n  }\n\n  code += `\n  return objects\n}\n`\n\n  code += translateDefinitions(options, objects)\n\n  return code\n}\n\nconst translatedList = []\n\nconst translateDefinition = (options, object) => {\n  if (translatedList.includes(object.id)) return ''\n\n  translatedList.push(object.id)\n\n  let code = ''\n  switch (object.definition) {\n    case x3dTypes.TRANSFORM:\n      code += translateTransform(options, object)\n      break\n    case x3dTypes.SHAPE:\n      code += translateShape(options, object)\n      break\n    case x3dTypes.GROUP:\n      code += translateGroup(options, object)\n      break\n    default:\n      console.log('WARNING: unknown definition: ' + object.definition)\n      break\n  }\n  return code\n}\n\n// convert the given X3D objects into a series of JSCAD function definitions\nconst translateDefinitions = (options, objects) => objects.reduce((code, object, index) => code += translateDefinition(options, object), '')\n\nmodule.exports = translateDefinitions\n", "const saxes = require('saxes')\n\nconst {\n  x3dTypes,\n\n  x3dX3D,\n  x3dUnit,\n  x3dMeta,\n  x3dScene,\n  x3dTransform,\n  x3dShape,\n  x3dGroup,\n\n  x3dBox,\n  x3dCone,\n  x3dCylinder,\n  x3dSphere,\n  x3dExtrusion,\n\n  x3dArc2D,\n  x3dArcClose2D,\n  x3dCircle2D,\n  x3dDisk2D,\n  x3dPolyline2D,\n  x3dRectangle2D,\n  x3dTriangleSet2D,\n\n  x3dColor,\n  x3dCoordinate,\n  x3dTriangleSet,\n  x3dTriangleFanSet,\n  x3dTriangleStripSet,\n  x3dQuadSet,\n  x3dIndexedTriangleSet,\n  x3dIndexedTriangleFanSet,\n  x3dIndexedTriangleStripSet,\n  x3dIndexedQuadSet,\n  x3dIndexedFaceSet,\n  x3dElevationGrid,\n\n  x3dLineSet,\n  x3dIndexedLineSet,\n\n  x3dAppearance,\n  x3dMaterial\n} = require('./objects')\n\nlet x3dLast = null // last object found\nlet x3dDefinition = x3dTypes.X3D // what kind of object beinging created\n\n// high level elements / definitions\nconst x3dObjects = [] // list of objects\nconst x3dDefs = new Map() // list of named objects\n\nconst x3dMaterials = [] // list of materials\nconst x3dTextures = [] // list of textures\n\nconst x3dLength = { factor: 1.0, name: 'meters' }\nconst x3dAngle = { factor: 1.0, name: 'radians' }\n\nlet x3dObj = null // x3d in object form\n\nconst nodeToObjectMap = {\n  X3D: x3dX3D,\n  UNIT: x3dUnit,\n  META: x3dMeta,\n  SCENE: x3dScene,\n  TRANSFORM: x3dTransform,\n  SHAPE: x3dShape,\n  GROUP: x3dGroup,\n  STATICGROUP: x3dGroup,\n\n  BOX: x3dBox,\n  CONE: x3dCone,\n  CYLINDER: x3dCylinder,\n  SPHERE: x3dSphere,\n  EXTRUSION: x3dExtrusion,\n\n  ARC2D: x3dArc2D,\n  ARCCLOSE2D: x3dArcClose2D,\n  CIRCLE2D: x3dCircle2D,\n  DISK2D: x3dDisk2D,\n  POLYLINE2D: x3dPolyline2D,\n  RECTANGLE2D: x3dRectangle2D,\n  TRIANGLESET2D: x3dTriangleSet2D,\n\n  COLOR: x3dColor,\n  COORDINATE: x3dCoordinate,\n  TRIANGLESET: x3dTriangleSet,\n  TRIANGLEFANSET: x3dTriangleFanSet,\n  TRIANGLESTRIPSET: x3dTriangleStripSet,\n  QUADSET: x3dQuadSet,\n  INDEXEDTRIANGLESET: x3dIndexedTriangleSet,\n  INDEXEDTRIANGLEFANSET: x3dIndexedTriangleFanSet,\n  INDEXEDTRIANGLESTRIPSET: x3dIndexedTriangleStripSet,\n  INDEXEDQUADSET: x3dIndexedQuadSet,\n  INDEXEDFACESET: x3dIndexedFaceSet,\n  ELEVATIONGRID: x3dElevationGrid,\n\n  LINESET: x3dLineSet,\n  INDEXEDLINESET: x3dIndexedLineSet,\n\n  APPEARANCE: x3dAppearance,\n  MATERIAL: x3dMaterial\n}\n\nlet objectId = 1\nconst getObjectId = () => ('0000' + objectId++).slice(-4)\n\nconst createX3DParser = (src, pxPmm) => {\n  // create a parser for the XML\n  const parser = new saxes.SaxesParser()\n\n  parser.on('error', (e) => {\n    console.log(`error: line ${e.line}, column ${e.column}, bad character [${e.c}]`)\n  })\n\n  parser.on('opentag', (node) => {\n    // convert known XML tags to objects\n    const elementname = node.name.toUpperCase()\n    let obj = nodeToObjectMap[elementname] ? nodeToObjectMap[elementname](node.attributes, { x3dObjects }) : null\n\n    if (obj) {\n      obj.id = getObjectId()\n\n      // handle named objects (DEF/USE)\n      if (node.attributes.USE) {\n        const objectname = node.attributes.USE\n        if (x3dDefs.has(objectname)) {\n          const def = x3dDefs.get(objectname)\n          if (def.definition !== obj.definition) {\n            console.log(`WARNING: using a definition \"${objectname}\" of a different type; ${obj.definition} vs ${def.definition}`)\n          }\n          obj = def\n        } else {\n          console.log(`WARNING: definition \"${objectname}\" does not exist, using default for ${obj.definition}`)\n        }\n      } else {\n        if (node.attributes.DEF) {\n          const objectname = node.attributes.DEF\n          if (x3dDefs.has(objectname)) {\n            console.log(`WARNING: redefintion of ${objectname} has been ignored`)\n          } else {\n            x3dDefs.set(objectname, obj)\n          }\n        }\n      }\n\n      // start a new definition\n\n      switch (obj.definition) {\n        case x3dTypes.SCENE:\n        case x3dTypes.TRANSFORM:\n        case x3dTypes.SHAPE:\n        case x3dTypes.APPEARANCE:\n        case x3dTypes.TRIANGLESET:\n        case x3dTypes.TRIANGLEFANSET:\n        case x3dTypes.TRIANGLESTRIPSET:\n        case x3dTypes.QUADSET:\n        case x3dTypes.INDEXEDTRIANGLESET:\n        case x3dTypes.INDEXEDTRIANGLEFANSET:\n        case x3dTypes.INDEXEDTRIANGLESTRIPSET:\n        case x3dTypes.INDEXEDQUADSET:\n        case x3dTypes.INDEXEDFACESET:\n        case x3dTypes.ELEVATIONGRID:\n        case x3dTypes.LINESET:\n        case x3dTypes.INDEXEDLINESET:\n        case x3dTypes.GROUP:\n          x3dDefinition = obj.definition\n          break\n        default:\n          break\n      }\n\n      // console.log('definition',x3dDefinition)\n\n      // adjust the current definition mode if necessary\n\n      switch (x3dDefinition) {\n        case x3dTypes.X3D: // definition of X3D\n          if ('objects' in obj) {\n            // console.log('object group ['+obj.definition+']')\n            x3dObjects.push(obj)\n          }\n          // handle special meta and unit nodes\n          if (obj.definition === x3dTypes.UNIT) {\n            if (obj.category === 'length') {\n              x3dLength.factor = obj.conversionFactor\n              x3dLength.name = obj.name\n            }\n            if (obj.category === 'angle') {\n              x3dAngle.factor = obj.conversionFactor\n              x3dAngle.name = obj.name\n            }\n          }\n          break\n        case x3dTypes.SCENE:\n        case x3dTypes.TRANSFORM:\n        case x3dTypes.SHAPE:\n        case x3dTypes.GROUP:\n        case x3dTypes.APPEARANCE:\n        case x3dTypes.TRIANGLESET:\n        case x3dTypes.TRIANGLEFANSET:\n        case x3dTypes.TRIANGLESTRIPSET:\n        case x3dTypes.QUADSET:\n        case x3dTypes.INDEXEDTRIANGLESET:\n        case x3dTypes.INDEXEDTRIANGLEFANSET:\n        case x3dTypes.INDEXEDTRIANGLESTRIPSET:\n        case x3dTypes.INDEXEDQUADSET:\n        case x3dTypes.INDEXEDFACESET:\n        case x3dTypes.ELEVATIONGRID:\n        case x3dTypes.LINESET:\n        case x3dTypes.INDEXEDLINESET:\n          if (x3dObjects.length > 0) {\n            const group = x3dObjects.pop()\n            // add the object to the active group if necessary\n            if ('objects' in group) {\n              // console.log('object '+group.definition+' adding ['+obj.definition+']')\n              group.objects.push(obj)\n            }\n            x3dObjects.push(group)\n            // and push this object as a group object if necessary\n            if ('objects' in obj) {\n              // console.log('object group ['+obj.definition+']')\n              x3dObjects.push(obj)\n            }\n          }\n          break\n        default:\n          console.log('WARNING: invalid X3D definition')\n          break\n      }\n      x3dLast = obj // retain this object in order to add values\n    }\n  })\n\n  parser.on('closetag', (node) => {\n    const elementname = node.name.toUpperCase()\n    switch (elementname) {\n      // list those which have a list of objects\n      case 'X3D':\n      case 'SCENE':\n      case 'TRANSFORM':\n      case 'SHAPE':\n      case 'GROUP':\n      case 'STATICGROUP':\n      case 'APPEARANCE':\n      case 'TRIANGLESET':\n      case 'TRIANGLEFANSET':\n      case 'TRIANGLESTRIPSET':\n      case 'QUADSET':\n      case 'INDEXEDTRIANGLESET':\n      case 'INDEXEDTRIANGLEFANSET':\n      case 'INDEXEDTRIANGLESTRIPSET':\n      case 'INDEXEDQUADSET':\n      case 'INDEXEDFACESET':\n      case 'ELEVATIONGRID':\n      case 'LINESET':\n      case 'INDEXEDLINESET':\n        break\n      default:\n        // console.log('closetag: '+node)\n        return\n    }\n\n    const popDefinition = () => {\n      if (x3dObjects.length > 0) {\n        x3dDefinition = x3dObjects[x3dObjects.length - 1].definition\n      }\n    }\n\n    // complete the definition\n\n    let obj = null\n    switch (x3dDefinition) {\n      case x3dTypes.X3D:\n        if (x3dObjects.length > 0) {\n          obj = x3dObjects.pop()\n          // console.log('pop object ['+obj.definition+']')\n          popDefinition()\n        }\n        // check for completeness\n        if (x3dObjects.length === 0) {\n          // console.log('completed',obj)\n          obj.length = x3dLength\n          obj.angle = x3dAngle\n          x3dObj = obj\n        }\n        break\n      case x3dTypes.SCENE:\n      case x3dTypes.TRANSFORM:\n      case x3dTypes.SHAPE:\n      case x3dTypes.GROUP:\n      case x3dTypes.APPEARANCE:\n      case x3dTypes.TRIANGLESET:\n      case x3dTypes.TRIANGLEFANSET:\n      case x3dTypes.TRIANGLESTRIPSET:\n      case x3dTypes.QUADSET:\n      case x3dTypes.INDEXEDTRIANGLESET:\n      case x3dTypes.INDEXEDTRIANGLEFANSET:\n      case x3dTypes.INDEXEDTRIANGLESTRIPSET:\n      case x3dTypes.INDEXEDQUADSET:\n      case x3dTypes.INDEXEDFACESET:\n      case x3dTypes.ELEVATIONGRID:\n      case x3dTypes.LINESET:\n      case x3dTypes.INDEXEDLINESET:\n        if (x3dObjects.length > 0) {\n          obj = x3dObjects.pop()\n          // console.log('pop object ['+obj.definition+']')\n          popDefinition()\n        }\n        break\n      default:\n        console.log('WARNING: unhandled definition', x3dDefinition)\n        break\n    }\n  })\n\n  parser.on('text', (value) => {\n    if (value !== null) {\n      value = value.trim()\n      if (value.length > 0 && x3dLast && x3dDefinition !== 0) {\n        x3dLast.value = value\n      }\n    }\n  })\n\n  parser.on('end', () => {\n    // console.log('X3D parsing completed')\n  })\n\n  // start the parser\n  parser.write(src).close()\n}\n\nconst parse = (src, pxPmm) => {\n  createX3DParser(src, pxPmm)\n  // console.log(JSON.stringify(x3dObj))\n  return { x3dObj, x3dMaterials, x3dTextures }\n}\n\nmodule.exports = parse\n", "const inchMM = (1 / 0.039370) // used for scaling AMF (inch) to coordinates (mm)\n\nmodule.exports = {\n  inchMM\n}\n", "const translateDefinitions = require('./translateDefinitions')\n\nconst { x3dTypes } = require('./objects')\nconst parse = require('./parse')\n\nconst translate = (options, src) => {\n  const defaults = {\n    pxPmm: require('./constants').pxPmm\n  }\n  options = Object.assign({}, defaults, options)\n  const { version, pxPmm, addMetaData, filename } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // parse the X3D source\n  const { x3dObj, x3dMaterials, x3dTextures } = parse(src, pxPmm)\n\n  // convert the internal objects to JSCAD code\n  let code = addMetaData\n    ? `//\n// Produced by JSCAD IO Library : X3D Deserializer (${version})\n// date: ${new Date()}\n// source: ${filename}\n//\n`\n    : ''\n\n  if (!x3dObj) {\n    throw new Error('X3D parsing failed, no valid X3D data retrieved')\n  }\n\n  options && options.statusCallback && options.statusCallback({ progress: 50 })\n\n  code += codify(x3dObj, { x3dMaterials, x3dTextures })\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return code\n}\n\n//\n// convert the internal representation into JSCAD code\n//\nconst codify = (x3d, data) => {\n  if (x3d.definition !== x3dTypes.X3D || (!x3d.objects)) throw new Error('X3D malformed')\n\n  if (x3d.objects.length < 1 || x3d.objects[0].definition !== x3dTypes.SCENE) throw new Error('X3D did not define a SCENE')\n\n  const scene = x3d.objects[0] // translation starts here\n  const objects = scene.objects\n  const length = x3d.length\n  const angle = x3d.angle\n\n  let code = ''\n\n  // start everthing\n  code = `// Objects  : ${objects.length}\n// Units : ${length.name} (${length.factor})\n// Angles : ${angle.name} (${angle.factor})\n\nconst {booleans, extrusions, geometries, maths, primitives, transforms, utils} = require('@jscad/modeling')\nconst { colorize } =  require('@jscad/modeling').colors\n\nconst applyTransform = (matrix, ...objects) => {\n  objects = utils.flatten(objects)\n  if (objects.length === 0) return objects\n\n  return objects.map((object) => {\n    const color = object.color\n    object = transforms.transform(matrix, object)\n    if (color) object.color = color\n    return object\n  })\n}\n\nconst main = () => {\n  let options = {}\n  let objects = []\n`\n\n  for (let i = 0; i < objects.length; i++) {\n    const obj = objects[i]\n    code += `  objects.push(...createObjects${obj.id}(options))\\n`\n  }\n\n  code += '  return objects\\n}\\n'\n\n  code += translateDefinitions({}, objects)\n\n  code += 'module.exports = {main}\\n'\n\n  return code\n}\n\nmodule.exports = translate\n", "const { booleans, geometries, primitives, transforms } = require('@jscad/modeling')\n\nconst { x3dTypes } = require('./objects')\nconst { findNode } = require('./translateHelpers')\n\nconst extrudeX3D = require('./extrudeX3D')\n\nconst instantiatePrimitive = (options, objects) => {\n  let geometry\n\n  // 3D primitives\n\n  let object = findNode(x3dTypes.BOX, objects)\n  if (object) {\n    geometry = primitives.cuboid({ size: object.size })\n    return geometry\n  }\n\n  object = findNode(x3dTypes.CONE, objects)\n  if (object) {\n    geometry = transforms.rotateX(-Math.PI / 2, primitives.cylinderElliptic({\n      startRadius: [object.bottomRadius, object.bottomRadius],\n      height: object.height,\n      segments: object.subdivision,\n      endRadius: [object.topRadius, object.topRadius]\n    }))\n    return geometry\n  }\n\n  object = findNode(x3dTypes.CYLINDER, objects)\n  if (object) {\n    geometry = transforms.rotateX(-Math.PI / 2, primitives.cylinder({\n      radius: object.radius,\n      height: object.height,\n      segments: object.subdivision\n    }))\n    return geometry\n  }\n\n  object = findNode(x3dTypes.SPHERE, objects)\n  if (object) {\n    geometry = primitives.sphere({ radius: object.radius, segments: object.subdivision })\n    return geometry\n  }\n\n  object = findNode(x3dTypes.EXTRUSION, objects)\n  if (object) {\n    geometry = extrudeX3D(object)\n    return geometry\n  }\n\n  // 2D primitives\n\n  object = findNode(x3dTypes.ARC2D, objects)\n  if (object) {\n    geometry = primitives.arc({ radius: object.radius, startAngle: object.startAngle, endAngle: object.endAngle, segments: object.subdivision })\n    return geometry\n  }\n\n  object = findNode(x3dTypes.ARCCLOSE2D, objects)\n  if (object) {\n    if (object.closureType === 'PIE') {\n      geometry = primitives.circle({ radius: object.radius, startAngle: object.startAngle, endAngle: object.endAngle, segments: object.subdivision })\n    } else {\n      geometry = geometries.geom2.fromPoints(geometries.path2.toPoints(geometries.path2.close(\n        primitives.arc({ radius: object.radius, startAngle: object.startAngle, endAngle: object.endAngle, segments: object.subdivision })\n      )))\n    }\n    return geometry\n  }\n\n  object = findNode(x3dTypes.CIRCLE2D, objects)\n  if (object) {\n    // NOTE: X3D circles are really closed arcs (lines)\n    geometry = primitives.arc({ radius: object.radius, segments: object.subdivision })\n    return geometry\n  }\n\n  object = findNode(x3dTypes.DISK2D, objects)\n  if (object) {\n    if (object.innerRadius === object.outerRadius) {\n      geometry = primitives.arc({ radius: object.outerRadius, segments: object.subdivision })\n    } else {\n      if (object.innerRadius === 0) {\n        geometry = primitives.circle({ radius: object.outerRadius, segments: object.subdivision })\n      } else {\n        geometry = booleans.subtract(primitives.circle({ radius: object.outerRadius, segments: object.subdivision }), primitives.circle({ radius: object.innerRadius, segments: object.subdivision }))\n      }\n    }\n    return geometry\n  }\n\n  object = findNode(x3dTypes.POLYLINE2D, objects)\n  if (object) {\n    geometry = primitives.line([object.lineSegments])\n    return geometry\n  }\n\n  object = findNode(x3dTypes.RECTANGLE2D, objects)\n  if (object) {\n    geometry = primitives.rectangle({ size: object.size })\n    return geometry\n  }\n\n  object = findNode(x3dTypes.TRIANGLESET2D, objects)\n  if (object) {\n    const vertices = object.vertices\n    const numpoints = vertices.length\n    const numfaces = Math.trunc(numpoints / 3)\n    geometry = []\n    for (let i = 0; i < numfaces; i = i + 3) {\n      geometry.push(geometries.geom2.fromPoints([vertices[i], vertices[i + 1], vertices[i + 2]]))\n    }\n    return geometry\n  }\n\n  return geometry\n}\n\nmodule.exports = instantiatePrimitive\n", "const { colors, transforms } = require('@jscad/modeling')\n\nconst createTransform = require('./createTransform')\n\nconst { x3dTypes } = require('./objects')\nconst { findColor } = require('./translateHelpers')\n\nconst instantiatePrimitive = require('./instantiatePrimitive')\nconst { instantiateLine } = require('./instantiateLine')\nconst { instantiateMesh } = require('./instantiateMesh')\n\nconst instantiatedList = new Map()\n\nconst instantiateTransform = (options, object) => {\n  // instantiate all sub-objects into geometry\n  const geometries = object.objects.map((object) => instantiateDefinition(options, object)).filter((g) => g != null)\n  if (geometries.length === 0) return null\n\n  // and transform (retaining color)\n  const matrix = createTransform(object.center, object.rotation, object.scale, object.scaleOrientation, object.translation)\n\n  return geometries.map((geometry) => {\n    const color = geometry.color\n    geometry = transforms.transform(matrix, geometry)\n    if (color) geometry.color = color\n    return geometry\n  })\n}\n\nconst instantiateShape = (options, object) => {\n  // look for the color\n  const objects = object.objects\n  const color = findColor(objects, options)\n\n  let geometry = instantiatePrimitive(options, objects)\n  if (!geometry) geometry = instantiateMesh(options, objects)\n  if (!geometry) geometry = instantiateLine(options, objects)\n  if (!geometry) geometry = null\n\n  if (geometry && color) {\n    geometry = colors.colorize(color, geometry)\n  }\n  return geometry\n}\n\nconst instantiateGroup = (options, object) => {\n  // instantiate all sub-objects into geometry\n  const geometries = object.objects.map((object) => instantiateDefinition(options, object)).filter((g) => g != null)\n  if (geometries.length === 0) return null\n  return geometries\n}\n\nconst instantiateDefinition = (options, object) => {\n  let geometry\n  switch (object.definition) {\n    case x3dTypes.TRANSFORM:\n      geometry = instantiateTransform(options, object)\n      break\n    case x3dTypes.SHAPE:\n      geometry = instantiateShape(options, object)\n      break\n    case x3dTypes.GROUP:\n      geometry = instantiateGroup(options, object)\n      break\n    default:\n      console.log('WARNING: unknown definition: ' + object.definition)\n      break\n  }\n  return geometry\n}\n\nconst instantiateDefinitions = (options, objects) => {\n  const geometries = objects.map((object) => instantiateDefinition(options, object)).filter((g) => g != null)\n\n  instantiatedList.clear()\n\n  return geometries\n}\n\nmodule.exports = instantiateDefinitions\n", "const { flatten } = require('@jscad/array-utils')\n\nconst parse = require('./parse')\nconst instantiateDefinitions = require('./instantiateDefinitions')\nconst { x3dTypes } = require('./objects')\n\nconst instantiate = (options, src) => {\n  const defaults = {\n    pxPmm: require('./constants').pxPmm\n  }\n  options = Object.assign({}, defaults, options)\n  const { pxPmm } = options\n\n  options && options.statusCallback && options.statusCallback({ progress: 0 })\n\n  // parse the X3D source\n  const { x3dObj } = parse(src, pxPmm)\n\n  if (x3dObj.definition !== x3dTypes.X3D || (!x3dObj.objects)) throw new Error('X3D malformed')\n  if (x3dObj.objects.length < 1 || x3dObj.objects[0].definition !== x3dTypes.SCENE) throw new Error('X3D did not define a SCENE')\n\n  options && options.statusCallback && options.statusCallback({ progress: 50 })\n\n  // convert the X3D object structure to JSCAD geometry (API calls)\n  const scene = x3dObj.objects[0] // instantiate starts here\n  const objects = scene.objects\n\n  let geometries = instantiateDefinitions(options, objects)\n  if (options.flatten) geometries = flatten(geometries)\n\n  options && options.statusCallback && options.statusCallback({ progress: 100 })\n\n  return geometries\n}\n\nmodule.exports = instantiate\n", "/*\n## License\n\nCopyright (c) 2021 Z3 Development https://github.com/z3dev\n\nAll code released under MIT license\n*/\n\n// //////////////////////////////////////////\n//\n// Extensible 3D (X3D) Graphics is the open standard for publishing, viewing, printing and archiving interactive 3D models\n// See Web 3D Consortium for Documentation, https://www.web3d.org/\n//\n// //////////////////////////////////////////\n\n/**\n * Deserializer of X3D source data (XML) to JSCAD geometries.\n * @see {@link https://github.com/jscad/OpenJSCAD.org/blob/master/packages/io/x3d-deserializer/README.md|README} for supported conversion of X3D entities.\n * @module io/x3d-deserializer\n * @example\n * const { deserializer, extension } = require('@jscad/x3d-deserializer')\n */\n\nconst version = require('../package.json').version\n\nconst translate = require('./translate')\nconst instantiate = require('./instantiate')\n\n/**\n * Deserialize the given X3D source (XML Encoding) into either a script or an array of geometry\n * @see {@link https://www.web3d.org/documents/specifications/19776-1/V3.3/index.html|X3D File Format}\n * @see README for supported conversions.\n * @param {Object} [options] - options used during deserializing\n * @param {String} [options.filename='x3d'] - filename of original X3D source\n * @param {String} [options.output='script'] - either 'script' or 'geometry' to set desired output\n * @param {String} [options.version] - version added to the script metadata, default is package version\n * @param {Boolean} [options.addMetadata=true] - toggle injection of metadata at the start of the script\n * @param {String} input - X3D source data (XML)\n * @returns {(Array|String)} either an array of objects (geometry) or a string (script)\n * @alias module:io/x3d-deserializer.deserialize\n */\nconst deserialize = (options, input) => {\n  const defaults = {\n    filename: 'x3d',\n    output: 'script',\n    version,\n    flatten: true,\n    addMetaData: true\n  }\n  options = Object.assign({}, defaults, options)\n\n  return options.output === 'script' ? translate(options, input) : instantiate(options, input)\n}\n\nconst extension = 'x3d'\n\nmodule.exports = {\n  deserialize,\n  extension\n}\n", "const amfDeSerializer = require('@jscad/amf-deserializer')\nconst dxfDeSerializer = require('@jscad/dxf-deserializer')\nconst jsonDeSerializer = require('@jscad/json-deserializer')\nconst objDeSerializer = require('@jscad/obj-deserializer')\n// const scadDeSerializer = require('@jscad/scad-deserializer') //FIXME: upgrade, fix before re-enabling\nconst stlDeSerializer = require('@jscad/stl-deserializer')\nconst svgDeSerializer = require('@jscad/svg-deserializer')\nconst x3dDeSerializer = require('@jscad/x3d-deserializer')\n\nconst deserializers = {}\ndeserializers[amfDeSerializer.extension] = amfDeSerializer.deserialize\ndeserializers[dxfDeSerializer.extension] = dxfDeSerializer.deserialize\ndeserializers[jsonDeSerializer.extension] = jsonDeSerializer.deserialize\ndeserializers[objDeSerializer.extension] = objDeSerializer.deserialize\ndeserializers[stlDeSerializer.extension] = stlDeSerializer.deserialize\ndeserializers[svgDeSerializer.extension] = svgDeSerializer.deserialize\ndeserializers[x3dDeSerializer.extension] = x3dDeSerializer.deserialize\n\nmodule.exports = deserializers\n", "const { makeBlob, convertToBlob } = require('@jscad/io-utils')\n\nconst amfSerializer = require('@jscad/amf-serializer')\nconst dxfSerializer = require('@jscad/dxf-serializer')\nconst jsonSerializer = require('@jscad/json-serializer')\nconst objSerializer = require('@jscad/obj-serializer')\nconst stlSerializer = require('@jscad/stl-serializer')\nconst svgSerializer = require('@jscad/svg-serializer')\nconst x3dSerializer = require('@jscad/x3d-serializer')\nconst m3fSerializer = require('@jscad/3mf-serializer')\n\nconst prepareOutput = require('./prepareOutput')\nconst deserializers = require('./deserializers')\n\nconst solidsAsBlob = (solids, params) => convertToBlob(prepareOutput(solids, params))\n\nmodule.exports = {\n  makeBlob,\n  solidsAsBlob,\n\n  amfSerializer,\n  dxfSerializer,\n  jsonSerializer,\n  objSerializer,\n  stlSerializer,\n  svgSerializer,\n  x3dSerializer,\n  m3fSerializer, // UG javascript doesn't allow names with leading digit\n\n  deserializers\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;AAAA;AAsBA,QAAMA,QAAN,MAAM,MAAK;AAAA;AAAA;AAAA;AAAA;AAAA,MAKT,YAAa,UAAU,SAAS;AAE9B,kBAAU,WAAW,CAAC;AAEtB,aAAK,OAAO;AAEZ,aAAK,OAAO;AAEZ,aAAK,WAAW;AAEhB,aAAK,WAAW;AAEhB,aAAK,SAAS;AACd,aAAK,SAAS;AAEd,YAAI,CAAC;AAAU;AACf,YAAI,CAAC,MAAM,QAAQ,QAAQ;AAAG;AAG9B,iBAAS,QAAQ,CAAC,YAAY;AAC5B,cAAI,OAAQ,YAAa,UAAU;AACjC,iBAAK,UAAU,QAAQ;AAAA,UACzB,WAAW,mBAAmB,aAAa;AACzC,iBAAK,UAAU,QAAQ;AAAA,UACzB;AAAA,QACF,CAAC;AAGD,YAAI,QAAQ,MAAM;AAGhB,eAAK,OAAO,QAAQ,KAAK,YAAY;AAAA,QACvC;AACA,YAAI,QAAQ,SAAS;AAAA,QAErB;AACA,YAAI,QAAQ,UAAU;AACpB,eAAK,WAAW,QAAQ,SAAS,YAAY;AAAA,QAC/C;AACA,YAAI,QAAQ,QAAQ;AAClB,eAAK,SAAS,QAAQ;AAAA,QACxB;AAEA,YAAI;AACJ,YAAI;AAGJ,aAAK,SAAS,OAAO,YAAY,KAAK,MAAM;AAC5C,iBAAS,QAAQ,GAAG,QAAQ,SAAS,QAAQ,SAAS;AACpD,kBAAQ,OAAQ,SAAS,KAAK,GAAI;AAAA,YAChC,KAAK;AACH,uBAAS,KAAK,OAAO,MAAM,SAAS,KAAK,GAAG,KAAK,MAAM,KAAK,QAAQ;AACpE,mBAAK,OAAO,KAAK,OAAO;AACxB;AAAA,YACF,KAAK;AACH,uBAAS,SAAS,KAAK;AAEvB,kBAAI,kBAAkB,aAAa;AACjC,sBAAM,OAAO,IAAI,SAAS,MAAM;AAChC,yBAAS,SAAS,GAAG,SAAS,OAAO,YAAY,UAAU;AACzD,wBAAM,QAAQ,KAAK,SAAS,MAAM;AAClC,2BAAS,KAAK,OAAO,WAAW,OAAO,KAAK,MAAM,KAAK;AACvD,uBAAK;AAAA,gBACP;AAAA,cACF;AACA;AAAA,YACF;AACE;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,MAEA,WAAY;AAEV,eAAO,KAAK,OAAO,MAAM,GAAG,KAAK,IAAI;AAAA,MACvC;AAAA,MAEA,cAAe;AACb,eAAO,KAAK,OAAO,MAAM,GAAG,KAAK,IAAI;AAAA,MACvC;AAAA,MAEA,MAAO,OAAO,KAAK,MAAM;AACvB,gBAAQ,SAAS;AACjB,cAAM,OAAO,KAAK;AAClB,eAAO,QAAQ;AAEf,eAAO,IAAI,MAAK;AAAA,MAClB;AAAA,MAEA,SAAU;AAER,eAAO;AAAA,MACT;AAAA,MAEA,OAAQ;AAEN,eAAO;AAAA,MACT;AAAA,MAEA,QAAS;AAEP,YAAI,KAAK;AAAU;AAEnB,aAAK,WAAW;AAAA,MAClB;AAAA,MAEA,WAAY;AAEV,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO,UAAUA;AAAA;AAAA;;;AC3IjB;AAAA;AAAA,QAAM,WAAW;AAUjB,QAAM,WAAW,MAAM;AACrB,YAAM,OAAO,OAAO,WAAW,cAAc,OAAO,OAAO;AAC3D,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACfjB;AAAA;AAAA,QAAM,WAAW;AAEjB,QAAMC,QAAO,SAAS;AAatB,QAAM,gBAAgB,CAAC,UAAU;AAC/B,YAAM,EAAE,MAAM,SAAS,IAAI;AAC3B,YAAM,OAAO,IAAIA,MAAK,MAAM,EAAE,MAAM,SAAS,CAAC;AAC9C,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACrBjB;AAAA;AASA,QAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOjB,YAAa,MAAM;AACjB,aAAK,UAAU;AACf,aAAK,OAAO;AAAA,MACd;AAAA;AAAA,MAGA,WAAY;AAAE,eAAO,KAAK,WAAW,GAAG,IAAI;AAAA,MAAE;AAAA,MAC9C,YAAa;AAAE,eAAO,KAAK,WAAW,GAAG,KAAK;AAAA,MAAE;AAAA,MAChD,YAAa;AAAE,eAAO,KAAK,WAAW,IAAI,IAAI;AAAA,MAAE;AAAA,MAChD,aAAc;AAAE,eAAO,KAAK,WAAW,IAAI,KAAK;AAAA,MAAE;AAAA,MAClD,YAAa;AAAE,eAAO,KAAK,WAAW,IAAI,IAAI;AAAA,MAAE;AAAA,MAChD,aAAc;AAAE,eAAO,KAAK,WAAW,IAAI,KAAK;AAAA,MAAE;AAAA,MAElD,YAAa;AAAE,eAAO,KAAK,aAAa,IAAI,CAAC;AAAA,MAAE;AAAA,MAC/C,aAAc;AAAE,eAAO,KAAK,aAAa,IAAI,EAAE;AAAA,MAAE;AAAA,MAEjD,WAAY;AAAE,eAAO,KAAK,WAAW,CAAC;AAAA,MAAE;AAAA,MACxC,WAAY,QAAQ;AAClB,aAAK,WAAW,SAAS,CAAC;AAC1B,cAAM,SAAS,KAAK,QAAQ,OAAO,KAAK,MAAM,MAAM;AACpD,aAAK,QAAQ;AACb,eAAO;AAAA,MACT;AAAA,MAEA,KAAM,KAAK;AACT,aAAK,OAAO;AACZ,aAAK,WAAW,CAAC;AAAA,MACnB;AAAA,MAEA,cAAe;AACb,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,UAAW;AACT,eAAO,KAAK,QAAQ;AAAA,MACtB;AAAA;AAAA,MAGA,aAAc,eAAe,cAAc;AACzC,cAAM,SAAS,gBAAgB,eAAe;AAC9C,cAAM,OAAO,UAAU;AACvB,aAAK,WAAW,MAAM;AAEtB,cAAM,OAAO,KAAK,IAAI,GAAG,eAAe,CAAC,IAAI;AAC7C,cAAM,SAAS,KAAK,UAAU,gBAAgB,cAAc,GAAG,IAAI;AACnE,cAAM,WAAW,KAAK,UAAU,eAAe,cAAc,IAAI;AACjE,YAAI,cAAc;AAClB,YAAI,UAAU;AACd,YAAI,UAAU;AACd,YAAI,WAAW;AACf,WAAG;AACD,gBAAM,YAAY,KAAK,UAAU,EAAE,SAAS,IAAI;AAChD,qBAAW,gBAAgB,KAAK;AAChC,cAAI,OAAO,KAAK;AAChB,iBAAQ,SAAS,GAAI;AACnB,gBAAI,YAAY,MAAM;AACpB,6BAAe,IAAI;AAAA,YACrB;AACA,uBAAW;AAAA,UACb;AAAA,QACF,SAAU,iBAAiB;AAE3B,aAAK,QAAQ;AAEb,eAAO,cAAc,QAAQ,KAAK,IAAI,cAAc,MAAM,SAAS,YAAY,YAC1E,IAAI,SAAS,OAAO,YAAY,cAAc,CAAC,WAAW,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,cAChF,KAAK,IAAI,GAAG,WAAW,IAAI,KAAK,IAAI,eAAe;AAAA,MAC7D;AAAA,MAEA,WAAY,MAAM,QAAQ;AACxB,cAAM,IAAI,KAAK,UAAU,GAAG,MAAM,OAAO,CAAC;AAC1C,cAAM,MAAM,KAAK,IAAI,GAAG,IAAI;AAC5B,cAAM,SAAS,UAAU,KAAK,MAAM,IAAI,IAAI,MAAM;AAElD,aAAK,QAAQ,OAAO;AACpB,eAAO;AAAA,MACT;AAAA;AAAA,MAGA,KAAM,GAAG,GAAG;AACV,aAAK,EAAE,GAAG,EAAE,GAAG,MAAM,KAAK,aAAa,KAAK,gBAAgB,aAAa,IAAI,KAAK,IAAI,cAAc,IAAI,aAAa;AAAE;AACvH,eAAO;AAAA,MACT;AAAA,MAEA,UAAW,GAAG,MAAM;AAClB,eAAO,KAAK,QAAQ,WAAW,KAAK,OAAO,OAAO,IAAI,CAAC,IAAI;AAAA,MAC7D;AAAA,MAEA,UAAW,OAAO,QAAQ,MAAM;AAC9B,cAAM,cAAc,QAAQ,UAAU;AACtC,cAAM,cAAc,QAAQ;AAC5B,cAAM,UAAU,QAAQ,SAAS,KAAK;AACtC,YAAI,WAAW,QAAQ,EAAE,QAAQ,WAAW;AAC5C,YAAI,OAAO,UAAU;AAErB,YAAI,MAAO,KAAK,UAAU,SAAS,IAAI,KAAK,eAAiB,MAAM,OAAO,IAAI,cAAc,WAAW;AAEvG,YAAI,QAAQ,YAAY;AACtB,kBAAQ,KAAK,UAAU,YAAY,IAAI,KAAM,KAAK,cAAc,OAAQ,UAAU,KAAK;AAAA,QACzF;AAEA,eAAO,MAAM;AACX,iBAAO,KAAK,KAAK,KAAK,UAAU,YAAY,IAAI,IAAI,UAAU,KAAK,WAAW;AAAA,QAChF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,WAAY,YAAY;AACtB,YAAI,EAAE,KAAK,OAAO,KAAK,KAAK,aAAa,CAAC,IAAI,KAAK,QAAQ,SAAS;AAAA,QAEpE;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACnIjB;AAAA;AAMA,WAAO,UAAU;AAAA,MACf,eAAe;AAAA,MACf,UAAU;AAAA,MACV,cAAc;AAAA,MACd,MAAM;AAAA,IACR;AAAA;AAAA;;;ACXA;AAAA;AAAA;AAEA,QAAM,WAAW,OAAK,KAAK,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM;AAEjE,aAAS,SAAU,aAAa;AAC9B,UAAI,EAAE,cAAc,IAAI;AACtB,eAAO,SAAO;AAAA,MAChB;AACA,UAAI,QAAQ,IAAI,OAAO,WAAW;AAClC,aAAO,SAAO;AAEZ,YAAI,OAAO,QAAQ,UAAU;AAC3B,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,IAAI,MAAM,IAAI;AAE1B,YAAI,IAAI,WAAW,GAAG;AACpB,iBAAO,QAAQ;AAAA,QACjB;AAEA,eAAO,IACJ,IAAI,OAAM,EAAE,KAAK,MAAM,KAAM,IAAI,QAAQ,CAAC,EAC1C,KAAK,IAAI;AAAA,MACd;AAAA,IACF;AAEA,QAAM,QAAQ,SAAO,IAClB,MAAM,IAAI,EACV,OAAO,OAAK,EAAE,KAAK,MAAM,EAAE,EAC3B,KAAK,IAAI;AAEZ,aAAS,UAAW,GAAG,aAAa;AAClC,YAAM,KAAM,cAAc,IAAK,OAAO;AACtC,YAAM,SAAS,SAAS,WAAW;AAEnC,eAAS,IAAIC,IAAG;AACd,YAAI,OAAO;AACX,YAAI,SAAS;AAEb,YAAI;AACJ,cAAM,UAAUA,GAAE,KAAK,CAAC,GAAG,GAAG,QAAQ;AACpC,cAAI,MAAM,GAAG;AACX,kBAAM,MAAM;AACZ,mBAAQ,IAAI,WAAW;AAAA,UACzB;AAEA,cAAI,MAAM,GAAG;AACX,gBAAI,SAAS,CAAC,GAAG;AACf,qBAAO,KAAK,CAAC,EAAE,IAAI,SAAO;AACxB,oBAAI,MAAM,EAAE,GAAG;AACf,oBAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,wBAAM,IAAI,KAAK,GAAG;AAAA,gBACpB;AACA,uBAAO,MAAM,MAAM,OAAO,MAAM;AAAA,cAClC,CAAC;AACD,kBAAI,IAAI,WAAW,GAAG;AACpB,uBAAO;AAAA,cACT;AACA,qBAAO;AACP;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAEA,kBAAQ,OAAO,GAAG;AAAA,YAClB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,sBAAQ,IAAI;AACZ;AAAA,UACF;AAEA,mBAAS;AACT,kBAAQ,IAAI,CAAC;AAAA,QACf,CAAC;AAED,YAAI,SAAS;AACX,iBAAO,MAAM,OAAO;AAAA,QACtB;AAEA,eAAO,SACH,MAAM,MAAM,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM,KACxC,MAAM,KAAK,OAAO,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM;AAAA,MACpD;AAEA,aAAO,IAAI,CAAC;AAAA,IACd;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC1FjB;AAAA;AASA,QAAM,UAAU,CAAC,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,MAAM,QAAQ,GAAG,IAAI,IAAI,OAAO,QAAQ,GAAG,CAAC,IAAI,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC;AAErH,WAAO,UAAU;AAAA;AAAA;;;ACXjB;AAAA;AAUA,QAAM,eAAe,CAAC,GAAG,MAAM,IAAI;AAEnC,WAAO,UAAU;AAAA;AAAA;;;ACZjB;AAAA;AAQA,QAAM,OAAO,CAAC,UAAU;AACtB,UAAI,CAAC,MAAM,QAAQ,KAAK,KAAK,MAAM,WAAW,GAAG;AAC/C,eAAO;AAAA,MACT;AACA,aAAO,MAAM,CAAC;AAAA,IAChB;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACfjB;AAAA;AAUA,QAAM,eAAe,CAAC,OAAO,SAAS,oBAAoB;AACxD,UAAI,YAAY;AAChB,UAAI,aAAa,MAAM;AACvB,aAAO,aAAa,WAAW;AAC7B,cAAM,YAAY,KAAK,OAAO,YAAY,cAAc,CAAC;AACzD,cAAM,cAAc,MAAM,SAAS;AACnC,cAAM,gBAAgB,gBAAgB,SAAS,WAAW;AAC1D,YAAI,gBAAgB,GAAG;AACrB,sBAAY,YAAY;AAAA,QAC1B,OAAO;AACL,uBAAa;AAAA,QACf;AAAA,MACF;AACA,YAAM,OAAO,WAAW,GAAG,OAAO;AAClC,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC3BjB;AAAA;AAUA,QAAM,MAAM,CAAC,OAAO,UAAU;AAC5B,UAAI,CAAC,MAAM,QAAQ,KAAK,KAAK,MAAM,SAAS,OAAO;AACjD,eAAO;AAAA,MACT;AACA,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjBjB;AAAA;AAYA,QAAM,cAAc,CAAC,SAAS,SAAS,iBAAiB;AACtD,gBAAU,QAAQ,MAAM;AACxB,aAAO,QAAQ,SAAS,cAAc;AACpC,gBAAQ,KAAK,OAAO;AAAA,MACtB;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACpBjB;AAAA;AAQA,QAAM,UAAU,CAAC,UAAU;AACzB,UAAI,MAAM,QAAQ,KAAK;AAAG,eAAO;AACjC,UAAI,UAAU,UAAa,UAAU;AAAM,eAAO,CAAC;AACnD,aAAO,CAAC,KAAK;AAAA,IACf;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACdjB,IAAAC,eAAA;AAAA;AAOA,WAAO,UAAU;AAAA,MACf,SAAS;AAAA,MACT,cAAc;AAAA,MACd,MAAM;AAAA,MACN,cAAc;AAAA,MACd,KAAK;AAAA,MACL,aAAa;AAAA,MACb,SAAS;AAAA,IACX;AAAA;AAAA;;;ACfA;AAAA;AAmCA,QAAM,YAAY;AAElB,QAAM,EAAE,YAAY,UAAU,IAAI;AAElC,QAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,QAAM,WAAW;AAcjB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,gBAAgB;AAAA,QAChB,MAAM;AAAA;AAAA,MACR;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,QAAQ,OAAO;AAGzB,UAAI,YAAY,QAAQ,OAAO,CAAC,WAAW,WAAW,MAAM,IAAI,MAAM,CAAC;AAEvE,UAAI,UAAU,WAAW;AAAG,cAAM,IAAI,MAAM,6CAA6C;AACzF,UAAI,QAAQ,WAAW,UAAU;AAAQ,gBAAQ,KAAK,6CAA6C;AAGnG,kBAAY,QAAQ,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,KAAK,GAAG,SAAS,CAAC;AAEtF,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAGhE,UAAI,OAAO;AAAA,QAAC;AAAA,QACV;AAAA,UACE,MAAM,QAAQ;AAAA,UACd,SAAS;AAAA,QACX;AAAA,QACA,CAAC,YAAY,EAAE,MAAM,SAAS,GAAG,kBAAkB;AAAA,MACrD;AACA,aAAO,KAAK,OAAO,iBAAiB,WAAW,OAAO,CAAC;AAGvD,YAAM,MAAM;AAAA,EACZ,UAAU,MAAM,CAAC,CAAC;AAElB,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO,CAAC,GAAG;AAAA,IACb;AAEA,QAAM,mBAAmB,CAAC,SAAS,YAAY;AAC7C,YAAM,WAAW,CAAC;AAClB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,cAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,YAAI,SAAS,SAAS,GAAG;AACvB,kBAAQ,KAAK;AACb,mBAAS,KAAK,gBAAgB,QAAQ,OAAO,CAAC;AAAA,QAChD;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,QAAQ,YAAY;AAC3C,YAAM,WAAW,CAAC,UAAU,EAAE,IAAI,QAAQ,GAAG,GAAG,cAAc,QAAQ,OAAO,CAAC;AAC9E,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,QAAQ,YAAY;AACzC,UAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,kBAAkB,QAAQ,OAAO,CAAC;AAC9D,iBAAW,SAAS,OAAO,iBAAiB,QAAQ,OAAO,CAAC;AAC5D,aAAO;AAAA,IACT;AAMA,QAAM,oBAAoB,CAAC,QAAQ,YAAY;AAC7C,YAAM,WAAW,CAAC,YAAY,CAAC,CAAC;AAEhC,YAAM,WAAW,CAAC;AAClB,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,eAAS,QAAQ,CAAC,YAAY;AAC5B,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ,KAAK;AAChD,mBAAS,KAAK,gBAAgB,QAAQ,SAAS,CAAC,GAAG,OAAO,CAAC;AAAA,QAC7D;AAAA,MACF,CAAC;AAED,aAAO,SAAS,OAAO,QAAQ;AAAA,IACjC;AAEA,QAAM,kBAAkB,CAAC,QAAQ,YAAY;AAC3C,YAAM,WAAW,CAAC,UAAU,CAAC,GAAG,qBAAqB,QAAQ,OAAO,CAAC;AACrE,aAAO;AAAA,IACT;AAEA,QAAM,uBAAuB,CAAC,QAAQ,YAAY;AAChD,YAAM,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;AACrG,aAAO;AAAA,IACT;AAMA,QAAM,mBAAmB,CAAC,QAAQ,YAAY;AAC5C,YAAM,cAAc,aAAa,OAAO,KAAK;AAC7C,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AAEnD,YAAM,WAAW,CAAC;AAElB,UAAI,SAAS,CAAC,UAAU,CAAC,CAAC;AAG1B,UAAI,aAAa;AACf,eAAO,KAAK,WAAW;AAAA,MACzB;AAEA,UAAI,SAAS;AACb,eAAS,QAAQ,CAAC,YAAY;AAC5B,YAAI,QAAQ,SAAS,SAAS,GAAG;AAC/B;AAAA,QACF;AAEA,cAAM,YAAY,mBAAmB,SAAS,QAAQ,OAAO;AAE7D,iBAAS,OAAO,OAAO,SAAS;AAEhC,kBAAU,QAAQ,SAAS;AAAA,MAC7B,CAAC;AACD,eAAS,KAAK,MAAM;AACpB,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,UAAU;AAC9B,UAAI,OAAO;AACT,YAAI,MAAM,SAAS;AAAG,gBAAM,KAAK,CAAG;AACpC,eAAO,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA,MACzG;AACA,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,SAAS,YAAY;AAC3C,YAAM,QAAQ,QAAQ;AACtB,aAAO,aAAa,KAAK;AAAA,IAC3B;AAEA,QAAM,qBAAqB,CAAC,SAAS,OAAO,YAAY;AACtD,YAAM,YAAY,eAAe,SAAS,OAAO;AAGjD,YAAM,WAAW,CAAC;AAClB,eAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,SAAS,GAAG,KAAK;AACpD,YAAI,WAAW;AACb,mBAAS,KAAK,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAI,QAAQ,IAAI,CAAE,GAAG,CAAC,MAAM,CAAC,GAAI,QAAQ,IAAI,CAAE,CAAC,CAAC;AAAA,QACxH,OAAO;AACL,mBAAS,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAI,QAAQ,IAAI,CAAE,GAAG,CAAC,MAAM,CAAC,GAAI,QAAQ,IAAI,CAAE,CAAC,CAAC;AAAA,QAC7G;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACjNA;AAAA;AAgBA,QAAM,aAAakmChB,aAAO;AAAA,IACT;AAEA,QAAM,aAAasahB,aw6BhB,akKhB,aAAO;AAAA,IACT;AAEA,QAAM,aAAagbhB,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC5iGA;AAAA;AAIA,QAAM,aAAa;AAAA,MACjB,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA;AAAA,MAEb,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,MAEb,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,IACrB;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjSjB;AAAA;AAuBA,QAAM,EAAE,YAAY,UAAU,IAAI;AAClC,QAAM,EAAE,OAAO,OAAO,MAAM,IAAI;AAEhC,QAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,QAAM,EAAE,YAAY,YAAY,WAAW,WAAW,WAAW,IAAI;AACrE,QAAM,iBAAiB;AAEvB,QAAM,WAAW;AAqBjB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,SAAS;AAAA;AAAA,QACT,SAAS;AAAA;AAAA,QACT,QAAQ;AAAA,QACR,gBAAgB;AAAA,QAChB,YAAY;AAAA,MACd;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,cAAQ,WAAW;AAEnB,gBAAU,QAAQ,OAAO;AAEzB,gBAAU,QAAQ,OAAO,CAAC,WAAW,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC;AAEhG,UAAI,QAAQ,WAAW;AAAG,cAAM,IAAI,MAAM,gDAAgD;AAG1F,gBAAU,QAAQ,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,KAAK,GAAG,OAAO,CAAC;AAElF,YAAM,aAAa;AAAA;AAAA,EAEnB,WAAW,OAAO,CAAC;AAAA,EACnB,WAAW,OAAO,CAAC;AAAA,EACnB,UAAU,OAAO,CAAC;AAAA,EAClB,UAAU,OAAO,CAAC;AAAA,EAClB,YAAY,SAAS,OAAO,CAAC;AAAA,EAC7B,WAAW,OAAO,CAAC;AAAA;AAAA;AAAA;AAInB,aAAO,CAAC,UAAU;AAAA,IACpB;AAQA,QAAM,cAAc,CAAC,SAAS,YAAY;AACxC,YAAM,iBAAiB,QAAQ,IAAI,CAAC,QAAQ,MAAM;AAChD,YAAI,MAAM,IAAI,MAAM,GAAG;AACrB,gBAAM,QAAQ,OAAO;AACrB,gBAAM,OAAO,OAAO;AACpB,gBAAM,WAAW,MAAM,WAAW,MAAM;AACxC,gBAAM,QAAQ,SAAS,IAAI,CAAC,aAAa,EAAE,QAAQ,MAAM,QAAQ,SAAS,OAAO,KAAK,EAAE;AACxF,cAAI,QAAQ,YAAY,YAAY;AAClC,mBAAO,eAAe,OAAO,OAAO;AAAA,UACtC;AACA,iBAAO,kBAAkB,OAAO,OAAO;AAAA,QACzC;AACA,YAAI,MAAM,IAAI,MAAM,GAAG;AAErB,cAAI,QAAQ,YAAY,YAAY;AAClC,mBAAO,mBAAmB,QAAQ,OAAO;AAAA,UAC3C;AACA,iBAAO,kBAAkB,QAAQ,OAAO;AAAA,QAC1C;AACA,YAAI,MAAM,IAAI,MAAM,GAAG;AAErB,gBAAM,QAAQ,OAAO;AACrB,gBAAM,OAAO,OAAO;AACpB,gBAAM,OAAO,EAAE,QAAQ,OAAO,UAAU,QAAQ,MAAM,SAAS,MAAM,GAAG,OAAO,KAAK;AACpF,iBAAO,kBAAkB,CAAC,IAAI,GAAG,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACT,CAAC;AACD,UAAI,UAAU;AAAA;AAAA;AAAA;AAAA;AAKd,qBAAe,QAAQ,CAAC,YAAY;AAClC,YAAI,SAAS;AACX,qBAAW;AAAA,QACb;AAAA,MACF,CAAC;AACD,iBAAW;AAAA;AAEX,aAAO;AAAA,IACT;AAYA,QAAM,oBAAoB,CAAC,OAAO,YAAY;AAC5C,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAChE,UAAI,MAAM;AACV,YAAM,QAAQ,CAAC,MAAM,MAAM;AACzB,YAAI,KAAK,OAAO,SAAS;AAAG;AAC5B,cAAM,kBAAkB,KAAK,OAAO,UAAU,KAAK,SAAS,IAAI;AAChE,eAAO;AAAA;AAAA;AAAA,EAGT,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAIpB,QAAQ,MAAM,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMtB,eAAe,MAAM,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAI7B,eAAe;AAAA;AAAA,EAEd,KAAK,SAAS,IAAI,CAAE;AAAA;AAEnB,iBAAS,aAAa,GAAG,aAAa,iBAAiB,cAAc;AACnE,cAAI,oBAAoB;AACxB,cAAI,qBAAqB,KAAK,OAAO;AAAQ,iCAAqB,KAAK,OAAO;AAC9E,gBAAM,QAAQ,KAAK,OAAO,iBAAiB;AAC3C,iBAAO;AAAA,EACX,MAAM,CAAC,CAAC;AAAA;AAAA,EAER,MAAM,CAAC,CAAC;AAAA;AAAA,QAEN;AACA,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,MACvF,CAAC;AACD,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,GAAG;AAAA,IACb;AAMA,QAAM,iBAAiB,CAAC,OAAO,YAAY;AACzC,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAChE,UAAI,MAAM;AACV,YAAM,QAAQ,CAAC,MAAM,MAAM;AACzB,cAAM,kBAAkB,KAAK,OAAO,UAAU,KAAK,SAAS,IAAI;AAChE,eAAO;AAAA;AAAA;AAAA,EAGT,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAIpB,QAAQ,MAAM,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAItB,eAAe,MAAM,OAAO,CAAC;AAAA;AAAA;AAAA;AAI3B,iBAAS,aAAa,GAAG,aAAa,iBAAiB,cAAc;AACnE,cAAI,oBAAoB;AACxB,cAAI,qBAAqB,KAAK,OAAO;AAAQ,iCAAqB,KAAK,OAAO;AAC9E,gBAAM,QAAQ,KAAK,OAAO,iBAAiB;AAC3C,iBAAO;AAAA;AAAA;AAAA,EAGX,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,MAAM,CAAC,CAAC;AAAA;AAAA,EAER,MAAM,CAAC,CAAC;AAAA;AAAA,QAEN;AACA,eAAO;AAAA;AAAA;AAAA,EAGT,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAIlB,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,MACvF,CAAC;AACD,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,GAAG;AAAA,IACb;AAMA,QAAM,oBAAoB,CAAC,QAAQ,YAAY;AAC7C,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAChE,UAAI,MAAM;AACV,YAAM,WAAW,MAAM,WAAW,MAAM;AACxC,YAAM,cAAc,eAAe,QAAQ,OAAO;AAClD,eAAS,QAAQ,CAAC,SAAS,MAAM;AAC/B,cAAM,YAAY,QAAQ,QAAQ,eAAe,SAAS,OAAO,IAAI;AACrE,cAAM,YAAY,mBAAmB,OAAO;AAC5C,kBAAU,QAAQ,CAAC,UAAUC,OAAM;AACjC,iBAAO,kBAAkB,UAAU,SAAS,SAAS;AAAA,QACvD,CAAC;AAAA,MACH,CAAC;AACD,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,GAAG;AAAA,IACb;AAMA,QAAM,qBAAqB,CAAC,YAAY;AACtC,YAAM,SAAS,QAAQ,SAAS,SAAS;AACzC,UAAI,SAAS;AAAG,eAAO,CAAC;AAExB,YAAM,QAAQ,QAAQ,SAAS,CAAC;AAChC,YAAM,YAAY,CAAC;AACnB,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,kBAAU,KAAK,CAAC,OAAO,QAAQ,SAAS,IAAI,CAAC,GAAG,QAAQ,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,MAC1E;AACA,aAAO;AAAA,IACT;AAKA,QAAM,oBAAoB,CAAC,UAAU,SAAS,UAAU;AACtD,YAAM,WAAW,SAAS,CAAC;AAC3B,YAAM,WAAW,SAAS,CAAC;AAC3B,YAAM,WAAW,SAAS,CAAC;AAC3B,YAAM,WAAW,SAAS,CAAC;AAC3B,YAAM,MAAM;AAAA;AAAA;AAAA,EAGZ,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAML,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAAA,EAEX,SAAS,CAAC,CAAC;AAAA;AAEX,aAAO;AAAA,IACT;AAKA,QAAM,qBAAqB,CAAC,QAAQ,YAAY;AAC9C,UAAI,MAAM;AACV,YAAM,OAAO,mBAAmB,MAAM,WAAW,MAAM,CAAC;AACxD,UAAI,KAAK,MAAM,SAAS,GAAG;AACzB,eAAO;AAAA;AAAA;AAAA,EAGT,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAIpB,QAAQ,QAAQ,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAIxB,eAAe,QAAQ,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,KAAK,SAAS,MAAM;AAAA;AAAA,EAEpB,KAAK,MAAM,MAAM;AAAA;AAEf,aAAK,SAAS,QAAQ,CAAC,WAAW;AAChC,iBAAO;AAAA;AAAA;AAAA,EAGX,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,OAAO,CAAC,CAAC;AAAA;AAAA,EAET,OAAO,CAAC,CAAC;AAAA;AAAA,EAET,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,QAIP,CAAC;AACD,aAAK,MAAM,QAAQ,CAAC,SAAS;AAC3B,iBAAO;AAAA;AAAA;AAAA,EAGX,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBpB,KAAK,CAAC,CAAC;AAAA;AAAA,EAEP,KAAK,CAAC,CAAC;AAAA;AAAA,EAEP,KAAK,CAAC,CAAC;AAAA;AAAA,EAEP,KAAK,CAAC,CAAC;AAAA;AAAA,QAEL,CAAC;AAAA,MACH;AACA,aAAO,CAAC,GAAG;AAAA,IACb;AAIA,QAAM,qBAAqB,CAAC,aAAa;AACvC,YAAM,QAAQ,CAAC;AACf,YAAM,WAAW,CAAC;AAClB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxC,cAAM,UAAU,SAAS,CAAC;AAC1B,cAAM,OAAO,CAAC;AACd,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ,EAAE,GAAG;AAChD,gBAAM,KAAK,QAAQ,SAAS,CAAC;AAC7B,mBAAS,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACnC,eAAK,KAAK,SAAS,MAAM;AAAA,QAC3B;AACA,eAAO,KAAK,SAAS,GAAG;AAAE,eAAK,KAAK,CAAC;AAAA,QAAE;AACvC,cAAM,KAAK,IAAI;AAAA,MACjB;AACA,aAAO,EAAE,OAAc,SAAmB;AAAA,IAC5C;AAIA,QAAM,cAAc,CAAC,YAAY;AAC/B,cAAQ;AAER,YAAM,SAAS,UAAU,QAAQ,SAAS,SAAS,EAAE,EAAE,YAAY;AACnE,aAAO,QAAQ,OAAO,OAAO,OAAO,SAAS,CAAC;AAAA,IAChD;AAEA,QAAM,UAAU,CAAC,QAAQ,YAAY;AACnC,UAAI,OAAO;AAAM,eAAO,OAAO;AAE/B,YAAM,SAAS,UAAU,QAAQ,SAAS,SAAS,EAAE,EAAE,YAAY;AACnE,aAAO,QAAQ,OAAO,OAAO,OAAO,SAAS,CAAC;AAAA,IAChD;AAEA,QAAM,iBAAiB,CAAC,QAAQ,YAAY;AAC1C,UAAI,cAAc;AAClB,UAAI,OAAO,OAAO;AAChB,cAAM,IAAI,KAAK,MAAM,OAAO,MAAM,CAAC,IAAI,GAAG;AAC1C,cAAM,IAAI,KAAK,MAAM,OAAO,MAAM,CAAC,IAAI,GAAG;AAC1C,cAAM,IAAI,KAAK,MAAM,OAAO,MAAM,CAAC,IAAI,GAAG;AAE1C,cAAM,QAAQ,QAAQ;AACtB,YAAI,UAAU,MAAM,MAAM;AAC1B,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,MAAM,MAAM,CAAC;AACnB,gBAAM,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC;AAC9E,cAAI,OAAO,SAAS;AAClB,0BAAc;AACd,gBAAI,SAAS;AAAG;AAChB,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACheA;AAAA;AAyBA,QAAM,EAAE,MAAM,IAAI;AAIlB,QAAM,WAAW,CAAC,KAAK,UAAU;AAC/B,cAAQ,KAAK;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,MAAM,KAAK,KAAK;AAAA,QACzB,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,MAAM,IAAI,CAAC,MAAM,MAAM,KAAK,CAAC,CAAC;AAAA,QACvC,KAAK;AACH,iBAAO,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,GAAG,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAAA,QAC9D;AACE;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAYA,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,gBAAgB;AAAA,MAClB;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,MAAM,QAAQ,OAAO;AAE/B,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAEhE,YAAM,WAAW,KAAK,UAAU,SAAS,QAAQ;AAEjD,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAElE,aAAO,CAAC,QAAQ;AAAA,IAClB;AAEA,QAAM,WAAW;AAEjB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC7EA;AAAA;AA8BA,QAAM,EAAE,QAAQ,YAAY,UAAU,IAAI;AAE1C,QAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,QAAM,WAAW;AAcjB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,gBAAgB;AAAA,QAChB,aAAa;AAAA;AAAA,MACf;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,QAAQ,OAAO;AAGzB,UAAI,YAAY,QAAQ,OAAO,CAAC,WAAW,WAAW,MAAM,IAAI,MAAM,CAAC;AAEvE,UAAI,UAAU,WAAW;AAAG,cAAM,IAAI,MAAM,6CAA6C;AACzF,UAAI,QAAQ,WAAW,UAAU;AAAQ,gBAAQ,KAAK,6CAA6C;AAGnG,kBAAY,QAAQ,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,QAAQ,YAAY,GAAG,SAAS,CAAC;AAErG,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAGhE,UAAI,OAAO;AAGX,YAAM,WAAW,CAAC;AAIlB,UAAI,gBAAgB;AACpB,gBAAU,QAAQ,CAAC,QAAQ,MAAM;AAC/B,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,UAAU,OAAO,CAAC;AACzF,gBAAQ;AAER,cAAM,cAAc,aAAa,MAAM;AACvC,cAAM,WAAW,WAAW,MAAM,WAAW,MAAM,EAChD,OAAO,CAAC,MAAM,EAAE,SAAS,UAAU,CAAC;AAEvC,iBAAS,QAAQ,CAAC,YAAY;AAC5B,kBAAQ,SAAS,QAAQ,CAAC,WAAW;AACnC,kBAAM,eAAe,cAAc,MAAM;AACzC,gBAAI,SAAS,QAAQ,YAAY,IAAI,GAAG;AAEtC,uBAAS,KAAK,YAAY;AAC1B,sBAAQ,GAAG,YAAY;AAAA;AAAA,YACzB;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AACD,gBAAQ;AAGR,iBAAS,QAAQ,CAAC,YAAY;AAE5B,gBAAM,UAAU,QAAQ,SACrB,IAAI,CAAC,MAAM,SAAS,QAAQ,cAAc,CAAC,CAAC,IAAI,CAAC;AAEpD,gBAAM,QAAQ,aAAa,OAAO,KAAK,eAAe;AACtD,cAAI,UAAU,eAAe;AAC3B,oBAAQ,UAAU,KAAK;AAAA;AACvB,4BAAgB;AAAA,UAClB;AACA,kBAAQ,KAAK,QAAQ,KAAK,GAAG,CAAC;AAAA;AAAA,QAChC,CAAC;AAAA,MACH,CAAC;AAED,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAElE,aAAO,CAAC,IAAI;AAAA,IACd;AAKA,QAAM,gBAAgB,CAAC,WAAW,KAAK,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;AAK1E,QAAM,eAAe,CAAC,WAAW;AAC/B,UAAI;AACJ,UAAI,OAAO,OAAO;AAChB,cAAM,IAAI,OAAO,MAAM,CAAC;AACxB,cAAM,IAAI,OAAO,MAAM,CAAC;AACxB,cAAM,IAAI,OAAO,MAAM,CAAC;AAExB,YAAI,UAAU,MAAM,MAAM;AAC1B,mBAAW,QAAQ,OAAO,WAAW;AACnC,gBAAM,MAAM,OAAO,UAAU,IAAI;AACjC,gBAAM,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC;AAC9E,cAAI,OAAO,SAAS;AAClB,wBAAY;AACZ,gBAAI,SAAS;AAAG;AAChB,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrJA;AAAA;AAAA,QAAM,EAAE,WAAW,IAAI;AAKvB,QAAM,kBAAkB,CAAC,SAAS,YAAY;AAC5C,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAGhE,YAAM,SAAS,IAAI,YAAY,CAAC;AAChC,YAAM,cAAc,IAAI,WAAW,QAAQ,GAAG,CAAC;AAC/C,YAAM,aAAa,IAAI,UAAU,QAAQ,GAAG,CAAC;AAC7C,kBAAY,CAAC,IAAI;AACjB,UAAI,WAAW,CAAC,MAAM,IAAM;AAC1B,cAAM,IAAI,MAAM,mFAAmF;AAAA,MACrG;AAEA,UAAI,eAAe;AACnB,UAAI,cAAc;AAClB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,cAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,iBAAS,QAAQ,CAAC,YAAY;AAC5B,gBAAM,cAAc,QAAQ,SAAS;AACrC,gBAAM,mBAAoB,eAAe,IAAK,cAAc,IAAI;AAChE,0BAAgB;AAChB,yBAAe;AAAA,QACjB,CAAC;AAAA,MACH,CAAC;AAED,YAAM,cAAc,IAAI,WAAW,EAAE;AACrC,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,oBAAY,CAAC,IAAI;AAAA,MACnB;AAEA,YAAM,MAAM,IAAI,YAAY,CAAC;AAC7B,UAAI,CAAC,IAAI;AAGT,YAAM,qBAAqB,IAAI,YAAY,KAAK,YAAY;AAC5D,YAAM,2BAA2B,IAAI,UAAU,kBAAkB;AAKjE,YAAM,iBAAiB,IAAI,YAAY,EAAE;AACzC,YAAM,uBAAuB,IAAI,UAAU,cAAc;AAGzD,YAAM,uBAAuB,IAAI,aAAa,gBAAgB,GAAG,EAAE;AAEnE,YAAM,sBAAsB,IAAI,YAAY,gBAAgB,IAAI,CAAC;AAEjE,UAAI,aAAa;AAEjB,cAAQ,QAAQ,CAAC,WAAW;AAC1B,cAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,iBAAS,QAAQ,CAAC,SAAS,UAAU;AACnC,gBAAM,WAAW,QAAQ;AACzB,gBAAM,cAAc,SAAS;AAC7B,gBAAM,QAAQ,WAAW,MAAM,MAAM,OAAO;AAC5C,mBAAS,IAAI,GAAG,IAAI,cAAc,GAAG,KAAK;AACxC,iCAAqB,CAAC,IAAI,MAAM,CAAC;AACjC,iCAAqB,CAAC,IAAI,MAAM,CAAC;AACjC,iCAAqB,CAAC,IAAI,MAAM,CAAC;AACjC,gBAAI,UAAU;AACd,qBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,oBAAM,KAAK,KAAM,IAAI,IAAK,IAAI;AAC9B,oBAAM,SAAS,SAAS,EAAE;AAC1B,mCAAqB,SAAS,IAAI,OAAO,CAAC;AAC1C,mCAAqB,SAAS,IAAI,OAAO,CAAC;AAC1C,mCAAqB,SAAS,IAAI,OAAO,CAAC;AAAA,YAC5C;AACA,gCAAoB,CAAC,IAAI;AAEzB,qCAAyB,IAAI,sBAAsB,UAAU;AAC7D,0BAAc;AAAA,UAChB;AAEA,kBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,QAAQ,YAAY,CAAC;AAAA,QAC1F,CAAC;AAAA,MACH,CAAC;AACD,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,YAAY,QAAQ,IAAI,QAAQ,kBAAkB;AAAA,IAC5D;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACvFA;AAAA;AAAA,QAAM,EAAE,WAAW,IAAI;AAGvB,QAAM,gBAAgB,CAAC,SAAS,YAAY;AAC1C,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAEhE,YAAM,SAAS;AAAA,EACf,aAAa,SAAS,OAAO,CAAC;AAAA;AAAA;AAG9B,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,MAAM;AAAA,IAChB;AAEA,QAAM,eAAe,CAAC,SAAS,YAAY;AACzC,YAAM,SAAS,CAAC;AAChB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,eAAO,KAAK,gBAAgB,QAAQ,OAAO,CAAC;AAC5C,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,QAAQ,OAAO,CAAC;AAAA,MACzF,CAAC;AACD,aAAO,OAAO,KAAK,IAAI;AAAA,IACzB;AAEA,QAAM,kBAAkB,CAAC,QAAQ,YAAY;AAC3C,YAAM,SAAS,CAAC;AAChB,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,eAAS,QAAQ,CAAC,SAAS,MAAM;AAC/B,eAAO,KAAK,eAAe,OAAO,CAAC;AAAA,MACrC,CAAC;AACD,aAAO,OAAO,KAAK,IAAI;AAAA,IACzB;AAEA,QAAM,sBAAsB,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AAE1D,QAAM,oBAAoB,CAAC,WAAW,UAAU,oBAAoB,MAAM,CAAC;AAE3E,QAAM,iBAAiB,CAAC,YAAY;AAClC,YAAM,SAAS,CAAC;AAChB,UAAI,QAAQ,SAAS,UAAU,GAAG;AAEhC,cAAM,iBAAiB,kBAAkB,QAAQ,SAAS,CAAC,CAAC;AAC5D,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,SAAS,GAAG,KAAK;AACpD,gBAAM,QAAQ,gBAAgB,oBAAoB,WAAW,MAAM,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA,EAEtF,cAAc;AAAA,EACd,kBAAkB,QAAQ,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,EAC1C,kBAAkB,QAAQ,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA;AAAA;AAGtC,iBAAO,KAAK,KAAK;AAAA,QACnB;AAAA,MACF;AACA,aAAO,OAAO,KAAK,IAAI;AAAA,IACzB;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACzDA;AAAA;AAyBA,QAAM,EAAE,YAAY,UAAU,IAAI;AAElC,QAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,QAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAM,EAAE,cAAc,IAAI;AAE1B,QAAM,WAAW;AAcjB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,QAAQ;AAAA,QACR,gBAAgB;AAAA,MAClB;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,QAAQ,OAAO;AAGzB,UAAI,YAAY,QAAQ,OAAO,CAAC,WAAW,WAAW,MAAM,IAAI,MAAM,CAAC;AAEvE,UAAI,UAAU,WAAW;AAAG,cAAM,IAAI,MAAM,6CAA6C;AACzF,UAAI,QAAQ,WAAW,UAAU;AAAQ,gBAAQ,KAAK,6CAA6C;AAGnG,kBAAY,QAAQ,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,KAAK,GAAG,SAAS,CAAC;AAEtF,aAAO,QAAQ,SAAS,gBAAgB,WAAW,OAAO,IAAI,cAAc,WAAW,OAAO;AAAA,IAChG;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACtEA,IAAAC,qBAAA;AAAA;AAAA;AAEA,QAAM,WAAW,OAAK,KAAK,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM;AAEjE,aAAS,SAAU,aAAa;AAC9B,UAAI,EAAE,cAAc,IAAI;AACtB,eAAO,SAAO;AAAA,MAChB;AACA,UAAI,QAAQ,IAAI,OAAO,WAAW;AAClC,aAAO,SAAO;AAEZ,YAAI,OAAO,QAAQ,UAAU;AAC3B,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,IAAI,MAAM,IAAI;AAE1B,YAAI,IAAI,WAAW,GAAG;AACpB,iBAAO,QAAQ;AAAA,QACjB;AAEA,eAAO,IACJ,IAAI,OAAM,EAAE,KAAK,MAAM,KAAM,IAAI,QAAQ,CAAC,EAC1C,KAAK,IAAI;AAAA,MACd;AAAA,IACF;AAEA,QAAM,QAAQ,SAAO,IAClB,MAAM,IAAI,EACV,OAAO,OAAK,EAAE,KAAK,MAAM,EAAE,EAC3B,KAAK,IAAI;AAEZ,aAAS,UAAW,GAAG,aAAa;AAClC,YAAM,KAAM,cAAc,IAAK,OAAO;AACtC,YAAM,SAAS,SAAS,WAAW;AAEnC,eAAS,IAAIC,IAAG;AACd,YAAI,OAAO;AACX,YAAI,SAAS;AAEb,YAAI;AACJ,cAAM,UAAUA,GAAE,KAAK,CAAC,GAAG,GAAG,QAAQ;AACpC,cAAI,MAAM,GAAG;AACX,kBAAM,MAAM;AACZ,mBAAQ,IAAI,WAAW;AAAA,UACzB;AAEA,cAAI,MAAM,GAAG;AACX,gBAAI,SAAS,CAAC,GAAG;AACf,qBAAO,KAAK,CAAC,EAAE,IAAI,SAAO;AACxB,oBAAI,MAAM,EAAE,GAAG;AACf,oBAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,wBAAM,IAAI,KAAK,GAAG;AAAA,gBACpB;AACA,uBAAO,MAAM,MAAM,OAAO,MAAM;AAAA,cAClC,CAAC;AACD,kBAAI,IAAI,WAAW,GAAG;AACpB,uBAAO;AAAA,cACT;AACA,qBAAO;AACP;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAEA,kBAAQ,OAAO,GAAG;AAAA,YAClB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,sBAAQ,IAAI;AACZ;AAAA,UACF;AAEA,mBAAS;AACT,kBAAQ,IAAI,CAAC;AAAA,QACf,CAAC;AAED,YAAI,SAAS;AACX,iBAAO,MAAM,OAAO;AAAA,QACtB;AAEA,eAAO,SACH,MAAM,MAAM,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM,KACxC,MAAM,KAAK,OAAO,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM;AAAA,MACpD;AAEA,aAAO,IAAI,CAAC;AAAA,IACd;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC1FjB;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,mBAAmB;AAAA,QACnB,MAAQ;AAAA,MACV;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;AC1CA;AAAA;AAiCA,QAAM,EAAE,YAAY,OAAO,cAAc,MAAM,IAAI;AAEnD,QAAM,YAAY;AAElB,QAAM,UAAU,kBAA0B;AAE1C,QAAM,WAAW;AAejB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,MAAM;AAAA;AAAA,QACN,UAAU;AAAA,QACV;AAAA,QACA,gBAAgB;AAAA,MAClB;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,MAAM,QAAQ,OAAO;AAG/B,YAAM,YAAY,QAAQ,OAAO,CAAC,WAAW,WAAW,MAAM,IAAI,MAAM,KAAK,WAAW,MAAM,IAAI,MAAM,CAAC;AAEzG,UAAI,UAAU,WAAW;AAAG,cAAM,IAAI,MAAM,6CAA6C;AACzF,UAAI,QAAQ,WAAW,UAAU;AAAQ,gBAAQ,KAAK,6CAA6C;AAEnG,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAGhE,YAAM,SAAS,UAAU,SAAS;AAElC,UAAI,QAAQ;AACZ,UAAI,SAAS;AACb,UAAI,QAAQ;AACV,gBAAQ,KAAK,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,QAAQ,QAAQ,IAAI,QAAQ;AAC/E,iBAAS,KAAK,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,QAAQ,QAAQ,IAAI,QAAQ;AAAA,MAClF;AAEA,UAAI,OAAO;AAAA,QAAC;AAAA,QACV;AAAA,UACE,OAAO,QAAQ,QAAQ;AAAA,UACvB,QAAQ,SAAS,QAAQ;AAAA,UACzB,SAAU,SAAS,QAAQ,MAAM;AAAA,UACjC,MAAM;AAAA,UACN,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,SAAS;AAAA,UACT,aAAa;AAAA,UACb,OAAO;AAAA,UACP,eAAe;AAAA,QACjB;AAAA,MACF;AACA,UAAI,QAAQ;AACV,eAAO,KAAK,OAAO,eAAe,WAAW,QAAQ,OAAO,CAAC;AAAA,MAC/D;AAEA,YAAM,MAAM;AAAA;AAAA;AAAA,EAGZ,UAAU,MAAM,CAAC,CAAC;AAElB,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAClE,aAAO,CAAC,GAAG;AAAA,IACb;AAKA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,YAAY,aAAa,mBAAmB,OAAO;AAEzD,UAAI,QAAQ,WAAW;AAAG,eAAO;AAGjC,YAAM,cAAc,UAAU,OAAO,CAAC,KAAK,WAAW;AACpD,cAAM,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;AACxC,cAAM,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;AACxC,eAAO;AAAA,MACT,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACzB,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,SAAS,QAAQ,YAAY;AACnD,YAAM,UAAU,IAAI,OAAO,CAAC,EAAE,CAAC;AAC/B,YAAM,UAAU,IAAI,OAAO,CAAC,EAAE,CAAC;AAE/B,YAAM,WAAW,CAAC;AAClB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,QAAQ,OAAO,CAAC;AAEvF,YAAI,WAAW,MAAM,IAAI,MAAM,GAAG;AAChC,mBAAS,KAAK,aAAa,QAAQ,CAAC,SAAS,OAAO,GAAG,OAAO,CAAC;AAAA,QACjE;AACA,YAAI,WAAW,MAAM,IAAI,MAAM,GAAG;AAChC,mBAAS,KAAK,aAAa,CAAC,MAAM,GAAG,CAAC,SAAS,OAAO,GAAG,OAAO,CAAC;AAAA,QACnE;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,GAAG,GAAG,IAAI,OAAO;AAChC,YAAM,KAAK,IAAI;AACf,YAAM,KAAK,IAAI;AACf,UAAI,MAAM,MAAM,MAAM;AAAI,eAAO,CAAC,GAAG,CAAC;AACtC,UAAI,MAAM;AAAI,eAAO,CAAC,GAAG,KAAM,EAAG;AAClC,UAAI,MAAM;AAAI,eAAO,CAAC,KAAM,CAAC,IAAK,CAAC;AACnC,aAAO,CAAC,KAAM,CAAC,IAAK,KAAM,EAAG;AAAA,IAC/B;AAEA,QAAM,eAAe,CAAC,QAAQ,SAAS,YAAY;AACjD,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,YAAM,QAAQ,SAAS,IAAI,CAAC,YAAY,WAAW,MAAM,WAAW,EAAE,QAAQ,KAAK,GAAG,OAAO,CAAC;AAE9F,cAAQ,QAAQ;AAChB,UAAI,OAAO;AAAO,gBAAQ,QAAQ,aAAa,OAAO,KAAK;AAC3D,cAAQ,KAAK;AACb,UAAI,OAAO;AAAI,gBAAQ,KAAK,OAAO;AACnC,cAAQ,QAAQ;AAChB,UAAI,OAAO;AAAO,gBAAQ,QAAQ,OAAO;AAEzC,aAAO,uBAAuB,OAAO,SAAS,OAAO;AAAA,IACvD;AAEA,QAAM,yBAAyB,CAAC,OAAO,SAAS,YAAY;AAC1D,UAAI,eAAe;AACnB,YAAM,QAAQ,CAAC,SAAU,gBAAgB,YAAY,MAAM,SAAS,OAAO,CAAE;AAC7E,YAAM,IAAI,EAAE,MAAM,QAAQ,OAAO,GAAG,aAAa;AACjD,UAAI,QAAQ;AAAI,UAAE,KAAK,QAAQ;AAC/B,UAAI,QAAQ;AAAO,UAAE,QAAQ,QAAQ;AACrC,aAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAAA,IAC1B;AAEA,QAAM,eAAe,CAAC,OAAO,SAAS,YAAY,MAAM,OAAO,CAAC,KAAK,MAAM,MAAM;AAC/E,YAAM,IAAI,EAAE,GAAG,YAAY,MAAM,SAAS,OAAO,EAAE;AACnD,UAAI,KAAK;AAAO,UAAE,SAAS,aAAa,KAAK,KAAK;AAClD,UAAI,KAAK;AAAI,UAAE,KAAK,KAAK;AACzB,UAAI,KAAK;AAAO,UAAE,QAAQ,KAAK;AAC/B,aAAO,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAAA,IACjC,GAAG,CAAC,GAAG,CAAC;AAER,QAAM,cAAc,CAAC,MAAM,SAAS,YAAY;AAC9C,UAAI,MAAM;AACV,YAAM,kBAAkB,KAAK,OAAO,UAAU,KAAK,WAAW,IAAI;AAClE,eAAS,aAAa,GAAG,aAAa,iBAAiB,cAAc;AACnE,YAAI,oBAAoB;AACxB,YAAI,qBAAqB,KAAK,OAAO;AAAQ,+BAAqB,KAAK,OAAO;AAC9E,cAAM,QAAQ,KAAK,OAAO,iBAAiB;AAC3C,cAAM,WAAW,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,CAAC,IAAI,QAAQ,CAAC,CAAC;AAC9D,cAAM,WAAW,QAAQ,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,GAAG,CAAC;AACvD,cAAM,IAAI,KAAK,MAAM,SAAS,CAAC,IAAI,QAAQ,QAAQ,IAAI,QAAQ;AAC/D,cAAM,IAAI,KAAK,MAAM,SAAS,CAAC,IAAI,QAAQ,QAAQ,IAAI,QAAQ;AAC/D,YAAI,aAAa,GAAG;AAClB,iBAAO,IAAI,CAAC,IAAI,CAAC;AAAA,QACnB,OAAO;AACL,iBAAO,IAAI,CAAC,IAAI,CAAC;AAAA,QACnB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,UAAU,OAAO,MAAM,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG;AAE3G,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AClNA,IAAAC,qBAAA;AAAA;AAAA;AAEA,QAAM,WAAW,OAAK,KAAK,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM;AAEjE,aAAS,SAAU,aAAa;AAC9B,UAAI,EAAE,cAAc,IAAI;AACtB,eAAO,SAAO;AAAA,MAChB;AACA,UAAI,QAAQ,IAAI,OAAO,WAAW;AAClC,aAAO,SAAO;AAEZ,YAAI,OAAO,QAAQ,UAAU;AAC3B,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,IAAI,MAAM,IAAI;AAE1B,YAAI,IAAI,WAAW,GAAG;AACpB,iBAAO,QAAQ;AAAA,QACjB;AAEA,eAAO,IACJ,IAAI,OAAM,EAAE,KAAK,MAAM,KAAM,IAAI,QAAQ,CAAC,EAC1C,KAAK,IAAI;AAAA,MACd;AAAA,IACF;AAEA,QAAM,QAAQ,SAAO,IAClB,MAAM,IAAI,EACV,OAAO,OAAK,EAAE,KAAK,MAAM,EAAE,EAC3B,KAAK,IAAI;AAEZ,aAAS,UAAW,GAAG,aAAa;AAClC,YAAM,KAAM,cAAc,IAAK,OAAO;AACtC,YAAM,SAAS,SAAS,WAAW;AAEnC,eAAS,IAAIC,IAAG;AACd,YAAI,OAAO;AACX,YAAI,SAAS;AAEb,YAAI;AACJ,cAAM,UAAUA,GAAE,KAAK,CAAC,GAAG,GAAG,QAAQ;AACpC,cAAI,MAAM,GAAG;AACX,kBAAM,MAAM;AACZ,mBAAQ,IAAI,WAAW;AAAA,UACzB;AAEA,cAAI,MAAM,GAAG;AACX,gBAAI,SAAS,CAAC,GAAG;AACf,qBAAO,KAAK,CAAC,EAAE,IAAI,SAAO;AACxB,oBAAI,MAAM,EAAE,GAAG;AACf,oBAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,wBAAM,IAAI,KAAK,GAAG;AAAA,gBACpB;AACA,uBAAO,MAAM,MAAM,OAAO,MAAM;AAAA,cAClC,CAAC;AACD,kBAAI,IAAI,WAAW,GAAG;AACpB,uBAAO;AAAA,cACT;AACA,qBAAO;AACP;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAEA,kBAAQ,OAAO,GAAG;AAAA,YAClB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,sBAAQ,IAAI;AACZ;AAAA,UACF;AAEA,mBAAS;AACT,kBAAQ,IAAI,CAAC;AAAA,QACf,CAAC;AAED,YAAI,SAAS;AACX,iBAAO,MAAM,OAAO;AAAA,QACtB;AAEA,eAAO,SACH,MAAM,MAAM,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM,KACxC,MAAM,KAAK,OAAO,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM;AAAA,MACpD;AAEA,aAAO,IAAI,CAAC;AAAA,IACd;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC1FjB,IAAAC,eAAA;AAAA;AAiCA,QAAM,EAAE,YAAY,UAAU,IAAI;AAClC,QAAM,EAAE,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AAE9C,QAAM,EAAE,QAAQ,IAAI;AAEpB,QAAM,YAAY;AAMlB,QAAM,WAAW;AACjB,QAAM,WAAW,oBAAI,IAAI;AAmBzB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,OAAO,CAAC,GAAG,GAAG,GAAG,CAAG;AAAA;AAAA,QACpB,WAAW,IAAI;AAAA,QACf,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA;AAAA,QACN,gBAAgB;AAAA,MAClB;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,QAAQ,OAAO;AAEzB,gBAAU,QAAQ,OAAO,CAAC,WAAW,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC;AAEhG,UAAI,QAAQ,WAAW;AAAG,cAAM,IAAI,MAAM,gDAAgD;AAE1F,cAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAGhE,UAAI,OAAO;AAAA,QAAC;AAAA,QACV;AAAA,UACE,SAAS;AAAA,UACT,SAAS;AAAA,UACT,aAAa;AAAA,UACb,iCAAiC;AAAA,QACnC;AAAA,MACF;AACA,UAAI,QAAQ,UAAU;AACpB,aAAK,KAAK;AAAA,UAAC;AAAA,UAAQ,CAAC;AAAA,UAClB,CAAC,QAAQ,EAAE,MAAM,WAAW,SAAS,mBAAmB,CAAC;AAAA,UACzD,CAAC,QAAQ,EAAE,MAAM,aAAa,SAAS,4BAA4B,CAAC;AAAA,UACpE,CAAC,QAAQ,EAAE,MAAM,WAAW,UAAS,oBAAI,KAAK,GAAE,YAAY,EAAE,CAAC;AAAA,QACjE,CAAC;AAAA,MACH,OAAO;AACL,aAAK,KAAK;AAAA,UAAC;AAAA,UAAQ,CAAC;AAAA,UAClB,CAAC,QAAQ,EAAE,MAAM,WAAW,SAAS,mBAAmB,CAAC;AAAA,QAC3D,CAAC;AAAA,MACH;AACA,aAAO,KAAK,OAAO,eAAe,SAAS,OAAO,CAAC;AAGnD,YAAM,WAAW;AAAA,EACjB,UAAU,MAAM,CAAC,CAAC;AAElB,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO,CAAC,QAAQ;AAAA,IAClB;AAEA,QAAM,iBAAiB,CAAC,SAAS,YAAY;AAC3C,YAAM,SAAS,CAAC;AAChB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,gBAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,MAAM,IAAI,QAAQ,OAAO,CAAC;AAEvF,YAAI,MAAM,IAAI,MAAM,GAAG;AAErB,mBAAS,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,KAAK,GAAG,MAAM;AACvE,gBAAM,WAAW,MAAM,WAAW,MAAM;AACxC,cAAI,SAAS,SAAS,GAAG;AACvB,mBAAO,KAAK,aAAa,QAAQ,OAAO,CAAC;AAAA,UAC3C;AAAA,QACF;AACA,YAAI,MAAM,IAAI,MAAM,GAAG;AACrB,iBAAO,KAAK,aAAa,QAAQ,OAAO,CAAC;AAAA,QAC3C;AACA,YAAI,MAAM,IAAI,MAAM,GAAG;AACrB,iBAAO,KAAK,aAAa,QAAQ,OAAO,CAAC;AAAA,QAC3C;AAAA,MACF,CAAC;AACD,YAAM,YAAY,CAAC,aAAa,EAAE,UAAU,gBAAgB,GAAG,GAAG,MAAM;AACxE,YAAM,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS;AACrC,aAAO,CAAC,KAAK;AAAA,IACf;AAKA,QAAM,eAAe,CAAC,QAAQ,YAAY;AACxC,YAAM,SAAS,MAAM,SAAS,MAAM,EAAE,MAAM;AAC5C,UAAI,OAAO,SAAS,KAAK,OAAO;AAAU,eAAO,KAAK,OAAO,CAAC,CAAC;AAC/D,YAAM,QAAQ,CAAC,SAAS,gBAAgB,MAAM,GAAG,kBAAkB,MAAM,OAAO,MAAM,GAAG,OAAO,CAAC;AACjG,UAAI,OAAO,OAAO;AAChB,cAAM,KAAK,kBAAkB,QAAQ,iBAAiB,OAAO,CAAC;AAAA,MAChE;AACA,aAAO;AAAA,IACT;AAKA,QAAM,eAAe,CAAC,QAAQ,YAAY;AACxC,YAAM,WAAW,MAAM,WAAW,MAAM;AACxC,YAAM,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC1B,eAAS,QAAQ,CAAC,YAAY;AAC5B,YAAI,QAAQ,SAAS;AAAG,kBAAQ,KAAK,QAAQ,CAAC,CAAC;AAC/C,cAAM,QAAQ,CAAC,SAAS,gBAAgB,MAAM,GAAG,kBAAkB,MAAM,OAAO,OAAO,GAAG,OAAO,CAAC;AAClG,YAAI,OAAO,OAAO;AAChB,gBAAM,KAAK,kBAAkB,QAAQ,iBAAiB,OAAO,CAAC;AAAA,QAChE;AACA,cAAM,KAAK,KAAK;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACT;AAMA,QAAM,kBAAkB,CAAC,QAAQ,aAAa,CAAC,MAAM;AACnD,UAAI,OAAO,IAAI;AACb,eAAO,OAAO,YAAY,EAAE,KAAK,aAAa,OAAO,EAAE,EAAE,CAAC;AAAA,MAC5D;AACA,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,YAAY;AAChC,YAAM,QAAQ,SAAS,IAAI,OAAO,KAAK;AACvC,eAAS,IAAI,SAAS,QAAQ,CAAC;AAC/B,UAAI,QAAQ;AAAG,gBAAQ,KAAK,iDAAiD,OAAO,QAAQ,QAAQ,CAAC,SAAS;AAC9G,aAAO;AAAA,IACT;AAKA,QAAM,oBAAoB,CAAC,QAAQ,YAAY;AAC7C,YAAM,eAAe,OAAO,SAAS,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,KAAK,GAAG;AAC3E,aAAO,CAAC,cAAc,EAAE,aAAa,CAAC;AAAA,IACxC;AAKA,QAAM,oBAAoB,CAAC,QAAQ,YAAY,YAAY;AACzD,YAAM,WAAW,OAAO,MAAM,MAAM,GAAG,CAAC;AACxC,YAAM,QAAQ,SAAS,KAAK,GAAG;AAC/B,YAAM,eAAe,gBAAgB,IAAM,OAAO,MAAM,CAAC,GAAG,OAAO;AACnE,YAAM,iBAAiB,EAAE,CAAC,UAAU,GAAG,OAAO,aAAa;AAC3D,UAAI,eAAe,gBAAgB;AACjC,eAAO;AAAA,UACL;AAAA,UACA,EAAE,eAAe,eAAe,WAAW,QAAQ,UAAU;AAAA,QAAC;AAAA,MAClE;AACA,aAAO,CAAC,cAAc,CAAC,YAAY,cAAc,CAAC;AAAA,IACpD;AAKA,QAAM,eAAe,CAAC,QAAQ,YAAY;AACxC,YAAM,QAAQ,CAAC,SAAS,gBAAgB,MAAM,GAAG,YAAY,QAAQ,OAAO,CAAC;AAC7E,UAAI,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC;AAChD,UAAI,OAAO,OAAO;AAChB,qBAAa,kBAAkB,QAAQ,gBAAgB,OAAO;AAAA,MAChE;AACA,YAAM,KAAK,UAAU;AACrB,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,QAAQ,YAAY;AACvC,YAAM,OAAO,mBAAmB,QAAQ,OAAO;AAC/C,YAAM,QAAQ,qBAAqB,MAAM,OAAO;AAEhD,YAAM,YAAY,MAAM,CAAC,EAAE,KAAK,GAAG;AACnC,YAAM,YAAY,MAAM,CAAC,EAAE,KAAK,GAAG;AACnC,YAAM,YAAY,MAAM,CAAC,EAAE,KAAK,GAAG;AAEnC,YAAM,UAAU;AAAA,QACd;AAAA,QACA,EAAE,KAAK,QAAQ,gBAAgB,SAAS,iBAAiB,QAAQ,QAAQ,OAAO,SAAS,OAAO,UAAU;AAAA,QAC1G,CAAC,cAAc,EAAE,OAAO,UAAU,CAAC;AAAA,MACrC;AACA,UAAI,CAAC,OAAO,OAAO;AACjB,gBAAQ,KAAK,CAAC,SAAS,EAAE,OAAO,UAAU,CAAC,CAAC;AAAA,MAC9C;AACA,aAAO;AAAA,IACT;AAEA,QAAM,qBAAqB,CAAC,QAAQ,YAAY;AAC9C,YAAM,YAAY,CAAC;AACnB,YAAM,WAAW,MAAM,WAAW,MAAM;AACxC,eAAS,QAAQ,CAAC,SAAS;AACzB,cAAM,cAAc,KAAK,SAAS,CAAC;AACnC,iBAAS,IAAI,KAAK,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAClD,gBAAM,WAAW,MAAM,WAAW;AAAA,YAChC;AAAA,YACA,KAAK,SAAS,IAAI,CAAC;AAAA,YACnB,KAAK,SAAS,IAAI,CAAC;AAAA,UACrB,CAAC;AAED,cAAI,QAAQ,QAAQ;AACpB,cAAI,OAAO;AAAO,oBAAQ,OAAO;AACjC,cAAI,KAAK;AAAO,oBAAQ,KAAK;AAC7B,mBAAS,QAAQ;AAEjB,oBAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,SAAS,YAAY;AAC3C,UAAI,QAAQ,QAAQ;AACpB,UAAI,QAAQ;AAAO,gBAAQ,QAAQ;AAEnC,aAAO,GAAG,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;AAAA,IAC5C;AAEA,QAAM,kBAAkB,CAAC,OAAO,YAAY,KAAK,MAAM,QAAQ,QAAQ,QAAQ,IAAI,QAAQ;AAQ3F,QAAM,uBAAuB,CAAC,UAAU,YAAY;AAClD,YAAM,YAAY,CAAC;AACnB,YAAM,YAAY,CAAC;AACnB,YAAM,YAAY,CAAC;AAEnB,YAAM,2BAA2B,oBAAI,IAAI;AACzC,eAAS,QAAQ,CAAC,YAAY;AAC5B,cAAM,uBAAuB,CAAC;AAC9B,cAAM,cAAc,QAAQ,SAAS;AACrC,iBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,gBAAM,SAAS,QAAQ,SAAS,CAAC;AACjC,gBAAM,KAAK,GAAG,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;AAGjD,cAAI,CAAC,yBAAyB,IAAI,EAAE,GAAG;AACrC,kBAAM,IAAI,gBAAgB,OAAO,CAAC,GAAG,OAAO;AAC5C,kBAAM,IAAI,gBAAgB,OAAO,CAAC,GAAG,OAAO;AAC5C,kBAAM,IAAI,gBAAgB,OAAO,CAAC,GAAG,OAAO;AAC5C,sBAAU,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC/B,qCAAyB,IAAI,IAAI,UAAU,SAAS,CAAC;AAAA,UACvD;AAEA,+BAAqB,KAAK,yBAAyB,IAAI,EAAE,CAAC;AAAA,QAC5D;AACA,kBAAU,KAAK,qBAAqB,KAAK,GAAG,CAAC;AAC7C,kBAAU,KAAK,eAAe,SAAS,OAAO,CAAC;AAAA,MACjD,CAAC;AACD,+BAAyB,MAAM;AAE/B,aAAO,CAAC,WAAW,WAAW,SAAS;AAAA,IACzC;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC7TA;AAAA;AAAA;AACA,QAAI,MAAM,CAAC;AACX,YAAQ,SAAS,IAAK,SAAU,GAAG,IAAI,KAAK,UAAU,IAAI;AACtD,UAAI,IAAI,IAAI,OAAO,IAAI,EAAE,MAAM,IAAI,EAAE,IAAI,IAAI,gBAAgB,IAAI,KAAK;AAAA,QAClE,IAAI;AAAA,MACR,GAAG,EAAE,MAAM,kBAAkB,CAAC,CAAC,EAAE;AACjC,QAAE,YAAY,SAAU,GAAG;AACvB,YAAI,IAAI,EAAE,MAAM,KAAK,EAAE;AACvB,YAAI,IAAI;AACJ,cAAI,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC;AACzB,cAAI,MAAM,IAAI,GAAG,CAAC;AAClB,cAAI,QAAQ,GAAG,CAAC;AAChB,aAAG,KAAK,IAAI;AAAA,QAChB;AAEI,aAAG,MAAM,CAAC;AAAA,MAClB;AACA,QAAE,YAAY,KAAK,QAAQ;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;;;ACnBA;AAAA;AAAA;AAUA,QAAI,gBAAgB;AAEpB,QAAI,KAAK;AAAT,QAAqB,MAAM;AAA3B,QAAwC,MAAM;AAE9C,QAAI,OAAO,IAAI,GAAG;AAAA,MAAC;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA;AAAA,MAAgB;AAAA,MAAG;AAAA;AAAA,MAAoB;AAAA,IAAC,CAAC;AAGhJ,QAAI,OAAO,IAAI,GAAG;AAAA,MAAC;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA;AAAA,MAAiB;AAAA,MAAG;AAAA,IAAC,CAAC;AAEvI,QAAI,OAAO,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;AAEpF,QAAI,OAAO,SAAU,IAAI,OAAO;AAC5B,UAAI,IAAI,IAAI,IAAI,EAAE;AAClB,eAASC,KAAI,GAAGA,KAAI,IAAI,EAAEA,IAAG;AACzB,UAAEA,EAAC,IAAI,SAAS,KAAK,GAAGA,KAAI,CAAC;AAAA,MACjC;AAEA,UAAI,IAAI,IAAI,IAAI,EAAE,EAAE,CAAC;AACrB,eAASA,KAAI,GAAGA,KAAI,IAAI,EAAEA,IAAG;AACzB,iBAAS,IAAI,EAAEA,EAAC,GAAG,IAAI,EAAEA,KAAI,CAAC,GAAG,EAAE,GAAG;AAClC,YAAE,CAAC,IAAM,IAAI,EAAEA,EAAC,KAAM,IAAKA;AAAA,QAC/B;AAAA,MACJ;AACA,aAAO,CAAC,GAAG,CAAC;AAAA,IAChB;AACA,QAAI,KAAK,KAAK,MAAM,CAAC;AAArB,QAAwB,KAAK,GAAG,CAAC;AAAjC,QAAoC,QAAQ,GAAG,CAAC;AAEhD,OAAG,EAAE,IAAI,KAAK,MAAM,GAAG,IAAI;AAC3B,QAAI,KAAK,KAAK,MAAM,CAAC;AAArB,QAAwB,KAAK,GAAG,CAAC;AAAjC,QAAoC,QAAQ,GAAG,CAAC;AAEhD,QAAI,MAAM,IAAI,IAAI,KAAK;AACvB,SAAS,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG;AAExB,WAAM,IAAI,WAAY,KAAO,IAAI,UAAW;AAChD,WAAM,IAAI,WAAY,KAAO,IAAI,UAAW;AAC5C,WAAM,IAAI,WAAY,KAAO,IAAI,SAAW;AAC5C,UAAI,CAAC,MAAO,IAAI,WAAY,KAAO,IAAI,QAAW,OAAQ;AAAA,IAC9D;AAJQ;AAFC;AAUT,QAAI,OAAQ,SAAU,IAAI,IAAI,GAAG;AAC7B,UAAI,IAAI,GAAG;AAEX,UAAIA,KAAI;AAER,UAAI,IAAI,IAAI,IAAI,EAAE;AAElB,aAAOA,KAAI,GAAG,EAAEA,IAAG;AACf,YAAI,GAAGA,EAAC;AACJ,YAAE,EAAE,GAAGA,EAAC,IAAI,CAAC;AAAA,MACrB;AAEA,UAAI,KAAK,IAAI,IAAI,EAAE;AACnB,WAAKA,KAAI,GAAGA,KAAI,IAAI,EAAEA,IAAG;AACrB,WAAGA,EAAC,IAAK,GAAGA,KAAI,CAAC,IAAI,EAAEA,KAAI,CAAC,KAAM;AAAA,MACtC;AACA,UAAI;AACJ,UAAI,GAAG;AAEH,aAAK,IAAI,IAAI,KAAK,EAAE;AAEpB,YAAI,MAAM,KAAK;AACf,aAAKA,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AAEpB,cAAI,GAAGA,EAAC,GAAG;AAEP,gBAAI,KAAMA,MAAK,IAAK,GAAGA,EAAC;AAExB,gBAAI,MAAM,KAAK,GAAGA,EAAC;AAEnB,gBAAI,IAAI,GAAG,GAAGA,EAAC,IAAI,CAAC,OAAO;AAE3B,qBAAS,IAAI,KAAM,KAAK,OAAO,GAAI,KAAK,GAAG,EAAE,GAAG;AAE5C,iBAAG,IAAI,CAAC,MAAM,GAAG,IAAI;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,IAAI,IAAI,CAAC;AACd,aAAKA,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACpB,cAAI,GAAGA,EAAC,GAAG;AACP,eAAGA,EAAC,IAAI,IAAI,GAAG,GAAGA,EAAC,IAAI,CAAC,GAAG,MAAO,KAAK,GAAGA,EAAC;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,IAAI,GAAG,GAAG;AACpB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACvB,UAAI,CAAC,IAAI;AADJ;AAET,SAAS,IAAI,KAAK,IAAI,KAAK,EAAE;AACzB,UAAI,CAAC,IAAI;AADJ;AAET,SAAS,IAAI,KAAK,IAAI,KAAK,EAAE;AACzB,UAAI,CAAC,IAAI;AADJ;AAET,SAAS,IAAI,KAAK,IAAI,KAAK,EAAE;AACzB,UAAI,CAAC,IAAI;AADJ;AAGT,QAAI,MAAM,IAAI,GAAG,EAAE;AACnB,SAAS,IAAI,GAAG,IAAI,IAAI,EAAE;AACtB,UAAI,CAAC,IAAI;AADJ;AAGT,QAAI,MAAoB,KAAK,KAAK,GAAG,CAAC;AAAtC,QAAyC,OAAqB,KAAK,KAAK,GAAG,CAAC;AAE5E,QAAI,MAAoB,KAAK,KAAK,GAAG,CAAC;AAAtC,QAAyC,OAAqB,KAAK,KAAK,GAAG,CAAC;AAE5E,QAAI,MAAM,SAAU,GAAG;AACnB,UAAI,IAAI,EAAE,CAAC;AACX,eAASA,KAAI,GAAGA,KAAI,EAAE,QAAQ,EAAEA,IAAG;AAC/B,YAAI,EAAEA,EAAC,IAAI;AACP,cAAI,EAAEA,EAAC;AAAA,MACf;AACA,aAAO;AAAA,IACX;AAEA,QAAI,OAAO,SAAU,GAAG,GAAG,GAAG;AAC1B,UAAI,IAAK,IAAI,IAAK;AAClB,cAAS,EAAE,CAAC,IAAK,EAAE,IAAI,CAAC,KAAK,OAAQ,IAAI,KAAM;AAAA,IACnD;AAEA,QAAI,SAAS,SAAU,GAAG,GAAG;AACzB,UAAI,IAAK,IAAI,IAAK;AAClB,cAAS,EAAE,CAAC,IAAK,EAAE,IAAI,CAAC,KAAK,IAAM,EAAE,IAAI,CAAC,KAAK,QAAS,IAAI;AAAA,IAChE;AAEA,QAAI,OAAO,SAAU,GAAG;AAAE,cAAS,IAAI,KAAK,IAAK;AAAA,IAAG;AAGpD,QAAI,MAAM,SAAU,GAAG,GAAG,GAAG;AACzB,UAAI,KAAK,QAAQ,IAAI;AACjB,YAAI;AACR,UAAI,KAAK,QAAQ,IAAI,EAAE;AACnB,YAAI,EAAE;AAEV,UAAI,IAAI,KAAK,EAAE,qBAAqB,IAAI,MAAM,EAAE,qBAAqB,IAAI,MAAM,IAAI,IAAI,CAAC;AACxF,QAAE,IAAI,EAAE,SAAS,GAAG,CAAC,CAAC;AACtB,aAAO;AAAA,IACX;AAIA,YAAQ,iBAAiB;AAAA,MACrB,eAAe;AAAA,MACf,kBAAkB;AAAA,MAClB,sBAAsB;AAAA,MACtB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,0BAA0B;AAAA,IAC9B;AAEA,QAAI,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,IAEJ;AAEA,QAAI,MAAM,SAAU,KAAK,KAAK,IAAI;AAC9B,UAAI,IAAI,IAAI,MAAM,OAAO,GAAG,GAAG,CAAC;AAChC,QAAE,OAAO;AACT,UAAI,MAAM;AACN,cAAM,kBAAkB,GAAG,GAAG;AAClC,UAAI,CAAC;AACD,cAAM;AACV,aAAO;AAAA,IACX;AAEA,QAAI,QAAQ,SAAU,KAAK,KAAK,IAAI;AAEhC,UAAI,KAAK,IAAI;AACb,UAAI,CAAC,MAAO,MAAM,GAAG,KAAK,CAAC,GAAG;AAC1B,eAAO,OAAO,IAAI,GAAG,CAAC;AAE1B,UAAI,QAAQ,CAAC,OAAO;AAEpB,UAAI,OAAO,CAAC,MAAM,GAAG;AACrB,UAAI,CAAC;AACD,aAAK,CAAC;AAEV,UAAI,CAAC;AACD,cAAM,IAAI,GAAG,KAAK,CAAC;AAEvB,UAAI,OAAO,SAAUC,IAAG;AACpB,YAAI,KAAK,IAAI;AAEb,YAAIA,KAAI,IAAI;AAER,cAAI,OAAO,IAAI,GAAG,KAAK,IAAI,KAAK,GAAGA,EAAC,CAAC;AACrC,eAAK,IAAI,GAAG;AACZ,gBAAM;AAAA,QACV;AAAA,MACJ;AAEA,UAAI,QAAQ,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,KAAK,GAAG,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG;AAEnG,UAAI,OAAO,KAAK;AAChB,SAAG;AACC,YAAI,CAAC,IAAI;AAEL,kBAAQ,KAAK,KAAK,KAAK,CAAC;AAExB,cAAI,OAAO,KAAK,KAAK,MAAM,GAAG,CAAC;AAC/B,iBAAO;AACP,cAAI,CAAC,MAAM;AAEP,gBAAI,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,IAAK,IAAI,IAAI,CAAC,KAAK,GAAI,IAAI,IAAI;AACnE,gBAAI,IAAI,IAAI;AACR,kBAAI;AACA,oBAAI,CAAC;AACT;AAAA,YACJ;AAEA,gBAAI;AACA,mBAAK,KAAK,CAAC;AAEf,gBAAI,IAAI,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE;AAE9B,eAAG,IAAI,MAAM,GAAG,GAAG,IAAI,MAAM,IAAI,GAAG,GAAG,IAAI;AAC3C;AAAA,UACJ,WACS,QAAQ;AACb,iBAAK,MAAM,KAAK,MAAM,MAAM,GAAG,MAAM;AAAA,mBAChC,QAAQ,GAAG;AAEhB,gBAAI,OAAO,KAAK,KAAK,KAAK,EAAE,IAAI,KAAK,QAAQ,KAAK,KAAK,MAAM,IAAI,EAAE,IAAI;AACvE,gBAAI,KAAK,OAAO,KAAK,KAAK,MAAM,GAAG,EAAE,IAAI;AACzC,mBAAO;AAEP,gBAAI,MAAM,IAAI,GAAG,EAAE;AAEnB,gBAAI,MAAM,IAAI,GAAG,EAAE;AACnB,qBAASD,KAAI,GAAGA,KAAI,OAAO,EAAEA,IAAG;AAE5B,kBAAI,KAAKA,EAAC,CAAC,IAAI,KAAK,KAAK,MAAMA,KAAI,GAAG,CAAC;AAAA,YAC3C;AACA,mBAAO,QAAQ;AAEf,gBAAI,MAAM,IAAI,GAAG,GAAG,UAAU,KAAK,OAAO;AAE1C,gBAAI,MAAM,KAAK,KAAK,KAAK,CAAC;AAC1B,qBAASA,KAAI,GAAGA,KAAI,MAAK;AACrB,kBAAI,IAAI,IAAI,KAAK,KAAK,KAAK,MAAM,CAAC;AAElC,qBAAO,IAAI;AAEX,kBAAI,IAAI,MAAM;AAEd,kBAAI,IAAI,IAAI;AACR,oBAAIA,IAAG,IAAI;AAAA,cACf,OACK;AAED,oBAAI,IAAI,GAAG,IAAI;AACf,oBAAI,KAAK;AACL,sBAAI,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,OAAO,GAAG,IAAI,IAAIA,KAAI,CAAC;AAAA,yBAC7C,KAAK;AACV,sBAAI,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,OAAO;AAAA,yBAC7B,KAAK;AACV,sBAAI,KAAK,KAAK,KAAK,KAAK,GAAG,GAAG,OAAO;AACzC,uBAAO;AACH,sBAAIA,IAAG,IAAI;AAAA,cACnB;AAAA,YACJ;AAEA,gBAAI,KAAK,IAAI,SAAS,GAAG,IAAI,GAAG,KAAK,IAAI,SAAS,IAAI;AAEtD,kBAAM,IAAI,EAAE;AAEZ,kBAAM,IAAI,EAAE;AACZ,iBAAK,KAAK,IAAI,KAAK,CAAC;AACpB,iBAAK,KAAK,IAAI,KAAK,CAAC;AAAA,UACxB;AAEI,gBAAI,CAAC;AACT,cAAI,MAAM,MAAM;AACZ,gBAAI;AACA,kBAAI,CAAC;AACT;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI;AACA,eAAK,KAAK,MAAM;AACpB,YAAI,OAAO,KAAK,OAAO,GAAG,OAAO,KAAK,OAAO;AAC7C,YAAI,OAAO;AACX,iBAAQ,OAAO,KAAK;AAEhB,cAAI,IAAI,GAAG,OAAO,KAAK,GAAG,IAAI,GAAG,GAAG,MAAM,MAAM;AAChD,iBAAO,IAAI;AACX,cAAI,MAAM,MAAM;AACZ,gBAAI;AACA,kBAAI,CAAC;AACT;AAAA,UACJ;AACA,cAAI,CAAC;AACD,gBAAI,CAAC;AACT,cAAI,MAAM;AACN,gBAAI,IAAI,IAAI;AAAA,mBACP,OAAO,KAAK;AACjB,mBAAO,KAAK,KAAK;AACjB;AAAA,UACJ,OACK;AACD,gBAAI,MAAM,MAAM;AAEhB,gBAAI,MAAM,KAAK;AAEX,kBAAIA,KAAI,MAAM,KAAK,IAAI,KAAKA,EAAC;AAC7B,oBAAM,KAAK,KAAK,MAAM,KAAK,KAAK,CAAC,IAAI,GAAGA,EAAC;AACzC,qBAAO;AAAA,YACX;AAEA,gBAAI,IAAI,GAAG,OAAO,KAAK,GAAG,IAAI,GAAG,GAAG,OAAO,MAAM;AACjD,gBAAI,CAAC;AACD,kBAAI,CAAC;AACT,mBAAO,IAAI;AACX,gBAAI,KAAK,GAAG,IAAI;AAChB,gBAAI,OAAO,GAAG;AACV,kBAAI,IAAI,KAAK,IAAI;AACjB,oBAAM,OAAO,KAAK,GAAG,KAAM,KAAK,KAAK,GAAI,OAAO;AAAA,YACpD;AACA,gBAAI,MAAM,MAAM;AACZ,kBAAI;AACA,oBAAI,CAAC;AACT;AAAA,YACJ;AACA,gBAAI;AACA,mBAAK,KAAK,MAAM;AACpB,gBAAI,MAAM,KAAK;AACf,mBAAO,KAAK,KAAK,MAAM,GAAG;AACtB,kBAAI,EAAE,IAAI,IAAI,KAAK,EAAE;AACrB,kBAAI,KAAK,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE;AAC7B,kBAAI,KAAK,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE;AAC7B,kBAAI,KAAK,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,YACjC;AACA,iBAAK;AAAA,UACT;AAAA,QACJ;AACA,WAAG,IAAI,IAAI,GAAG,IAAI,MAAM,GAAG,IAAI,IAAI,GAAG,IAAI;AAC1C,YAAI;AACA,kBAAQ,GAAG,GAAG,IAAI,KAAK,GAAG,IAAI,IAAI,GAAG,IAAI;AAAA,MACjD,SAAS,CAAC;AACV,aAAO,MAAM,IAAI,SAAS,MAAM,IAAI,KAAK,GAAG,EAAE;AAAA,IAClD;AAEA,QAAI,QAAQ,SAAU,GAAG,GAAG,GAAG;AAC3B,YAAM,IAAI;AACV,UAAI,IAAK,IAAI,IAAK;AAClB,QAAE,CAAC,KAAK;AACR,QAAE,IAAI,CAAC,KAAK,MAAM;AAAA,IACtB;AAEA,QAAI,UAAU,SAAU,GAAG,GAAG,GAAG;AAC7B,YAAM,IAAI;AACV,UAAI,IAAK,IAAI,IAAK;AAClB,QAAE,CAAC,KAAK;AACR,QAAE,IAAI,CAAC,KAAK,MAAM;AAClB,QAAE,IAAI,CAAC,KAAK,MAAM;AAAA,IACtB;AAEA,QAAI,QAAQ,SAAU,GAAG,IAAI;AAEzB,UAAI,IAAI,CAAC;AACT,eAASA,KAAI,GAAGA,KAAI,EAAE,QAAQ,EAAEA,IAAG;AAC/B,YAAI,EAAEA,EAAC;AACH,YAAE,KAAK,EAAE,GAAGA,IAAG,GAAG,EAAEA,EAAC,EAAE,CAAC;AAAA,MAChC;AACA,UAAI,IAAI,EAAE;AACV,UAAI,KAAK,EAAE,MAAM;AACjB,UAAI,CAAC;AACD,eAAO,CAAC,IAAI,CAAC;AACjB,UAAI,KAAK,GAAG;AACR,YAAI,IAAI,IAAI,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;AACzB,UAAE,EAAE,CAAC,EAAE,CAAC,IAAI;AACZ,eAAO,CAAC,GAAG,CAAC;AAAA,MAChB;AACA,QAAE,KAAK,SAAU,GAAG,GAAG;AAAE,eAAO,EAAE,IAAI,EAAE;AAAA,MAAG,CAAC;AAG5C,QAAE,KAAK,EAAE,GAAG,IAAI,GAAG,MAAM,CAAC;AAC1B,UAAI,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,KAAK,GAAG,KAAK,GAAGE,MAAK;AAC7C,QAAE,CAAC,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,GAAM,EAAK;AAMzC,aAAO,MAAM,IAAI,GAAG;AAChB,YAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAEA,GAAE,EAAE,IAAI,OAAOA,KAAI;AACrC,YAAI,EAAE,MAAM,MAAM,EAAE,EAAE,EAAE,IAAI,EAAEA,GAAE,EAAE,IAAI,OAAOA,KAAI;AACjD,UAAE,IAAI,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,GAAM,EAAK;AAAA,MAChD;AACA,UAAI,SAAS,GAAG,CAAC,EAAE;AACnB,eAASF,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACxB,YAAI,GAAGA,EAAC,EAAE,IAAI;AACV,mBAAS,GAAGA,EAAC,EAAE;AAAA,MACvB;AAEA,UAAI,KAAK,IAAI,IAAI,SAAS,CAAC;AAE3B,UAAI,MAAM,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;AAC7B,UAAI,MAAM,IAAI;AAIV,YAAIA,KAAI,GAAG,KAAK;AAEhB,YAAI,MAAM,MAAM,IAAI,MAAM,KAAK;AAC/B,WAAG,KAAK,SAAU,GAAG,GAAG;AAAE,iBAAO,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE;AAAA,QAAG,CAAC;AAClE,eAAOA,KAAI,GAAG,EAAEA,IAAG;AACf,cAAI,OAAO,GAAGA,EAAC,EAAE;AACjB,cAAI,GAAG,IAAI,IAAI,IAAI;AACf,kBAAM,OAAO,KAAM,MAAM,GAAG,IAAI;AAChC,eAAG,IAAI,IAAI;AAAA,UACf;AAEI;AAAA,QACR;AACA,gBAAQ;AACR,eAAO,KAAK,GAAG;AACX,cAAI,OAAO,GAAGA,EAAC,EAAE;AACjB,cAAI,GAAG,IAAI,IAAI;AACX,kBAAM,KAAM,KAAK,GAAG,IAAI,MAAM;AAAA;AAE9B,cAAEA;AAAA,QACV;AACA,eAAOA,MAAK,KAAK,IAAI,EAAEA,IAAG;AACtB,cAAI,OAAO,GAAGA,EAAC,EAAE;AACjB,cAAI,GAAG,IAAI,KAAK,IAAI;AAChB,cAAE,GAAG,IAAI;AACT,cAAE;AAAA,UACN;AAAA,QACJ;AACA,cAAM;AAAA,MACV;AACA,aAAO,CAAC,IAAI,GAAG,EAAE,GAAG,GAAG;AAAA,IAC3B;AAEA,QAAI,KAAK,SAAU,GAAG,GAAG,GAAG;AACxB,aAAO,EAAE,KAAK,KACR,KAAK,IAAI,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,IAC5C,EAAE,EAAE,CAAC,IAAI;AAAA,IACpB;AAEA,QAAI,KAAK,SAAU,GAAG;AAClB,UAAI,IAAI,EAAE;AAEV,aAAO,KAAK,CAAC,EAAE,EAAE,CAAC;AACd;AACJ,UAAI,KAAK,IAAI,IAAI,EAAE,CAAC;AAEpB,UAAI,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM;AAC/B,UAAI,IAAI,SAAU,GAAG;AAAE,WAAG,KAAK,IAAI;AAAA,MAAG;AACtC,eAASA,KAAI,GAAGA,MAAK,GAAG,EAAEA,IAAG;AACzB,YAAI,EAAEA,EAAC,KAAK,OAAOA,MAAK;AACpB,YAAE;AAAA,aACD;AACD,cAAI,CAAC,OAAO,MAAM,GAAG;AACjB,mBAAO,MAAM,KAAK,OAAO;AACrB,gBAAE,KAAK;AACX,gBAAI,MAAM,GAAG;AACT,gBAAE,MAAM,KAAO,MAAM,MAAO,IAAK,QAAU,MAAM,KAAM,IAAK,KAAK;AACjE,oBAAM;AAAA,YACV;AAAA,UACJ,WACS,MAAM,GAAG;AACd,cAAE,GAAG,GAAG,EAAE;AACV,mBAAO,MAAM,GAAG,OAAO;AACnB,gBAAE,IAAI;AACV,gBAAI,MAAM;AACN,gBAAI,MAAM,KAAM,IAAK,IAAI,GAAG,MAAM;AAAA,UAC1C;AACA,iBAAO;AACH,cAAE,GAAG;AACT,gBAAM;AACN,gBAAM,EAAEA,EAAC;AAAA,QACb;AAAA,MACJ;AACA,aAAO,CAAC,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC;AAAA,IAClC;AAEA,QAAI,OAAO,SAAU,IAAI,IAAI;AACzB,UAAI,IAAI;AACR,eAASA,KAAI,GAAGA,KAAI,GAAG,QAAQ,EAAEA;AAC7B,aAAK,GAAGA,EAAC,IAAI,GAAGA,EAAC;AACrB,aAAO;AAAA,IACX;AAGA,QAAI,QAAQ,SAAU,KAAK,KAAK,KAAK;AAEjC,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,KAAK,MAAM,CAAC;AACpB,UAAI,CAAC,IAAI,IAAI;AACb,UAAI,IAAI,CAAC,IAAI,MAAM;AACnB,UAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AACtB,UAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;AAC1B,eAASA,KAAI,GAAGA,KAAI,GAAG,EAAEA;AACrB,YAAI,IAAIA,KAAI,CAAC,IAAI,IAAIA,EAAC;AAC1B,cAAQ,IAAI,IAAI,KAAK;AAAA,IACzB;AAEA,QAAI,OAAO,SAAU,KAAK,KAAK,OAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AACnE,YAAM,KAAK,KAAK,KAAK;AACrB,QAAE,GAAG,GAAG;AACR,UAAIG,MAAK,MAAM,IAAI,EAAE,GAAG,MAAMA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC;AAC/C,UAAIC,MAAK,MAAM,IAAI,EAAE,GAAG,MAAMA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC;AAC/C,UAAI,KAAK,GAAG,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC;AAC1C,UAAI,KAAK,GAAG,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC;AAC1C,UAAI,SAAS,IAAI,IAAI,EAAE;AACvB,eAASJ,KAAI,GAAGA,KAAI,KAAK,QAAQ,EAAEA;AAC/B,eAAO,KAAKA,EAAC,IAAI,EAAE;AACvB,eAASA,KAAI,GAAGA,KAAI,KAAK,QAAQ,EAAEA;AAC/B,eAAO,KAAKA,EAAC,IAAI,EAAE;AACvB,UAAI,KAAK,MAAM,QAAQ,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC;AACnD,UAAI,OAAO;AACX,aAAO,OAAO,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,GAAG,EAAE;AACvC;AACJ,UAAI,OAAQ,KAAK,KAAM;AACvB,UAAI,QAAQ,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI;AAC5C,UAAI,QAAQ,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,KAAK,IAAI,OAAO,KAAK,QAAQ,GAAG,KAAK,IAAI,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE;AACrI,UAAI,QAAQ,SAAS,QAAQ;AACzB,eAAO,MAAM,KAAK,GAAG,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;AAClD,UAAI,IAAI,IAAI,IAAI;AAChB,YAAM,KAAK,GAAG,KAAK,QAAQ,MAAM,GAAG,KAAK;AACzC,UAAI,QAAQ,OAAO;AACf,aAAK,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK;AAC/D,YAAI,MAAM,KAAK,KAAK,MAAM,CAAC;AAC3B,cAAM,KAAK,GAAG,MAAM,GAAG;AACvB,cAAM,KAAK,IAAI,GAAG,MAAM,CAAC;AACzB,cAAM,KAAK,IAAI,IAAI,OAAO,CAAC;AAC3B,aAAK;AACL,iBAASA,KAAI,GAAGA,KAAI,MAAM,EAAEA;AACxB,gBAAM,KAAK,IAAI,IAAIA,IAAG,IAAI,KAAKA,EAAC,CAAC,CAAC;AACtC,aAAK,IAAI;AACT,YAAI,OAAO,CAAC,MAAM,IAAI;AACtB,iBAAS,KAAK,GAAG,KAAK,GAAG,EAAE,IAAI;AAC3B,cAAI,OAAO,KAAK,EAAE;AAClB,mBAASA,KAAI,GAAGA,KAAI,KAAK,QAAQ,EAAEA,IAAG;AAClC,gBAAI,MAAM,KAAKA,EAAC,IAAI;AACpB,kBAAM,KAAK,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,GAAG;AACrC,gBAAI,MAAM;AACN,oBAAM,KAAK,GAAI,KAAKA,EAAC,MAAM,IAAK,GAAG,GAAG,KAAK,KAAKA,EAAC,MAAM;AAAA,UAC/D;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA,MACvC;AACA,eAASA,KAAI,GAAGA,KAAI,IAAI,EAAEA,IAAG;AACzB,YAAI,KAAKA,EAAC,IAAI,KAAK;AACf,cAAI,MAAO,KAAKA,EAAC,MAAM,KAAM;AAC7B,kBAAQ,KAAK,GAAG,GAAG,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG;AACjD,cAAI,MAAM;AACN,kBAAM,KAAK,GAAI,KAAKA,EAAC,MAAM,KAAM,EAAE,GAAG,KAAK,KAAK,GAAG;AACvD,cAAI,MAAM,KAAKA,EAAC,IAAI;AACpB,kBAAQ,KAAK,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG;AACrC,cAAI,MAAM;AACN,oBAAQ,KAAK,GAAI,KAAKA,EAAC,MAAM,IAAK,IAAI,GAAG,KAAK,KAAK,GAAG;AAAA,QAC9D,OACK;AACD,kBAAQ,KAAK,GAAG,GAAG,KAAKA,EAAC,CAAC,CAAC,GAAG,KAAK,GAAG,KAAKA,EAAC,CAAC;AAAA,QACjD;AAAA,MACJ;AACA,cAAQ,KAAK,GAAG,GAAG,GAAG,CAAC;AACvB,aAAO,IAAI,GAAG,GAAG;AAAA,IACrB;AAEA,QAAI,MAAoB,IAAI,IAAI,CAAC,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,OAAO,CAAC;AAE3G,QAAI,KAAmB,IAAI,GAAG,CAAC;AAE/B,QAAI,OAAO,SAAU,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK;AACjD,UAAI,IAAI,IAAI;AACZ,UAAI,IAAI,IAAI,GAAG,MAAM,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,GAAI,KAAK,IAAI;AAE7D,UAAI,IAAI,EAAE,SAAS,KAAK,EAAE,SAAS,IAAI;AACvC,UAAI,MAAM;AACV,UAAI,CAAC,OAAO,IAAI,GAAG;AACf,iBAASA,KAAI,GAAGA,MAAK,GAAGA,MAAK,OAAO;AAEhC,cAAI,IAAIA,KAAI;AACZ,cAAI,KAAK,GAAG;AAER,cAAE,OAAO,CAAC,IAAI;AAAA,UAClB;AACA,gBAAM,MAAM,GAAG,MAAM,GAAG,IAAI,SAASA,IAAG,CAAC,CAAC;AAAA,QAC9C;AAAA,MACJ,OACK;AACD,YAAI,MAAM,IAAI,MAAM,CAAC;AACrB,YAAI,IAAI,QAAQ,IAAI,IAAI,MAAM;AAC9B,YAAI,SAAS,KAAK,QAAQ;AAE1B,YAAI,OAAO,IAAI,IAAI,KAAK,GAAG,OAAO,IAAI,IAAI,QAAQ,CAAC;AACnD,YAAI,QAAQ,KAAK,KAAK,OAAO,CAAC,GAAG,QAAQ,IAAI;AAC7C,YAAI,MAAM,SAAUA,IAAG;AAAE,kBAAQ,IAAIA,EAAC,IAAK,IAAIA,KAAI,CAAC,KAAK,QAAU,IAAIA,KAAI,CAAC,KAAK,SAAU;AAAA,QAAO;AAGlG,YAAI,OAAO,IAAI,IAAI,IAAK;AAExB,YAAI,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,IAAI,EAAE;AAEtC,YAAI,OAAO,GAAG,KAAK,GAAGA,KAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AAClD,eAAOA,KAAI,GAAG,EAAEA,IAAG;AAGf,cAAI,KAAK,IAAIA,EAAC;AAEd,cAAI,OAAOA,KAAI,OAAO,QAAQ,KAAK,EAAE;AACrC,eAAK,IAAI,IAAI;AACb,eAAK,EAAE,IAAI;AAGX,cAAI,MAAMA,IAAG;AAET,gBAAI,MAAM,IAAIA;AACd,iBAAK,OAAO,OAAQ,KAAK,UAAU,MAAM,KAAK;AAC1C,oBAAM,KAAK,KAAK,GAAG,GAAG,MAAM,IAAI,IAAI,IAAI,IAAI,IAAIA,KAAI,IAAI,GAAG;AAC3D,mBAAK,OAAO,KAAK,GAAG,KAAKA;AACzB,uBAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACvB,mBAAG,CAAC,IAAI;AACZ,uBAAS,IAAI,GAAG,IAAI,IAAI,EAAE;AACtB,mBAAG,CAAC,IAAI;AAAA,YAChB;AAEA,gBAAI,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,MAAO,OAAO,QAAS;AACnD,gBAAI,MAAM,KAAK,MAAM,IAAIA,KAAI,GAAG,GAAG;AAC/B,kBAAI,OAAO,KAAK,IAAI,GAAG,GAAG,IAAI;AAC9B,kBAAI,OAAO,KAAK,IAAI,OAAOA,EAAC;AAG5B,kBAAI,KAAK,KAAK,IAAI,KAAK,GAAG;AAC1B,qBAAO,OAAO,QAAQ,EAAE,QAAQ,QAAQ,OAAO;AAC3C,oBAAI,IAAIA,KAAI,CAAC,KAAK,IAAIA,KAAI,IAAI,GAAG,GAAG;AAChC,sBAAI,KAAK;AACT,yBAAO,KAAK,MAAM,IAAIA,KAAI,EAAE,KAAK,IAAIA,KAAI,KAAK,GAAG,GAAG,EAAE;AAClD;AACJ,sBAAI,KAAK,GAAG;AACR,wBAAI,IAAI,IAAI;AAEZ,wBAAI,KAAK;AACL;AAIJ,wBAAI,MAAM,KAAK,IAAI,KAAK,KAAK,CAAC;AAC9B,wBAAI,KAAK;AACT,6BAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,0BAAI,KAAMA,KAAI,MAAM,IAAI,QAAS;AACjC,0BAAI,MAAM,KAAK,EAAE;AACjB,0BAAI,KAAM,KAAK,MAAM,QAAS;AAC9B,0BAAI,KAAK;AACL,6BAAK,IAAI,QAAQ;AAAA,oBACzB;AAAA,kBACJ;AAAA,gBACJ;AAEA,uBAAO,OAAO,QAAQ,KAAK,IAAI;AAC/B,uBAAQ,OAAO,QAAQ,QAAS;AAAA,cACpC;AAAA,YACJ;AAEA,gBAAI,GAAG;AAGH,mBAAK,IAAI,IAAI,YAAa,MAAM,CAAC,KAAK,KAAM,MAAM,CAAC;AACnD,kBAAI,MAAM,MAAM,CAAC,IAAI,IAAI,MAAM,MAAM,CAAC,IAAI;AAC1C,oBAAM,KAAK,GAAG,IAAI,KAAK,GAAG;AAC1B,gBAAE,GAAG,MAAM,GAAG;AACd,gBAAE,GAAG,GAAG;AACR,mBAAKA,KAAI;AACT,gBAAE;AAAA,YACN,OACK;AACD,mBAAK,IAAI,IAAI,IAAIA,EAAC;AAClB,gBAAE,GAAG,IAAIA,EAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,QACJ;AACA,cAAM,KAAK,KAAK,GAAG,KAAK,MAAM,IAAI,IAAI,IAAI,IAAI,IAAIA,KAAI,IAAI,GAAG;AAE7D,YAAI,CAAC,OAAO,MAAM;AACd,gBAAM,MAAM,GAAG,MAAM,GAAG,EAAE;AAAA,MAClC;AACA,aAAO,IAAI,GAAG,GAAG,MAAM,KAAK,GAAG,IAAI,IAAI;AAAA,IAC3C;AAEA,QAAI,OAAsB,WAAY;AAClC,UAAI,IAAI,IAAI,WAAW,GAAG;AAC1B,eAASA,KAAI,GAAGA,KAAI,KAAK,EAAEA,IAAG;AAC1B,YAAI,IAAIA,IAAG,IAAI;AACf,eAAO,EAAE;AACL,eAAM,IAAI,KAAM,cAAe,MAAM;AACzC,UAAEA,EAAC,IAAI;AAAA,MACX;AACA,aAAO;AAAA,IACX,EAAG;AAEH,QAAI,MAAM,WAAY;AAClB,UAAI,IAAI;AACR,aAAO;AAAA,QACH,GAAG,SAAU,GAAG;AAEZ,cAAI,KAAK;AACT,mBAASA,KAAI,GAAGA,KAAI,EAAE,QAAQ,EAAEA;AAC5B,iBAAK,KAAM,KAAK,MAAO,EAAEA,EAAC,CAAC,IAAK,OAAO;AAC3C,cAAI;AAAA,QACR;AAAA,QACA,GAAG,WAAY;AAAE,iBAAO,CAAC;AAAA,QAAG;AAAA,MAChC;AAAA,IACJ;AAEA,QAAI,QAAQ,WAAY;AACpB,UAAI,IAAI,GAAG,IAAI;AACf,aAAO;AAAA,QACH,GAAG,SAAU,GAAG;AAEZ,cAAI,IAAI,GAAG,IAAI;AACf,cAAI,IAAI,EAAE,SAAS;AACnB,mBAASA,KAAI,GAAGA,MAAK,KAAI;AACrB,gBAAI,IAAI,KAAK,IAAIA,KAAI,MAAM,CAAC;AAC5B,mBAAOA,KAAI,GAAG,EAAEA;AACZ,mBAAK,KAAK,EAAEA,EAAC;AACjB,iBAAK,IAAI,SAAS,MAAM,KAAK,KAAK,KAAK,IAAI,SAAS,MAAM,KAAK;AAAA,UACnE;AACA,cAAI,GAAG,IAAI;AAAA,QACf;AAAA,QACA,GAAG,WAAY;AACX,eAAK,OAAO,KAAK;AACjB,kBAAQ,IAAI,QAAQ,KAAM,MAAM,KAAM,MAAM,IAAI,QAAQ,IAAK,MAAM;AAAA,QACvE;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,OAAO,SAAU,KAAK,KAAK,KAAK,MAAM,IAAI;AAC1C,aAAO,KAAK,KAAK,IAAI,SAAS,OAAO,IAAI,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,MAAM,CAAC,CAAC,IAAI,GAAG,IAAK,KAAK,IAAI,KAAM,KAAK,MAAM,CAAC,EAAE;AAAA,IAC3K;AAEA,QAAI,MAAM,SAAU,GAAG,GAAG;AACtB,UAAI,IAAI,CAAC;AACT,eAAS,KAAK;AACV,UAAE,CAAC,IAAI,EAAE,CAAC;AACd,eAAS,KAAK;AACV,UAAE,CAAC,IAAI,EAAE,CAAC;AACd,aAAO;AAAA,IACX;AAQA,QAAI,OAAO,SAAU,IAAI,OAAOK,KAAI;AAChC,UAAI,KAAK,GAAG;AACZ,UAAI,KAAK,GAAG,SAAS;AACrB,UAAI,KAAK,GAAG,MAAM,GAAG,QAAQ,GAAG,IAAI,GAAG,GAAG,YAAY,GAAG,CAAC,EAAE,QAAQ,QAAQ,EAAE,EAAE,MAAM,GAAG;AACzF,eAASL,KAAI,GAAGA,KAAI,GAAG,QAAQ,EAAEA,IAAG;AAChC,YAAI,IAAI,GAAGA,EAAC,GAAG,IAAI,GAAGA,EAAC;AACvB,YAAI,OAAO,KAAK,YAAY;AACxB,mBAAS,MAAM,IAAI;AACnB,cAAI,OAAO,EAAE,SAAS;AACtB,cAAI,EAAE,WAAW;AAEb,gBAAI,KAAK,QAAQ,eAAe,KAAK,IAAI;AACrC,kBAAI,QAAQ,KAAK,QAAQ,KAAK,CAAC,IAAI;AACnC,uBAAS,KAAK,MAAM,OAAO,KAAK,QAAQ,KAAK,KAAK,CAAC;AAAA,YACvD,OACK;AACD,uBAAS;AACT,uBAAS,KAAK,EAAE;AACZ,yBAAS,MAAM,IAAI,gBAAgB,IAAI,MAAM,EAAE,UAAU,CAAC,EAAE,SAAS;AAAA,YAC7E;AAAA,UACJ;AAEI,qBAAS;AAAA,QACjB;AAEI,UAAAK,IAAG,CAAC,IAAI;AAAA,MAChB;AACA,aAAO,CAAC,OAAOA,GAAE;AAAA,IACrB;AACA,QAAI,KAAK,CAAC;AAEV,QAAI,OAAO,SAAU,GAAG;AACpB,UAAI,KAAK,CAAC;AACV,eAAS,KAAK,GAAG;AACb,YAAI,EAAE,CAAC,EAAE,QAAQ;AACb,aAAG,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC,GAAG,MAAM;AAAA,QACtD;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,QAAI,OAAO,SAAU,KAAK,MAAM,IAAI,IAAI;AACpC,UAAIF;AACJ,UAAI,CAAC,GAAG,EAAE,GAAG;AACT,YAAI,QAAQ,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,SAAS;AAC5C,iBAASH,KAAI,GAAGA,KAAI,GAAG,EAAEA;AACrB,UAAAG,MAAK,KAAK,IAAIH,EAAC,GAAG,OAAO,IAAI,GAAG,QAAQG,IAAG,CAAC,GAAG,OAAOA,IAAG,CAAC;AAC9D,WAAG,EAAE,IAAI,KAAK,IAAI,CAAC,GAAG,OAAO,IAAI;AAAA,MACrC;AACA,UAAIE,MAAK,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;AAC1B,aAAO,cAAc,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,4EAA4E,KAAK,SAAS,IAAI,KAAK,IAAIA,KAAI,KAAKA,GAAE,GAAG,EAAE;AAAA,IACvK;AAEA,QAAI,SAAS,WAAY;AAAE,aAAO,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,IAAI,IAAI,MAAM,MAAM,KAAK,IAAI,MAAM,KAAK,MAAM,QAAQ,MAAM,KAAK,KAAK,OAAO,aAAa,KAAK,GAAG;AAAA,IAAG;AACxK,QAAI,QAAQ,WAAY;AAAE,aAAO,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,OAAO,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,MAAM,OAAO,SAAS,OAAO,IAAI,IAAI,MAAM,OAAO,MAAM,MAAM,KAAK,MAAM,MAAM,aAAa,GAAG;AAAA,IAAG;AAEpN,QAAI,MAAM,WAAY;AAAE,aAAO,CAAC,KAAK,MAAM,QAAQ,KAAK,IAAI;AAAA,IAAG;AAE/D,QAAI,OAAO,WAAY;AAAE,aAAO,CAAC,KAAK,GAAG;AAAA,IAAG;AAE5C,QAAI,MAAM,WAAY;AAAE,aAAO,CAAC,KAAK,QAAQ,KAAK;AAAA,IAAG;AAErD,QAAI,OAAO,WAAY;AAAE,aAAO,CAAC,GAAG;AAAA,IAAG;AAEvC,QAAI,MAAM,SAAU,KAAK;AAAE,aAAO,YAAY,KAAK,CAAC,IAAI,MAAM,CAAC;AAAA,IAAG;AAElE,QAAI,MAAM,SAAU,GAAG;AAAE,aAAO,KAAK,EAAE,QAAQ,IAAI,GAAG,EAAE,IAAI;AAAA,IAAG;AAE/D,QAAI,QAAQ,SAAU,KAAK,MAAM,KAAK,MAAM,IAAI,IAAI;AAChD,UAAI,IAAI,KAAK,KAAK,MAAM,IAAI,SAAUC,MAAKC,MAAK;AAC5C,UAAE,UAAU;AACZ,WAAGD,MAAKC,IAAG;AAAA,MACf,CAAC;AACD,QAAE,YAAY,CAAC,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC;AAC3D,aAAO,WAAY;AAAE,UAAE,UAAU;AAAA,MAAG;AAAA,IACxC;AAEA,QAAI,QAAQ,SAAU,MAAM;AACxB,WAAK,SAAS,SAAU,KAAK,OAAO;AAAE,eAAO,YAAY,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC;AAAA,MAAG;AACtF,aAAO,SAAU,IAAI;AAAE,eAAO,KAAK,KAAK,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;AAAA,MAAG;AAAA,IACrE;AAEA,QAAI,WAAW,SAAU,KAAK,MAAM,MAAM,MAAM,IAAI;AAChD,UAAI;AACJ,UAAI,IAAI,KAAK,KAAK,MAAM,IAAI,SAAUD,MAAK,KAAK;AAC5C,YAAIA;AACA,YAAE,UAAU,GAAG,KAAK,OAAO,KAAK,MAAMA,IAAG;AAAA,aACxC;AACD,cAAI,IAAI,CAAC;AACL,cAAE,UAAU;AAChB,eAAK,OAAO,KAAK,MAAMA,MAAK,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,QAC9C;AAAA,MACJ,CAAC;AACD,QAAE,YAAY,IAAI;AAClB,WAAK,OAAO,SAAU,GAAG,GAAG;AACxB,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI;AACA,eAAK,OAAO,IAAI,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AACvC,UAAE,YAAY,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC;AAAA,MACxC;AACA,WAAK,YAAY,WAAY;AAAE,UAAE,UAAU;AAAA,MAAG;AAAA,IAClD;AAEA,QAAI,KAAK,SAAU,GAAG,GAAG;AAAE,aAAO,EAAE,CAAC,IAAK,EAAE,IAAI,CAAC,KAAK;AAAA,IAAI;AAE1D,QAAI,KAAK,SAAU,GAAG,GAAG;AAAE,cAAQ,EAAE,CAAC,IAAK,EAAE,IAAI,CAAC,KAAK,IAAM,EAAE,IAAI,CAAC,KAAK,KAAO,EAAE,IAAI,CAAC,KAAK,QAAS;AAAA,IAAG;AACxG,QAAI,KAAK,SAAU,GAAG,GAAG;AAAE,aAAO,GAAG,GAAG,CAAC,IAAK,GAAG,GAAG,IAAI,CAAC,IAAI;AAAA,IAAa;AAE1E,QAAI,SAAS,SAAU,GAAG,GAAG,GAAG;AAC5B,aAAO,GAAG,EAAE;AACR,UAAE,CAAC,IAAI,GAAG,OAAO;AAAA,IACzB;AAEA,QAAI,MAAM,SAAU,GAAG,GAAG;AACtB,UAAI,KAAK,EAAE;AACX,QAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,IAAI,IAAI,EAAE,SAAS,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI;AACvF,UAAI,EAAE,SAAS;AACX,eAAO,GAAG,GAAG,KAAK,MAAM,IAAI,KAAK,EAAE,SAAS,KAAK,IAAI,CAAC,IAAI,GAAI,CAAC;AACnE,UAAI,IAAI;AACJ,UAAE,CAAC,IAAI;AACP,iBAASN,KAAI,GAAGA,MAAK,GAAG,QAAQ,EAAEA;AAC9B,YAAEA,KAAI,EAAE,IAAI,GAAG,WAAWA,EAAC;AAAA,MACnC;AAAA,IACJ;AAGA,QAAI,MAAM,SAAU,GAAG;AACnB,UAAI,EAAE,CAAC,KAAK,MAAM,EAAE,CAAC,KAAK,OAAO,EAAE,CAAC,KAAK;AACrC,YAAI,GAAG,mBAAmB;AAC9B,UAAI,MAAM,EAAE,CAAC;AACb,UAAI,KAAK;AACT,UAAI,MAAM;AACN,cAAM,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,KAAK;AACjC,eAAS,MAAM,OAAO,IAAI,MAAM,OAAO,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,EAAE,IAAI;AAChE;AACJ,aAAO,MAAM,MAAM;AAAA,IACvB;AAEA,QAAI,MAAM,SAAU,GAAG;AACnB,UAAI,IAAI,EAAE;AACV,cAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE,IAAI,CAAC,KAAK,KAAO,EAAE,IAAI,CAAC,KAAK,QAAS;AAAA,IAChF;AAEA,QAAI,OAAO,SAAU,GAAG;AAAE,aAAO,MAAO,EAAE,YAAa,EAAE,SAAS,SAAS,KAAO;AAAA,IAAI;AAEtF,QAAI,MAAM,SAAU,GAAG,GAAG;AACtB,UAAI,KAAK,EAAE,OAAOQ,MAAK,MAAM,IAAI,IAAI,KAAK,IAAI,IAAI,MAAM,IAAI,IAAI;AAChE,QAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAKA,OAAM,KAAMA,MAAM,KAAK,IAAIA,MAAM;AAAA,IACzD;AAEA,QAAI,MAAM,SAAU,GAAG;AACnB,WAAK,EAAE,CAAC,IAAI,OAAO,KAAM,EAAE,CAAC,MAAM,IAAK,MAAO,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK;AAC9D,YAAI,GAAG,mBAAmB;AAC9B,UAAI,EAAE,CAAC,IAAI;AACP,YAAI,GAAG,sDAAsD;AAAA,IACrE;AACA,aAAS,aAAa,MAAM,IAAI;AAC5B,UAAI,CAAC,MAAM,OAAO,QAAQ;AACtB,aAAK,MAAM,OAAO,CAAC;AACvB,WAAK,SAAS;AACd,aAAO;AAAA,IACX;AAKA,QAAI,UAAyB,WAAY;AACrC,eAASC,SAAQ,MAAM,IAAI;AACvB,YAAI,CAAC,MAAM,OAAO,QAAQ;AACtB,eAAK,MAAM,OAAO,CAAC;AACvB,aAAK,SAAS;AACd,aAAK,IAAI,QAAQ,CAAC;AAAA,MACtB;AACA,MAAAA,SAAQ,UAAU,IAAI,SAAU,GAAG,GAAG;AAClC,aAAK,OAAO,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;AAAA,MAC5C;AAMA,MAAAA,SAAQ,UAAU,OAAO,SAAU,OAAO,OAAO;AAC7C,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,KAAK;AACL,cAAI,CAAC;AACT,aAAK,IAAI;AACT,aAAK,EAAE,OAAO,SAAS,KAAK;AAAA,MAChC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,UAAU;AAIlB,QAAI,eAA8B,WAAY;AAC1C,eAASC,cAAa,MAAM,IAAI;AAC5B,iBAAS;AAAA,UACL;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,OAAO;AAAA,UAAG;AAAA,QAC3C,GAAG,MAAM,aAAa,KAAK,MAAM,MAAM,EAAE,GAAG,SAAU,IAAI;AACtD,cAAI,OAAO,IAAI,QAAQ,GAAG,IAAI;AAC9B,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,CAAC;AAAA,MACR;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,eAAe;AACvB,aAAS,QAAQ,MAAM,MAAM,IAAI;AAC7B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,MACJ,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,YAAY,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IAChF;AACA,YAAQ,UAAU;AAOlB,aAAS,YAAY,MAAM,MAAM;AAC7B,aAAO,KAAK,MAAM,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,IACtC;AACA,YAAQ,cAAc;AAItB,QAAI,UAAyB,WAAY;AAKrC,eAASC,SAAQ,IAAI;AACjB,aAAK,IAAI,CAAC;AACV,aAAK,IAAI,IAAI,GAAG,CAAC;AACjB,aAAK,SAAS;AAAA,MAClB;AACA,MAAAA,SAAQ,UAAU,IAAI,SAAU,GAAG;AAC/B,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,KAAK;AACL,cAAI,CAAC;AACT,YAAI,IAAI,KAAK,EAAE;AACf,YAAI,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM;AAC3B,UAAE,IAAI,KAAK,CAAC,GAAG,EAAE,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI;AAAA,MACzC;AACA,MAAAA,SAAQ,UAAU,IAAI,SAAU,OAAO;AACnC,aAAK,IAAI,KAAK,EAAE,IAAI,SAAS;AAC7B,YAAI,MAAM,KAAK,EAAE;AACjB,YAAI,KAAK,MAAM,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AACrC,aAAK,OAAO,IAAI,IAAI,KAAK,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;AAC1C,aAAK,IAAI,IAAI,IAAI,KAAK,EAAE,IAAI,KAAK,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE;AACtD,aAAK,IAAI,IAAI,KAAK,GAAI,KAAK,EAAE,IAAI,IAAK,CAAC,GAAG,KAAK,EAAE,KAAK;AAAA,MAC1D;AAMA,MAAAA,SAAQ,UAAU,OAAO,SAAU,OAAO,OAAO;AAC7C,aAAK,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK;AAAA,MAC/B;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,UAAU;AAIlB,QAAI,eAA8B,WAAY;AAK1C,eAASC,cAAa,IAAI;AACtB,aAAK,SAAS;AACd,iBAAS;AAAA,UACL;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,OAAO;AAAA,UAAG;AAAA,QAC3C,GAAG,MAAM,GAAG,WAAY;AACpB,cAAI,OAAO,IAAI,QAAQ;AACvB,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,CAAC;AAAA,MACR;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,eAAe;AACvB,aAAS,QAAQ,MAAM,MAAM,IAAI;AAC7B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,MACJ,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,YAAY,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IACrF;AACA,YAAQ,UAAU;AAOlB,aAAS,YAAY,MAAM,KAAK;AAC5B,aAAO,MAAM,MAAM,GAAG;AAAA,IAC1B;AACA,YAAQ,cAAc;AAKtB,QAAI,OAAsB,WAAY;AAClC,eAASC,MAAK,MAAM,IAAI;AACpB,aAAK,IAAI,IAAI;AACb,aAAK,IAAI;AACT,aAAK,IAAI;AACT,gBAAQ,KAAK,MAAM,MAAM,EAAE;AAAA,MAC/B;AAMA,MAAAA,MAAK,UAAU,OAAO,SAAU,OAAO,OAAO;AAC1C,gBAAQ,UAAU,KAAK,KAAK,MAAM,OAAO,KAAK;AAAA,MAClD;AACA,MAAAA,MAAK,UAAU,IAAI,SAAU,GAAG,GAAG;AAC/B,aAAK,EAAE,EAAE,CAAC;AACV,aAAK,KAAK,EAAE;AACZ,YAAI,MAAM,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AAC5D,YAAI,KAAK;AACL,cAAI,KAAK,KAAK,CAAC,GAAG,KAAK,IAAI;AAC/B,YAAI;AACA,iBAAO,KAAK,IAAI,SAAS,GAAG,KAAK,EAAE,EAAE,CAAC,GAAG,OAAO,KAAK,IAAI,SAAS,GAAG,KAAK,CAAC;AAC/E,aAAK,OAAO,KAAK,CAAC;AAAA,MACtB;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,OAAO;AACf,YAAQ,WAAW;AAInB,QAAI,YAA2B,WAAY;AACvC,eAASC,WAAU,MAAM,IAAI;AACzB,iBAAS;AAAA,UACL;AAAA,UACA;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,SAAS,IAAI;AAAA,UAAG;AAAA,QACjD,GAAG,MAAM,aAAa,KAAK,MAAM,MAAM,EAAE,GAAG,SAAU,IAAI;AACtD,cAAI,OAAO,IAAI,KAAK,GAAG,IAAI;AAC3B,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,CAAC;AAAA,MACR;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,YAAY;AACpB,YAAQ,gBAAgB;AACxB,aAAS,KAAK,MAAM,MAAM,IAAI;AAC1B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,QACA;AAAA,QACA,WAAY;AAAE,iBAAO,CAAC,QAAQ;AAAA,QAAG;AAAA,MACrC,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IAC7E;AACA,YAAQ,OAAO;AACf,YAAQ,WAAW;AAOnB,aAAS,SAAS,MAAM,MAAM;AAC1B,UAAI,CAAC;AACD,eAAO,CAAC;AACZ,UAAI,IAAI,IAAI,GAAG,IAAI,KAAK;AACxB,QAAE,EAAE,IAAI;AACR,UAAI,IAAI,KAAK,MAAM,MAAM,KAAK,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE;AAC/C,aAAO,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC,GAAG,OAAO,GAAG,IAAI,GAAG,CAAC,GAAG;AAAA,IACvE;AACA,YAAQ,WAAW;AACnB,YAAQ,eAAe;AAIvB,QAAI,SAAwB,WAAY;AAKpC,eAASC,QAAO,IAAI;AAChB,aAAK,IAAI;AACT,gBAAQ,KAAK,MAAM,EAAE;AAAA,MACzB;AAMA,MAAAA,QAAO,UAAU,OAAO,SAAU,OAAO,OAAO;AAC5C,gBAAQ,UAAU,EAAE,KAAK,MAAM,KAAK;AACpC,YAAI,KAAK,GAAG;AACR,cAAI,IAAI,KAAK,EAAE,SAAS,IAAI,IAAI,KAAK,CAAC,IAAI;AAC1C,cAAI,KAAK,KAAK,EAAE,UAAU,CAAC;AACvB;AACJ,eAAK,IAAI,KAAK,EAAE,SAAS,CAAC,GAAG,KAAK,IAAI;AAAA,QAC1C;AACA,YAAI,OAAO;AACP,cAAI,KAAK,EAAE,SAAS;AAChB,gBAAI,GAAG,mBAAmB;AAC9B,eAAK,IAAI,KAAK,EAAE,SAAS,GAAG,EAAE;AAAA,QAClC;AAGA,gBAAQ,UAAU,EAAE,KAAK,MAAM,KAAK;AAAA,MACxC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,SAAS;AAIjB,QAAI,cAA6B,WAAY;AAKzC,eAASC,aAAY,IAAI;AACrB,aAAK,SAAS;AACd,iBAAS;AAAA,UACL;AAAA,UACA;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,SAAS,MAAM;AAAA,UAAG;AAAA,QACnD,GAAG,MAAM,GAAG,WAAY;AACpB,cAAI,OAAO,IAAI,OAAO;AACtB,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,CAAC;AAAA,MACR;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,cAAc;AACtB,aAAS,OAAO,MAAM,MAAM,IAAI;AAC5B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,QACA;AAAA,QACA,WAAY;AAAE,iBAAO,CAAC,UAAU;AAAA,QAAG;AAAA,MACvC,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IACnE;AACA,YAAQ,SAAS;AAOjB,aAAS,WAAW,MAAM,KAAK;AAC3B,aAAO,MAAM,KAAK,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,OAAO,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;AAAA,IACvE;AACA,YAAQ,aAAa;AAIrB,QAAI,OAAsB,WAAY;AAClC,eAASC,MAAK,MAAM,IAAI;AACpB,aAAK,IAAI,MAAM;AACf,aAAK,IAAI;AACT,gBAAQ,KAAK,MAAM,MAAM,EAAE;AAAA,MAC/B;AAMA,MAAAA,MAAK,UAAU,OAAO,SAAU,OAAO,OAAO;AAC1C,gBAAQ,UAAU,KAAK,KAAK,MAAM,OAAO,KAAK;AAAA,MAClD;AACA,MAAAA,MAAK,UAAU,IAAI,SAAU,GAAG,GAAG;AAC/B,aAAK,EAAE,EAAE,CAAC;AACV,YAAI,MAAM,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;AACjD,YAAI,KAAK;AACL,cAAI,KAAK,KAAK,CAAC,GAAG,KAAK,IAAI;AAC/B,YAAI;AACA,iBAAO,KAAK,IAAI,SAAS,GAAG,KAAK,EAAE,EAAE,CAAC;AAC1C,aAAK,OAAO,KAAK,CAAC;AAAA,MACtB;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,OAAO;AAIf,QAAI,YAA2B,WAAY;AACvC,eAASC,WAAU,MAAM,IAAI;AACzB,iBAAS;AAAA,UACL;AAAA,UACA;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,SAAS,IAAI;AAAA,UAAG;AAAA,QACjD,GAAG,MAAM,aAAa,KAAK,MAAM,MAAM,EAAE,GAAG,SAAU,IAAI;AACtD,cAAI,OAAO,IAAI,KAAK,GAAG,IAAI;AAC3B,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,EAAE;AAAA,MACT;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,YAAY;AACpB,aAAS,KAAK,MAAM,MAAM,IAAI;AAC1B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,QACA;AAAA,QACA,WAAY;AAAE,iBAAO,CAAC,QAAQ;AAAA,QAAG;AAAA,MACrC,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IAC7E;AACA,YAAQ,OAAO;AAOf,aAAS,SAAS,MAAM,MAAM;AAC1B,UAAI,CAAC;AACD,eAAO,CAAC;AACZ,UAAI,IAAI,MAAM;AACd,QAAE,EAAE,IAAI;AACR,UAAI,IAAI,KAAK,MAAM,MAAM,GAAG,CAAC;AAC7B,aAAO,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,EAAE,SAAS,GAAG,EAAE,EAAE,CAAC,GAAG;AAAA,IACzD;AACA,YAAQ,WAAW;AAInB,QAAI,SAAwB,WAAY;AAKpC,eAASC,QAAO,IAAI;AAChB,aAAK,IAAI;AACT,gBAAQ,KAAK,MAAM,EAAE;AAAA,MACzB;AAMA,MAAAA,QAAO,UAAU,OAAO,SAAU,OAAO,OAAO;AAC5C,gBAAQ,UAAU,EAAE,KAAK,MAAM,KAAK;AACpC,YAAI,KAAK,GAAG;AACR,cAAI,KAAK,EAAE,SAAS,KAAK,CAAC;AACtB;AACJ,eAAK,IAAI,KAAK,EAAE,SAAS,CAAC,GAAG,KAAK,IAAI;AAAA,QAC1C;AACA,YAAI,OAAO;AACP,cAAI,KAAK,EAAE,SAAS;AAChB,gBAAI,GAAG,mBAAmB;AAC9B,eAAK,IAAI,KAAK,EAAE,SAAS,GAAG,EAAE;AAAA,QAClC;AAGA,gBAAQ,UAAU,EAAE,KAAK,MAAM,KAAK;AAAA,MACxC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,SAAS;AAIjB,QAAI,cAA6B,WAAY;AAKzC,eAASC,aAAY,IAAI;AACrB,aAAK,SAAS;AACd,iBAAS;AAAA,UACL;AAAA,UACA;AAAA,UACA,WAAY;AAAE,mBAAO,CAAC,OAAO,SAAS,MAAM;AAAA,UAAG;AAAA,QACnD,GAAG,MAAM,GAAG,WAAY;AACpB,cAAI,OAAO,IAAI,OAAO;AACtB,sBAAY,MAAM,IAAI;AAAA,QAC1B,GAAG,EAAE;AAAA,MACT;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,cAAc;AACtB,aAAS,OAAO,MAAM,MAAM,IAAI;AAC5B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAO,MAAM,MAAM,MAAM;AAAA,QACrB;AAAA,QACA;AAAA,QACA,WAAY;AAAE,iBAAO,CAAC,UAAU;AAAA,QAAG;AAAA,MACvC,GAAG,SAAU,IAAI;AAAE,eAAO,IAAI,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,MAAG,GAAG,GAAG,EAAE;AAAA,IACpF;AACA,YAAQ,SAAS;AAOjB,aAAS,WAAW,MAAM,KAAK;AAC3B,aAAO,OAAO,IAAI,IAAI,GAAG,KAAK,SAAS,GAAG,EAAE,IAAI,GAAG;AAAA,IACvD;AACA,YAAQ,aAAa;AAIrB,QAAI,aAA4B,WAAY;AAKxC,eAASC,YAAW,IAAI;AACpB,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,SAAS;AAAA,MAClB;AAMA,MAAAA,YAAW,UAAU,OAAO,SAAU,OAAO,OAAO;AAChD,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,CAAC,KAAK,GAAG;AACT,cAAI,KAAK,KAAK,KAAK,EAAE,QAAQ;AACzB,gBAAI,IAAI,IAAI,GAAG,KAAK,EAAE,SAAS,MAAM,MAAM;AAC3C,cAAE,IAAI,KAAK,CAAC,GAAG,EAAE,IAAI,OAAO,KAAK,EAAE,MAAM;AAAA,UAC7C;AAEI,iBAAK,IAAI;AACb,cAAI,KAAK,EAAE,SAAS,GAAG;AACnB,gBAAI,UAAU;AACd,gBAAI,KAAK,WAAY;AAAE,sBAAQ,OAAO,MAAM,SAAS,SAAS;AAAA,YAAG;AACjE,iBAAK,IAAK,KAAK,EAAE,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,KAAK,OAAO,KAAK,EAAE,CAAC,KAAK,IACxD,IAAI,KAAK,EAAE,EAAE,KACX,KAAK,EAAE,CAAC,IAAI,OAAO,KAAM,KAAK,EAAE,CAAC,KAAK,IAAK,MAAO,KAAK,EAAE,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC,KAAK,KAC9E,IAAI,KAAK,EAAE,EAAE,IACb,IAAI,KAAK,EAAE,EAAE;AACvB,iBAAK,EAAE,KAAK,KAAK,GAAG,KAAK;AACzB,iBAAK,IAAI;AAAA,UACb;AAAA,QACJ;AAEI,eAAK,EAAE,KAAK,OAAO,KAAK;AAAA,MAChC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,aAAa;AAIrB,QAAI,kBAAiC,WAAY;AAK7C,eAASC,iBAAgB,IAAI;AACzB,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,SAAS;AAAA,MAClB;AAMA,MAAAA,iBAAgB,UAAU,OAAO,SAAU,OAAO,OAAO;AACrD,mBAAW,UAAU,KAAK,KAAK,MAAM,OAAO,KAAK;AAAA,MACrD;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,kBAAkB;AAC1B,aAAS,WAAW,MAAM,MAAM,IAAI;AAChC,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,aAAQ,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,KAAK,OAAO,KAAK,CAAC,KAAK,IAChD,OAAO,MAAM,MAAM,EAAE,KACnB,KAAK,CAAC,IAAI,OAAO,KAAM,KAAK,CAAC,KAAK,IAAK,MAAO,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KACtE,QAAQ,MAAM,MAAM,EAAE,IACtB,OAAO,MAAM,MAAM,EAAE;AAAA,IACnC;AACA,YAAQ,aAAa;AAOrB,aAAS,eAAe,MAAM,KAAK;AAC/B,aAAQ,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,KAAK,OAAO,KAAK,CAAC,KAAK,IAChD,WAAW,MAAM,GAAG,KAClB,KAAK,CAAC,IAAI,OAAO,KAAM,KAAK,CAAC,KAAK,IAAK,MAAO,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KACtE,YAAY,MAAM,GAAG,IACrB,WAAW,MAAM,GAAG;AAAA,IAClC;AACA,YAAQ,iBAAiB;AAEzB,QAAI,OAAO,SAAU,GAAG,GAAG,GAAG,GAAG;AAC7B,eAAS,KAAK,GAAG;AACb,YAAI,MAAM,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG,KAAK;AAChC,YAAI,MAAM,QAAQ,GAAG;AACjB,eAAK,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC;AACpC,YAAI,eAAe;AACf,YAAE,CAAC,IAAI,CAAC,KAAK,EAAE;AAAA,aACd;AACD,YAAE,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE;AAC5B,eAAK,KAAK,GAAG,GAAG,CAAC;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,KAAK,OAAO,eAAe,eAA6B,IAAI,YAAY;AAE5E,QAAI,KAAK,OAAO,eAAe,eAA6B,IAAI,YAAY;AAE5E,QAAI,MAAM;AACV,QAAI;AACA,SAAG,OAAO,IAAI,EAAE,QAAQ,KAAK,CAAC;AAC9B,YAAM;AAAA,IACV,SACO,GAAG;AAAA,IAAE;AAEZ,QAAI,QAAQ,SAAU,GAAG;AACrB,eAAS,IAAI,IAAItB,KAAI,OAAK;AACtB,YAAI,IAAI,EAAEA,IAAG;AACb,YAAI,MAAM,IAAI,QAAQ,IAAI,QAAQ,IAAI;AACtC,YAAIA,KAAI,KAAK,EAAE;AACX,iBAAO,CAAC,GAAG,IAAI,GAAGA,KAAI,CAAC,CAAC;AAC5B,YAAI,CAAC;AACD,eAAK,OAAO,aAAa,CAAC;AAAA,iBACrB,MAAM,GAAG;AACd,gBAAM,IAAI,OAAO,MAAM,EAAEA,IAAG,IAAI,OAAO,MAAM,EAAEA,IAAG,IAAI,OAAO,IAAK,EAAEA,IAAG,IAAI,MAAO,OAC9E,KAAK,OAAO,aAAa,QAAS,KAAK,IAAK,QAAS,IAAI,IAAK;AAAA,QACtE,WACS,KAAK;AACV,eAAK,OAAO,cAAc,IAAI,OAAO,IAAK,EAAEA,IAAG,IAAI,EAAG;AAAA;AAEtD,eAAK,OAAO,cAAc,IAAI,OAAO,MAAM,EAAEA,IAAG,IAAI,OAAO,IAAK,EAAEA,IAAG,IAAI,EAAG;AAAA,MACpF;AAAA,IACJ;AAIA,QAAI,aAA4B,WAAY;AAKxC,eAASuB,YAAW,IAAI;AACpB,aAAK,SAAS;AACd,YAAI;AACA,eAAK,IAAI,IAAI,YAAY;AAAA;AAEzB,eAAK,IAAI;AAAA,MACjB;AAMA,MAAAA,YAAW,UAAU,OAAO,SAAU,OAAO,OAAO;AAChD,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,gBAAQ,CAAC,CAAC;AACV,YAAI,KAAK,GAAG;AACR,eAAK,OAAO,KAAK,EAAE,OAAO,OAAO,EAAE,QAAQ,KAAK,CAAC,GAAG,KAAK;AACzD,cAAI,OAAO;AACP,gBAAI,KAAK,EAAE,OAAO,EAAE;AAChB,kBAAI,CAAC;AACT,iBAAK,IAAI;AAAA,UACb;AACA;AAAA,QACJ;AACA,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,MAAM,IAAI,GAAG,KAAK,EAAE,SAAS,MAAM,MAAM;AAC7C,YAAI,IAAI,KAAK,CAAC;AACd,YAAI,IAAI,OAAO,KAAK,EAAE,MAAM;AAC5B,YAAIpB,MAAK,MAAM,GAAG,GAAGqB,MAAKrB,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC;AAC1C,YAAI,OAAO;AACP,cAAI,GAAG;AACH,gBAAI,CAAC;AACT,eAAK,IAAI;AAAA,QACb;AAEI,eAAK,IAAI;AACb,aAAK,OAAOqB,KAAI,KAAK;AAAA,MACzB;AACA,aAAOD;AAAA,IACX,EAAE;AACF,YAAQ,aAAa;AAIrB,QAAI,aAA4B,WAAY;AAKxC,eAASE,YAAW,IAAI;AACpB,aAAK,SAAS;AAAA,MAClB;AAMA,MAAAA,YAAW,UAAU,OAAO,SAAU,OAAO,OAAO;AAChD,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,KAAK;AACL,cAAI,CAAC;AACT,aAAK,OAAO,QAAQ,KAAK,GAAG,KAAK,IAAI,SAAS,KAAK;AAAA,MACvD;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,aAAa;AAQrB,aAAS,QAAQ,KAAK,QAAQ;AAC1B,UAAI,QAAQ;AACR,YAAI,OAAO,IAAI,GAAG,IAAI,MAAM;AAC5B,iBAASzB,KAAI,GAAGA,KAAI,IAAI,QAAQ,EAAEA;AAC9B,eAAKA,EAAC,IAAI,IAAI,WAAWA,EAAC;AAC9B,eAAO;AAAA,MACX;AACA,UAAI;AACA,eAAO,GAAG,OAAO,GAAG;AACxB,UAAI,IAAI,IAAI;AACZ,UAAI,KAAK,IAAI,GAAG,IAAI,UAAU,IAAI,UAAU,EAAE;AAC9C,UAAI,KAAK;AACT,UAAI,IAAI,SAAU,GAAG;AAAE,WAAG,IAAI,IAAI;AAAA,MAAG;AACrC,eAASA,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACxB,YAAI,KAAK,IAAI,GAAG,QAAQ;AACpB,cAAI,IAAI,IAAI,GAAG,KAAK,KAAM,IAAIA,MAAM,EAAE;AACtC,YAAE,IAAI,EAAE;AACR,eAAK;AAAA,QACT;AACA,YAAI,IAAI,IAAI,WAAWA,EAAC;AACxB,YAAI,IAAI,OAAO;AACX,YAAE,CAAC;AAAA,iBACE,IAAI;AACT,YAAE,MAAO,KAAK,CAAE,GAAG,EAAE,MAAO,IAAI,EAAG;AAAA,iBAC9B,IAAI,SAAS,IAAI;AACtB,cAAI,SAAS,IAAI,QAAQ,MAAO,IAAI,WAAW,EAAEA,EAAC,IAAI,MAClD,EAAE,MAAO,KAAK,EAAG,GAAG,EAAE,MAAQ,KAAK,KAAM,EAAG,GAAG,EAAE,MAAQ,KAAK,IAAK,EAAG,GAAG,EAAE,MAAO,IAAI,EAAG;AAAA;AAE7F,YAAE,MAAO,KAAK,EAAG,GAAG,EAAE,MAAQ,KAAK,IAAK,EAAG,GAAG,EAAE,MAAO,IAAI,EAAG;AAAA,MACtE;AACA,aAAO,IAAI,IAAI,GAAG,EAAE;AAAA,IACxB;AACA,YAAQ,UAAU;AAQlB,aAAS,UAAU,KAAK,QAAQ;AAC5B,UAAI,QAAQ;AACR,YAAI,IAAI;AACR,iBAASA,KAAI,GAAGA,KAAI,IAAI,QAAQA,MAAK;AACjC,eAAK,OAAO,aAAa,MAAM,MAAM,IAAI,SAASA,IAAGA,KAAI,KAAK,CAAC;AACnE,eAAO;AAAA,MACX,WACS;AACL,eAAO,GAAG,OAAO,GAAG;AAAA,WACnB;AACD,YAAIG,MAAK,MAAM,GAAG,GAAG,MAAMA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC;AAC5C,YAAI,IAAI;AACJ,cAAI,CAAC;AACT,eAAO;AAAA,MACX;AAAA,IACJ;AACA,YAAQ,YAAY;AAGpB,QAAI,MAAM,SAAU,GAAG;AAAE,aAAO,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI;AAAA,IAAG;AAEzE,QAAI,OAAO,SAAU,GAAG,GAAG;AAAE,aAAO,IAAI,KAAK,GAAG,GAAG,IAAI,EAAE,IAAI,GAAG,GAAG,IAAI,EAAE;AAAA,IAAG;AAE5E,QAAI,KAAK,SAAU,GAAG,GAAG,GAAG;AACxB,UAAI,MAAM,GAAG,GAAG,IAAI,EAAE,GAAG,KAAK,UAAU,EAAE,SAAS,IAAI,IAAI,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG,GAAG,IAAI,EAAE;AACvI,UAAIA,MAAK,KAAK,MAAM,aAAa,KAAK,GAAG,EAAE,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC;AACrH,aAAO,CAAC,GAAG,GAAG,IAAI,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG,GAAG,IAAI,EAAE,IAAI,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG;AAAA,IAC9E;AAEA,QAAI,OAAO,SAAU,GAAG,GAAG;AACvB,aAAO,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC;AACtC;AACJ,aAAO,CAAC,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;AAAA,IACtD;AAEA,QAAI,OAAO,SAAU,IAAI;AACrB,UAAI,KAAK;AACT,UAAI,IAAI;AACJ,iBAAS,KAAK,IAAI;AACd,cAAI,IAAI,GAAG,CAAC,EAAE;AACd,cAAI,IAAI;AACJ,gBAAI,CAAC;AACT,gBAAM,IAAI;AAAA,QACd;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,SAAU,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI;AAC3C,UAAIK,MAAK,GAAG,QAAQ,KAAK,EAAE,OAAO,MAAM,MAAM,GAAG;AACjD,UAAI,MAAM,KAAK,EAAE;AACjB,aAAO,GAAG,GAAG,MAAM,OAAO,WAAY,QAAS,GAAG,KAAK;AACvD,UAAI,MAAM;AACN,UAAE,GAAG,IAAI,IAAI,EAAE,GAAG,IAAI,EAAE;AAC5B,QAAE,CAAC,IAAI,IAAI,KAAK;AAChB,QAAE,GAAG,IAAK,EAAE,QAAQ,KAAM,KAAK,QAAQ,IAAI,EAAE,GAAG,IAAI,KAAK;AACzD,QAAE,GAAG,IAAI,EAAE,cAAc,KAAK,EAAE,GAAG,IAAI,EAAE,eAAe;AACxD,UAAI,KAAK,IAAI,KAAK,EAAE,SAAS,OAAO,KAAK,IAAI,IAAI,EAAE,KAAK,GAAG,IAAI,GAAG,YAAY,IAAI;AAClF,UAAI,IAAI,KAAK,IAAI;AACb,YAAI,EAAE;AACV,aAAO,GAAG,GAAI,KAAK,KAAQ,GAAG,SAAS,IAAI,KAAM,KAAO,GAAG,QAAQ,KAAK,KAAO,GAAG,SAAS,KAAK,KAAO,GAAG,WAAW,KAAK,IAAM,GAAG,WAAW,MAAM,CAAE,GAAG,KAAK;AAC9J,UAAI,KAAK,MAAM;AACX,eAAO,GAAG,GAAG,EAAE,GAAG;AAClB,eAAO,GAAG,IAAI,GAAG,CAAC;AAClB,eAAO,GAAG,IAAI,GAAG,EAAE,IAAI;AAAA,MAC3B;AACA,aAAO,GAAG,IAAI,IAAIA,GAAE;AACpB,aAAO,GAAG,IAAI,IAAI,GAAG,GAAG,KAAK;AAC7B,UAAI,MAAM,MAAM;AACZ,eAAO,GAAG,GAAG,GAAG;AAChB,eAAO,GAAG,IAAI,GAAG,EAAE,KAAK;AACxB,eAAO,GAAG,IAAI,IAAI,EAAE,GAAG,KAAK;AAAA,MAChC;AACA,QAAE,IAAI,IAAI,CAAC;AACX,WAAKA;AACL,UAAI,KAAK;AACL,iBAAS,KAAK,IAAI;AACd,cAAI,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI;AACzB,iBAAO,GAAG,GAAG,CAAC,CAAC;AACf,iBAAO,GAAG,IAAI,GAAG,CAAC;AAClB,YAAE,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI;AAAA,QAChC;AAAA,MACJ;AACA,UAAI;AACA,UAAE,IAAI,IAAI,CAAC,GAAG,KAAK;AACvB,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG;AAC/B,aAAO,GAAG,GAAG,SAAS;AACtB,aAAO,GAAG,IAAI,GAAG,CAAC;AAClB,aAAO,GAAG,IAAI,IAAI,CAAC;AACnB,aAAO,GAAG,IAAI,IAAI,CAAC;AACnB,aAAO,GAAG,IAAI,IAAI,CAAC;AAAA,IACvB;AAIA,QAAI,iBAAgC,WAAY;AAK5C,eAASkB,gBAAe,UAAU;AAC9B,aAAK,WAAW;AAChB,aAAK,IAAI,IAAI;AACb,aAAK,OAAO;AACZ,aAAK,cAAc;AAAA,MACvB;AASA,MAAAA,gBAAe,UAAU,UAAU,SAAU,OAAO,OAAO;AACvD,aAAK,OAAO,MAAM,OAAO,KAAK;AAAA,MAClC;AAQA,MAAAA,gBAAe,UAAU,OAAO,SAAU,OAAO,OAAO;AACpD,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,aAAK,EAAE,EAAE,KAAK;AACd,aAAK,QAAQ,MAAM;AACnB,YAAI;AACA,eAAK,MAAM,KAAK,EAAE,EAAE;AACxB,aAAK,QAAQ,OAAO,SAAS,KAAK;AAAA,MACtC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,iBAAiB;AAMzB,QAAI,aAA4B,WAAY;AAMxC,eAASC,YAAW,UAAU,MAAM;AAChC,YAAI,UAAU;AACd,YAAI,CAAC;AACD,iBAAO,CAAC;AACZ,uBAAe,KAAK,MAAM,QAAQ;AAClC,aAAK,IAAI,IAAI,QAAQ,MAAM,SAAU,KAAK,OAAO;AAC7C,kBAAQ,OAAO,MAAM,KAAK,KAAK;AAAA,QACnC,CAAC;AACD,aAAK,cAAc;AACnB,aAAK,OAAO,IAAI,KAAK,KAAK;AAAA,MAC9B;AACA,MAAAA,YAAW,UAAU,UAAU,SAAU,OAAO,OAAO;AACnD,YAAI;AACA,eAAK,EAAE,KAAK,OAAO,KAAK;AAAA,QAC5B,SACO,GAAG;AACN,eAAK,OAAO,GAAG,MAAM,KAAK;AAAA,QAC9B;AAAA,MACJ;AAMA,MAAAA,YAAW,UAAU,OAAO,SAAU,OAAO,OAAO;AAChD,uBAAe,UAAU,KAAK,KAAK,MAAM,OAAO,KAAK;AAAA,MACzD;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,aAAa;AAIrB,QAAI,kBAAiC,WAAY;AAM7C,eAASC,iBAAgB,UAAU,MAAM;AACrC,YAAI,UAAU;AACd,YAAI,CAAC;AACD,iBAAO,CAAC;AACZ,uBAAe,KAAK,MAAM,QAAQ;AAClC,aAAK,IAAI,IAAI,aAAa,MAAM,SAAUtB,MAAK,KAAK,OAAO;AACvD,kBAAQ,OAAOA,MAAK,KAAK,KAAK;AAAA,QAClC,CAAC;AACD,aAAK,cAAc;AACnB,aAAK,OAAO,IAAI,KAAK,KAAK;AAC1B,aAAK,YAAY,KAAK,EAAE;AAAA,MAC5B;AACA,MAAAsB,iBAAgB,UAAU,UAAU,SAAU,OAAO,OAAO;AACxD,aAAK,EAAE,KAAK,OAAO,KAAK;AAAA,MAC5B;AAMA,MAAAA,iBAAgB,UAAU,OAAO,SAAU,OAAO,OAAO;AACrD,uBAAe,UAAU,KAAK,KAAK,MAAM,OAAO,KAAK;AAAA,MACzD;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,kBAAkB;AAK1B,QAAI,MAAqB,WAAY;AAMjC,eAASC,KAAI,IAAI;AACb,aAAK,SAAS;AACd,aAAK,IAAI,CAAC;AACV,aAAK,IAAI;AAAA,MACb;AAKA,MAAAA,KAAI,UAAU,MAAM,SAAU,MAAM;AAChC,YAAI,UAAU;AACd,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AAET,YAAI,KAAK,IAAI;AACT,eAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,MAAM,KAAK;AAAA,aACvD;AACD,cAAI,IAAI,QAAQ,KAAK,QAAQ,GAAG,OAAO,EAAE;AACzC,cAAI,MAAM,KAAK,SAAS,IAAI,OAAO,QAAQ,GAAG;AAC9C,cAAI,IAAI,QAAQ,KAAK,SAAS,UAAW,KAAM,IAAI,UAAU,EAAE;AAC/D,cAAI,OAAO,OAAO,KAAK,KAAK,KAAK,IAAI;AACrC,cAAI,OAAO;AACP,iBAAK,OAAO,IAAI,IAAI,GAAG,CAAC,GAAG,MAAM,KAAK;AAC1C,cAAI,SAAS,IAAI,GAAG,IAAI;AACxB,cAAI,QAAQ,GAAG,MAAM,GAAG,CAAC;AACzB,cAAI,SAAS,CAAC,MAAM;AACpB,cAAI,SAAS,WAAY;AACrB,qBAAS,KAAK,GAAG,SAAS,QAAQ,KAAK,OAAO,QAAQ,MAAM;AACxD,kBAAI,MAAM,OAAO,EAAE;AACnB,sBAAQ,OAAO,MAAM,KAAK,KAAK;AAAA,YACnC;AACA,qBAAS,CAAC;AAAA,UACd;AACA,cAAI,OAAO,KAAK;AAChB,eAAK,IAAI;AACT,cAAI,QAAQ,KAAK,EAAE;AACnB,cAAI,OAAO,IAAI,MAAM;AAAA,YACjB;AAAA,YACA;AAAA,YACA;AAAA,YACA,GAAG,WAAY;AACX,kBAAI,KAAK;AACL,qBAAK,UAAU;AAAA,YACvB;AAAA,YACA,GAAG,WAAY;AACX,qBAAO;AACP,kBAAI,MAAM;AACN,oBAAI,MAAM,QAAQ,EAAE,QAAQ,CAAC;AAC7B,oBAAI;AACA,sBAAI,EAAE;AAAA;AAEN,0BAAQ,IAAI;AAAA,cACpB;AACA,qBAAO;AAAA,YACX;AAAA,UACJ,CAAC;AACD,cAAI,OAAO;AACX,eAAK,SAAS,SAAUvB,MAAK,KAAK,OAAO;AACrC,gBAAIA,MAAK;AACL,sBAAQ,OAAOA,MAAK,KAAK,KAAK;AAC9B,sBAAQ,UAAU;AAAA,YACtB,OACK;AACD,sBAAQ,IAAI;AACZ,qBAAO,KAAK,GAAG;AACf,kBAAI,OAAO;AACP,oBAAI,KAAK,IAAI,GAAG,EAAE;AAClB,uBAAO,IAAI,GAAG,SAAS;AACvB,uBAAO,IAAI,GAAG,KAAK,GAAG;AACtB,uBAAO,IAAI,GAAG,IAAI;AAClB,uBAAO,IAAI,IAAI,KAAK,IAAI;AACxB,uBAAO,KAAK,EAAE;AACd,qBAAK,IAAI,MAAM,KAAK,IAAI,OAAO,OAAO,IAAI,KAAK,MAAM,KAAK,KAAK,KAAK,OAAO,KAAK;AAChF,oBAAI;AACA,uBAAK,EAAE;AACX,uBAAO;AAAA,cACX,WACS;AACL,uBAAO;AAAA,YACf;AAAA,UACJ;AACA,eAAK,EAAE,KAAK,IAAI;AAAA,QACpB;AAAA,MACJ;AAMA,MAAAuB,KAAI,UAAU,MAAM,WAAY;AAC5B,YAAI,UAAU;AACd,YAAI,KAAK,IAAI,GAAG;AACZ,eAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,MAAM,IAAI;AACvD;AAAA,QACJ;AACA,YAAI,KAAK;AACL,eAAK,EAAE;AAAA;AAEP,eAAK,EAAE,KAAK;AAAA,YACR,GAAG,WAAY;AACX,kBAAI,EAAE,QAAQ,IAAI;AACd;AACJ,sBAAQ,EAAE,OAAO,IAAI,CAAC;AACtB,sBAAQ,EAAE;AAAA,YACd;AAAA,YACA,GAAG,WAAY;AAAA,YAAE;AAAA,UACrB,CAAC;AACL,aAAK,IAAI;AAAA,MACb;AACA,MAAAA,KAAI,UAAU,IAAI,WAAY;AAC1B,YAAI,KAAK,GAAG,IAAI,GAAG,KAAK;AACxB,iBAAS,KAAK,GAAG1B,MAAK,KAAK,GAAG,KAAKA,IAAG,QAAQ,MAAM;AAChD,cAAI,IAAIA,IAAG,EAAE;AACb,gBAAM,KAAK,EAAE,EAAE,SAAS,KAAK,EAAE,KAAK,KAAK,EAAE,IAAI,EAAE,EAAE,SAAS;AAAA,QAChE;AACA,YAAI,MAAM,IAAI,GAAG,KAAK,EAAE;AACxB,iBAASC,MAAK,GAAG,KAAK,KAAK,GAAGA,MAAK,GAAG,QAAQA,OAAM;AAChD,cAAI,IAAI,GAAGA,GAAE;AACb,cAAI,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;AACrC,gBAAM,KAAK,EAAE,EAAE,SAAS,KAAK,EAAE,KAAK,KAAK,EAAE,IAAI,EAAE,EAAE,SAAS,IAAI,KAAK,EAAE;AAAA,QAC3E;AACA,YAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC;AACjC,aAAK,OAAO,MAAM,KAAK,IAAI;AAC3B,aAAK,IAAI;AAAA,MACb;AAKA,MAAAyB,KAAI,UAAU,YAAY,WAAY;AAClC,iBAAS,KAAK,GAAG1B,MAAK,KAAK,GAAG,KAAKA,IAAG,QAAQ,MAAM;AAChD,cAAI,IAAIA,IAAG,EAAE;AACb,YAAE,EAAE;AAAA,QACR;AACA,aAAK,IAAI;AAAA,MACb;AACA,aAAO0B;AAAA,IACX,EAAE;AACF,YAAQ,MAAM;AACd,aAAS,IAAI,MAAM,MAAM,IAAI;AACzB,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,UAAI,IAAI,CAAC;AACT,WAAK,MAAM,IAAI,GAAG,IAAI;AACtB,UAAI,IAAI,OAAO,KAAK,CAAC;AACrB,UAAI,MAAM,EAAE,QAAQ,IAAI,GAAG,MAAM;AACjC,UAAI,OAAO,KAAK,QAAQ,IAAI,MAAM,GAAG;AACrC,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,WAAY;AACnB,iBAAS7B,KAAI,GAAGA,KAAI,KAAK,QAAQ,EAAEA;AAC/B,eAAKA,EAAC,EAAE;AAAA,MAChB;AACA,UAAI,MAAM,SAAU,GAAG,GAAG;AACtB,WAAG,WAAY;AAAE,aAAG,GAAG,CAAC;AAAA,QAAG,CAAC;AAAA,MAChC;AACA,SAAG,WAAY;AAAE,cAAM;AAAA,MAAI,CAAC;AAC5B,UAAI,MAAM,WAAY;AAClB,YAAI,MAAM,IAAI,GAAG,MAAM,EAAE,GAAG,KAAK,GAAG,MAAM,MAAM;AAChD,cAAM;AACN,iBAASA,KAAI,GAAGA,KAAI,MAAM,EAAEA,IAAG;AAC3B,cAAI,IAAI,MAAMA,EAAC;AACf,cAAI;AACA,gBAAI,IAAI,EAAE,EAAE;AACZ,gBAAI,KAAK,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC5B,gBAAI,OAAO,KAAK,EAAE,EAAE,SAAS,KAAK,EAAE,KAAK;AACzC,gBAAI,MAAM,MAAM;AAChB,gBAAI,IAAI,EAAE,GAAG,GAAG;AAChB,gBAAI,KAAK,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,KAAK,QAAQ,EAAE,IAAI,EAAE,EAAE,SAAS,IAAI,MAAM,MAAM;AAAA,UAChG,SACO,GAAG;AACN,mBAAO,IAAI,GAAG,IAAI;AAAA,UACtB;AAAA,QACJ;AACA,YAAI,KAAK,GAAG,MAAM,QAAQ,KAAK,EAAE;AACjC,YAAI,MAAM,GAAG;AAAA,MACjB;AACA,UAAI,CAAC;AACD,YAAI;AACR,UAAI,UAAU,SAAUA,IAAG;AACvB,YAAI,KAAK,EAAEA,EAAC;AACZ,YAAIG,MAAK,EAAE,EAAE,GAAG,OAAOA,IAAG,CAAC,GAAG,IAAIA,IAAG,CAAC;AACtC,YAAI,IAAI,IAAI,GAAG,OAAO,KAAK;AAC3B,UAAE,EAAE,IAAI;AACR,YAAI,IAAI,QAAQ,EAAE,GAAG,IAAI,EAAE;AAC3B,YAAI,MAAM,EAAE,SAAS,IAAI,OAAO,QAAQ,GAAG,GAAG,KAAK,KAAK,EAAE;AAC1D,YAAI,MAAM,KAAK,EAAE,KAAK;AACtB,YAAI,cAAc,EAAE,SAAS,IAAI,IAAI;AACrC,YAAI,MAAM,SAAU,GAAG,GAAG;AACtB,cAAI,GAAG;AACH,iBAAK;AACL,gBAAI,GAAG,IAAI;AAAA,UACf,OACK;AACD,gBAAI,IAAI,EAAE;AACV,kBAAMH,EAAC,IAAI,IAAI,GAAG;AAAA,cACd;AAAA,cACA,KAAK,EAAE,EAAE;AAAA,cACT,GAAG;AAAA,cACH;AAAA,cACA;AAAA,cACA,GAAG,KAAK,GAAG,UAAW,KAAM,IAAI,UAAU;AAAA,cAC1C;AAAA,YACJ,CAAC;AACD,iBAAK,KAAK,IAAI,MAAM;AACpB,mBAAO,KAAK,KAAK,IAAI,QAAQ,MAAM,KAAK;AACxC,gBAAI,CAAC,EAAE;AACH,kBAAI;AAAA,UACZ;AAAA,QACJ;AACA,YAAI,IAAI;AACJ,cAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI;AAC3B,YAAI,CAAC;AACD,cAAI,MAAM,IAAI;AAAA,iBACT,OAAO,MAAQ;AACpB,cAAI;AACA,gBAAI,MAAM,YAAY,MAAM,CAAC,CAAC;AAAA,UAClC,SACO,GAAG;AACN,gBAAI,GAAG,IAAI;AAAA,UACf;AAAA,QACJ;AAEI,eAAK,KAAK,QAAQ,MAAM,GAAG,GAAG,CAAC;AAAA,MACvC;AAEA,eAASA,KAAI,GAAGA,KAAI,MAAM,EAAEA,IAAG;AAC3B,gBAAQA,EAAC;AAAA,MACb;AACA,aAAO;AAAA,IACX;AACA,YAAQ,MAAM;AAQd,aAAS,QAAQ,MAAM,MAAM;AACzB,UAAI,CAAC;AACD,eAAO,CAAC;AACZ,UAAI,IAAI,CAAC;AACT,UAAI,QAAQ,CAAC;AACb,WAAK,MAAM,IAAI,GAAG,IAAI;AACtB,UAAI,IAAI;AACR,UAAI,MAAM;AACV,eAAS,MAAM,GAAG;AACd,YAAIG,MAAK,EAAE,EAAE,GAAG,OAAOA,IAAG,CAAC,GAAG,IAAIA,IAAG,CAAC;AACtC,YAAI,cAAc,EAAE,SAAS,IAAI,IAAI;AACrC,YAAI,IAAI,QAAQ,EAAE,GAAG,IAAI,EAAE;AAC3B,YAAI,MAAM,EAAE,SAAS,IAAI,OAAO,QAAQ,GAAG,GAAG,KAAK,KAAK,EAAE;AAC1D,YAAI,MAAM,KAAK,EAAE,KAAK;AACtB,YAAI,IAAI;AACJ,cAAI,EAAE;AACV,YAAI,IAAI,cAAc,YAAY,MAAM,CAAC,IAAI,MAAM,IAAI,EAAE;AACzD,YAAI,IAAI,IAAI;AACZ,UAAE,EAAE,IAAI;AACR,cAAM,KAAK,IAAI,GAAG;AAAA,UACd,MAAM,KAAK;AAAA,UACX,KAAK,EAAE,EAAE;AAAA,UACT,GAAG;AAAA,UACH;AAAA,UACA;AAAA,UACA,GAAG,KAAK,GAAG,UAAW,KAAM,IAAI,UAAU;AAAA,UAC1C;AAAA,UACA;AAAA,QACJ,CAAC,CAAC;AACF,aAAK,KAAK,IAAI,MAAM;AACpB,eAAO,KAAK,KAAK,IAAI,QAAQ,MAAM,KAAK;AAAA,MAC5C;AACA,UAAI,MAAM,IAAI,GAAG,MAAM,EAAE,GAAG,KAAK,GAAG,MAAM,MAAM;AAChD,eAASH,KAAI,GAAGA,KAAI,MAAM,QAAQ,EAAEA,IAAG;AACnC,YAAI,IAAI,MAAMA,EAAC;AACf,YAAI,KAAK,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,MAAM;AACrC,YAAI,OAAO,KAAK,EAAE,EAAE,SAAS,KAAK,EAAE,KAAK;AACzC,YAAI,IAAI,EAAE,GAAG,EAAE,IAAI,IAAI;AACvB,YAAI,KAAK,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,KAAK,QAAQ,EAAE,IAAI,EAAE,EAAE,SAAS;AAAA,MACzF;AACA,UAAI,KAAK,GAAG,MAAM,QAAQ,KAAK,EAAE;AACjC,aAAO;AAAA,IACX;AACA,YAAQ,UAAU;AAIlB,QAAI,mBAAkC,WAAY;AAC9C,eAAS8B,oBAAmB;AAAA,MAC5B;AACA,MAAAA,kBAAiB,UAAU,OAAO,SAAU,MAAM,OAAO;AACrD,aAAK,OAAO,MAAM,MAAM,KAAK;AAAA,MACjC;AACA,MAAAA,kBAAiB,cAAc;AAC/B,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,mBAAmB;AAK3B,QAAI,eAA8B,WAAY;AAI1C,eAASC,gBAAe;AACpB,YAAI,UAAU;AACd,aAAK,IAAI,IAAI,QAAQ,SAAU,KAAK,OAAO;AACvC,kBAAQ,OAAO,MAAM,KAAK,KAAK;AAAA,QACnC,CAAC;AAAA,MACL;AACA,MAAAA,cAAa,UAAU,OAAO,SAAU,MAAM,OAAO;AACjD,YAAI;AACA,eAAK,EAAE,KAAK,MAAM,KAAK;AAAA,QAC3B,SACO,GAAG;AACN,eAAK,OAAO,GAAG,MAAM,KAAK;AAAA,QAC9B;AAAA,MACJ;AACA,MAAAA,cAAa,cAAc;AAC3B,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,eAAe;AAIvB,QAAI,oBAAmC,WAAY;AAI/C,eAASC,mBAAkB,GAAG,IAAI;AAC9B,YAAI,UAAU;AACd,YAAI,KAAK,MAAQ;AACb,eAAK,IAAI,IAAI,QAAQ,SAAU,KAAK,OAAO;AACvC,oBAAQ,OAAO,MAAM,KAAK,KAAK;AAAA,UACnC,CAAC;AAAA,QACL,OACK;AACD,eAAK,IAAI,IAAI,aAAa,SAAU1B,MAAK,KAAK,OAAO;AACjD,oBAAQ,OAAOA,MAAK,KAAK,KAAK;AAAA,UAClC,CAAC;AACD,eAAK,YAAY,KAAK,EAAE;AAAA,QAC5B;AAAA,MACJ;AACA,MAAA0B,mBAAkB,UAAU,OAAO,SAAU,MAAM,OAAO;AACtD,YAAI,KAAK,EAAE;AACP,iBAAO,IAAI,MAAM,CAAC;AACtB,aAAK,EAAE,KAAK,MAAM,KAAK;AAAA,MAC3B;AACA,MAAAA,mBAAkB,cAAc;AAChC,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,oBAAoB;AAI5B,QAAI,QAAuB,WAAY;AAKnC,eAASC,OAAM,IAAI;AACf,aAAK,SAAS;AACd,aAAK,IAAI,CAAC;AACV,aAAK,IAAI;AAAA,UACL,GAAG;AAAA,QACP;AACA,aAAK,IAAI;AAAA,MACb;AAMA,MAAAA,OAAM,UAAU,OAAO,SAAU,OAAO,OAAO;AAC3C,YAAI,UAAU;AACd,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,CAAC,KAAK;AACN,cAAI,CAAC;AACT,YAAI,KAAK,IAAI,GAAG;AACZ,cAAI,MAAM,KAAK,IAAI,KAAK,GAAG,MAAM,MAAM;AACvC,cAAI,QAAQ,MAAM,SAAS,GAAG,GAAG;AACjC,eAAK,KAAK;AACV,cAAI,KAAK;AACL,iBAAK,EAAE,KAAK,OAAO,CAAC,KAAK,CAAC;AAAA;AAE1B,iBAAK,EAAE,CAAC,EAAE,KAAK,KAAK;AACxB,kBAAQ,MAAM,SAAS,GAAG;AAC1B,cAAI,MAAM;AACN,mBAAO,KAAK,KAAK,OAAO,KAAK;AAAA,QACrC,OACK;AACD,cAAI,IAAI,GAAGjC,KAAI,GAAG,KAAK,QAAQ,MAAM;AACrC,cAAI,CAAC,KAAK,EAAE;AACR,kBAAM;AAAA,mBACD,CAAC,MAAM;AACZ,kBAAM,KAAK;AAAA,eACV;AACD,kBAAM,IAAI,GAAG,KAAK,EAAE,SAAS,MAAM,MAAM;AACzC,gBAAI,IAAI,KAAK,CAAC,GAAG,IAAI,IAAI,OAAO,KAAK,EAAE,MAAM;AAAA,UACjD;AACA,cAAI,IAAI,IAAI,QAAQ,KAAK,KAAK,GAAG,MAAM,MAAM,KAAK;AAClD,cAAI,UAAU,WAAY;AACtB,gBAAIG;AACJ,gBAAI,MAAM,GAAG,KAAKH,EAAC;AACnB,gBAAI,OAAO,UAAW;AAClB,kBAAI,GAAG,KAAKA;AACZ,qBAAO,IAAI;AACX,qBAAO,IAAI;AACX,kBAAI,KAAK,GAAG,KAAKA,KAAI,CAAC,GAAG,QAAQ,GAAG,KAAKA,KAAI,CAAC,GAAG,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG,MAAM,GAAG,KAAKA,KAAI,EAAE,GAAG,KAAK,GAAG,KAAKA,KAAI,EAAE;AACvH,kBAAI,IAAIA,KAAI,KAAK,MAAM,IAAI;AACvB,oBAAI,SAAS,CAAC;AACd,uBAAO,EAAE,QAAQ,MAAM;AACvB,oBAAI;AACJ,oBAAI,OAAO,GAAG,KAAKA,KAAI,EAAE,GAAG,OAAO,GAAG,KAAKA,KAAI,EAAE;AACjD,oBAAI,OAAO,UAAU,IAAI,SAASA,KAAI,IAAIA,MAAK,KAAK,GAAG,GAAG,CAAC,CAAC;AAC5D,oBAAI,QAAQ,YAAY;AACpB,kBAAAG,MAAK,KAAK,CAAC,EAAE,IAAI,KAAK,KAAKH,EAAC,GAAG,OAAOG,IAAG,CAAC,GAAG,OAAOA,IAAG,CAAC;AAAA,gBAC5D,WACS;AACL,yBAAO;AACX,gBAAAH,MAAK;AACL,uBAAO,IAAI;AACX,oBAAI;AACJ,oBAAI,SAAS;AAAA,kBACT,MAAM;AAAA,kBACN,aAAa;AAAA,kBACb,OAAO,WAAY;AACf,wBAAI,CAAC,OAAO;AACR,0BAAI,CAAC;AACT,wBAAI,CAAC;AACD,6BAAO,OAAO,MAAM,IAAI,IAAI;AAAA,yBAC3B;AACD,0BAAI,MAAM,QAAQ,EAAE,KAAK;AACzB,0BAAI,CAAC;AACD,+BAAO,OAAO,IAAI,IAAI,8BAA8B,OAAO,CAAC,GAAG,MAAM,KAAK;AAC9E,4BAAM,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,MAAM,IAAI;AACzD,0BAAI,SAAS,SAAUM,MAAKC,MAAK2B,QAAO;AAAE,+BAAO,OAAO5B,MAAKC,MAAK2B,MAAK;AAAA,sBAAG;AAC1E,+BAAS,KAAK,GAAG,SAAS,QAAQ,KAAK,OAAO,QAAQ,MAAM;AACxD,4BAAI3B,OAAM,OAAO,EAAE;AACnB,4BAAI,KAAKA,MAAK,KAAK;AAAA,sBACvB;AACA,0BAAI,QAAQ,EAAE,CAAC,KAAK,UAAU,QAAQ;AAClC,gCAAQ,IAAI;AAAA;AAEZ,4BAAI,KAAK,IAAI,IAAI;AAAA,oBACzB;AAAA,kBACJ;AAAA,kBACA,WAAW,WAAY;AACnB,wBAAI,OAAO,IAAI;AACX,0BAAI,UAAU;AAAA,kBACtB;AAAA,gBACJ;AACA,oBAAI,QAAQ;AACR,yBAAO,OAAO,MAAM,OAAO,eAAe;AAC9C,uBAAO,OAAO,MAAM;AAAA,cACxB;AACA,qBAAO;AAAA,YACX,WACS,IAAI;AACT,kBAAI,OAAO,WAAW;AAClB,qBAAKP,MAAK,MAAM,MAAM,MAAM,IAAI,IAAI,GAAG,OAAO,IAAI;AAClD,uBAAO;AAAA,cACX,WACS,OAAO,UAAW;AACvB,qBAAKA,MAAK,GAAG,IAAI,GAAG,OAAO,IAAI;AAC/B,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,SAAS;AACb,iBAAOA,KAAI,IAAI,GAAG,EAAEA,IAAG;AACnB,gBAAI,UAAU,QAAQ;AACtB,gBAAI,YAAY;AACZ;AAAA,UACR;AACA,eAAK,IAAI;AACT,cAAI,KAAK,GAAG;AACR,gBAAI,MAAM,IAAI,IAAI,SAAS,GAAG,KAAK,MAAM,MAAM,MAAM,MAAM,GAAG,KAAK,KAAK,EAAE,KAAK,aAAa,EAAE,IAAI,IAAI,SAAS,GAAGA,EAAC;AACnH,gBAAI;AACA,kBAAI,KAAK,KAAK,CAAC,CAAC,CAAC;AAAA;AAEjB,mBAAK,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,GAAG;AAAA,UAClC;AACA,cAAI,IAAI;AACJ,mBAAO,KAAK,KAAK,IAAI,SAASA,EAAC,GAAG,KAAK;AAC3C,eAAK,IAAI,IAAI,SAASA,EAAC;AAAA,QAC3B;AACA,YAAI,OAAO;AACP,cAAI,KAAK;AACL,gBAAI,EAAE;AACV,eAAK,IAAI;AAAA,QACb;AAAA,MACJ;AAMA,MAAAiC,OAAM,UAAU,WAAW,SAAU,SAAS;AAC1C,aAAK,EAAE,QAAQ,WAAW,IAAI;AAAA,MAClC;AACA,aAAOA;AAAA,IACX,EAAE;AACF,YAAQ,QAAQ;AAChB,QAAI,KAAK,OAAO,kBAAkB,aAAa,iBAAiB,OAAO,cAAc,aAAa,aAAa,SAAU,IAAI;AAAE,SAAG;AAAA,IAAG;AACrI,aAAS,MAAM,MAAM,MAAM,IAAI;AAC3B,UAAI,CAAC;AACD,aAAK,MAAM,OAAO,CAAC;AACvB,UAAI,OAAO,MAAM;AACb,YAAI,CAAC;AACT,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,WAAY;AACnB,iBAASjC,KAAI,GAAGA,KAAI,KAAK,QAAQ,EAAEA;AAC/B,eAAKA,EAAC,EAAE;AAAA,MAChB;AACA,UAAI,QAAQ,CAAC;AACb,UAAI,MAAM,SAAU,GAAG,GAAG;AACtB,WAAG,WAAY;AAAE,aAAG,GAAG,CAAC;AAAA,QAAG,CAAC;AAAA,MAChC;AACA,SAAG,WAAY;AAAE,cAAM;AAAA,MAAI,CAAC;AAC5B,UAAI,IAAI,KAAK,SAAS;AACtB,aAAO,GAAG,MAAM,CAAC,KAAK,WAAW,EAAE,GAAG;AAClC,YAAI,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO;AAC/B,cAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI;AACvB,iBAAO;AAAA,QACX;AAAA,MACJ;AACA;AACA,UAAI,MAAM,GAAG,MAAM,IAAI,CAAC;AACxB,UAAI,KAAK;AACL,YAAI,IAAI;AACR,YAAI,IAAI,GAAG,MAAM,IAAI,EAAE;AACvB,YAAI,IAAI,KAAK;AACb,YAAI,GAAG;AACH,cAAI,GAAG,MAAM,IAAI,EAAE;AACnB,cAAI,GAAG,MAAM,CAAC,KAAK,WAAW;AAC1B,gBAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI;AACvB,mBAAO;AAAA,UACX;AACA,cAAI,MAAM,GAAG,MAAM,IAAI,EAAE;AACzB,cAAI,GAAG,MAAM,IAAI,EAAE;AAAA,QACvB;AACA,YAAI,OAAO,QAAQ,KAAK;AACxB,YAAI,UAAU,SAAUA,IAAG;AACvB,cAAIG,MAAK,GAAG,MAAM,GAAG,CAAC,GAAG,MAAMA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC,GAAG,IAAI,KAAK,MAAM,GAAG;AACrH,cAAI;AACJ,cAAI,MAAM,SAAUgC,IAAG,GAAG;AACtB,gBAAIA,IAAG;AACH,mBAAK;AACL,kBAAIA,IAAG,IAAI;AAAA,YACf,OACK;AACD,kBAAI;AACA,sBAAM,EAAE,IAAI;AAChB,kBAAI,CAAC,EAAE;AACH,oBAAI,MAAM,KAAK;AAAA,YACvB;AAAA,UACJ;AACA,cAAI,CAAC,QAAQ,KAAK;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,YACN,cAAc;AAAA,YACd,aAAa;AAAA,UACjB,CAAC,GAAG;AACA,gBAAI,CAAC;AACD,kBAAI,MAAM,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;AAAA,qBACzB,OAAO,GAAG;AACf,kBAAI,OAAO,KAAK,SAAS,GAAG,IAAI,EAAE;AAClC,kBAAI,KAAK,MAAQ;AACb,oBAAI;AACA,sBAAI,MAAM,YAAY,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC;AAAA,gBAC3C,SACOA,IAAG;AACN,sBAAIA,IAAG,IAAI;AAAA,gBACf;AAAA,cACJ;AAEI,qBAAK,KAAK,QAAQ,MAAM,EAAE,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,YAClD;AAEI,kBAAI,IAAI,IAAI,8BAA8B,KAAK,CAAC,GAAG,IAAI;AAAA,UAC/D;AAEI,gBAAI,MAAM,IAAI;AAAA,QACtB;AACA,iBAASnC,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACxB,kBAAQA,EAAC;AAAA,QACb;AAAA,MACJ;AAEI,YAAI,MAAM,CAAC,CAAC;AAChB,aAAO;AAAA,IACX;AACA,YAAQ,QAAQ;AAQhB,aAAS,UAAU,MAAM,MAAM;AAC3B,UAAI,QAAQ,CAAC;AACb,UAAI,IAAI,KAAK,SAAS;AACtB,aAAO,GAAG,MAAM,CAAC,KAAK,WAAW,EAAE,GAAG;AAClC,YAAI,CAAC,KAAK,KAAK,SAAS,IAAI;AACxB,cAAI,EAAE;AAAA,MACd;AACA;AACA,UAAI,IAAI,GAAG,MAAM,IAAI,CAAC;AACtB,UAAI,CAAC;AACD,eAAO,CAAC;AACZ,UAAI,IAAI,GAAG,MAAM,IAAI,EAAE;AACvB,UAAI,IAAI,KAAK;AACb,UAAI,GAAG;AACH,YAAI,GAAG,MAAM,IAAI,EAAE;AACnB,YAAI,GAAG,MAAM,CAAC,KAAK;AACf,cAAI,EAAE;AACV,YAAI,GAAG,MAAM,IAAI,EAAE;AACnB,YAAI,GAAG,MAAM,IAAI,EAAE;AAAA,MACvB;AACA,UAAI,OAAO,QAAQ,KAAK;AACxB,eAASA,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACxB,YAAIG,MAAK,GAAG,MAAM,GAAG,CAAC,GAAG,MAAMA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,KAAKA,IAAG,CAAC,GAAG,MAAMA,IAAG,CAAC,GAAG,IAAI,KAAK,MAAM,GAAG;AACrH,YAAI;AACJ,YAAI,CAAC,QAAQ,KAAK;AAAA,UACd,MAAM;AAAA,UACN,MAAM;AAAA,UACN,cAAc;AAAA,UACd,aAAa;AAAA,QACjB,CAAC,GAAG;AACA,cAAI,CAAC;AACD,kBAAM,EAAE,IAAI,IAAI,MAAM,GAAG,IAAI,EAAE;AAAA,mBAC1B,OAAO;AACZ,kBAAM,EAAE,IAAI,YAAY,KAAK,SAAS,GAAG,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC;AAAA;AAE5D,gBAAI,IAAI,8BAA8B,GAAG;AAAA,QACjD;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,YAAQ,YAAY;AAAA;AAAA;;;ACp/EpB,IAAAiC,qBAAA;AAAA;AAAA;AAEA,aAAS,SAAU,GAAG;AAClB,aAAO,KAAK,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM;AAAA,IACtD;AAEA,aAAS,SAAU,aAAa;AAC5B,UAAI,QAAQ,IAAI,OAAO,WAAW;AAClC,aAAO,SAAU,KAAK;AAClB,YAAI,KAAK,MAAM,CAAC;AAEhB,YAAI,OAAO,QAAQ,UAAU;AACzB,iBAAO;AAAA,QACX;AAEA,cAAM,IAAI,MAAM,IAAI;AAEpB,YAAI,IAAI,WAAW,GAAG;AAClB,iBAAO,QAAQ;AAAA,QACnB;AAEA,YAAI,QAAQ,SAAU,GAAG;AACrB,cAAI,EAAE,KAAK,MAAM,IAAI;AACjB,gBAAI,KAAK,CAAC;AACV;AAAA,UACJ;AACA,cAAI,KAAK,QAAQ,CAAC;AAAA,QACtB,CAAC;AAED,eAAO,IAAI,KAAK,IAAI;AAAA,MACxB;AAAA,IACJ;AAEA,aAAS,MAAO,KAAK;AACjB,UAAI,MAAM,IAAI,MAAM,IAAI;AACxB,UAAI,MAAM,CAAC;AACX,UAAI,QAAQ,SAAU,GAAG;AACrB,YAAI,EAAE,KAAK,MAAM,IAAI;AACjB;AAAA,QACJ;AACA,YAAI,KAAK,CAAC;AAAA,MACd,CAAC;AACD,aAAO,IAAI,KAAK,IAAI;AAAA,IACxB;AAEA,aAAS,UAAW,GAAG,aAAa;AAEhC,UAAI,KAAK;AACT,UAAI,SAAS,SAAU,GAAG;AAAE,eAAO;AAAA,MAAG;AAEtC,UAAI,cAAc,GAAG;AACjB,aAAK;AACL,iBAAS,SAAS,WAAW;AAAA,MACjC;AAEA,eAAS,IAAKC,IAAG;AACb,YAAI,KAAK,MAAM,SAAS;AAExB,eAAO;AACP,iBAAS;AACT,kBAAUA,GAAE,KAAK,SAAU,GAAG,GAAG,KAAK;AAClC,cAAI,MAAM,GAAG;AACT,kBAAM,MAAM;AACZ,gBAAI,IAAI,WAAW,GAAG;AAClB,qBAAO;AAAA,YACX;AACA;AAAA,UACJ;AAEA,cAAI,MAAM,GAAG;AACT,gBAAI,SAAS,CAAC,GAAG;AACb,qBAAO,KAAK,CAAC,EAAE,QAAQ,SAAU,KAAK;AAClC,uBAAO,MAAM,MAAM,OAAO,EAAE,GAAG,IAAI;AAAA,cACvC,CAAC;AACD,kBAAI,IAAI,WAAW,GAAG;AAClB,uBAAO;AAAA,cACX;AACA,qBAAO;AACP;AAAA,YACJ,OAAO;AACH,qBAAO;AAAA,YACX;AAAA,UACJ;AAEA,kBAAQ,OAAO,GAAG;AAAA,YAClB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACD,sBAAQ,IAAI;AACZ;AAAA,UACJ;AAEA,mBAAS;AACT,kBAAQ,IAAI,CAAC;AAAA,QACjB,CAAC;AAED,YAAI,SAAS;AACT,iBAAO,MAAM,OAAO;AAAA,QACxB,OAAO;AACH,cAAI,QAAQ;AACR,mBAAO,MAAM,MAAM,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM;AAAA,UACnD,OAAO;AACH,mBAAO,MAAM,KAAK,OAAO,IAAI,IAAI,OAAOA,GAAE,CAAC,IAAI,MAAM;AAAA,UACzD;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO,IAAI,CAAC;AAAA,IAChB;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC/GjB,IAAAC,eAAA;AAAA;AAiCA,QAAM,UAAU,cAAkB;AAClC,QAAM,UAAU,cAAkB;AAElC,QAAM,YAAY;AAElB,QAAM,EAAE,QAAQ,YAAY,UAAU,IAAI;AAC1C,QAAM,EAAE,SAAS,QAAQ,IAAI;AAG7B,QAAM,WAAW;AACjB,QAAM,gBAAgB;AAgBtB,QAAM,YAAY,CAAC,YAAY,YAAY;AACzC,YAAM,WAAW;AAAA,QACf,MAAM;AAAA;AAAA,QACN,UAAU;AAAA,QACV,cAAc,CAAC,MAAI,KAAK,MAAI,KAAK,GAAG,CAAC;AAAA;AAAA,QACrC,UAAU;AAAA,MACZ;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,gBAAU,QAAQ,OAAO;AAGzB,UAAI,YAAY,QAAQ,OAAO,CAAC,WAAW,WAAW,MAAM,IAAI,MAAM,CAAC;AAEvE,UAAI,UAAU,WAAW;AAAG,cAAM,IAAI,MAAM,6CAA6C;AACzF,UAAI,QAAQ,WAAW,UAAU;AAAQ,gBAAQ,KAAK,6CAA6C;AAGnG,gBAAU,QAAQ,UAAU,WAAW,EAAE,MAAM,MAAM,aAAa,KAAK,GAAG,SAAS,CAAC;AAGpF,YAAM,OAAO;AAAA,QAAC;AAAA,QACZ;AAAA,UACE,MAAM,QAAQ;AAAA,UACd,YAAY;AAAA,QACd;AAAA,QACA,CAAC,YAAY,EAAE,MAAM,cAAc,GAAG,OAAO;AAAA,MAC/C;AACA,UAAI,QAAQ,UAAU;AACpB,aAAK,KAAK,CAAC,YAAY,EAAE,MAAM,eAAe,IAAG,oBAAI,KAAK,GAAE,YAAY,CAAC,CAAC;AAAA,MAC5E;AACA,WAAK,KAAK,mBAAmB,SAAS,OAAO,CAAC;AAC9C,WAAK,KAAK,eAAe,SAAS,OAAO,CAAC;AAG1C,YAAM,MAAM;AAAA,EACZ,UAAU,MAAM,CAAC,CAAC;AAGlB,UAAI,QAAQ,UAAU;AACpB,cAAM,OAAO;AAAA,UACX,MAAM;AAAA,YACJ,iBAAiB,QAAQ,GAAG;AAAA,UAC9B;AAAA,UACA,SAAS;AAAA,YACP,SAAS,QAAQ,IAAI;AAAA,UACvB;AAAA,UACA,uBAAuB,QAAQ,WAAW;AAAA,QAC5C;AACA,cAAM,OAAO;AAAA,UACX,SAAS;AAAA,QACX;AACA,cAAM,UAAU,QAAQ,MAAM,IAAI;AAClC,eAAO,CAAC,QAAQ,MAAM;AAAA,MACxB;AACA,aAAO,CAAC,GAAG;AAAA,IACb;AAEA,QAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpB,QAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAMb,QAAM,qBAAqB,CAAC,SAAS,YAAY;AAC/C,UAAI,YAAY,CAAC,aAAa,CAAC,GAAG,mBAAmB,SAAS,OAAO,CAAC;AACtE,kBAAY,UAAU,OAAO,iBAAiB,SAAS,OAAO,CAAC;AAC/D,aAAO;AAAA,IACT;AAEA,QAAM,qBAAqB,CAAC,SAAS,YAAY;AAC/C,UAAI,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,IAAI,CAAC;AAEjD,YAAM,YAAY,CAAC;AACnB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,YAAI,OAAO,OAAO,SAAS,QAAQ,YAAY,EAAE,YAAY;AAC7D,YAAI,OAAO,OAAO;AAChB,iBAAO,OAAO,SAAS,OAAO,KAAK,EAAE,YAAY;AAAA,QACnD;AACA,kBAAU,KAAK,CAAC,QAAQ,EAAE,MAAM,MAAM,CAAC,IAAI,cAAc,KAAK,CAAC,CAAC;AAAA,MAClE,CAAC;AAED,sBAAgB,cAAc,OAAO,SAAS;AAC9C,aAAO;AAAA,IACT;AAEA,QAAM,mBAAmB,CAAC,SAAS,YAAY;AAC7C,YAAM,WAAW,CAAC;AAClB,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,YAAI,WAAW,MAAM,IAAI,MAAM,GAAG;AAChC,gBAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,cAAI,SAAS,SAAS,GAAG;AACvB,oBAAQ,KAAK;AACb,qBAAS,KAAK,gBAAgB,QAAQ,OAAO,CAAC;AAAA,UAChD;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,SAAS,YAAY;AAC3C,UAAI,QAAQ,CAAC,SAAS,CAAE,CAAC;AAEzB,YAAM,QAAQ,CAAC;AACf,cAAQ,QAAQ,CAAC,QAAQ,MAAM;AAC7B,cAAM,KAAK,CAAC,QAAQ,EAAE,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAAA,MAC/C,CAAC;AAED,cAAQ,MAAM,OAAO,KAAK;AAC1B,aAAO;AAAA,IACT;AAMA,QAAM,kBAAkB,CAAC,QAAQ,YAAY;AAC3C,YAAM,OAAO,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,EAAE;AAC3D,YAAM,WAAW,CAAC,UAAU,EAAE,IAAI,GAAG,QAAQ,KAAK,CAAC,IAAI,MAAM,SAAS,KAAK,KAAK,QAAQ,GAAG,QAAQ,EAAE,IAAI,KAAW,GAAG,cAAc,QAAQ,OAAO,CAAC;AACrJ,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,QAAQ,YAAY;AACzC,YAAM,WAAW,CAAC,QAAQ,CAAC,GAAG,kBAAkB,QAAQ,OAAO,GAAG,iBAAiB,QAAQ,OAAO,CAAC;AACnG,aAAO;AAAA,IACT;AAMA,QAAM,oBAAoB,CAAC,QAAQ,YAAY;AAC7C,YAAM,WAAW,CAAC,YAAY,CAAC,CAAC;AAEhC,YAAM,WAAW,CAAC;AAClB,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AACnD,eAAS,QAAQ,CAAC,YAAY;AAC5B,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ,KAAK;AAChD,mBAAS,KAAK,gBAAgB,QAAQ,SAAS,CAAC,GAAG,OAAO,CAAC;AAAA,QAC7D;AAAA,MACF,CAAC;AAED,aAAO,SAAS,OAAO,QAAQ;AAAA,IACjC;AAEA,QAAM,kBAAkB,CAAC,QAAQ,YAAY;AAC3C,YAAM,WAAW,CAAC,UAAU,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC;AACxE,aAAO;AAAA,IACT;AAMA,QAAM,mBAAmB,CAAC,QAAQ,YAAY;AAC5C,UAAI,IAAI;AACR,YAAM,WAAW,WAAW,MAAM,WAAW,MAAM;AAEnD,UAAI,WAAW,CAAC,aAAa,CAAC,CAAC;AAC/B,eAAS,QAAQ,CAAC,YAAY;AAC5B,YAAI,QAAQ,SAAS,SAAS,GAAG;AAC/B;AAAA,QACF;AAEA,cAAM,YAAY,mBAAmB,SAAS,CAAC;AAE/C,mBAAW,SAAS,OAAO,SAAS;AAEpC,aAAK,QAAQ,SAAS;AAAA,MACxB,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,qBAAqB,CAAC,SAAS,UAAU;AAC7C,YAAM,WAAW,CAAC;AAGlB,eAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,SAAS,GAAG,KAAK;AACpD,cAAM,WAAW,CAAC,YAAY,EAAE,IAAI,OAAO,IAAK,QAAQ,IAAI,GAAI,IAAK,QAAQ,IAAI,EAAG,CAAC;AACrF,iBAAS,KAAK,QAAQ;AAAA,MACxB;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC/PA;AAAA;AAAA,QAAM,EAAE,WAAW,IAAI;AAIvB,QAAM,UAAU;AAAA,MACd,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,OAAO;AAAA,QACL,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,IAAI;AAAA,QACF,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,MACA,OAAO;AAAA,QACL,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,MAChB;AAAA,IACF;AAGA,QAAM,oBAAoB;AAAA;AAAA,MAExB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAM,6BAA6B,CAAC,YAAY;AAC9C,YAAM,gBAAgB,CAAC;AACvB,UAAI,eAAe;AACnB,UAAI,eAAe;AACnB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,WAAW,MAAM,IAAI,QAAQ,CAAC,CAAC,GAAG;AAAE,yBAAe;AAAA,QAAK;AAC5D,YAAI,WAAW,MAAM,IAAI,QAAQ,CAAC,CAAC,KAAK,WAAW,MAAM,IAAI,QAAQ,CAAC,CAAC,GAAG;AAAE,yBAAe;AAAA,QAAK;AAAA,MAClG;AACA,iBAAW,UAAU,SAAS;AAC5B,YAAI,gBAAgB,QAAQ,MAAM,EAAE,iBAAiB,MAAM;AACzD,wBAAc,cAAc,MAAM,IAAI;AACtC;AAAA,QACF;AACA,YAAI,gBAAgB,QAAQ,MAAM,EAAE,iBAAiB,MAAM;AACzD,wBAAc,cAAc,MAAM,IAAI;AAAA,QACxC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAGA,QAAM,4BAA4B,MAAM;AACtC,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,SAAS;AAC5B,YAAI,QAAQ,MAAM,EAAE,iBAAiB,QAAQ,QAAQ,MAAM,EAAE,iBAAiB,MAAM;AAClF,cAAI,UAAU,QAAQ,QAAQ,MAAM,EAAE,SAAS,IAAI,GAAG;AACpD,sBAAU,KAAK,QAAQ,MAAM,EAAE,SAAS;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAGA,QAAM,yBAAyB,MAAM;AACnC,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,SAAS;AAC5B,YAAI,QAAQ,MAAM,EAAE,iBAAiB,QAAQ,QAAQ,MAAM,EAAE,iBAAiB,MAAM;AAClF,oBAAU,KAAK,MAAM;AAAA,QACvB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAIA,QAAM,2BAA2B,MAAM;AACrC,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,SAAS;AAC5B,YAAI,QAAQ,MAAM,EAAE,mBAAmB,MAAM;AAC3C,oBAAU,KAAK,QAAQ,MAAM,EAAE,SAAS;AAAA,QAC1C;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AClMA;AAAA;AACA,QAAM,EAAE,QAAQ,IAAI;AACpB,QAAM,EAAE,QAAQ,IAAI;AACpB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,iBAAiB;AACvB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AAEtB,QAAM,gBAAgB,CAAC,SAAS,WAAW;AACzC,YAAM,WAAW;AAAA,QACf,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AACA,YAAM,EAAE,QAAQ,QAAQ,IAAI,OAAO,OAAO,CAAC,GAAG,UAAU,MAAM;AAE9D,YAAM,WAAW;AAAA,QACf,UAAU,WAAW;AAAA,QACrB,MAAM,oBAAI,KAAK;AAAA,QACf;AAAA,MACF;AAEA,YAAM,uBAAuB;AAAA,QAC3B,KAAK;AAAA;AAAA,QACL,KAAK;AAAA;AAAA,QACL,MAAM;AAAA,UACJ,UAAU,cAAc;AAAA,UACxB,WAAW,CAACC,UAASC,UAAS,cAAc,UAAU,OAAO,OAAO,CAAC,GAAG,EAAE,QAAQ,MAAM,GAAGD,QAAO,GAAGC,KAAI;AAAA,QAC3G;AAAA;AAAA,QACA,MAAM;AAAA;AAAA,QACN,KAAK;AAAA;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA;AAAA,QACL,KAAK;AAAA;AAAA,QACL,OAAO;AAAA;AAAA,QACP,MAAM;AAAA;AAAA,QACN,IAAI;AAAA,UACF,UAAU,QAAQ,GAAG;AAAA,UACrB,WAAW,CAACD,UAASE,aAAY,QAAQA,QAAO;AAAA;AAAA,QAClD;AAAA,QACA,OAAO;AAAA,UACL,UAAU,QAAQ,MAAM;AAAA,UACxB,WAAW,CAACF,UAASE,aAAY,QAAQA,QAAO;AAAA;AAAA,QAClD;AAAA,QACA,WAAW,MAAM;AACf,gBAAM,IAAI,MAAM,yEAAyE;AAAA,QAC3F;AAAA,MACF;AACA,YAAM,UAAU,OAAO,OAAO,CAAC,GAAG,UAAU,MAAM;AAClD,YAAM,OAAO,qBAAqB,MAAM,EAAE,UAAU,SAAS,OAAO;AACpE,YAAM,WAAW,qBAAqB,MAAM,EAAE;AAC9C,aAAO,EAAE,MAAM,SAAS;AAAA,IAC1B;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACzDjB,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,mBAAmB;AAAA,QACnB,OAAS;AAAA,MACX;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;ACzCA;AAAA;AAAA,QAAM,EAAE,OAAO,WAAW,IAAI;AAE9B,QAAI;AAEJ,QAAM,eAAe,CAAC,WAAW,OAAO;AACtC,UAAI,gBAAgB,aAAa,OAAO;AAAI,eAAO;AACnD,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAI,UAAU,CAAC,EAAE,MAAM,UAAU,CAAC,EAAE,OAAO,IAAI;AAC7C,yBAAe,UAAU,CAAC;AAC1B,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,SAAS,SAAS;AAClC,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,QAAQ,CAAC,EAAE,SAAS;AAAM,iBAAO,QAAQ,CAAC,EAAE;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,YAAY;AAC5B,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,YAAI,IAAI,SAAS,SAAS;AACxB,cAAI,IAAI,WAAW,SAAS,IAAI,SAAS,GAAG,CAAC;AAC7C,cAAI,IAAI,WAAW,SAAS,IAAI,SAAS,GAAG,CAAC;AAC7C,cAAI,IAAI,WAAW,SAAS,IAAI,SAAS,GAAG,CAAC;AAC7C,cAAI,IAAI,WAAW,SAAS,IAAI,SAAS,GAAG,CAAC;AAC7C,cAAI,OAAO,MAAM,CAAC;AAAG,gBAAI;AACzB,cAAI,OAAO,MAAM,CAAC;AAAG,gBAAI;AACzB,cAAI,OAAO,MAAM,CAAC;AAAG,gBAAI;AACzB,cAAI,OAAO,MAAM,CAAC;AAAG,gBAAI;AACzB,iBAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,QACpB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,sBAAsB,CAAC,WAAW,OAAO;AAC7C,YAAM,IAAI,aAAa,WAAW,EAAE;AACpC,UAAI,GAAG;AACL,eAAO,SAAS,EAAE,OAAO;AAAA,MAC3B;AACA,aAAO;AAAA,IACT;AAGA,QAAM,eAAe,CAAC,KAAK,OAAO,MAAM,YAAY;AAClD,YAAM,WAAW,CAAC;AAClB,YAAM,QAAQ,CAAC;AACf,YAAM,SAAS,CAAC;AAChB,YAAM,YAAY,KAAK;AAEvB,YAAM,WAAW,CAAC,OAAO,SAAS;AAChC,YAAI,MAAM,SAAS,eAAe;AAChC,gBAAM,IAAI,WAAW,SAAS,MAAM,SAAS,GAAG,CAAC;AACjD,gBAAM,IAAI,WAAW,SAAS,MAAM,SAAS,GAAG,CAAC;AACjD,gBAAM,IAAI,WAAW,SAAS,MAAM,SAAS,GAAG,CAAC;AACjD,mBAAS,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,QACzB;AAAA,MAEF;AAEA,YAAM,YAAY,CAAC,QAAQ,SAAS;AAClC,YAAI,OAAO,SAAS,UAAU;AAC5B,iBAAO,QAAQ,QAAQ,QAAQ;AAAA,QACjC;AAAA,MAEF;AAEA,YAAM,cAAc,CAAC,KAAK,SAAS;AACjC,YAAI,IAAI,SAAS,YAAY;AAC3B,gBAAM,KAAK,SAAS,SAAS,IAAI,SAAS,IAAI,CAAC;AAC/C,gBAAM,KAAK,SAAS,SAAS,IAAI,SAAS,IAAI,CAAC;AAC/C,gBAAM,KAAK,SAAS,SAAS,IAAI,SAAS,IAAI,CAAC;AAC/C,gBAAM,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;AACvB,gBAAM,IAAI,SAAS,IAAI,OAAO;AAC9B,cAAI,GAAG;AACL,mBAAO,KAAK,CAAC;AAAA,UACf,OAAO;AACL,mBAAO,KAAK,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAEA,UAAI,WAAW;AAEf,YAAM,UAAU,CAAC,MAAM,SAAS;AAC9B,gBAAQ,KAAK,MAAM;AAAA,UACjB,KAAK;AACH,iBAAK,QAAQ,QAAQ,SAAS;AAC9B;AAAA,UACF,KAAK;AACH,uBAAW,SAAS,KAAK,OAAO;AAChC,gBAAI,KAAK,YAAY;AAEnB,yBAAW,oBAAoB,WAAW,KAAK,UAAU;AAAA,YAC3D;AACA,iBAAK,QAAQ,QAAQ,WAAW;AAChC;AAAA,UACF;AACE;AAAA,QACJ;AAAA,MACF;AAEA,YAAM,UAAU,CAAC,MAAM,SAAS;AAC9B,YAAI,KAAK,SAAS,QAAQ;AACxB,eAAK,QAAQ,QAAQ,OAAO;AAAA,QAC9B;AAAA,MACF;AAGA,UAAI,QAAQ,gBAAgB,MAAM;AAChC,cAAM,QAAQ,QAAQ,IAAI;AAC1B,cAAM,SAAS,UAAU,IACrB,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,MAAM,KAAK,WAAW,IAAI,OAAO,IAAI,OAAO,IAAI,KAAK,IACpE,CAAC,MAAM,MAAM,KAAK,MAAM,CAAC;AAE7B,YAAI,QAAQ,QAAQ,OAAO;AAC3B,cAAM,SAAS,SAAS,IAAI,OAAO;AAEnC,cAAM,SAAS,MAAM;AACrB,cAAM,SAAS,SAAS;AAExB,cAAM,WAAW,CAAC;AAClB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,gBAAM,UAAU,CAAC;AACjB,mBAAS,IAAI,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,KAAK;AACxC,gBAAI,MAAM,CAAC,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,CAAC,KAAK,QAAQ;AAC5C;AAAA,YACF;AACA,oBAAQ,KAAK,OAAO,SAAS,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAAA,UAC5C;AACA,gBAAM,UAAU,WAAW,MAAM,WAAW,OAAO;AACnD,gBAAM,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI;AACvC,cAAI;AAAQ,oBAAQ,QAAQ;AAC5B,mBAAS,KAAK,OAAO;AAAA,QACvB;AACA,YAAI,QAAQ,WAAW,MAAM,OAAO,QAAQ;AAC5C,YAAI,QAAQ;AACV,kBAAQ,MAAM,QAAQ;AAAA,QACxB;AACA,eAAO;AAAA,MACT;AAEA,UAAI,OAAO;AACX,UAAI,IAAI,QAAQ,SAAS,GAAG;AAE1B,YAAI,QAAQ,QAAQ,OAAO;AAC3B,cAAM,SAAS,SAAS,IAAI,OAAO;AAEnC,cAAM,SAAS,MAAM;AACrB,cAAM,SAAS,SAAS;AAExB,gBAAQ;AAAA,YACA,IAAI,EAAE;AAAA,gBACF,MAAM;AAAA,gBACN,MAAM;AAAA,oBACF,IAAI,EAAE;AAAA;AAAA;AAAA;AAMtB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,kBAAQ;AACR,mBAAS,IAAI,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,KAAK;AACxC,gBAAI,MAAM,CAAC,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,CAAC,KAAK,QAAQ;AAC5C;AAAA,YACF;AACA,oBAAQ,UAAU,SAAS,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA;AAAA,UACzC;AACA,kBAAQ;AAER,gBAAM,IAAI,OAAO,CAAC;AAClB,cAAI,GAAG;AACL,oBAAQ,sBAAsB,CAAC;AAAA;AAAA,UACjC;AACA,kBAAQ;AAAA,QACV;AACA,gBAAQ;AAER,cAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAC9C,YAAI,UAAU,GAAK;AACjB,kBAAQ,+BAA+B,KAAK,IAAI,KAAK,IAAI,KAAK;AAAA;AAAA,QAChE;AACA,YAAI,QAAQ;AACV,kBAAQ,8BAA8B,MAAM;AAAA;AAAA,QAC9C;AAEA,gBAAQ;AAAA,MACV;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;;;;;AC1LJ,YAAA,OAAO;AAEP,YAAA,IAAI;AAGJ,YAAA,kBAAkB;AAElB,YAAA,YACX,MAAI,QAAA,kBAAe;AAMR,YAAA,UAAU,IAAI,OAAO,OAAK,QAAA,OAAI,MAAM,GAAG;AAEvC,YAAA,OAAO,IAAI,OAAO,OAAK,QAAA,IAAC,OAAO,GAAG;AAElC,YAAA,qBAAqB,IAAI,OAAO,OAAK,QAAA,kBAAe,MAAM,GAAG;AAE7D,YAAA,eAAe,IAAI,OAAO,OAAK,QAAA,YAAS,MAAM,GAAG;AAEjD,YAAA,UAAU,IAAI,OAAO,OAAK,QAAA,kBAAe,OAAK,QAAA,YAAS,OAAO,GAAG;AAEjE,YAAA,aAAa,IAAI,OAAO,OAAK,QAAA,YAAS,OAAO,GAAG;AAE7D,QAAM,MAAM;AACZ,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,QAAQ;AAOD,YAAA,SAAS,CAAC,OAAO,IAAI,IAAI,GAAG;AASzC,aAAgB,OAAO,GAAS;AAC9B,aAAQ,KAAK,SAAS,KAAK,SACzB,MAAM,MAAM,MAAM,MAAM,MAAM,OAC7B,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAC1B;AALA,YAAA,SAAA;AAcA,aAAgB,IAAI,GAAS;AAC3B,aAAO,MAAM,SAAS,MAAM,MAAM,MAAM,MAAM,MAAM;IACtD;AAFA,YAAA,MAAA;AAWA,aAAgB,gBAAgB,GAAS;AACvC,aAAS,KAAK,MAAQ,KAAK,MAClB,KAAK,MAAQ,KAAK,OACnB,MAAM,MACN,MAAM,MACN,MAAM,QACN,MAAM,QACL,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,QACpB,KAAK,QAAU,KAAK,QACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAChC;AAlBA,YAAA,kBAAA;AA2BA,aAAgB,WAAW,GAAS;AAClC,aAAO,gBAAgB,CAAC,KACrB,KAAK,MAAQ,KAAK,MACnB,MAAM,MACN,MAAM,MACN,MAAM,OACL,KAAK,OAAU,KAAK,OACpB,KAAK,QAAU,KAAK;IACzB;AARA,YAAA,aAAA;;;;;;;;;ACjGa,YAAA,OAAO;AAEP,YAAA,kBACX;AAEW,YAAA,IAAI;AAGJ,YAAA,kBAAkB;AAElB,YAAA,YACX,MAAI,QAAA,kBAAe;AAMR,YAAA,UAAU,IAAI,OAAO,OAAK,QAAA,OAAI,MAAM,GAAG;AAEvC,YAAA,qBAAqB,IAAI,OAAO,OAAK,QAAA,kBAAe,MAAM,GAAG;AAE7D,YAAA,OAAO,IAAI,OAAO,OAAK,QAAA,IAAC,OAAO,GAAG;AAElC,YAAA,qBAAqB,IAAI,OAAO,OAAK,QAAA,kBAAe,MAAM,GAAG;AAE7D,YAAA,eAAe,IAAI,OAAO,OAAK,QAAA,YAAS,MAAM,GAAG;AAEjD,YAAA,UAAU,IAAI,OAAO,OAAK,QAAA,kBAAe,OAAK,QAAA,YAAS,OAAO,GAAG;AAEjE,YAAA,aAAa,IAAI,OAAO,OAAK,QAAA,YAAS,OAAO,GAAG;AAE7D,QAAM,MAAM;AACZ,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,QAAQ;AAOD,YAAA,SAAS,CAAC,OAAO,IAAI,IAAI,GAAG;AASzC,aAAgB,OAAO,GAAS;AAC9B,aAAQ,KAAK,KAAU,KAAK,SACzB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAC1B;AAJA,YAAA,SAAA;AAaA,aAAgB,iBAAiB,GAAS;AACxC,aAAQ,KAAK,KAAO,KAAK,KACvB,MAAM,MACN,MAAM,MACL,KAAK,MAAO,KAAK,MACjB,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAQ,KAAK;IACvB;AAPA,YAAA,mBAAA;AAoBA,aAAgB,uBAAuB,GAAS;AAC9C,aAAQ,MAAM,KACX,MAAM,MACN,MAAM,MACN,IAAI,MAAQ,IAAI,OAChB,MAAM,OACN,IAAI,OAAQ,KAAK,SACjB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAC1B;AATA,YAAA,yBAAA;AAkBA,aAAgB,IAAI,GAAS;AAC3B,aAAO,MAAM,SAAS,MAAM,MAAM,MAAM,MAAM,MAAM;IACtD;AAFA,YAAA,MAAA;AAYA,aAAgB,gBAAgB,GAAS;AACvC,aAAS,KAAK,MAAQ,KAAK,MAClB,KAAK,MAAQ,KAAK,OACnB,MAAM,MACN,MAAM,MACN,MAAM,QACN,MAAM,QACL,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,QACpB,KAAK,QAAU,KAAK,QACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAChC;AAlBA,YAAA,kBAAA;AA2BA,aAAgB,WAAW,GAAS;AAClC,aAAO,gBAAgB,CAAC,KACrB,KAAK,MAAQ,KAAK,MACnB,MAAM,MACN,MAAM,MACN,MAAM,OACL,KAAK,OAAU,KAAK,OACpB,KAAK,QAAU,KAAK;IACzB;AARA,YAAA,aAAA;;;;;;;;;AC1Ia,YAAA,qBAAqB;AAErB,YAAA,eACX,MAAI,QAAA,qBAAkB;AAMX,YAAA,wBACX,IAAI,OAAO,OAAK,QAAA,qBAAkB,MAAM,GAAG;AAEhC,YAAA,kBAAkB,IAAI,OAAO,OAAK,QAAA,eAAY,MAAM,GAAG;AAEvD,YAAA,aACX,IAAI,OAAO,OAAK,QAAA,qBAAkB,OAAK,QAAA,eAAY,OAAO,GAAG;AAU/D,aAAgB,kBAAkB,GAAS;AACzC,aAAS,KAAK,MAAQ,KAAK,MACnB,MAAM,MACL,KAAK,MAAQ,KAAK,OAClB,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAQ,KAAK,OAClB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,OACpB,KAAK,OAAU,KAAK,QACpB,KAAK,QAAU,KAAK,QACpB,KAAK,QAAU,KAAK,QACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAU,KAAK,SACpB,KAAK,SAAW,KAAK;IAChC;AAhBA,YAAA,oBAAA;AAyBA,aAAgB,aAAa,GAAS;AACpC,aAAO,kBAAkB,CAAC,MACvB,MAAM,MACN,MAAM,MACL,KAAK,MAAQ,KAAK,MACnB,MAAM,OACL,KAAK,OAAU,KAAK,OACpB,KAAK,QAAU,KAAK;IAC1B;AARA,YAAA,eAAA;;;;;;;;;AC/DA,QAAA,MAAA;AACA,QAAA,MAAA;AACA,QAAA,QAAA;AAEA,QAAO,MAAM,IAAI;AACjB,QAAO,WAAW,IAAI;AACtB,QAAO,kBAAkB,IAAI;AAC7B,QAAO,aAAa,IAAI;AACxB,QAAO,SAAS,IAAI;AACpB,QAAO,UAAU,IAAI;AAErB,QAAO,WAAW,IAAI;AAEtB,QAAO,oBAAoB,MAAM;AACjC,QAAO,eAAe,MAAM;AAC5B,QAAO,aAAa,MAAM;AAE1B,QAAM,gBAAgB;AACtB,QAAM,kBAAkB;AAExB,QAAM,SAAiC;;MAErC,WAAW;MACX,KAAK;MACL,OAAO;;AAGT,QAAM,eAAuC;;MAE3C,WAAW;MACX,KAAK;MACL,IAAI;MACJ,IAAI;MACJ,MAAM;MACN,MAAM;;AAIR,QAAM,MAAM;AACZ,QAAM,UAAU;AAEhB,QAAM,UAAU;AAChB,QAAM,qBAAqB;AAC3B,QAAM,YAAY;AAClB,QAAM,kBAAkB;AACxB,QAAM,QAAQ;AACd,QAAM,eAAe;AACrB,QAAM,kBAAkB;AACxB,QAAM,uBAAuB;AAC7B,QAAM,gBAAgB;AACtB,QAAM,uBAAuB;AAC7B,QAAM,sBAAsB;AAC5B,QAAM,WAAW;AACjB,QAAM,kBAAkB;AACxB,QAAM,SAAS;AACf,QAAM,WAAW;AACjB,QAAM,cAAc;AACpB,QAAM,mBAAmB;AACzB,QAAM,YAAY;AAClB,QAAM,mBAAmB;AACzB,QAAM,kBAAkB;AACxB,QAAM,UAAU;AAChB,QAAM,iBAAiB;AACvB,QAAM,mBAAmB;AACzB,QAAM,kBAAkB;AACxB,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,QAAM,cAAc;AACpB,QAAM,wBAAwB;AAC9B,QAAM,kBAAkB;AACxB,QAAM,gBAAgB;AACtB,QAAM,yBAAyB;AAC/B,QAAM,mBAAmB;AACzB,QAAM,uBAAuB;AAC7B,QAAM,oBAAoB;AAC1B,QAAM,aAAa;AACnB,QAAM,mBAAmB;AACzB,QAAM,WAAW;AACjB,QAAM,gBAAgB;AACtB,QAAM,0BAA0B;AAChC,QAAM,iBAAiB;AACvB,QAAM,wBAAwB;AAC9B,QAAM,wBAAwB;AAC9B,QAAM,0BAA0B;AAChC,QAAM,cAAc;AACpB,QAAM,wBAAwB;AAE9B,QAAM,MAAM;AACZ,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,QAAQ;AACd,QAAM,OAAO;AACb,QAAM,SAAS;AACf,QAAM,MAAM;AACZ,QAAM,SAAS;AACf,QAAM,QAAQ;AACd,QAAM,gBAAgB;AACtB,QAAM,YAAY;AAClB,QAAM,OAAO;AACb,QAAM,QAAQ;AACd,QAAM,UAAU;AAChB,QAAM,WAAW;AACjB,QAAM,eAAe;AACrB,QAAM,gBAAgB;AACtB,QAAM,MAAM;AACZ,QAAM,KAAK;AAEX,QAAM,UAAU,CAAC,MAAuB,MAAM,UAAU,MAAM;AAE9D,QAAM,SAAS,CAAC,QAAQ,MAAM;AAE9B,QAAM,qBAAqB,CAAC,GAAG,QAAQ,cAAc,OAAO;AAC5D,QAAM,iBAAiB,CAAC,GAAG,QAAQ,MAAM,aAAa;AACtD,QAAM,2BAA2B,CAAC,OAAO,UAAU,GAAG,MAAM;AAC5D,QAAM,mCAAmC,CAAC,GAAG,QAAQ,SAAS,KAAK,IAAI;AAEvE,aAAS,YAAY,QAAyB,QACzB,KAAW;AAC9B,cAAQ,QAAQ;QACd,KAAK;AACH,cAAI,QAAQ,eAAe;AACzB,mBAAO,KAAK,+BAA+B,aAAa,GAAG;;AAE7D;QACF,KAAK;AACH,cAAI,QAAQ,iBAAiB;AAC3B,mBAAO,KAAK,iCAAiC,eAAe,GAAG;;AAEjE;QACF;;AAGF,cAAQ,KAAK;QACX,KAAK;AACH,iBAAO,KAAK,WAAW,KACrB,2CAA2C,GAAG,MAC9C,qDACN,eAAe,GAAG;AACd;QACF,KAAK;AACH,kBAAQ,QAAQ;YACd,KAAK;AAEH;YACF,KAAK;AACH,qBAAO,KAAK,2CAA2C,GAAG,GAAG;AAC7D;YACF;AACE,qBAAO,KAAK,qDAAqD;;AAErE;QACF;;IAEJ;AAGA,aAAS,eAAe,QACA,SAA+B;AACrD,iBAAW,SAAS,OAAO,KAAK,OAAO,GAAG;AACxC,oBAAY,QAAQ,OAAO,QAAQ,KAAK,CAAC;;IAE7C;AAEA,QAAM,WAAW,CAAC,SAA0B,WAAW,KAAK,IAAI;AAEhE,QAAM,SAAS,CAAC,SAA0B,QAAQ,KAAK,IAAI;AAE3D,QAAM,kBAAkB;AACxB,QAAM,oBAAoB;AAC1B,QAAM,4BAA4B;AAKrB,YAAA,SAAS;MACpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;AAGF,QAAM,6BAAwD;MAC5D,SAAS;MACT,MAAM;MACN,uBAAuB;MACvB,SAAS;MACT,SAAS;MACT,cAAc;MACd,WAAW;MACX,SAAS;MACT,UAAU;MACV,OAAO;MACP,OAAO;MACP,KAAK;MACL,OAAO;;AA+WT,QAAa,cAAb,MAAwB;;;;MA4GtB,YAAY,KAAO;AACjB,aAAK,MAAM,QAAG,QAAH,QAAG,SAAH,MAAO,CAAA;AAClB,aAAK,cAAc,CAAC,CAAE,KAAK,IAAI;AAC/B,cAAM,WAAW,KAAK,WAAW,CAAC,CAAE,KAAK,IAAI;AAC7C,aAAK,gBAAgB,KAAK,IAAI,aAAa;AAC3C,aAAK,WAAW,KAAK,IAAI;AAEzB,YAAI,UAAU;AAQZ,eAAK,iBAAiB;AACtB,eAAK,YAAY;AACjB,eAAK,SAAS;AAEd,eAAK,iBAAiB,KAAK;AAE3B,eAAK,aAAa,KAAK;AAIvB,eAAK,KAAE,OAAA,OAAA,EAAK,WAAW,KAAW,GAAK,MAAM;AAC7C,gBAAM,aAAa,KAAK,IAAI;AAC5B,cAAI,cAAc,MAAM;AACtB,2BAAe,MAAM,UAAU;AAC/B,mBAAO,OAAO,KAAK,IAAI,UAAU;;eAGhC;AACH,eAAK,iBAAiB;AACtB,eAAK,YAAY;AACjB,eAAK,SAAS;AAEd,eAAK,iBAAiB,KAAK;AAE3B,eAAK,aAAa,KAAK;;AAQzB,aAAK,aAAa;;UAEhB,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;;AAIP,aAAK,MAAK;MACZ;;;;;MAvIA,IAAI,SAAM;AACR,eAAO,KAAK;MACd;MAuIA,QAAK;;AACH,aAAK,eAAe;AACpB,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,SAAS;AAEd,aAAK,IAAI;AACT,aAAK,OAAO,CAAA;AACZ,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,QAAQ;AACb,aAAK,gBAAgB;AACrB,aAAK,IAAI;AACT,aAAK,QAAQ;AACb,aAAK,sBAAsB;AAC3B,aAAK,iBAAiB;AACtB,aAAK,aAAa,CAAA;AAKlB,cAAM,EAAE,YAAW,IAAK;AACxB,aAAK,QAAQ,cAAc,SAAS;AAEpC,aAAK,yBAAyB,KAAK,wBAAwB,KAAK,aAC9D,KAAK,UAAU;AAGjB,aAAK,kBAAkB,CAAC;AAExB,aAAK,iBAAiB,CAAC,SAAS;AAChC,aAAK,oBAAoB;AAEzB,YAAI,EAAE,kBAAiB,IAAK,KAAK;AACjC,YAAI,sBAAsB,QAAW;AACnC,cAAI,KAAK,IAAI,oBAAoB,MAAM;AACrC,kBAAM,IAAI,MAAM,sDAAsD;;AAExE,8BAAoB;;AAEtB,aAAK,cAAc,iBAAiB;AAEpC,aAAK,oBAAoB;AAEzB,aAAK,UAAU;AACf,aAAK,UAAU;AAEf,aAAK,UAAU;UACb,SAAS;UACT,UAAU;UACV,YAAY;;AAGd,aAAK,OAAO;AACZ,aAAK,SAAS;AAEd,aAAK,WAAW,OAAO,OAAO,YAAY;AAG1C,SAAA,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,SAAA,GAAA,KAAjB,IAAI;MACN;;;;;;;;MASA,IAAI,WAAQ;AACV,eAAO,KAAK,gBAAgB,KAAK;MACnC;;;;;;;;;;;;;MAcA,IAAI,cAAW;AACb,eAAO,KAAK,WAAW,KAAK;MAC9B;;;;;;;;;;MAWA,GAAwB,MAAS,SAAiC;AAE/D,aAAa,2BAA2B,IAAI,CAAC,IAAI;MACpD;;;;;;MAOA,IAAI,MAAe;AAEhB,aAAa,2BAA2B,IAAI,CAAC,IAAI;MACpD;;;;;;;;;;;MAYA,UAAU,SAAe;;AACvB,YAAI,OAAG,KAAG,KAAK,cAAQ,QAAA,OAAA,SAAA,KAAI;AAC3B,YAAI,KAAK,eAAe;AACtB,cAAI,IAAI,SAAS,GAAG;AAClB,mBAAO;;AAET,iBAAO,GAAG,KAAK,IAAI,IAAI,KAAK,MAAM;;AAEpC,YAAI,IAAI,SAAS,GAAG;AAClB,iBAAO;;AAET,eAAO,IAAI,MAAM,MAAM,OAAO;MAChC;;;;;;;;;;MAWA,KAAK,SAAe;AAClB,cAAM,MAAM,KAAK,UAAU,OAAO;AAClC,cAAM,UAAU,KAAK;AACrB,YAAI,YAAY,QAAW;AACzB,gBAAM;eAEH;AACH,kBAAQ,GAAG;;AAEb,eAAO;MACT;;;;;;;;MASA,MAAM,OAAyB;AAC7B,YAAI,KAAK,QAAQ;AACf,iBAAO,KAAK,KAAK,sDAAsD;;AAGzE,YAAI,MAAM;AACV,YAAI,UAAU,MAAM;AAGlB,gBAAM;AACN,kBAAQ;mBAED,OAAO,UAAU,UAAU;AAClC,kBAAQ,MAAM,SAAQ;;AASxB,YAAI,KAAK,wBAAwB,QAAW;AAE1C,kBAAQ,GAAG,KAAK,mBAAmB,GAAG,KAAK;AAC3C,eAAK,sBAAsB;;AAG7B,YAAI,QAAS,MAAiB;AAC9B,cAAM,WAAY,MAAiB,WAAW,QAAQ,CAAC;AACvD,YAAI,CAAC;;SAGA,aAAa,MAAO,YAAY,SAAU,YAAY,QAAU;AAInE,eAAK,sBAAuB,MAAiB,QAAQ,CAAC;AACtD;AACA,kBAAS,MAAiB,MAAM,GAAG,KAAK;;AAG1C,cAAM,EAAE,WAAU,IAAK;AACvB,aAAK,QAAQ;AACb,aAAK,IAAI;AACT,eAAO,KAAK,IAAI,OAAO;AAErB,qBAAW,KAAK,KAAK,EAAE,KAAK,IAAW;;AAEzC,aAAK,iBAAiB;AAEtB,eAAO,MAAM,KAAK,IAAG,IAAK;MAC5B;;;;;;;MAQA,QAAK;AACH,eAAO,KAAK,MAAM,IAAI;MACxB;;;;;;;;;MAUQ,YAAS;AACf,cAAM,EAAE,OAAO,EAAC,IAAK;AACrB,aAAK,QAAQ;AAGb,aAAK,IAAI,IAAI;AAEb,YAAI,KAAK,MAAM,QAAQ;AACrB,iBAAO;;AAKT,cAAM,OAAO,MAAM,WAAW,CAAC;AAE/B,aAAK;AACL,YAAI,OAAO,OAAQ;AACjB,cAAI,QAAQ,SAAS,SAAS,KAAK;AACjC,mBAAO;;AAGT,kBAAQ,MAAM;YACZ,KAAK;AACH,mBAAK;AACL,mBAAK,SAAS;AACd,mBAAK,oBAAoB,KAAK;AAC9B,qBAAO;YACT,KAAK;AAEH,kBAAI,MAAM,WAAW,IAAI,CAAC,MAAM,IAAI;AAIlC,qBAAK,IAAI,IAAI;;AAMf,mBAAK;AACL,mBAAK,SAAS;AACd,mBAAK,oBAAoB,KAAK;AAC9B,qBAAO;YACT;AAEE,mBAAK,KAAK,uBAAuB;AACjC,qBAAO;;;AAIb,YAAI,OAAO,OAAQ;AAIjB,cAAI,EAAE,QAAQ,SAAU,QAAQ,QAAS;AACvC,iBAAK,KAAK,uBAAuB;;AAGnC,iBAAO;;AAGT,cAAM,QAAQ,SAAY,OAAO,SAAU,QACxC,MAAM,WAAW,IAAI,CAAC,IAAI;AAC7B,aAAK,IAAI,IAAI;AAIb,YAAI,QAAQ,SAAU;AACpB,eAAK,KAAK,uBAAuB;;AAGnC,eAAO;MACT;;;;;;;;;MAWQ,YAAS;AACf,cAAM,EAAE,OAAO,EAAC,IAAK;AACrB,aAAK,QAAQ;AAGb,aAAK,IAAI,IAAI;AAEb,YAAI,KAAK,MAAM,QAAQ;AACrB,iBAAO;;AAKT,cAAM,OAAO,MAAM,WAAW,CAAC;AAE/B,aAAK;AACL,YAAI,OAAO,OAAQ;AACjB,cAAK,OAAO,MAAQ,OAAO,OAAU,OAAO,OAAQ,SAAS,MACzD,SAAS,KAAK;AAChB,mBAAO;;AAGT,kBAAQ,MAAM;YACZ,KAAK;AACH,mBAAK;AACL,mBAAK,SAAS;AACd,mBAAK,oBAAoB,KAAK;AAC9B,qBAAO;YACT,KAAK,IAAI;AAGP,oBAAM,OAAO,MAAM,WAAW,IAAI,CAAC;AACnC,kBAAI,SAAS,MAAM,SAAS,KAAK;AAG/B,qBAAK,IAAI,IAAI;;;YAKjB,KAAK;YACL,KAAK;AACH,mBAAK;AACL,mBAAK,SAAS;AACd,mBAAK,oBAAoB,KAAK;AAC9B,qBAAO;YACT;AACE,mBAAK,KAAK,uBAAuB;AACjC,qBAAO;;;AAIb,YAAI,OAAO,OAAQ;AAIjB,cAAI,EAAE,QAAQ,SAAU,QAAQ,QAAS;AACvC,iBAAK,KAAK,uBAAuB;;AAGnC,iBAAO;;AAGT,cAAM,QAAQ,SAAY,OAAO,SAAU,QACxC,MAAM,WAAW,IAAI,CAAC,IAAI;AAC7B,aAAK,IAAI,IAAI;AAIb,YAAI,QAAQ,SAAU;AACpB,eAAK,KAAK,uBAAuB;;AAGnC,eAAO;MACT;;;;;MAMQ,cAAW;AACjB,cAAM,IAAI,KAAK,QAAO;AACtB,eAAO,MAAM,UAAU,KAAK;MAC9B;MAEQ,QAAK;AACX,aAAK,IAAI,KAAK;AACd,aAAK;MACP;;;;;;;;;;;;MAaQ,UAAU,OAAe;AAC/B,YAAI,EAAE,GAAG,MAAK,IAAK;AACnB,cAAM,EAAE,MAAK,IAAK;AAElB,eAAO,MAAM;AACX,gBAAM,IAAI,KAAK,QAAO;AACtB,gBAAM,WAAW,MAAM;AACvB,gBAAM,QAAQ,WAAW,KAAK;AAC9B,cAAI,UAAU,OAAO,MAAM,SAAS,KAAK,GAAG;AAC1C,iBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1C,mBAAO;;AAGT,cAAI,UAAU;AACZ,iBAAK,QAAQ,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;;AAC9C,oBAAQ,KAAK;;;MAGnB;;;;;;;;;;MAWQ,cAAc,MAAY;AAChC,YAAI,EAAE,GAAG,MAAK,IAAK;AACnB,cAAM,EAAE,MAAK,IAAK;AAElB,eAAO,MAAM;AACX,cAAI,IAAI,KAAK,QAAO;AACpB,kBAAQ,GAAG;YACT,KAAK;AACH,mBAAK,QAAQ,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;;AAC9C,sBAAQ,KAAK;AACb,kBAAI;AACJ;YACF,KAAK;AACH,mBAAK,QAAQ,MAAM,MAAM,KAAK;AAC9B,qBAAO;YACT;;AAGF,cAAI,MAAM,MAAM;AACd,iBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1C,mBAAO;;;MAGb;;;;;;;;;MAUQ,mBAAgB;AACtB,cAAM,EAAE,OAAO,GAAG,MAAK,IAAK;AAE5B,eAAO,MAAM;AACX,gBAAM,IAAI,KAAK,QAAO;AACtB,cAAI,MAAM,KAAK;AACb,iBAAK,QAAQ,MAAM,MAAM,KAAK;AAC9B,mBAAO;;AAIT,cAAI,CAAC,WAAW,CAAC,GAAG;AAClB,iBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1C,mBAAO,MAAM,UAAU,KAAK;;;MAGlC;;;;;;;;MASQ,aAAU;AAEhB,eAAO,MAAM;AACX,gBAAM,IAAI,KAAK,YAAW;AAC1B,cAAI,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG;AACxB,mBAAO;;;MAGb;MAEQ,cAAc,SAAe;AACnC,aAAK,oBAAoB;AAEzB,YAAI,YAAY,OAAO;AACrB,eAAK,SAAS;AACd,eAAK,UAAU,KAAK;eAEjB;AACH,eAAK,SAAS;AACd,eAAK,UAAU,KAAK;;MAGxB;;;;MAMQ,SAAM;AAOZ,YAAI,KAAK,MAAM,WAAW,CAAC,MAAM,OAAQ;AACvC,eAAK;AACL,eAAK;;AAGP,aAAK,QAAQ;MACf;MAEQ,mBAAgB;AAMtB,cAAM,UAAU,KAAK;AACrB,cAAM,IAAI,KAAK,WAAU;AACzB,YAAI,KAAK,UAAU,SAAS;AAC1B,eAAK,kBAAkB;;AAGzB,gBAAQ,GAAG;UACT,KAAK;AACH,iBAAK,QAAQ;AAGb,gBAAI,KAAK,KAAK,WAAW,GAAG;AAC1B,oBAAM,IAAI,MAAM,wBAAwB;;AAE1C;UACF,KAAK;AACH;UACF;AACE,iBAAK,MAAK;AACV,iBAAK,QAAQ;AACb,iBAAK,kBAAkB;;MAE7B;MAEQ,WAAQ;;AACd,cAAM,IAAI,KAAK,UAAU,kBAAkB;AAC3C,gBAAQ,GAAG;UACT,KAAK,SAAS;AAEZ,aAAA,KAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAnB,MAAsB,KAAK,IAAI;AAC/B,iBAAK,OAAO;AACZ,iBAAK,QAAQ;AACb,iBAAK,UAAU;AACf;;UAEF,KAAK;AACH;UACF;AACE,iBAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,gBAAI,MAAM,cAAc;AACtB,mBAAK,QAAQ;uBAEN,QAAQ,CAAC,GAAG;AACnB,mBAAK,QAAQ;AACb,mBAAK,IAAI;;;MAGjB;MAEQ,gBAAa;AACnB,cAAM,IAAI,KAAK;AACf,YAAI,KAAK,cAAc,CAAC,GAAG;AACzB,eAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,eAAK,IAAI;AACT,eAAK,QAAQ;;MAEjB;MAEQ,OAAI;AACV,cAAM,IAAI,KAAK,UAAU,cAAc;AACvC,YAAI,MAAM,KAAK;AACb;;AAGF,aAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,YAAI,MAAM,eAAe;AACvB,eAAK,QAAQ;mBAEN,MAAM,MAAM;AACnB,eAAK,QAAQ;mBAEN,QAAQ,CAAC,GAAG;AACnB,eAAK,QAAQ;AACb,eAAK,IAAI;;MAEb;MAEQ,aAAU;AAChB,cAAM,IAAI,KAAK;AACf,YAAI,KAAK,cAAc,CAAC,GAAG;AACzB,eAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,eAAK,QAAQ;AACb,eAAK,IAAI;;MAEb;MAEQ,eAAY;AAClB,cAAM,IAAI,KAAK,YAAW;AAC1B,aAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,gBAAQ,GAAG;UACT,KAAK;AACH,iBAAK,QAAQ;AACb,iBAAK,eAAe;AACpB;UACF,KAAK;AACH,iBAAK,QAAQ;AACb;UACF;AACE,iBAAK,QAAQ;;MAEnB;MAEQ,mBAAgB;AACtB,cAAM,OAAO,OAAO,cAAc,KAAK,YAAW,CAAE;AACpD,cAAM,MAAM,KAAK,gBAAgB;AACjC,aAAK,QAAQ;AACb,YAAI,QAAQ,KAAK;AACf,eAAK,QAAQ,QAAQ,OAAO,gBAAgB;AAC5C,eAAK,eAAe;;MAExB;MAEQ,cAAW;AACjB,YAAI,KAAK,cAAc,KAAK,GAAG;AAC7B,eAAK,QAAQ;AACb,eAAK,QAAQ;;MAEjB;MAEQ,oBAAiB;AACvB,cAAM,IAAI,KAAK,YAAW;AAC1B,aAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,aAAK,QAAQ,MAAM,QAAQ,sBAAsB;MACnD;MAEQ,mBAAgB;AACtB,cAAM,IAAI,KAAK,YAAW;AAC1B,aAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,YAAI,MAAM,SAAS;AACjB,eAAK,QAAQ;eAEV;AACH,eAAK,KAAK,oBAAoB;AAG9B,eAAK,QAAQ;;MAEjB;MAEQ,SAAM;AACZ,YAAI,KAAK,cAAc,QAAQ,GAAG;AAChC,eAAK,QAAQ;AACb,eAAK,QAAQ;;MAEjB;MAEQ,eAAY;AAClB,cAAM,IAAI,KAAK,YAAW;AAC1B,aAAK,QAAQ,OAAO,cAAc,CAAC;AACnC,YAAI,MAAM,SAAS;AACjB,eAAK,QAAQ;;MAEjB;MAEQ,QAAK;AAcX,YAAI,KAAK,KAAK,WAAW,GAAG;AAC1B,eAAK,iBAAgB;eAElB;AACH,eAAK,sBAAqB;;MAE9B;MAEQ,UAAO;AAEb,YAAI,EAAE,GAAG,MAAK,IAAK;AACnB,cAAM,EAAE,MAAK,IAAK;AAElB;AAEA,iBAAO,MAAM;AACX,oBAAQ,KAAK,QAAO,GAAI;cACtB,KAAK;AACH,qBAAK,UAAU,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;;AAChD,wBAAQ,KAAK;AACb;cACF,KAAK,WAAW;AACd,sBAAM,EAAE,kBAAiB,IAAK;AAC9B,sBAAM,SAAS,KAAK,SAAS,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1D,qBAAK,QAAQ;AACb,oBAAI;AACJ,oBAAI,WAAW,IAAI;AACjB,uBAAK,KAAK,oBAAoB;AAC9B,2BAAS;uBAEN;AACH,2BAAS,KAAK,YAAY,MAAM;AAChC,uBAAK,SAAS;;AAGhB,oBAAI,sBAAsB,UAAU,KAAK,gBAAgB,QAAW;AAClE,uBAAK,QAAQ;;AAGf,sBAAM;;cAER,KAAK;AACH,qBAAK,UAAU,MAAM,MAAM,KAAK;AAEhC,sBAAM;cACR;;;MAGN;MAEQ,YAAS;AAKf,cAAM,IAAI,KAAK,QAAO;AAEtB,YAAI,gBAAgB,CAAC,GAAG;AACtB,eAAK,QAAQ;AACb,eAAK,MAAK;AACV,eAAK,kBAAkB;eAEpB;AACH,kBAAQ,GAAG;YACT,KAAK;AACH,mBAAK,QAAQ;AACb,mBAAK,kBAAkB;AACvB;YACF,KAAK;AACH,mBAAK,QAAQ;AACb,mBAAK,eAAe;AACpB,mBAAK,kBAAkB;AACvB;YACF,KAAK;AACH,mBAAK,QAAQ;AACb;YACF;AACE,mBAAK,KAAK,kCAAkC;AAC5C,mBAAK,QAAQ;AACb,mBAAK,kBAAkB;;;MAG/B;MAEQ,gBAAa;AACnB,aAAK,gBAAgB,OAAO,cAAc,KAAK,YAAW,CAAE;AAC5D,gBAAQ,KAAK,cAAc;UACzB,KAAK;AACH,gBAAI,CAAC,KAAK,WAAW,CAAC,KAAK,wBAAwB;AACjD,mBAAK,KAAK,iCAAiC;AAC3C,mBAAK,yBAAyB;;AAGhC,gBAAI,KAAK,cAAc,CAAC,KAAK,uBAAuB;AAClD,mBAAK,KAAK,iCAAiC;AAC3C,mBAAK,wBAAwB;;AAE/B,iBAAK,QAAQ;AACb,iBAAK,eAAe;AACpB;UACF,KAAK;AACH,iBAAK,QAAQ;AACb,iBAAK,eAAe;AACpB;UACF,KAAK;AACH,iBAAK,QAAQ;AACb,gBAAI,KAAK,WAAW,KAAK,SAAS;AAChC,mBAAK,KAAK,8CAA8C;;AAE1D,iBAAK,eAAe;AACpB;UACF;AAGE,gBAAI,KAAK,aAAa,UAAU,GAAG;AACjC,mBAAK,KAAK,mBAAmB;;;MAGrC;MAEQ,WAAQ;AACd,YAAI,KAAK,cAAc,KAAK,GAAG;AAC7B,eAAK,QAAQ;;MAEjB;MAEQ,iBAAc;;AACpB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,MAAM,OAAO;AACf,eAAK,QAAQ;AAEb,WAAA,KAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAnB,MAAsB,KAAK,IAAI;AAC/B,eAAK,OAAO;eAET;AACH,eAAK,QAAQ,IAAI,OAAO,cAAc,CAAC,CAAC;AACxC,eAAK,QAAQ;;MAEjB;MAEQ,gBAAa;AACnB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,MAAM,SAAS;AACjB,eAAK,KAAK,oBAAoB;AAG9B,eAAK,QAAQ,KAAK,OAAO,cAAc,CAAC,CAAC;AACzC,eAAK,QAAQ;eAEV;AACH,eAAK,QAAQ;;MAEjB;MAEQ,SAAM;AACZ,YAAI,KAAK,cAAc,aAAa,GAAG;AACrC,eAAK,QAAQ;;MAEjB;MAEQ,eAAY;AAClB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,MAAM,eAAe;AACvB,eAAK,QAAQ;eAEV;AACH,eAAK,QAAQ,IAAI,OAAO,cAAc,CAAC,CAAC;AACxC,eAAK,QAAQ;;MAEjB;MAEQ,gBAAa;;AACnB,cAAM,IAAI,KAAK,YAAW;AAC1B,gBAAQ,GAAG;UACT,KAAK,SAAS;AAEZ,aAAA,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,SAAA,GAAA,KAAjB,MAAoB,KAAK,IAAI;AAC7B,iBAAK,OAAO;AACZ,iBAAK,QAAQ;AACb;;UAEF,KAAK;AACH,iBAAK,QAAQ;AACb;UACF;AACE,iBAAK,QAAQ,KAAK,OAAO,cAAc,CAAC,CAAC;AACzC,iBAAK,QAAQ;;MAEnB;;;MAIQ,eAAY;AAClB,cAAM,IAAI,KAAK,YAAW;AAG1B,YAAI,KAAK,eAAe,CAAC,GAAG;AAC1B,eAAK,YAAY,OAAO,cAAc,CAAC;AACvC,eAAK,QAAQ;mBAEN,MAAM,YAAY,IAAI,CAAC,GAAG;AACjC,eAAK,KAAK,0CAA0C;AACpD,eAAK,QAAQ,MAAM,WAAW,cAAc;eAEzC;AACH,eAAK,KAAK,sDAAsD;AAChE,eAAK,YAAY,OAAO,cAAc,CAAC;AACvC,eAAK,QAAQ;;MAEjB;MAEQ,UAAO;AAGb,cAAM,EAAE,OAAO,GAAG,MAAK,IAAK;AAE5B,eAAO,MAAM;AACX,gBAAM,IAAI,KAAK,YAAW;AAC1B,cAAI,MAAM,KAAK;AACb,iBAAK,YAAY,MAAM,MAAM,KAAK;AAClC;;AAKF,cAAI,CAAC,KAAK,UAAU,CAAC,GAAG;AACtB,iBAAK,YAAY,MAAM,MAAM,OAAO,KAAK,KAAK;AAC9C,kBAAM,aAAa,MAAM;AACzB,gBAAI,cAAc,IAAI,CAAC,GAAG;AACxB,kBAAI,KAAK,aAAa,OAAO;AAC3B,oBAAI,CAAC,KAAK,iBAAiB;AACzB,uBAAK,KACH,0DAA0D;;AAG9D,qBAAK,QAAQ,aAAa,oBAAoB;qBAE3C;AACH,qBAAK,QAAQ,aAAa,cAAc;;mBAGvC;AACH,mBAAK,KAAK,sDAAsD;AAChE,mBAAK,YAAY,OAAO,cAAc,CAAC;;AAEzC;;;MAGN;MAEQ,UAAO;AACb,YAAI,KAAK,KAAK,WAAW,GAAG;AAC1B,gBAAM,IAAI,KAAK,YAAW;AAC1B,cAAI,MAAM,UAAU;AAClB,iBAAK,QAAQ;qBAEN,CAAC,IAAI,CAAC,GAAG;AAChB,iBAAK,OAAO,OAAO,cAAc,CAAC;;mBAK7B,KAAK,cAAc,QAAQ,GAAG;AACrC,eAAK,QAAQ;;MAEjB;MAEQ,YAAS;;AACf,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,MAAM,SAAS;AACjB,gBAAM,EAAE,SAAQ,IAAK;AACrB,cAAI,SAAS,YAAW,MAAO,OAAO;AACpC,iBAAK,KACH,+DAA+D;;AAGnE,WAAA,KAAA,KAAK,eAAS,QAAA,OAAA,SAAA,SAAA,GAAA,KAAd,MAAiB;YACf,QAAQ;YACR,MAAM,KAAK;WACZ;AACD,eAAK,WAAW,KAAK,OAAO;AAC5B,eAAK,QAAQ;mBAEN,MAAM,UAAU;AAKvB,eAAK,QAAQ;eAEV;AACH,eAAK,QAAQ,IAAI,OAAO,cAAc,CAAC,CAAC;AACxC,eAAK,QAAQ;;AAEf,aAAK,kBAAkB;MACzB;MAEQ,oBAAiB;AACvB,cAAM,IAAI,KAAK,WAAU;AAIzB,YAAI,MAAM,UAAU;AAElB,eAAK,QAAQ;AACb;;AAGF,YAAI,MAAM,KAAK;AACb,eAAK,QAAQ;AACb,eAAK,OAAO,OAAO,cAAc,CAAC;;MAEtC;MAEQ,eAAY;AAClB,cAAM,IAAI,KAAK,UAAU,wBAAwB;AAGjD,YAAI,MAAM,UAAU;AAClB,eAAK,QAAQ;AACb,eAAK,QAAQ,KAAK;AAClB,eAAK,OAAO;AACZ,eAAK,KAAK,gCAAgC;AAC1C;;AAGF,YAAI,EAAE,IAAI,CAAC,KAAK,MAAM,QAAQ;AAC5B;;AAGF,aAAK,QAAQ,KAAK;AAClB,aAAK,OAAO;AACZ,YAAI,CAAC,KAAK,eAAe,SAAS,KAAK,IAAI,GAAG;AAC5C,kBAAQ,KAAK,KAAK,QAAQ;YACxB,KAAK;AACH,mBAAK,KAAK,2CAA2C;AACrD;YACF,KAAK;AACH,mBAAK,KAAK,qBAAqB,KAAK,eAAe,CAAC,CAAC,GAAG;AACxD;YACF;AACE,mBAAK,KAAK,mBAAmB,KAAK,eAAe,KAAK,IAAI,CAAC,EAAE;;;AAInE,aAAK,QAAQ,MAAM,QAAQ,yBAAyB;MACtD;MAEQ,aAAU;AAChB,cAAM,IAAI,KAAK,YAAW;AAG1B,YAAI,MAAM,UAAU;AAClB,eAAK,QAAQ;AACb,eAAK,KAAK,gCAAgC;AAC1C;;AAGF,YAAI,IAAI,CAAC,GAAG;AACV;;AAGF,YAAI,MAAM,OAAO;AACf,eAAK,KAAK,iBAAiB;;AAG7B,aAAK,QAAQ;MACf;MAEQ,qBAAkB;AACxB,cAAM,IAAI,KAAK,YAAW;AAG1B,YAAI,MAAM,UAAU;AAClB,eAAK,QAAQ;AACb,eAAK,KAAK,gCAAgC;AAC1C;;AAGF,YAAI,IAAI,CAAC,GAAG;AACV;;AAGF,YAAI,CAAC,QAAQ,CAAC,GAAG;AACf,eAAK,KAAK,uBAAuB;AACjC,eAAK,IAAI;eAEN;AACH,eAAK,IAAI;;AAGX,aAAK,QAAQ;MACf;MAEQ,gBAAa;AACnB,cAAM,IAAI,KAAK,UAAU,CAAC,KAAK,GAAI,QAAQ,CAAC;AAI5C,YAAI,MAAM,UAAU;AAClB,eAAK,QAAQ;AACb,eAAK,OAAO;AACZ,eAAK,KAAK,gCAAgC;AAC1C;;AAGF,YAAI,MAAM,KAAK;AACb;;AAGF,cAAM,QAAQ,KAAK;AACnB,aAAK,OAAO;AACZ,gBAAQ,KAAK,MAAM;UACjB,KAAK,WAAW;AACd,iBAAK,iBAAiB,CAAC,YAAY,YAAY;AAC/C,kBAAM,UAAU;AAChB,iBAAK,QAAQ,UAAU;AAEvB,gBAAI,CAAC,cAAc,KAAK,OAAO,GAAG;AAChC,mBAAK,KAAK,2CAA2C;uBAG9C,CAAE,KAAK,IAAI,iBAA6B;AAC/C,mBAAK,cAAc,OAAO;;AAE5B;;UAEF,KAAK;AACH,gBAAI,CAAC,4BAA4B,KAAK,KAAK,GAAG;AAC5C,mBAAK,KAAK,2DACY;;AAExB,iBAAK,iBAAiB,CAAC,YAAY;AACnC,iBAAK,QAAQ,WAAW;AACxB;UACF,KAAK;AACH,gBAAI,UAAU,SAAS,UAAU,MAAM;AACrC,mBAAK,KAAK,4CAAgD;;AAE5D,iBAAK,iBAAiB,CAAA;AACtB,iBAAK,QAAQ,aAAa;AAC1B;UACF;;AAIF,aAAK,OAAO;AACZ,aAAK,QAAQ;MACf;MAEQ,oBAAiB;AACvB,cAAM,IAAI,KAAK,YAAW;AAI1B,YAAI,MAAM,UAAU;AAElB,eAAK,QAAQ;AACb;;AAGF,YAAI,CAAC,IAAI,CAAC,GAAG;AACX,eAAK,KAAK,sBAAsB;AAChC,eAAK,MAAK;;AAGZ,aAAK,QAAQ;MACf;MAEQ,iBAAc;;AACpB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,MAAM,SAAS;AACjB,cAAI,KAAK,aAAa,OAAO;AAC3B,iBAAK,KAAK,sDAAsD;qBAEzD,KAAK,SAAS,aACd,KAAK,eAAe,SAAS,SAAS,GAAG;AAChD,iBAAK,KAAK,yCAAyC;;AAGrD,WAAA,KAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAnB,MAAsB,KAAK,OAAO;AAClC,eAAK,OAAO;AACZ,eAAK,WAAW,KAAK,OAAO;AAC5B,eAAK,QAAQ;eAEV;AAIH,eAAK,KACH,6DAA6D;;AAEjE,aAAK,kBAAkB;MACzB;MAEQ,WAAQ;;AACd,cAAM,IAAI,KAAK,iBAAgB;AAC/B,YAAI,MAAM,KAAK;AACb;;AAGF,cAAM,MAA0B,KAAK,MAAM;UACzC,MAAM,KAAK;UACX,YAAY,uBAAO,OAAO,IAAI;;AAEhC,aAAK,OAAO;AAEZ,YAAI,KAAK,UAAU;AACjB,eAAK,QAAQ,IAAI,KAAK,uBAAO,OAAO,IAAI;;AAI1C,SAAA,KAAA,KAAK,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAA,KAAxB,MAA2B,GAA4B;AACvD,aAAK,UAAU;AACf,YAAI,CAAC,KAAK,eAAe,KAAK,YAAY;AACxC,eAAK,KAAK,sCAAsC;;AAGlD,gBAAQ,GAAG;UACT,KAAK;AACH,iBAAK,QAAO;AACZ;UACF,KAAK;AACH,iBAAK,QAAQ;AACb;UACF;AACE,gBAAI,CAAC,IAAI,CAAC,GAAG;AACX,mBAAK,KAAK,mCAAmC;;AAE/C,iBAAK,QAAQ;;MAEnB;MAEQ,gBAAa;AACnB,YAAI,KAAK,QAAO,MAAO,SAAS;AAC9B,eAAK,mBAAkB;eAEpB;AACH,eAAK,KAAK,iDAAiD;AAC3D,eAAK,QAAQ;;MAEjB;MAEQ,UAAO;AACb,cAAM,IAAI,KAAK,WAAU;AACzB,YAAI,MAAM,KAAK;AACb;;AAEF,YAAI,gBAAgB,CAAC,GAAG;AACtB,eAAK,MAAK;AACV,eAAK,QAAQ;mBAEN,MAAM,SAAS;AACtB,eAAK,QAAO;mBAEL,MAAM,eAAe;AAC5B,eAAK,QAAQ;eAEV;AACH,eAAK,KAAK,yCAAyC;;MAEvD;MAEQ,cAAW;AACjB,cAAM,IAAI,KAAK,iBAAgB;AAC/B,YAAI,MAAM,OAAO;AACf,eAAK,QAAQ;mBAEN,IAAI,CAAC,GAAG;AACf,eAAK,QAAQ;mBAEN,MAAM,SAAS;AACtB,eAAK,KAAK,0BAA0B;AACpC,eAAK,WAAW,KAAK,MAAM,KAAK,IAAI;AACpC,eAAK,OAAO,KAAK,OAAO;AACxB,eAAK,QAAO;mBAEL,MAAM,KAAK;AAClB,eAAK,KAAK,yCAAyC;;MAEvD;MAEQ,sBAAmB;AACzB,cAAM,IAAI,KAAK,WAAU;AACzB,gBAAQ,GAAG;UACT,KAAK;AACH;UACF,KAAK;AACH,iBAAK,QAAQ;AACb;UACF;AACE,iBAAK,KAAK,0BAA0B;AAGpC,iBAAK,OAAO;AACZ,iBAAK,OAAO;AACZ,gBAAI,MAAM,SAAS;AACjB,mBAAK,QAAO;uBAEL,gBAAgB,CAAC,GAAG;AAC3B,mBAAK,MAAK;AACV,mBAAK,QAAQ;mBAEV;AACH,mBAAK,KAAK,yCAAyC;AACnD,mBAAK,QAAQ;;;MAGrB;MAEQ,eAAY;AAClB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,QAAQ,CAAC,GAAG;AACd,eAAK,IAAI;AACT,eAAK,QAAQ;mBAEN,CAAC,IAAI,CAAC,GAAG;AAChB,eAAK,KAAK,2BAA2B;AACrC,eAAK,QAAQ;AACb,eAAK,MAAK;;MAEd;MAEQ,qBAAkB;AAGxB,cAAM,EAAE,GAAG,MAAK,IAAK;AACrB,YAAI,EAAE,GAAG,MAAK,IAAK;AAEnB,eAAO,MAAM;AACX,kBAAQ,KAAK,QAAO,GAAI;YACtB,KAAK;AACH,mBAAK,WAAW,KAAK,MACL,KAAK,OAAO,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;AAC1D,mBAAK,OAAO,KAAK,OAAO;AACxB,mBAAK,IAAI;AACT,mBAAK,QAAQ;AACb;YACF,KAAK;AACH,mBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1C,mBAAK,QAAQ;AACb,mBAAK,oBAAoB;AACzB;YACF,KAAK;YACL,KAAK;YACL,KAAK;AACH,mBAAK,QAAQ,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;AAC9C,sBAAQ,KAAK;AACb;YACF,KAAK;AACH,mBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC1C,mBAAK,KAAK,uBAAuB;AACjC;YACF,KAAK;AACH,mBAAK,QAAQ,MAAM,MAAM,KAAK;AAC9B;YACF;;;MAGN;MAEQ,qBAAkB;AACxB,cAAM,IAAI,KAAK,YAAW;AAC1B,YAAI,IAAI,CAAC,GAAG;AACV,eAAK,QAAQ;mBAEN,MAAM,SAAS;AACtB,eAAK,QAAO;mBAEL,MAAM,eAAe;AAC5B,eAAK,QAAQ;mBAEN,gBAAgB,CAAC,GAAG;AAC3B,eAAK,KAAK,mCAAmC;AAC7C,eAAK,MAAK;AACV,eAAK,QAAQ;eAEV;AACH,eAAK,KAAK,yCAAyC;;MAEvD;MAEQ,uBAAoB;AAM1B,cAAM,IAAI,KAAK,UAAU,gCAAgC;AACzD,gBAAQ,GAAG;UACT,KAAK;AACH,iBAAK,QAAQ;AACb,iBAAK,oBAAoB;AACzB;UACF,KAAK;AACH,iBAAK,KAAK,uBAAuB;AACjC;UACF,KAAK;AACH;UACF;AACE,gBAAI,KAAK,KAAK,SAAS,KAAK,GAAG;AAC7B,mBAAK,KAAK,8CAAgD;;AAE5D,iBAAK,WAAW,KAAK,MAAM,KAAK,IAAI;AACpC,iBAAK,OAAO,KAAK,OAAO;AACxB,gBAAI,MAAM,SAAS;AACjB,mBAAK,QAAO;mBAET;AACH,mBAAK,QAAQ;;;MAGrB;MAEQ,YAAS;AACf,cAAM,IAAI,KAAK,iBAAgB;AAC/B,YAAI,MAAM,SAAS;AACjB,eAAK,SAAQ;mBAEN,IAAI,CAAC,GAAG;AACf,eAAK,QAAQ;mBAEN,MAAM,KAAK;AAClB,eAAK,KAAK,sCAAsC;;MAEpD;MAEQ,oBAAiB;AACvB,gBAAQ,KAAK,WAAU,GAAI;UACzB,KAAK;AACH,iBAAK,SAAQ;AACb;UACF,KAAK;AACH;UACF;AACE,iBAAK,KAAK,sCAAsC;;MAEtD;;MAIQ,mBAAgB;AAStB,YAAI,EAAE,GAAG,OAAO,eAAc,IAAK;AACnC,cAAM,EAAE,OAAO,aAAa,QAAO,IAAK;AAExC;AAEA,iBAAO,MAAM;AACX,oBAAQ,KAAK,QAAO,GAAI;cACtB,KAAK,MAAM;AACT,qBAAK,QAAQ;AACb,oBAAI,YAAY,QAAW;AACzB,wBAAM,EAAE,KAAI,IAAK;AACjB,wBAAM,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC3C,sBAAI,KAAK,WAAW,GAAG;AACrB,4BAAQ,OAAO,KAAK;AACpB,yBAAK,OAAO;6BAEL,MAAM,WAAW,GAAG;AAC3B,4BAAQ,KAAK;;;AAGjB,iCAAiB;AAEjB,sBAAM;;cAER,KAAK;AACH,qBAAK,QAAQ;AACb,qBAAK,oBAAoB;AACzB,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;;AAE5C,iCAAiB;AAEjB,sBAAM;cACR,KAAK;AACH,wBAAQ,gBAAgB;kBACtB,KAAK;AACH,qCAAiB;AACjB;kBACF,KAAK;AACH,qCAAiB;AACjB;kBACF,KAAK;AACH;kBACF;AACE,0BAAM,IAAI,MAAM,kBAAkB;;AAEtC;cACF,KAAK;AACH,oBAAI,mBAAmB,2BAA2B;AAChD,uBAAK,KAAK,8CAAgD;;AAE5D,iCAAiB;AACjB;cACF,KAAK;AACH,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;;;AAEhD,wBAAQ,KAAK;AACb,iCAAiB;AACjB;cACF,KAAK;AACH,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,MAAM,MAAM,KAAK;;AAGhC,sBAAM;cACR;AACE,iCAAiB;;;AAGvB,aAAK,iBAAiB;MACxB;MAEQ,wBAAqB;AAK3B,YAAI,EAAE,GAAG,MAAK,IAAK;AACnB,cAAM,EAAE,OAAO,aAAa,QAAO,IAAK;AACxC,YAAI,WAAW;AAEf;AAEA,iBAAO,MAAM;AACX,kBAAM,OAAO,KAAK,QAAO;AACzB,oBAAQ,MAAM;cACZ,KAAK,MAAM;AACT,qBAAK,QAAQ;AACb,oBAAI,YAAY,QAAW;AACzB,wBAAM,EAAE,KAAI,IAAK;AACjB,wBAAM,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;AAC3C,sBAAI,KAAK,WAAW,GAAG;AACrB,4BAAQ,OAAO,KAAK;AACpB,yBAAK,OAAO;6BAEL,MAAM,WAAW,GAAG;AAC3B,4BAAQ,KAAK;;;AAIjB,sBAAM;;cAER,KAAK;AACH,qBAAK,QAAQ;AACb,qBAAK,oBAAoB;AACzB,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,MAAM,MAAM,OAAO,KAAK,KAAK;;AAE5C,2BAAW;AAEX,sBAAM;cACR,KAAK;AACH,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,GAAG,MAAM,MAAM,OAAO,KAAK,KAAK,CAAC;;;AAEhD,wBAAQ,KAAK;AACb;cACF,KAAK;AACH,oBAAI,YAAY,QAAW;AACzB,uBAAK,QAAQ,MAAM,MAAM,KAAK;;AAGhC,sBAAM;cACR;AACE,oBAAI,CAAC,IAAI,IAAI,GAAG;AACd,6BAAW;;;;AAKnB,YAAI,CAAC,UAAU;AACb;;AAMF,YAAI,CAAC,KAAK,WAAW,CAAC,KAAK,wBAAwB;AACjD,eAAK,KAAK,iCAAiC;AAC3C,eAAK,yBAAyB;;AAGhC,YAAI,KAAK,cAAc,CAAC,KAAK,uBAAuB;AAClD,eAAK,KAAK,iCAAiC;AAC3C,eAAK,wBAAwB;;MAEjC;MAEQ,aAAa,MAAc,OAAa;;AAC9C,cAAM,EAAE,QAAQ,MAAK,IAAK,KAAK,MAAM,IAAI;AACzC,cAAM,OAAO,EAAE,MAAM,QAAQ,OAAO,MAAK;AACzC,aAAK,WAAW,KAAK,IAAI;AAEzB,SAAA,KAAA,KAAK,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAAA,KAArB,MAAwB,IAAmC;AAC3D,YAAI,WAAW,SAAS;AACtB,gBAAM,UAAU,MAAM,KAAI;AAC1B,cAAI,KAAK,sBAAsB,SAAS,YAAY,IAAI;AACtD,iBAAK,KAAK,+CAA+C;;AAE3D,eAAK,MAAO,KAAK,IAAI;AACrB,sBAAY,MAAM,OAAO,OAAO;mBAEzB,SAAS,SAAS;AACzB,gBAAM,UAAU,MAAM,KAAI;AAC1B,eAAK,MAAO,EAAE,IAAI;AAClB,sBAAY,MAAM,IAAI,OAAO;;MAEjC;MAEQ,gBAAgB,MAAc,OAAa;;AACjD,cAAM,OAAO,EAAE,MAAM,MAAK;AAC1B,aAAK,WAAW,KAAK,IAAI;AAEzB,SAAA,KAAA,KAAK,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAAA,KAArB,MAAwB,IAAmC;MAC7D;;;;;;;MAQQ,MAAG;;AACT,YAAI,CAAC,KAAK,SAAS;AACjB,eAAK,KAAK,uCAAuC;;AAEnD,cAAM,EAAE,KAAI,IAAK;AACjB,eAAO,KAAK,SAAS,GAAG;AACtB,gBAAM,MAAM,KAAK,IAAG;AACpB,eAAK,KAAK,iBAAiB,IAAI,IAAI,EAAE;;AAEvC,YAAK,KAAK,UAAU,WAAa,KAAK,UAAU,QAAS;AACvD,eAAK,KAAK,iBAAiB;;AAE7B,cAAM,EAAE,KAAI,IAAK;AACjB,YAAI,KAAK,WAAW,GAAG;AAErB,WAAA,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAA,KAAhB,MAAmB,IAAI;AACvB,eAAK,OAAO;;AAEd,aAAK,UAAU;AAEf,SAAA,KAAA,KAAK,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAA,KAAf,IAAI;AACJ,aAAK,MAAK;AACV,eAAO;MACT;;;;;;;;MASA,QAAQ,QAAc;;AACpB,YAAI,MAAM,KAAK,MAAO,MAAM;AAC5B,YAAI,QAAQ,QAAW;AACrB,iBAAO;;AAGT,cAAM,EAAE,KAAI,IAAK;AACjB,iBAAS,QAAQ,KAAK,SAAS,GAAG,SAAS,GAAG,SAAS;AACrD,gBAAM,KAAK,KAAK,EAAG,GAAI,MAAM;AAC7B,cAAI,QAAQ,QAAW;AACrB,mBAAO;;;AAIX,cAAM,KAAK,GAAG,MAAM;AACpB,YAAI,QAAQ,QAAW;AACrB,iBAAO;;AAGT,gBAAA,MAAO,KAAA,KAAK,KAAI,mBAAa,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,IAAG,MAAM;MACxC;;;;;;;;MASQ,MAAM,MAAY;AAExB,cAAM,QAAQ,KAAK,QAAQ,GAAG;AAC9B,YAAI,UAAU,IAAI;AAChB,iBAAO,EAAE,QAAQ,IAAI,OAAO,KAAI;;AAGlC,cAAM,QAAQ,KAAK,MAAM,QAAQ,CAAC;AAClC,cAAM,SAAS,KAAK,MAAM,GAAG,KAAK;AAClC,YAAI,WAAW,MAAM,UAAU,MAAM,MAAM,SAAS,GAAG,GAAG;AACxD,eAAK,KAAK,mBAAmB,IAAI,GAAG;;AAGtC,eAAO,EAAE,QAAQ,MAAK;MACxB;MAEQ,mBAAgB;;AACtB,cAAM,EAAE,WAAU,IAAK;AACvB,cAAM,MAAM,KAAK;AAEjB;AAEE,gBAAM,EAAE,QAAQ,MAAK,IAAK,KAAK,MAAM,IAAI,IAAI;AAC7C,cAAI,SAAS;AACb,cAAI,QAAQ;AACZ,gBAAM,MAAM,IAAI,OAAG,KAAG,KAAK,QAAQ,MAAM,OAAC,QAAA,OAAA,SAAA,KAAI;AAE9C,cAAI,WAAW,IAAI;AACjB,gBAAI,WAAW,SAAS;AACtB,mBAAK,KAAK,sCAAwC;;AAGpD,gBAAI,QAAQ,IAAI;AACd,mBAAK,KAAK,6BAA6B,KAAK,UAAU,MAAM,CAAC,GAAG;AAChE,kBAAI,MAAM;;;;AAKhB,YAAI,WAAW,WAAW,GAAG;AAC3B;;AAGF,cAAM,EAAE,WAAU,IAAK;AACvB,cAAM,OAAO,oBAAI,IAAG;AAGpB,mBAAW,QAAQ,YAA4C;AAC7D,gBAAM,EAAE,MAAM,QAAQ,MAAK,IAAK;AAChC,cAAI;AACJ,cAAI;AACJ,cAAI,WAAW,IAAI;AACjB,kBAAM,SAAS,UAAU,kBAAkB;AAC3C,qBAAS;iBAEN;AACH,kBAAM,KAAK,QAAQ,MAAM;AAGzB,gBAAI,QAAQ,QAAW;AACrB,mBAAK,KAAK,6BAA6B,KAAK,UAAU,MAAM,CAAC,GAAG;AAChE,oBAAM;;AAER,qBAAS,IAAI,GAAG,IAAI,KAAK;;AAG3B,cAAI,KAAK,IAAI,MAAM,GAAG;AACpB,iBAAK,KAAK,wBAAwB,MAAM,GAAG;;AAE7C,eAAK,IAAI,MAAM;AAEf,eAAK,MAAM;AACX,qBAAW,IAAI,IAAI;;AAGrB,aAAK,aAAa,CAAA;MACpB;MAEQ,sBAAmB;AACzB,cAAM,EAAE,WAAU,IAAK;AAEvB,cAAM,aAAa,KAAK,IAAK;AAC7B,mBAAW,EAAE,MAAM,MAAK,KAAM,YAAY;AACxC,cAAI,WAAW,IAAI,MAAM,QAAW;AAClC,iBAAK,KAAK,wBAAwB,IAAI,GAAG;;AAE3C,qBAAW,IAAI,IAAI;;AAGrB,aAAK,aAAa,CAAA;MACpB;;;;;;MAOQ,UAAO;;AACb,aAAK,eAAc;AAEnB,cAAM,EAAE,KAAI,IAAK;AACjB,cAAM,MAAM,KAAK;AACjB,YAAI,gBAAgB;AAKpB,SAAA,KAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAnB,MAAsB,GAAuB;AAC7C,aAAK,KAAK,GAAG;AACb,aAAK,QAAQ;AACb,aAAK,OAAO;MACd;;;;;;MAOQ,qBAAkB;;AACxB,aAAK,eAAc;AAEnB,cAAM,EAAE,KAAI,IAAK;AACjB,cAAM,MAAM,KAAK;AACjB,YAAI,gBAAgB;AAKpB,SAAA,KAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAnB,MAAsB,GAAuB;AAE7C,SAAA,KAAA,KAAK,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAA,KAApB,MAAuB,GAAuB;AAC9C,cAAM,MAAM,KAAK,OAAG,KAAG,KAAK,KAAK,SAAS,CAAC,OAAC,QAAA,OAAA,SAAA,KAAI;AAChD,YAAI,QAAQ,MAAM;AAChB,eAAK,aAAa;;AAEpB,aAAK,QAAQ;AACb,aAAK,OAAO;MACd;;;;;;MAOQ,WAAQ;AACd,cAAM,EAAE,MAAM,KAAI,IAAK;AAIvB,aAAK,QAAQ;AACb,aAAK,OAAO;AAEZ,YAAI,SAAS,IAAI;AACf,eAAK,KAAK,wBAAwB;AAClC,eAAK,QAAQ;AACb;;AAGF,cAAM,UAAU,KAAK;AACrB,YAAI,IAAI,KAAK;AACb,eAAO,MAAM,GAAG;AACd,gBAAM,MAAM,KAAK,MAAM,KAAK,IAAG;AAC/B,eAAK,QAAQ,IAAI;AAEjB,sBAAO,QAAP,YAAO,SAAA,SAAP,QAAU,GAAuB;AACjC,cAAI,IAAI,SAAS,MAAM;AACrB;;AAEF,eAAK,KAAK,uBAAuB;;AAGnC,YAAI,MAAM,GAAG;AACX,eAAK,aAAa;mBAEX,IAAI,GAAG;AACd,eAAK,KAAK,0BAA0B,IAAI,GAAG;AAC3C,eAAK,QAAQ,KAAK,IAAI;;MAE1B;;;;;;;;MASQ,YAAY,QAAc;AAGhC,YAAI,OAAO,CAAC,MAAM,KAAK;AACrB,gBAAM,UAAU,KAAK,SAAS,MAAM;AACpC,cAAI,YAAY,QAAW;AACzB,mBAAO;;AAGT,eAAK,KAAK,KAAK,OAAO,MAAM,IAAI,sBAC9B,sCAAsC;AACxC,iBAAO,IAAI,MAAM;;AAGnB,YAAI,MAAM;AACV,YAAI,OAAO,CAAC,MAAM,OAAO,iBAAiB,KAAK,MAAM,GAAG;AACtD,gBAAM,SAAS,OAAO,MAAM,CAAC,GAAG,EAAE;mBAE3B,YAAY,KAAK,MAAM,GAAG;AACjC,gBAAM,SAAS,OAAO,MAAM,CAAC,GAAG,EAAE;;AAIpC,YAAI,CAAC,KAAK,OAAO,GAAG,GAAG;AACrB,eAAK,KAAK,6BAA6B;AACvC,iBAAO,IAAI,MAAM;;AAGnB,eAAO,OAAO,cAAc,GAAG;MACjC;;AAhmEF,YAAA,cAAA;;;;;AC1jBA;AAAA;AACA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,MAAM,OAAO;AAC3B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAGA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,MAAM,WAAW;AAC/B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,YAAY;AAClC,YAAM,MAAM,EAAE,MAAM,cAAc;AAClC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,MAAM,SAAS;AAC7B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AACnD,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AACnD,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AAEnD,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,MAAM,SAAS;AAE7B,UAAI,QAAQ,YAAY;AAAE,YAAI,aAAa,QAAQ;AAAA,MAAW;AAE9D,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,MAAM,WAAW;AAC/B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AACrD,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AACrD,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AAErD,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,MAAM,SAAS;AAC7B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,MAAM,OAAO;AAE3B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,MAAM,WAAW;AAE/B,UAAI,QAAQ,MAAM;AAAE,YAAI,QAAQ,QAAQ;AAAA,MAAK;AAC7C,UAAI,QAAQ,IAAI;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAEtC,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,MAAM,WAAW;AAE/B,UAAI,QAAQ,IAAI;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAEtC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,MAAM,QAAQ;AAE5B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AACnD,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AACnD,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AACnD,QAAM,OAAO,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,IAAI;AAEnD,QAAM,SAAS,CAAC,YAAY;AAC1B,YAAM,MAAM,EAAE,MAAM,MAAM;AAE1B,UAAI,QAAQ,QAAQ;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAO;AAClD,UAAI,QAAQ,QAAQ;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAO;AAClD,UAAI,QAAQ,QAAQ;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAO;AAElD,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AACrD,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AACrD,QAAM,QAAQ,CAAC,aAAa,EAAE,MAAM,MAAM,OAAO,IAAI;AAErD,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrIA;AAAA;AAAA,QAAM,SAAU,IAAI;AAEpB,WAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACJA;AAAA;AAAA,QAAM,QAAQ;AAEd,QAAM;AAAA,MACJ;AAAA,MAAS;AAAA,MAAa;AAAA,MACtB;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAClB;AAAA,MAAW;AAAA,MAAa;AAAA,MACxB;AAAA,MAAO;AAAA,MAAO;AAAA,MAAW;AAAA,MACzB;AAAA,MAAa;AAAA,MAAa;AAAA,MAC1B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MACxB;AAAA,MAAO;AAAA,MAAO;AAAA,IAChB,IAAI;AACJ,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAI,UAAU;AACd,QAAI,gBAAgB;AAGpB,QAAM,aAAa,CAAC;AACpB,QAAM,eAAe,CAAC;AACtB,QAAM,cAAc,CAAC;AACrB,QAAM,cAAc,CAAC;AAErB,QAAI,SAAS;AAEb,QAAM,SAAS,CAAC,YAAY;AAE1B,YAAM,MAAM,EAAE,MAAM,OAAO,MAAM,MAAM,OAAO,EAAI;AAElD,UAAI,QAAQ,MAAM;AAAE,YAAI,OAAO,QAAQ,KAAK,YAAY;AAAA,MAAE;AAE1D,cAAQ,IAAI,KAAK,YAAY,GAAG;AAAA,QAC9B,KAAK;AACH,cAAI,QAAQ;AACZ;AAAA,QACF,KAAK;AACH,cAAI,QAAQ,SAAS;AACrB;AAAA,QACF,KAAK;AACH,cAAI,QAAQ;AACZ;AAAA,QACF,KAAK;AACH,cAAI,QAAQ;AACZ;AAAA,QACF,KAAK;AAAA,QACL;AACE;AAAA,MACJ;AAEA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,MAAM,UAAU,IAAI,QAAQ,WAAW,MAAM,GAAG;AAE9D,UAAI,QAAQ,IAAI;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAEtC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,KAAK,UAAU;AAEtC,YAAM,SAAS,IAAI,MAAM,YAAY;AAErC,aAAO,GAAG,SAAS,CAAC,MAAM;AACxB,gBAAQ,IAAI,wBAAwB,EAAE,IAAI,YAAY,EAAE,MAAM,oBAAoB,EAAE,CAAC,GAAG;AAAA,MAC1F,CAAC;AAED,aAAO,GAAG,WAAW,CAAC,SAAS;AAC7B,cAAM,SAAS;AAAA,UACb,KAAK;AAAA,UACL,QAAQ,CAACC,UAAS;AAChB,kBAAM,MAAM,UAAUA,KAAI;AAC1B,gBAAI,kBAAkB;AAAG,8BAAgB;AACzC,mBAAO;AAAA,UACT;AAAA;AAAA,UACA,MAAM;AAAA,UACN,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,UAAU,CAACA,UAAS;AAClB,kBAAM,MAAM,YAAYA,KAAI;AAC5B,gBAAI,kBAAkB;AAAG,8BAAgB;AACzC,mBAAO;AAAA,UACT;AAAA,UACA,SAAS,CAACA,UAAS;AACjB,gBAAI,kBAAkB;AAAG,8BAAgB;AAAA,UAC3C;AAAA,UACA,eAAe,CAACA,UAAS;AACvB,gBAAI,kBAAkB;AAAG,8BAAgB;AAAA,UAC3C;AAAA,UACA,UAAU,CAACA,UAAS;AAClB,kBAAM,MAAM,YAAYA,KAAI;AAC5B,gBAAI,kBAAkB;AAAG,8BAAgB;AACzC,mBAAO;AAAA,UACT;AAAA,UACA,aAAa;AAAA,UACb,QAAQ;AAAA,UACR,IAAI;AAAA,UACJ,GAAG;AAAA,UACH,IAAI;AAAA,UACJ,GAAG;AAAA,UACH,IAAI;AAAA,UACJ,GAAG;AAAA,UACH,UAAU;AAAA,UACV,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,WAAW,MAAM;AAAA;AAAA,UACjB,WAAW,MAAM,QAAQ,IAAI,qCAAqC,KAAK,IAAI,EAAE;AAAA,QAC/E;AAEA,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,cAAM,MAAM,OAAO,WAAW,IAAI,OAAO,WAAW,EAAE,KAAK,YAAY,EAAE,WAAW,CAAC,IAAI;AAEzF,YAAI,KAAK;AACP,kBAAQ,eAAe;AAAA,YACrB,KAAK;AACH,kBAAI,aAAa,KAAK;AACpB,2BAAW,KAAK,GAAG;AAAA,cACrB;AACA;AAAA,YACF,KAAK;AACH,kBAAI,WAAW,SAAS,GAAG;AACzB,sBAAM,QAAQ,WAAW,IAAI;AAE7B,oBAAI,aAAa,OAAO;AACtB,wBAAM,QAAQ,KAAK,GAAG;AAAA,gBACxB;AACA,2BAAW,KAAK,KAAK;AAErB,oBAAI,aAAa,KAAK;AACpB,6BAAW,KAAK,GAAG;AAAA,gBACrB;AAAA,cACF;AACA;AAAA,YACF,KAAK;AACH,kBAAI,IAAI,SAAS,YAAY;AAC3B,6BAAa,KAAK,GAAG;AAAA,cACvB,OAAO;AACL,oBAAI,aAAa,SAAS,GAAG;AAC3B,wBAAM,QAAQ,aAAa,IAAI;AAE/B,sBAAI,aAAa,OAAO;AACtB,0BAAM,QAAQ,KAAK,GAAG;AAAA,kBACxB;AACA,+BAAa,KAAK,KAAK;AAEvB,sBAAI,aAAa,KAAK;AACpB,iCAAa,KAAK,GAAG;AAAA,kBACvB;AAAA,gBACF;AAAA,cACF;AACA;AAAA,YACF,KAAK;AACH;AAAA,YACF,KAAK;AACH;AAAA,YACF,KAAK;AACH;AAAA,YACF;AACE,sBAAQ,IAAI,iCAAiC;AAC7C;AAAA,UACJ;AACA,oBAAU;AAAA,QACZ;AAAA,MACF,CAAC;AAED,aAAO,GAAG,YAAY,CAAC,SAAS;AAC9B,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,gBAAQ,aAAa;AAAA,UAEnB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH;AAAA,UACF,KAAK;AACH,gBAAI,kBAAkB,GAAG;AAAE,8BAAgB;AAAA,YAAE;AAC7C;AAAA,UACF,KAAK;AACH,gBAAI,kBAAkB,GAAG;AAAE,8BAAgB;AAAA,YAAE;AAC7C;AAAA,UACF,KAAK;AACH,gBAAI,kBAAkB,GAAG;AAAE,8BAAgB;AAAA,YAAE;AAC7C;AAAA,UACF;AACE;AAAA,QACJ;AAEA,YAAI,MAAM;AACV,gBAAQ,eAAe;AAAA,UACrB,KAAK;AAAA,UACL,KAAK;AACH,gBAAI,WAAW,SAAS,GAAG;AACzB,oBAAM,WAAW,IAAI;AACrB,kBAAI,IAAI,SAAS,UAAU;AACzB,gCAAgB;AAAA,cAClB;AAAA,YACF;AAEA,gBAAI,WAAW,WAAW,GAAG;AAC3B,uBAAS;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,gBAAI,aAAa,SAAS,GAAG;AAC3B,oBAAM,aAAa,IAAI;AACvB,kBAAI,IAAI,SAAS,YAAY;AAC3B,6BAAa,KAAK,GAAG;AACrB,gCAAgB;AAAA,cAClB;AAAA,YACF;AACA;AAAA,UACF,KAAK;AACH,4BAAgB;AAChB;AAAA,UACF,KAAK;AACH,4BAAgB;AAChB;AAAA,UACF,KAAK;AACH,4BAAgB;AAChB;AAAA,UACF;AACE;AAAA,QACJ;AAAA,MACF,CAAC;AAED,aAAO,GAAG,QAAQ,CAAC,UAAU;AAC3B,YAAI,UAAU,MAAM;AAClB,kBAAQ,MAAM,KAAK;AACnB,cAAI,MAAM,SAAS,KAAK,WAAW,kBAAkB,GAAG;AACtD,oBAAQ,QAAQ;AAChB,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,GAAG,OAAO,MAAM;AAAA,MAEvB,CAAC;AAGD,aAAO,MAAM,GAAG,EAAE,MAAM;AAAA,IAC1B;AAEA,QAAM,QAAQ,CAAC,KAAK,UAAU;AAC5B,sBAAgB,KAAK,KAAK;AAC1B,aAAO,EAAE,QAAQ,cAAc,aAAa,YAAY;AAAA,IAC1D;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC1RjB;AAAA;AAAA,QAAM,eAAe;AACrB,QAAM,QAAQ;AAEd,QAAM,YAAY,CAAC,SAAS,QAAQ;AAClC,YAAM,WAAW;AAAA,QACf,OAAO,oBAAuB;AAAA,MAChC;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,YAAM,EAAE,SAAS,OAAO,aAAa,SAAS,IAAI;AAElD,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAG3E,YAAM,EAAE,QAAQ,cAAc,aAAa,YAAY,IAAI,MAAM,KAAK,KAAK;AAG3E,UAAI,OAAO,cACP;AAAA,sDACgD,OAAO;AAAA,WAClD,oBAAI,KAAK,CAAC;AAAA,aACR,QAAQ;AAAA;AAAA,IAGf;AAEJ,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AAEA,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,cAAQ,OAAO,QAAQ,EAAE,cAAc,aAAa,YAAY,CAAC;AAEjE,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO;AAAA,IACT;AAKA,QAAM,SAAS,CAAC,KAAK,SAAS;AAC5B,UAAI,IAAI,SAAS,SAAU,CAAC,IAAI;AAAU,cAAM,IAAI,MAAM,+BAA+B;AAEzF,UAAI,OAAO;AAGX,YAAM,UAAU,IAAI;AACpB,YAAM,YAAY,KAAK;AAIvB,YAAM,mBAAmB,CAAC,QAAQ,UAAU;AAC1C,gBAAQ,OAAO,MAAM;AAAA,UACnB,KAAK;AACH,oBAAQ,aAAa,QAAQ,OAAO,MAAM,EAAE,aAAa,OAAO,OAAO,IAAI,MAAM,CAAC;AAClF;AAAA,UACF,KAAK;AACH;AAAA,UACF,KAAK;AACH;AAAA,UACF;AACE,oBAAQ,IAAI,mCAAmC,OAAO,IAAI;AAC1D;AAAA,QACJ;AAAA,MACF;AAGA,aAAO,iBAAiB,QAAQ,MAAM;AAAA,gBACxB,UAAU,MAAM;AAAA,gBAChB,IAAI,KAAK,gBAAgB,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ/C,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,YAAI,IAAI,SAAS,UAAU;AACzB,kBAAQ,8BAA8B,IAAI,EAAE;AAAA;AAAA,QAC9C;AAAA,MACF;AAEA,cAAQ;AAER,cAAQ,QAAQ,gBAAgB;AAEhC,cAAQ;AAER,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC9FjB;AAAA;AACA,QAAM,eAAe;AAErB,QAAM,QAAQ;AAEd,QAAM,cAAc,CAAC,SAAS,QAAQ;AACpC,YAAM,WAAW;AAAA,QACf,OAAO,oBAAuB;AAAA,MAChC;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,YAAM,EAAE,MAAM,IAAI;AAGlB,YAAM,EAAE,QAAQ,cAAc,aAAa,YAAY,IAAI,MAAM,KAAK,KAAK;AAC3E,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AAEA,aAAO,UAAU,QAAQ,EAAE,cAAc,aAAa,YAAY,CAAC;AAAA,IACrE;AAEA,QAAM,YAAY,CAAC,KAAK,SAAS;AAC/B,YAAM,UAAU,IAAI,QAAQ,OAAO,CAAC,MAAM,EAAE,SAAS,QAAQ;AAC7D,aAAO,QAAQ,IAAI,CAAC,QAAQ,UAAU,aAAa,QAAQ,OAAO,MAAM,EAAE,KAAK,aAAa,KAAK,CAAC,CAAC;AAAA,IACrG;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC3BjB,IAAAC,eAAA;AAAA;AAwBA,QAAM,UAAU,mBAA2B;AAC3C,QAAM,YAAY;AAClB,QAAM,cAAc;AAepB,QAAM,cAAc,CAAC,SAAS,UAAU;AACtC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,QAAQ;AAAA,QACR;AAAA,QACA,aAAa;AAAA,MACf;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,aAAO,QAAQ,WAAW,WAAW,UAAU,SAAS,KAAK,IAAI,YAAY,SAAS,KAAK;AAAA,IAC7F;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC1DA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,mBAAmB;AAAA,MACrB;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;ACrCA;AAAA;AAaA,QAAM,SAAS;AAAA,MACb,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MACjD,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAAG,CAAC,GAAG,MAAM;AAAA,MAC9D,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACrD,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACrD,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACrD,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACzB,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACrD,CAAC,IAAI,MAAM;AAAA,MACX,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACzB,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACzB,CAAC,IAAI,MAAM;AAAA,MACX,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACnE,CAAC,IAAI,MAAM;AAAA,MACX,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MAAG,CAAC,IAAI,MAAM;AAAA,MACnE,CAAC,IAAI,MAAM;AAAA,MACX,CAAC,KAAK,MAAM;AAAA,MACZ,CAAC,KAAK,MAAM;AAAA,MACZ,CAAC,KAAK,MAAM;AAAA,MACZ,CAAC,KAAK,MAAM;AAAA,IACd;AAEA,QAAM,SAAS,IAAI,IAAI,MAAM;AAE7B,QAAM,SAAS,CAAC,UAAU,OAAO,IAAI,KAAK;AAK1C,QAAM,eAAe;AAAA,MACnB,CAAC,GAAG,MAAM;AAAA,MACV,CAAC,GAAG,QAAQ;AAAA,MACZ,CAAC,GAAG,MAAM;AAAA,MACV,CAAC,GAAG,OAAO;AAAA,MACX,CAAC,GAAG,aAAa;AAAA,MACjB,CAAC,GAAG,aAAa;AAAA,MACjB,CAAC,GAAG,QAAQ;AAAA,MACZ,CAAC,GAAG,YAAY;AAAA,MAChB,CAAC,GAAG,aAAa;AAAA,MACjB,CAAC,GAAG,MAAM;AAAA,MACV,CAAC,IAAI,OAAO;AAAA,MACZ,CAAC,IAAI,WAAW;AAAA,MAChB,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,SAAS;AAAA,MACd,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,aAAa;AAAA,MAClB,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,YAAY;AAAA,MACjB,CAAC,IAAI,SAAS;AAAA,IAChB;AAEA,QAAM,UAAU;AAChB,QAAM,UAAU;AAEhB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC1EA,IAAAC,0BAAA;AAAA;AAIA,QAAM,aAAa;AAAA,MACjB,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA;AAAA,MAEb,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,KAAK,GAAG,GAAG,GAAG;AAAA,MACf,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,IAAI,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA,MACjB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,GAAG,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,KAAK,KAAK,IAAI,GAAG;AAAA,MAClB,CAAC,IAAI,KAAK,GAAG,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,IAAI,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,MACf,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,KAAK,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,KAAK,KAAK,GAAG;AAAA,MAClB,CAAC,GAAG,IAAI,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,IAAI,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA;AAAA,MAEf,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,KAAK,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,KAAK,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,KAAK,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,MACjB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA,MAEjB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA;AAAA,MAEhB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,KAAK,GAAG;AAAA,MAClB,CAAC,KAAK,GAAG,IAAI,GAAG;AAAA,MAChB,CAAC,KAAK,IAAI,IAAI,GAAG;AAAA,MACjB,CAAC,IAAI,GAAG,IAAI,GAAG;AAAA,MACf,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,IAAI,GAAG,GAAG,GAAG;AAAA,MACd,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,MAChB,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,MAEb,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,MACnB,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,IACrB;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjSjB;AAAA;AAaC,KAAC,SAAU,KAAK;AACf,UAAI,SAAS,SAAU,SAAS;AAAE,eAAO,IAAI,UAAU,OAAO;AAAA,MAAE;AAEhE,UAAI,SAAS;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAuBA,eAAS,UAAW,SAAS;AAC3B,cAAM,SAAS;AACf,eAAO,UAAU,WAAW,CAAC;AAE7B,eAAO,gBAAiB,OAAO,QAAQ,UAAU;AACjD,YAAI,OAAO,eAAe;AACxB,iBAAO,OAAO,OAAO,SAAS,OAAO,IAAI;AAAA,QAC3C;AAAA,MACF;AAEA,gBAAU,YAAY;AAAA;AAAA;AAAA,QAGpB,IAAI,SAAU,OAAO,UAAU;AAG7B,gBAAM,SAAS;AACf,iBAAO,OAAO,KAAK,IAAI;AAAA,QACzB;AAAA;AAAA,QAGA,QAAQ,SAAU,OAAO,UAAU;AACjC,cAAI,KAAK,cAAc,QAAW;AAChC,iBAAK,YAAY,oBAAI,IAAI;AAAA,UAC3B;AACA,eAAK,UAAU,IAAI,OAAO,QAAQ;AAAA,QACpC;AAAA;AAAA,QAGA,OAAO,SAAU,MAAM;AACrB,gBAAM,SAAS;AACf,gBAAM,QAAQ,IAAI;AAClB,iBAAO;AAAA,QACT;AAAA;AAAA,QAGA,OAAO,WAAY;AACjB,gBAAM,SAAS;AACf,iBAAO,WAAW;AAClB,iBAAO;AAAA,QACT;AAAA,MACF;AAKA,YAAM,YAAY,CAAC,WAAW,UAAU,QAAQ,WAAW,OAAO,IAAI;AAKtE,YAAM,YAAY,CAAC,QAAQ,OAAO,UAAU;AAG1C,YAAI,OAAO,cAAc,QAAW;AAClC,gBAAM,WAAW,OAAO,UAAU,IAAI,KAAK;AAC3C,cAAI,aAAa,QAAW;AAC1B,qBAAS,QAAQ,OAAO,KAAK;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAKA,YAAM,YAAY,CAAC,QAAQ,OAAO;AAEhC,YAAI,OAAO,eAAe;AACxB,gBAAM;AAAA,QACJ,OAAO,IAAI;AAAA,UACT,OAAO,MAAM;AAAA,QACf,OAAO,CAAC;AAAA,QACZ;AACA,aAAK,IAAI,MAAM,EAAE;AACjB,eAAO,QAAQ;AACf,eAAO,UAAU,QAAQ,WAAW,EAAE;AAAA,MACxC;AAKA,YAAM,UAAU,CAAC,WAAW,UAAU,QAAQ,SAAS,OAAO,IAAI;AAElE,YAAM,YAAY,CAAC,QAAQ,OAAO,SAAS;AACzC,cAAM,YAAY,MAAM,SAAS;AACjC,eAAO,SAAS,KAAK,OAAO,SAAS,EAAE,QAAQ,IAAI;AACnD,eAAO;AAAA,MACT;AAKA,YAAM,QAAQ,CAAC,QAAQ,SAAS;AAE9B,YAAI,OAAO,OAAO;AAChB,gBAAM,OAAO;AAAA,QACf;AACA,YAAI,OAAO,UAAU;AACnB,iBAAO,UAAU,QAAQ,0BAA0B;AAAA,QACrD;AAEA,kBAAU,MAAM;AAEhB,YAAI,SAAS,MAAM;AACjB,iBAAO,QAAQ,MAAM;AAAA,QACvB;AAGA,eAAO,QAAQ;AACf,eAAO,QAAQ;AACf,eAAO,QAAQ;AAEf,eAAO,WAAW;AAClB,eAAO,OAAO;AACd,eAAO,SAAS;AAGhB,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,IAAI;AACR,eAAO,OAAO,UAAU,MAAM;AAC5B,cAAI,OAAO,MAAM,GAAG;AACpB,cAAI,CAAC,GAAG;AACN;AAAA,UACF;AACA,cAAI,OAAO,eAAe;AACxB,mBAAO;AACP,gBAAI,MAAM,MAAM;AACd,qBAAO;AACP,qBAAO,SAAS;AAAA,YAClB,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,cAAI,MAAM,MAAM;AACd,sBAAU,QAAQ,CAAC;AACnB,gBAAI;AAAA,UACN,OAAO;AACL,iBAAK;AAAA,UACP;AAAA,QACF;AAEA,gBAAQ,MAAM;AACd,eAAO;AAAA,MACT;AAMA,YAAM,YAAY,CAAC,QAAQ,SAAS;AAClC,eAAO,KAAK,KAAK;AACjB,YAAI,OAAO,UAAU,MAAM;AACzB,sBAAY,QAAQ,IAAI;AACxB,iBAAO,QAAQ;AAAA,QACjB,OAAO;AACL,sBAAY,QAAQ,IAAI;AAAA,QAC1B;AAEA,YAAI,OAAO,UAAU,QAAQ,OAAO,UAAU,MAAM;AAElD,oBAAU,QAAQ,OAAO,OAAO,OAAO,KAAK;AAE5C,iBAAO,QAAQ;AACf,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF;AAMA,YAAM,cAAc,CAAC,QAAQ,SAAS;AAEpC,cAAM,OAAO,SAAS,IAAI;AAC1B,YAAI,MAAM,IAAI,GAAG;AACf,oBAAU,QAAQ,qBAAqB;AACvC,iBAAO,QAAQ;AAAA,QACjB,OAAO;AACL,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF;AAMA,YAAM,cAAc,CAAC,QAAQ,SAAS;AACpC,YAAI,OAAO,QAAQ,QAAQ;AAEzB,iBAAO,QAAQ;AAAA,QACjB,OAAO;AACL,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF;AAKA,YAAM,SAAS,CAAC,MAAM,MAAM;AAC1B,YAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,iBAAO,KAAK,OAAO,CAAC;AAAA,QACtB;AACA,eAAO;AAAA,MACT;AAAA,IACF,GAAG,OAAO,YAAY,cAAc,QAAK,MAAM,CAAC,IAAI,OAAO;AAAA;AAAA;;;ACzP3D,IAAAC,mBAAA;AAAA;AASA,QAAM,EAAE,SAAS,QAAQ,IAAI;AAK7B,QAAM,YAAY,CAAC,KAAK,WAAW;AACjC,YAAM,QAAQ,IAAI,QAAQ;AAC1B,iBAAW,SAAS,QAAQ;AAC1B,YAAI,MAAM,SAAS,OAAO;AACxB,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAMA,QAAM,iBAAiB,CAAC,KAAK,WAAW;AACtC,UAAI,KAAK,IAAI,QAAQ;AACrB,UAAI,OAAO,SAAS;AAElB,aAAK;AACL,cAAM,QAAQ,UAAU,KAAK,MAAM;AACnC,YAAI,UAAU,MAAM;AAClB,eAAK,MAAM,QAAQ;AAAA,QACrB;AAAA,MACF,WACI,OAAO,SAAS;AAAA,MAEpB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,MAAM,CAAC,KAAKC,SAAQ;AACxB,YAAM,SAAS,MAAMA;AACrB,aAAO,KAAK,MAAM,UAAU,IAAI,SAAS,SAASA,IAAG;AAAA,IACvD;AAKA,QAAM,WAAW,CAAC,OAAO,eAAe;AACtC,UAAI,QAAQ,GAAG;AAAE,eAAO;AAAA,MAAK;AAE7B,cAAQ,IAAI,OAAO,WAAW,MAAM;AACpC,YAAM,QAAQ,WAAW,KAAK;AAC9B,YAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,GAAG;AAC5E,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACjEA;AAAA;AAQA,QAAM,EAAE,YAAY,OAAO,WAAW,IAAI;AAC1C,QAAM,MAAM;AAEZ,QAAM,EAAE,UAAU,eAAe,IAAI;AAKrC,QAAM,qBAAqB,CAAC,KAAK,QAAQ,YAAY;AACnD,YAAM,WAAW,CAAC;AAElB,eAAS,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AACjE,eAAS,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AACjE,eAAS,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AACjE,UAAI,IAAI,MAAM;AACZ,YAAI,SAAS;AACb,YAAI,IAAI,SAAS,IAAI,MAAM;AAAE,mBAAS;AAAA,QAAK;AAC3C,YAAI,IAAI,SAAS,IAAI,MAAM;AAAE,mBAAS;AAAA,QAAK;AAC3C,YAAI,IAAI,SAAS,IAAI,MAAM;AAAE,mBAAS;AAAA,QAAK;AAC3C,YAAI,QAAQ;AACV,mBAAS,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,QACnE;AAAA,MACF;AACA,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAE7C,YAAM,UAAU,WAAW,MAAM,OAAO,QAAQ;AAChD,UAAI;AAAO,gBAAQ,QAAQ;AAC3B,aAAO;AAAA,IACT;AAKA,QAAM,kBAAkB,CAAC,KAAK,QAAQ,YAAY;AAEhD,UAAI,IAAI,SAAS,IAAI,QAAQ,IAAI,SAAS,GAAG;AAC3C,cAAMC,MAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AACnD,cAAMC,MAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AACnD,eAAO,WAAW,KAAK,CAACD,KAAIC,GAAE,CAAC;AAAA,MACjC;AAEA,YAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAC7D,YAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAE7D,aAAO,WAAW,KAAK,CAAC,IAAI,EAAE,CAAC;AAAA,IACjC;AAKA,QAAM,oBAAoB,CAAC,QAAQ;AACjC,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAE9C,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,CAAC;AACf,WAAK,QAAQ,YAAY,QAAQ;AAC/B,cAAM,MAAM,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAAA,MAChE,YACK,QAAQ,YAAY,QAAQ;AAC/B,cAAM,MAAM,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAAA,MAChE,YACK,QAAQ,YAAY,QAAQ;AAC/B,cAAM,MAAM,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAE9D,cAAM,OAAO,IAAI;AACjB,cAAM,OAAO,IAAI;AACjB,cAAM,OAAO,IAAI;AACjB,cAAM,OAAO,IAAI;AAAA,MACnB,OAAO;AACL,cAAM,MAAM,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AACpD,cAAM,OAAO,IAAI;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAKA,QAAM,aAAa,CAAC,MAAM,IAAI,IAAI,SAAS;AACzC,UAAI,SAAS,GAAG;AAEd,eAAO,WAAW,MAAM,aAAa,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI;AAAA,MACvD,OAAO;AAEL,cAAM,SAAS,WAAW,MAAM,SAAS,IAAI;AAC7C,cAAM,OAAO,OAAO,OAAO,SAAS,CAAC;AACrC,cAAM,OAAO,MAAM,KAAK,WAAW,IAAI,EAAE;AACzC,cAAM,IAAI,MAAM,KAAK,SAAS,MAAM,IAAI;AACxC,cAAM,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI;AAC9C,cAAM,YAAa,OAAO;AAC1B,cAAM,QAAQ;AACd,cAAM,IAAI,KAAK,KAAK,IAAI,IAAI;AAE5B,cAAM,MAAM;AACZ,eAAO,WAAW,MAAM,UAAU,EAAE,UAAU,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,eAAe,GAAG,WAAsB,OAAc,UAAU,IAAI,GAAG,IAAI;AAAA,MACrJ;AACA,aAAO;AAAA,IACT;AAKA,QAAM,oBAAoB,CAAC,KAAK,QAAQ,YAAY;AAElD,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAG9C,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAGlB,UAAI,OAAO,WAAW,MAAM,OAAO;AACnC,YAAM,YAAa,QAAQ,YAAY;AACvC,UAAI,SAAS,MAAM,UAAU,SAAS,MAAM,UAAU,SAAS,MAAM,QAAQ;AAC3E,cAAM,QAAQ,CAAC,MAAM,OAAO,UAAU;AACpC,cAAI,OAAO;AACX,cAAI,QAAQ,GAAG;AACb,mBAAO,MAAM,QAAQ,CAAC;AAAA,UACxB;AACA,iBAAO,WAAW,MAAM,MAAM,KAAK,GAAG,MAAM,KAAK,GAAG,IAAI;AAAA,QAC1D,CAAC;AAAA,MACH,OAAO;AAEL,eAAO;AAAA,MACT;AACA,UAAI,YAAa,CAAC,KAAK,UAAW;AAEhC,eAAO,WAAW,MAAM,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,CAAC;AAC3D,eAAO,WAAW,MAAM,MAAM,IAAI;AAAA,MAEpC;AACA,aAAO;AAAA,IACT;AAKA,QAAM,iBAAiB,CAAC,KAAK,QAAQ,YAAY;AAE/C,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,OAAO,IAAI;AACjB,UAAI,OAAO,IAAI;AACf,aAAO,OAAO;AACd,UAAI,OAAO,IAAI;AACf,aAAO,OAAO;AAEd,YAAM,MAAM;AAGZ,UAAI,SAAS,GAAK;AAEhB,eAAO,WAAW,IAAI,EAAE,QAAQ,CAAC,MAAM,IAAI,GAAG,QAAQ,MAAM,YAAY,MAAM,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,MAC/G;AAEA,aAAO,WAAW,IAAI,EAAE,QAAQ,CAAC,MAAM,IAAI,GAAG,QAAQ,MAAM,YAAY,MAAM,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,IAC/G;AAKA,QAAM,oBAAoB,CAAC,KAAK,QAAQ,YAAY;AAElD,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,OAAO,IAAI;AAGjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAE7C,YAAM,MAAM;AAGZ,UAAI,SAAS,GAAK;AAChB,cAAMC,OAAM,WAAW,OAAO,EAAE,QAAQ,CAAC,MAAM,IAAI,GAAG,QAAQ,MAAM,UAAU,IAAI,CAAC;AACnF,YAAI;AAAO,UAAAA,KAAI,QAAQ;AACvB,eAAOA;AAAA,MACT;AAEA,YAAM,MAAM,WAAW,OAAO,EAAE,QAAQ,CAAC,MAAM,IAAI,GAAG,QAAQ,MAAM,UAAU,IAAI,CAAC;AACnF,YAAM,MAAM,IAAI,QAAQ,EAAE,QAAQ,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AAEhD,UAAI;AAAO,YAAI,QAAQ;AACvB,aAAO;AAAA,IACT;AAKA,QAAM,qBAAqB,CAAC,KAAK,QAAQ,YAAY;AAEnD,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,MAAM;AAGZ,UAAI,SAAS,KAAO,SAAS,GAAK;AAChC,cAAM,SAAS,MAAM,KAAK,WAAW,GAAG,CAAC;AACzC,cAAM,SAAS,MAAM,KAAK,WAAW,MAAM,IAAI;AAC/C,cAAM,KAAK,MAAM,KAAK,SAAS,QAAQ,MAAM;AAC7C,cAAM,KAAK,KAAK;AAChB,YAAI,QAAQ,KAAK,MAAM,MAAM,IAAI,IAAI,MAAM,KAAK;AAChD,YAAI,QAAQ;AAAK,kBAAQ;AACzB,gBAAQ,QAAQ;AAGhB,cAAM,MAAM,WAAW,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,GAAG,UAAU,IAAI,CAAC;AAClF,cAAM,SAAS,MAAM,KAAK,cAAc,MAAM,KAAK,OAAO,GAAG,KAAK;AAClE,cAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,gBAAgB,MAAM,KAAK,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC;AACpG,eAAO,WAAW,MAAM,UAAU,QAAQ,GAAG;AAAA,MAC/C;AAAA,IAEF;AAEA,QAAM,mBAAmB,CAAC,UAAU;AAClC,YAAM,QAAQ,CAAC;AACf,UAAI,KAAK;AACT,aAAO,KAAK,MAAM,QAAQ;AACxB,YAAI,KAAK,MAAM,IAAI;AACnB,cAAM,OAAO,CAAC;AACd,eAAO,KAAK,GAAG;AACb,eAAK,KAAK,MAAM,IAAI,CAAC;AACrB;AAAA,QACF;AACA,cAAM,KAAK,IAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,OAAO,OAAO,UAAU;AACjD,YAAM,SAAS,CAAC;AAChB,UAAI,KAAK;AACT,aAAO,KAAK,MAAM,QAAQ;AACxB,cAAM,IAAI,MAAM,EAAE;AAClB,cAAM,IAAI,MAAM,EAAE;AAClB,cAAM,IAAI,MAAM,EAAE;AAClB,eAAO,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AACrB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,QAAM,kBAAkB,CAAC,KAAK,QAAQ,YAAY;AAEhD,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAElB,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAGlB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAE7C,YAAM,WAAW,CAAC;AAClB,UAAI,SAAS,MAAM,UAAU,SAAS,MAAM,UAAU,SAAS,MAAM,QAAQ;AAC3E,YAAI,SAAS,MAAM,QAAQ;AACzB,gBAAM,QAAQ,iBAAiB,KAAK;AACpC,gBAAM,SAAS,kBAAkB,OAAO,OAAO,KAAK;AAEpD,cAAI,KAAK;AACT,iBAAO,KAAK,MAAM,QAAQ;AACxB,kBAAM,OAAO,MAAM,EAAE;AACrB,gBAAI,WAAW,CAAC;AAChB,gBAAI,KAAK;AACT,mBAAO,KAAK,KAAK,QAAQ;AACvB,oBAAM,KAAK,KAAK,EAAE;AAClB,oBAAM,SAAS,MAAM,KAAK,MAAM,OAAO,EAAE,CAAC;AAC1C,uBAAS,KAAK,MAAM;AACpB;AAAA,YACF;AACA,gBAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,yBAAW,SAAS,QAAQ;AAAA,YAC9B;AAGA,kBAAM,OAAO,WAAW,MAAM,OAAO,QAAQ;AAC7C,gBAAI;AAAO,mBAAK,QAAQ;AACxB,qBAAS,KAAK,IAAI;AAElB;AAAA,UACF;AAAA,QACF,OAAO;AAAA,QAEP;AAAA,MACF,OAAO;AAAA,MAEP;AACA,aAAO,WAAW,MAAM,OAAO,QAAQ;AAAA,IACzC;AAGA,QAAM,cAAc,CAAC,QAAQ;AAC3B,YAAM,UAAU,SAAS,qBAAqB,CAAC;AAC/C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,UAAU,SAAS,qBAAqB,CAAC;AAC/C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAE9C,YAAM,QAAQ,IAAI;AAClB,UAAI,QAAQ;AACZ,WAAK,QAAQ,YAAY,QAAQ;AAE/B,gBAAQ;AAAA,MACV,YACK,QAAQ,YAAY,QAAQ;AAC/B,gBAAQ,WAAW,MAAM,OAAO;AAChC,cAAM,WAAY,QAAQ,aAAa;AACvC,cAAM,WAAY,QAAQ,aAAa;AAAA,MACzC,YACK,QAAQ,YAAY,QAAQ;AAC/B,gBAAQ,WAAW,MAAM,OAAO;AAChC,cAAM,WAAY,QAAQ,aAAa;AACvC,cAAM,WAAY,QAAQ,aAAa;AAAA,MACzC,OAAO;AACL,gBAAQ,WAAW,MAAM,OAAO;AAChC,cAAM,WAAY,QAAQ,aAAa;AAAA,MACzC;AACA,UAAI,UAAU,KAAK;AAAE,cAAM,OAAO,IAAI;AAAA,MAAK;AAC3C,aAAO;AAAA,IACT;AAOA,QAAM,kBAAkB,CAAC,SAAS,SAAS,UAAU,SAAS,YAAY;AACxE,UAAI,WAAW,MAAM,IAAI,OAAO,GAAG;AAEjC,cAAM,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,GAAG;AAEjD,gBAAQ,KAAK,WAAW,MAAM,WAAW,EAAE,QAAQ,QAAQ,OAAO,GAAG,MAAM,CAAC;AAAA,MAC9E;AACA,UAAI,WAAW,MAAM,IAAI,OAAO,GAAG;AAGjC,gBAAQ,KAAK,WAAW,MAAM,OAAO,QAAQ,CAAC;AAAA,MAChD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,sBAAsB,CAAC,QAAQ,YAAY;AAK/C,YAAM,SAAS,CAAC;AAChB,UAAI,UAAU;AACd,YAAM,WAAW,CAAC;AAClB,YAAM,UAAU,CAAC;AACjB,YAAM,UAAU,CAAC;AAEjB,UAAI,IAAI;AACR,iBAAW,OAAO,OAAO,UAAU;AACjC,YAAI;AAEJ,YAAI,EAAE,UAAU,MAAM;AAEpB;AAAA,QACF;AAGA,gBAAQ,IAAI,MAAM;AAAA,UAEhB,KAAK;AACH;AAAA,UACF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,mBAAO,KAAK,GAAG;AACf;AAAA,UACF,KAAK;AACH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE;AAAA,UAGF,KAAK;AAEH,gBAAI,mBAAmB,KAAK,QAAQ,OAAO;AAC3C,gBAAI,YAAY,MAAM;AAEpB,wBAAU,WAAW,MAAM,OAAO;AAAA,YACpC;AACA;AAAA,UACF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,gBAAgB,KAAK,QAAQ,OAAO,CAAC;AAClD;AAAA,UAGF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,eAAe,KAAK,QAAQ,OAAO,CAAC;AACjD;AAAA,UACF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,kBAAkB,KAAK,QAAQ,OAAO,CAAC;AACpD;AAAA,UACF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,mBAAmB,KAAK,QAAQ,OAAO,CAAC;AACrD;AAAA,UACF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,gBAAgB,KAAK,QAAQ,OAAO,CAAC;AAClD;AAAA,UACF,KAAK;AACH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,gBAAI,YAAY,MAAM;AAEpB,wBAAU,YAAY,GAAG;AAAA,YAC3B;AACA;AAAA,UACF,KAAK;AAEH,gBAAI,kBAAkB,GAAG;AACzB;AAAA,UACF,KAAK;AACH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE;AAAA,UAGF,KAAK;AAEH,sBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AACtE,oBAAQ,KAAK,kBAAkB,KAAK,QAAQ,OAAO,CAAC;AACpD;AAAA,UAEF;AAGE;AAAA,QACJ;AAEA,YAAI,WAAW,MAAM,IAAI,CAAC,GAAG;AAC3B,mBAAS,KAAK,CAAC;AAAA,QACjB;AAEA,YAAI,KAAK,SAAS,KAAK,EAAE,IAAI,WAAW,GAAG;AACzC,kBAAQ,KAAK,CAAC;AAAA,QAChB;AACA,YAAI,KAAK,SAAS,KAAK,EAAE,IAAI,WAAW,GAAG;AACzC,kBAAQ,KAAK,CAAC;AAAA,QAChB;AAAA,MACF;AAEA,gBAAU,gBAAgB,SAAS,SAAS,UAAU,SAAS,OAAO;AAUtE,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrfA,IAAAC,qBAAA;AAAA;AAQA,QAAM,EAAE,OAAO,WAAW,IAAI;AAE9B,QAAM,EAAE,oBAAoB,kBAAkB,IAAI;AAElD,QAAM,EAAE,WAAW,UAAU,eAAe,IAAI;AAKhD,QAAM,oBAAoB,CAAC,WAAW;AACpC,YAAM,SAAS,GAAG,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;AACxC,aAAO;AAAA,IACT;AAKA,QAAM,oBAAoB,CAAC,WAAW;AACpC,YAAM,SAAS,GAAG,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;AACrD,aAAO;AAAA,IACT;AAKA,QAAM,mBAAmB,CAAC,YAAY;AACpC,YAAM,WAAW,WAAW,MAAM,SAAS,OAAO;AAClD,UAAI,SAAS;AACb,eAAS,QAAQ,CAAC,YAAY;AAC5B,kBAAU,IAAI,kBAAkB,OAAO,CAAC;AAAA,MAC1C,CAAC;AACD,gBAAU,KAAK,eAAe,OAAO,CAAC;AACtC,aAAO;AAAA,IACT;AAKA,QAAM,iBAAiB,CAAC,YAAY;AAClC,UAAI,SAAS;AACb,UAAI,WAAW,SAAS;AACtB,cAAM,MAAM,QAAQ;AACpB,iBAAS,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;AAAA,MACnD;AACA,aAAO;AAAA,IACT;AAKA,QAAM,gBAAgB,CAAC,KAAK,QAAQ,YAAY;AAC9C,YAAM,OAAO,IAAI;AAEjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAE7C,UAAI,SAAS;AACb,UAAI,CAAC,IAAI,QAAS,IAAI,SAAS,IAAI,QAAQ,IAAI,SAAS,GAAI;AAC1D,cAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AACnD,cAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AACnD,iBAAS,SAAS,IAAI,wBAAwB,kBAAkB,EAAE,CAAC,MAAM,kBAAkB,EAAE,CAAC;AAAA;AAAA,MAChG,OAAO;AACL,cAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAC7D,cAAM,KAAK,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI;AAC7D,iBAAS,SAAS,IAAI,wBAAwB,kBAAkB,EAAE,CAAC,MAAM,kBAAkB,EAAE,CAAC;AAAA;AAAA,MAChG;AACA,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,MAC3F;AACA,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AAAA,IACxB;AAKA,QAAM,mBAAmB,CAAC,MAAM,IAAI,IAAI,MAAM,IAAI,OAAO;AAEvD,UAAI,SAAS,GAAG;AAEd,eAAO,mCAAmC,EAAE,IAAI,EAAE,OAAO,IAAI;AAAA;AAAA,MAE/D;AAGA,YAAM,OAAO,MAAM,KAAK,WAAW,IAAI,EAAE;AACzC,YAAM,OAAO,MAAM,KAAK,WAAW,IAAI,EAAE;AACzC,YAAM,IAAI,MAAM,KAAK,SAAS,MAAM,IAAI;AACxC,YAAM,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI;AAC9C,YAAM,YAAa,OAAO;AAC1B,YAAM,QAAQ;AACd,YAAM,IAAI,KAAK,KAAK,IAAI,IAAI;AAE5B,YAAM,MAAM;AACZ,aAAO,0CAA0C,EAAE,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,eAAe,SAAS,WAAW,KAAK,cAAc,GAAG,MAAM,IAAI;AAAA;AAAA,IAEvK;AAKA,QAAM,kBAAkB,CAAC,KAAK,QAAQ,YAAY;AAChD,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAG9C,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,OAAO,IAAI;AAEjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAG7C,UAAI,SAAS,SAAS,IAAI;AAAA;AAC1B,YAAM,YAAa,QAAQ,YAAY;AACvC,UAAI,SAAS,MAAM,UAAU,SAAS,MAAM,UAAU,SAAS,MAAM,QAAQ;AAE3E,kBAAU,KAAK,IAAI,sCAAsC,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI;AAAA;AAEzF,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,KAAK,IAAI,KAAK,MAAM;AAC1B,gBAAM,KAAK,MAAM,CAAC;AAClB,gBAAM,KAAK,MAAM,CAAC;AAClB,gBAAM,KAAK,MAAM,CAAC;AAClB,gBAAM,KAAK,MAAM,CAAC;AAClB,gBAAM,OAAO,MAAM,CAAC;AACpB,cAAI,MAAM,GAAG;AACX,sBAAU,KAAK,IAAI,MAAM,iBAAiB,MAAM,IAAI,IAAI,MAAM,IAAI,EAAE,CAAC;AAAA,UACvE,OAAO;AACL,gBAAI,SAAS,GAAG;AAEd,wBAAU,KAAK,IAAI,MAAM,iBAAiB,MAAM,IAAI,IAAI,MAAM,IAAI,EAAE,CAAC;AAAA,YACvE;AAAA,UACF;AAAA,QACF;AAAA,MACF,OAAO;AAEL;AAAA,MACF;AACA,UAAI,UAAU;AACZ,kBAAU,KAAK,IAAI,6BAA6B,IAAI;AAAA;AAAA,MACtD,OAAO;AACL,kBAAU;AAAA,MACZ;AACA,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,MAC3F;AACA,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AAAA,IACxB;AAKA,QAAM,eAAe,CAAC,KAAK,QAAQ,YAAY;AAE7C,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,OAAO,IAAI;AACjB,UAAI,OAAO,IAAI;AACf,UAAI,OAAO,IAAI;AACf,YAAM,OAAO,IAAI;AAEjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAG7C,cAAQ;AACR,cAAQ;AAGR,YAAM,MAAM;AAGZ,UAAI,SAAS,GAAK;AAChB,YAAIC,UAAS,SAAS,IAAI,+BAA+B,IAAI,KAAK,IAAI,cAAc,IAAI,iBAAiB,IAAI,eAAe,IAAI,gBAAgB,GAAG;AAAA;AACnJ,YAAI,OAAO;AACT,UAAAA,WAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,QAC3F;AACA,YAAI,SAASA;AACb,mBAAW,KAAK,MAAM;AACtB;AAAA,MACF;AAEA,UAAI,SAAS,SAAS,IAAI,+BAA+B,IAAI,KAAK,IAAI,cAAc,IAAI,iBAAiB,IAAI,eAAe,IAAI,gBAAgB,GAAG;AAAA;AACnJ,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,MAC3F;AACA,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AAAA,IACxB;AAKA,QAAM,kBAAkB,CAAC,KAAK,QAAQ,YAAY;AAEhD,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAG7C,YAAM,MAAM;AAGZ,UAAI,SAAS,GAAK;AAChB,YAAIA,UAAS,SAAS,IAAI,kCAAkC,IAAI,KAAK,IAAI,cAAc,IAAI,eAAe,GAAG;AAAA;AAC7G,YAAI,OAAO;AACT,UAAAA,WAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,QAC3F;AACA,YAAI,SAASA;AACb,mBAAW,KAAK,MAAM;AACtB;AAAA,MACF;AAGA,UAAI,SAAS,SAAS,IAAI,kCAAkC,IAAI,KAAK,IAAI,cAAc,IAAI,eAAe,GAAG,4BAA4B,IAAI;AAAA;AAC7I,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,MAC3F;AAGA,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AAAA,IACxB;AAKA,QAAM,mBAAmB,CAAC,KAAK,QAAQ,YAAY;AAEjD,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,IAAI;AAEjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAG7C,YAAM,MAAM;AAGZ,UAAI,SAAS,KAAO,SAAS,GAAK;AAChC,cAAM,SAAS,MAAM,KAAK,WAAW,GAAG,CAAC;AACzC,cAAM,SAAS,MAAM,KAAK,WAAW,MAAM,IAAI;AAC/C,cAAM,KAAK,MAAM,KAAK,SAAS,QAAQ,MAAM;AAC7C,cAAM,KAAK,KAAK;AAChB,cAAM,QAAQ,KAAK,MAAM,MAAM,IAAI;AAGnC,YAAI,SAAS,SAAS,IAAI,sDAAsD,EAAE,KAAK,EAAE,gBAAgB,GAAG;AAAA,QACxG,IAAI,sGAAsG,IAAI,KAAK,IAAI,wDAAwD,KAAK;AAAA,IACxL,IAAI,iCAAiC,IAAI,WAAW,IAAI;AAAA;AAExD,YAAI,OAAO;AACT,oBAAU,KAAK,IAAI,uBAAuB,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,SAAS,IAAI;AAAA;AAAA,QAC3F;AACA,YAAI,SAAS;AACb,mBAAW,KAAK,MAAM;AAAA,MACxB;AAAA,IAEF;AAEA,QAAM,mBAAmB,CAAC,UAAU;AAClC,YAAM,QAAQ,CAAC;AACf,UAAI,KAAK;AACT,aAAO,KAAK,MAAM,QAAQ;AACxB,YAAI,KAAK,MAAM,IAAI;AACnB,cAAM,OAAO,CAAC;AACd,eAAO,KAAK,GAAG;AACb,eAAK,KAAK,MAAM,IAAI,CAAC;AACrB;AAAA,QACF;AACA,cAAM,KAAK,IAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,OAAO,OAAO,UAAU;AACjD,YAAM,SAAS,CAAC;AAChB,UAAI,KAAK;AACT,aAAO,KAAK,MAAM,QAAQ;AACxB,cAAM,IAAI,MAAM,EAAE;AAClB,cAAM,IAAI,MAAM,EAAE;AAClB,cAAM,IAAI,MAAM,EAAE;AAClB,eAAO,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AACrB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,QAAM,gBAAgB,CAAC,KAAK,QAAQ,YAAY;AAE9C,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAElB,YAAM,OAAO,IAAI;AACjB,YAAM,QAAQ,IAAI;AAGlB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAE7C,YAAM,WAAW,CAAC;AAClB,UAAI,SAAS,MAAM,UAAU,SAAS,MAAM,UAAU,SAAS,MAAM,QAAQ;AAC3E,YAAI,SAAS,MAAM,QAAQ;AACzB,gBAAM,QAAQ,iBAAiB,KAAK;AACpC,gBAAM,SAAS,kBAAkB,OAAO,OAAO,KAAK;AAEpD,cAAI,KAAK;AACT,iBAAO,KAAK,MAAM,QAAQ;AACxB,kBAAM,OAAO,MAAM,EAAE;AACrB,gBAAI,WAAW,CAAC;AAChB,gBAAI,KAAK;AACT,mBAAO,KAAK,KAAK,QAAQ;AACvB,oBAAM,KAAK,KAAK,EAAE;AAClB,oBAAM,SAAS,MAAM,KAAK,MAAM,OAAO,EAAE,CAAC;AAC1C,uBAAS,KAAK,MAAM;AACpB;AAAA,YACF;AACA,gBAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,yBAAW,SAAS,QAAQ;AAAA,YAC9B;AAGA,kBAAM,OAAO,WAAW,MAAM,OAAO,QAAQ;AAC7C,gBAAI;AAAO,mBAAK,QAAQ;AACxB,qBAAS,KAAK,IAAI;AAElB;AAAA,UACF;AAAA,QACF,OAAO;AACL,kBAAQ,KAAK,qBAAqB;AAAA,QACpC;AAAA,MACF,OAAO;AACL,gBAAQ,KAAK,wBAAwB;AAAA,MACvC;AAEA,YAAM,OAAO,IAAI;AACjB,UAAI,SAAS,WAAW,IAAI;AAAA;AAE5B,iBAAW,WAAW,UAAU;AAC9B,kBAAU,SAAS,iBAAiB,OAAO,IAAI;AAAA,MACjD;AACA,gBAAU;AAAA,QACJ,IAAI,8BAA8B,IAAI;AAAA;AAE5C,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AACtB,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,WAAW;AAC7B,iBAAWC,UAAS,QAAQ;AAC1B,YAAIA,OAAM,SAAS,KAAK;AACtB,iBAAOA;AAAA,QACT;AAAA,MACF;AAEA,YAAM,QAAQ,EAAE,MAAM,QAAQ;AAC9B,YAAM,OAAO;AACb,YAAM,OAAO;AACb,YAAM,OAAO;AACb,YAAM,OAAO;AACb,YAAM,OAAO;AACb,YAAM,UAAU,CAAC;AAEjB,aAAO,KAAK,KAAK;AACjB,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,KAAK,WAAW;AAClC,UAAI,QAAQ,UAAU,KAAK,MAAM;AACjC,UAAI,UAAU,MAAM;AAElB,gBAAQ,WAAW,MAAM;AAAA,MAC3B;AACA,UAAI,EAAE,aAAa,QAAQ;AACzB,cAAM,UAAU,CAAC;AAAA,MACnB;AACA,YAAM,QAAQ,KAAK,GAAG;AAAA,IACxB;AAYA,QAAM,cAAc,CAAC,QAAQ;AAC3B,YAAM,UAAU,SAAS,qBAAqB,CAAC;AAC/C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAC9C,YAAM,UAAU,SAAS,qBAAqB,CAAC;AAC/C,YAAM,SAAS,SAAS,qBAAqB,CAAC;AAE9C,YAAM,QAAQ,IAAI;AAClB,UAAI,QAAQ;AACZ,WAAK,QAAQ,YAAY,QAAQ;AAC/B,cAAM,YAAa,QAAQ,aAAa;AACxC,gBAAQ,EAAE,MAAM,UAAU,SAAmB;AAAA,MAC/C,YACK,QAAQ,YAAY,QAAQ;AAC/B,gBAAQ,EAAE,MAAM,aAAa;AAE7B,cAAM,OAAO,IAAI;AACjB,cAAM,OAAO,IAAI;AACjB,cAAM,WAAY,QAAQ,aAAa;AACvC,cAAM,WAAY,QAAQ,aAAa;AAAA,MACzC,YACK,QAAQ,YAAY,QAAQ;AAC/B,gBAAQ,EAAE,MAAM,cAAc;AAE9B,cAAM,OAAO,IAAI;AACjB,cAAM,OAAO,IAAI;AAAA,MACnB,OAAO;AACL,cAAM,YAAa,QAAQ,aAAa;AACxC,gBAAQ,EAAE,MAAM,UAAU,SAAmB;AAAA,MAC/C;AACA,UAAI,UAAU,KAAK;AAAE,cAAM,OAAO,IAAI;AAAA,MAAK;AAC3C,UAAI,UAAU,KAAK;AAAE,cAAM,OAAO,IAAI;AAAA,MAAK;AAC3C,aAAO;AAAA,IACT;AAUA,QAAM,oBAAoB,CAAC,OAAO,OAAO,OAAO,OAAO,YAAY;AAGjE,YAAM,YAAY,CAAC,GAAG,MAAM;AAC1B,cAAM,KAAO,IAAI,KAAK,SAAU,IAAI;AACpC,cAAM,OAAO,MAAM,CAAC;AACpB,eAAO,KAAK;AAAA,MACd;AAEA,YAAM,SAAS,CAAC;AAGhB,YAAM,SAAS,QAAQ;AACvB,UAAI,WAAW,MAAM,QAAQ;AAC3B,eAAO;AAAA,MACT;AACA,UAAI,QAAQ,IAAI,QAAQ,GAAG;AACzB,eAAO;AAAA,MACT;AAEA,UAAI,IAAI;AACR,aAAO,IAAI,OAAO;AAChB,YAAI,IAAI;AACR,eAAO,IAAI,OAAO;AAChB,gBAAM,KAAK,UAAU,GAAG,CAAC;AACzB,gBAAM,KAAK,UAAU,IAAI,GAAG,CAAC;AAC7B,gBAAM,KAAK,UAAU,IAAI,GAAG,IAAI,CAAC;AACjC,gBAAM,KAAK,UAAU,GAAG,IAAI,CAAC;AAC7B,cAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,EAAE;AAC3B,cAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,oBAAQ,MAAM,QAAQ;AAAA,UACxB;AACA,gBAAM,UAAU,WAAW,MAAM,OAAO,KAAK;AAC7C,gBAAM,QAAQ,WAAW,MAAM,MAAM,OAAO;AAC5C,cAAI,OAAO,SAAS,MAAM,CAAC,CAAC,GAAG;AAC7B,gBAAI;AAAO,sBAAQ,QAAQ;AAC3B,mBAAO,KAAK,OAAO;AAAA,UACrB;AACA;AAAA,QACF;AACA;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAYA,QAAM,uBAAuB,CAAC,OAAO,OAAO,OAAO,OAAO,YAAY;AAEpE,YAAM,QAAQ,CAAC;AAGf,UAAK,QAAQ,UAAW,MAAM,QAAQ;AACpC,eAAO;AAAA,MACT;AAEA,UAAI,IAAI;AACR,aAAO,IAAI,MAAM,QAAQ;AACvB,YAAI,OAAO,MAAM,CAAC;AAClB,cAAM,UAAU,CAAC,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI,CAAC;AACnG,YAAI,WAAW,CAAC;AAChB,YAAI,QAAQ,CAAC,IAAI,GAAG;AAClB,iBAAO,MAAM,QAAQ,CAAC,IAAI,CAAC;AAC3B,mBAAS,KAAK,KAAK,GAAG;AACtB,cAAI,QAAQ,CAAC,IAAI,GAAG;AAClB,mBAAO,MAAM,QAAQ,CAAC,IAAI,CAAC;AAC3B,qBAAS,KAAK,KAAK,GAAG;AACtB,gBAAI,QAAQ,CAAC,IAAI,GAAG;AAClB,qBAAO,MAAM,QAAQ,CAAC,IAAI,CAAC;AAC3B,uBAAS,KAAK,KAAK,GAAG;AACtB,kBAAI,QAAQ,CAAC,IAAI,GAAG;AAClB,uBAAO,MAAM,QAAQ,CAAC,IAAI,CAAC;AAC3B,yBAAS,KAAK,KAAK,GAAG;AAAA,cACxB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,YAAI,SAAS,SAAS,GAAG;AAEvB,cAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,uBAAW,SAAS,QAAQ;AAAA,UAC9B;AACA,gBAAM,UAAU,WAAW,MAAM,OAAO,QAAQ;AAChD,gBAAM,KAAK,OAAO;AAAA,QACpB;AACA;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAMA,QAAM,oBAAoB,CAAC,KAAK,QAAQ,OAAO,YAAY;AAGzD,UAAI,OAAO,MAAM;AACjB,UAAI,QAAQ,CAAC;AACb,UAAI,QAAQ,CAAC;AACb,UAAI,QAAQ,CAAC;AACb,iBAAW,QAAQ,OAAO;AACxB,YAAI,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC;AAC1B,YAAI,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC;AAC1B,YAAI,MAAM,KAAK,KAAK,IAAI;AAAA,MAC1B;AACA,UAAI,IAAI,UAAU;AAChB,YAAI,OAAO,SAAS,qBAAqB,CAAC;AAAA,MAC5C,OAAO;AACL,YAAI,OAAO;AAAA,MACb;AACA,sBAAgB,KAAK,QAAQ,OAAO;AACpC,aAAO;AAAA,IACT;AAQA,QAAM,mBAAmB,CAAC,KAAK,QAAQ,OAAO,YAAY;AACxD,UAAI,QAAQ;AAAM,eAAO;AAGzB,YAAM,OAAO,IAAI;AACjB,YAAM,KAAK,eAAe,KAAK,MAAM;AACrC,YAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AAI7C,UAAI,SAAS,UAAU;AACrB,eAAO,kBAAkB,KAAK,QAAQ,OAAO,OAAO;AAAA,MACtD;AAEA,UAAI,SAAS,UAAU;AAErB,eAAO;AAAA,MACT;AAEA,UAAI,SAAS,cAAc;AACzB,cAAM,IAAI,IAAI;AACd,cAAM,IAAI,IAAI;AAEd,cAAM,SAAS,kBAAkB,GAAG,GAAG,OAAO,OAAO,OAAO;AAC5D,gBAAQ;AAAA,MAEV;AAEA,UAAI,SAAS,eAAe;AAC1B,YAAI,UAAU,KAAK;AACjB,gBAAM,IAAI,IAAI;AACd,gBAAM,IAAI,IAAI;AACd,gBAAM,QAAQ,qBAAqB,GAAG,GAAG,OAAO,OAAO,OAAO;AAC9D,kBAAQ;AAAA,QAEV;AAAA,MACF;AAEA,YAAM,OAAO,IAAI;AACjB,UAAI,SAAS,WAAW,IAAI;AAAA;AAE5B,iBAAW,WAAW,OAAO;AAC3B,kBAAU,SAAS,iBAAiB,OAAO,IAAI;AAAA,MACjD;AACA,gBAAU;AAAA,QACJ,IAAI,8BAA8B,IAAI;AAAA;AAE5C,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,aAAa,KAAK;AAAA;AAAA,MAEvC;AACA,UAAI,SAAS;AACb,iBAAW,KAAK,MAAM;AACtB,aAAO;AAAA,IACT;AAKA,QAAM,iBAAiB,CAAC,UAAU;AAChC,YAAM,OAAO,MAAM,QAAQ;AAE3B,UAAI,SAAS,YAAY,IAAI;AAAA;AAE7B,iBAAW,UAAU,MAAM,SAAS;AAClC,kBAAU,OAAO;AAAA,MACnB;AACA,gBAAU;AACV,iBAAW,UAAU,MAAM,SAAS;AAClC,kBAAU,OAAO,OAAO;AAAA,MAC1B;AACA,gBAAU;AACV,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,KAAK,YAAY;AACrC,YAAM,OAAO,IAAI,QAAQ;AAEzB,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,cAAI,UAAU,KAAK;AACjB,oBAAQ,IAAI,SAAS,IAAI;AAAA,UAC3B;AACA;AAAA,QAEF;AACE;AAAA,MACJ;AAAA,IACF;AAEA,QAAM,oBAAoB,CAAC,QAAQ,YAAY;AAK7C,YAAM,SAAS,CAAC;AAChB,UAAI,UAAU;AACd,UAAI,QAAQ,CAAC;AACb,UAAI,UAAU;AAId,UAAI,IAAI;AACR,iBAAW,OAAO,OAAO,UAAU;AACjC,YAAI;AAEJ,YAAI,EAAE,UAAU,MAAM;AAEpB;AAAA,QACF;AACA,YAAI,EAAE,UAAU,MAAM;AACpB,cAAI,OAAO,UAAU;AACrB,oBAAU,UAAU;AAAA,QACtB,OAAO;AAEL,cAAI,OAAO,IAAI;AACf,iBAAO,KAAK,QAAQ,MAAM,GAAG;AAC7B,iBAAO,KAAK,QAAQ,MAAM,GAAG;AAC7B,iBAAO,KAAK,QAAQ,OAAO,GAAG;AAC9B,cAAI,OAAO;AAAA,QACb;AAGA,gBAAQ,IAAI,MAAM;AAAA,UAEhB,KAAK;AACH;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AAET,gBAAI,UAAU,CAAC;AACf,gBAAI,OAAO,UAAU,OAAO;AAC5B,mBAAO,KAAK,GAAG;AACf;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,yBAAa,KAAK,OAAO;AACzB;AAAA,UAGF,KAAK;AAEH,gBAAI,mBAAmB,KAAK,QAAQ,OAAO;AAC3C,gBAAI,YAAY,MAAM;AAEpB,wBAAU,EAAE,MAAM,UAAU;AAC5B,sBAAQ,OAAO,UAAU;AACzB,wBAAU,UAAU;AAAA,YACtB;AACA;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,0BAAc,KAAK,QAAQ,OAAO;AAClC;AAAA,UAGF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,yBAAa,KAAK,QAAQ,OAAO;AACjC;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,4BAAgB,KAAK,QAAQ,OAAO;AACpC;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,6BAAiB,KAAK,QAAQ,OAAO;AACrC;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,0BAAc,KAAK,QAAQ,OAAO;AAClC;AAAA,UACF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,gBAAI,YAAY,MAAM;AAEpB,wBAAU,YAAY,GAAG;AACzB,sBAAQ,OAAO,UAAU;AACzB,wBAAU,UAAU;AAAA,YACtB;AACA;AAAA,UACF,KAAK;AAEH,gBAAI,kBAAkB,GAAG;AACzB;AAAA,UACF,KAAK;AACH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT;AAAA,UAGF,KAAK;AAEH,sBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAC1D,oBAAQ,CAAC;AACT,4BAAgB,KAAK,QAAQ,OAAO;AACpC;AAAA,UAEF;AAGE;AAAA,QACJ;AAEA,YAAI,WAAW,MAAM,IAAI,CAAC,GAAG;AAE3B,gBAAM,KAAK,CAAC;AAAA,QACd;AAEA,YAAI,KAAK,SAAS,KAAK,EAAE,IAAI,WAAW,GAAG;AAEzC,gBAAM,KAAK,CAAC;AAAA,QACd;AACA,YAAI,KAAK,SAAS,KAAK,EAAE,IAAI,WAAW,GAAG;AAEzC,gBAAM,KAAK,CAAC;AAAA,QACd;AAAA,MACF;AAEA,gBAAU,iBAAiB,SAAS,QAAQ,OAAO,OAAO;AAI1D,UAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAMb,aAAO,QAAQ,CAAC,UAAU;AACxB,cAAM,OAAO,MAAM,QAAQ;AAC3B,kBAAU,GAAG,IAAI;AAAA,MACnB,CAAC;AACD,gBAAU;AAGV,gBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQE,aAAO,QAAQ,CAAC,UAAU;AACxB,kBAAU,eAAe,KAAK;AAAA,MAChC,CAAC;AAED,gBAAU;AAIV,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACr2BjB;AAAA;AASA,QAAM,UAAU,mBAA0B;AAC1C,QAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,QAAM,aAAa;AACnB,QAAM,MAAM;AACZ,QAAM,EAAE,oBAAoB,IAAI;AAChC,QAAM,oBAAoB;AAe1B,QAAM,cAAc,CAAC,QAAQ,UAAU;AACrC,UAAI,OAAO,QAAQ,WAAW,MAAM;AAClC,cAAM;AAAA,MACR,OAAO;AACL,gBAAQ,IAAI,eAAe,MAAM,IAAI,YAAY,MAAM,MAAM,oBAAoB,MAAM,CAAC,GAAG;AAAA,MAC7F;AAAA,IACF;AAEA,QAAM,cAAc,CAAC,QAAQ,SAAS;AAAA,IAEtC;AAEA,QAAM,YAAY,CAAC,QAAQ,SAAS;AAAA,IAEpC;AAOA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAG7C,UAAI,MAAM;AACV,cAAQ,OAAO;AAAA,QACb,KAAK;AACH,gBAAM,EAAE,MAAM,QAAQ;AAEtB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,OAAO;AAErB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,aAAa;AAE3B,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,OAAO;AAErB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,QAAQ;AACZ,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,WAAW;AAEzB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,MAAM;AAEpB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,SAAS;AAEvB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,UAAU;AAExB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AACnB,cAAI,OAAO,GAAG,CAAC,IAAI;AAEnB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,SAAS;AAEvB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,SAAS;AAEvB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAClB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,cAAI,OAAO,EAAE,CAAC,IAAI;AAElB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF,KAAK;AACH,gBAAM,EAAE,MAAM,SAAS;AACvB,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,QACF;AAEE,gBAAM,CAAC;AACP,iBAAO,SAAS,KAAK,GAAG;AACxB;AAAA,MACJ;AAAA,IACF;AAMA,QAAM,iBAAiB,CAAC,QAAQ,OAAO,UAAU;AAE/C,YAAM,MAAM,EAAE,MAAM,YAAY,MAAM,MAAM;AAC5C,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAMA,QAAM,YAAY,CAAC,QAAQ,OAAO,UAAU;AAE1C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,MACvC;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAMA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAE7C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,MACvC;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAE7C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,cAAc;AAE7B,cAAI,IAAI,UAAU,QAAW;AAC3B,gBAAI,QAAQ,CAAC;AACb,gBAAI,QAAQ,CAAC;AAAA,UACf;AACA,cAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAChC,cAAI,MAAM,KAAK,CAAC;AAAA,QAClB,OAAO;AACL,cAAI,IAAI,SAAS,QAAQ;AAEvB,gBAAI,IAAI,UAAU,QAAW;AAC3B,kBAAI,QAAQ,CAAC;AAAA,YACf;AACA,gBAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAAA,UAClC,OAAO;AACL,gBAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,UACvC;AAAA,QACF;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAE7C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,gBAAgB,IAAI,SAAS,QAAQ;AAEpD,cAAI,IAAI,UAAU,QAAW;AAC3B,gBAAI,QAAQ,CAAC;AAAA,UACf;AACA,cAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAAA,QAClC,OAAO;AACL,cAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,QACvC;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAE7C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,QAAQ;AAEvB,cAAI,IAAI,UAAU,QAAW;AAC3B,gBAAI,QAAQ,CAAC;AAAA,UACf;AACA,cAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAAA,QAClC,OAAO;AACL,cAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,QACvC;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,cAAc,CAAC,QAAQ,OAAO,UAAU;AAE5C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,cAAc;AAE7B,gBAAM,QAAQ,IAAI;AAClB,cAAI,UAAU,QAAW;AACvB,kBAAM,QAAQ,IAAI;AAClB,gBAAI,MAAM,WAAW,MAAM,QAAQ;AACjC,oBAAM,MAAM,SAAS,CAAC,IAAI,WAAW,KAAK;AAAA,YAC5C;AAAA,UACF;AAAA,QACF,OAAO;AACL,cAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,QACvC;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,YAAY,CAAC,QAAQ,OAAO,UAAU;AAE1C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,QAAQ;AAEvB,gBAAM,QAAQ,IAAI;AAElB,kBAAQ,OAAO;AAAA,YACb,KAAK;AACH,kBAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AACrC,kBAAI,QAAQ;AACZ;AAAA,YACF,KAAK;AACH,kBAAI,UAAU,GAAG;AACf,oBAAI,OAAO,WAAW,KAAK;AAC3B,oBAAI,QAAQ;AAAA,cACd,OAAO;AACL,oBAAI,OAAO,WAAW,KAAK;AAC3B,oBAAI,QAAQ;AAAA,cACd;AACA;AAAA,YACF,KAAK;AACH,kBAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AACrC,kBAAI,QAAQ;AACZ;AAAA,YACF,KAAK;AACH,kBAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AACrC,kBAAI,QAAQ;AACZ;AAAA,YACF,KAAK;AACH,kBAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AACrC,kBAAI,QAAQ;AACZ;AAAA,YACF;AACE,kBAAI,QAAQ;AACZ;AAAA,UACJ;AAAA,QACF,OAAO;AACL,cAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,QACvC;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAOA,QAAM,cAAc,CAAC,QAAQ,OAAO,UAAU;AAE5C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,SAAS,QAAQ;AACvB,gBAAM,QAAQ,IAAI;AAGlB,kBAAQ,OAAO;AAAA,YACb,KAAK;AACH,kBAAI,IAAI,UAAU,QAAW;AAC3B,oBAAI,QAAQ,CAAC;AAAA,cACf;AACA,kBAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAChC;AAAA,YACF,KAAK;AACH,kBAAI,IAAI,UAAU,QAAW;AAC3B,oBAAI,QAAQ,CAAC;AAAA,cACf;AACA,kBAAI,MAAM,KAAK,WAAW,KAAK,CAAC;AAChC;AAAA,YACF;AACE;AAAA,UACJ;AAAA,QACF,OAAO;AACL,cAAI,OAAO,KAAK,CAAC,IAAI,WAAW,KAAK;AAAA,QACvC;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAMA,QAAM,eAAe,CAAC,QAAQ,OAAO,UAAU;AAE7C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,OAAO,KAAK,CAAC,IAAI;AAAA,MACvB;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAMA,QAAM,aAAa,CAAC,QAAQ,OAAO,UAAU;AAE3C,YAAM,MAAM,OAAO,SAAS,IAAI;AAChC,UAAI,UAAU,KAAK;AACjB,YAAI,IAAI,OAAO,KAAK,CAAC,MAAM,QAAW;AACpC,cAAI,OAAO,KAAK,CAAC,IAAI;AAAA,QACvB;AAAA,MACF;AACA,aAAO,SAAS,KAAK,GAAG;AAAA,IAC1B;AAUA,QAAM,eAAe,CAAC,KAAK,YAAY;AAErC,YAAM,SAAS,IAAI,OAAO,OAAO;AAGjC,aAAO,GAAG,SAAS,WAAW;AAC9B,aAAO,GAAG,SAAS,WAAW;AAC9B,aAAO,GAAG,OAAO,SAAS;AAG1B,aAAO,OAAO,GAAG,YAAY;AAC7B,aAAO,OAAO,GAAG,YAAY;AAC7B,aAAO,OAAO,GAAG,UAAU;AAC3B,aAAO,OAAO,GAAG,UAAU;AAC3B,aAAO,OAAO,GAAG,YAAY;AAC7B,aAAO,OAAO,GAAG,YAAY;AAC7B,aAAO,OAAO,GAAG,YAAY;AAC7B,aAAO,OAAO,GAAG,cAAc;AAC/B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,WAAW;AAC7B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,YAAY;AAC9B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,WAAW;AAC7B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,IAAI,SAAS;AAC3B,aAAO,OAAO,KAAK,SAAS;AAC5B,aAAO,OAAO,KAAK,SAAS;AAC5B,aAAO,OAAO,KAAK,SAAS;AAG5B,aAAO,WAAW,CAAC;AACnB,aAAO,SAAS,KAAK,EAAE,MAAM,MAAM,CAAC;AAGpC,aAAO,MAAM,GAAG,EAAE,MAAM;AACxB,aAAO;AAAA,IACT;AAKA,QAAM,cAAc,CAAC,KAAK,YAAY;AACpC,YAAM,SAAS,aAAa,KAAK,OAAO;AACxC,YAAM,OAAO,oBAAoB,QAAQ,OAAO;AAChD,aAAO;AAAA,IACT;AAKA,QAAM,YAAY,CAAC,KAAK,YAAY;AAClC,YAAM,SAAS,aAAa,KAAK,OAAO;AAExC,UAAI,OAAO,uDAAuD,QAAQ,OAAO;AAAA;AAAA;AAKjF,cAAQ,kBAAkB,QAAQ,OAAO;AACzC,aAAO;AAAA,IACT;AAcA,QAAM,cAAc,CAAC,SAAS,QAAQ;AACpC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV;AAAA,QACA,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,KAAK;AAAA,UACH,QAAQ;AAAA;AAAA,UACR,UAAU;AAAA;AAAA,UACV,WAAW;AAAA;AAAA,QACb;AAAA,MACF;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,aAAO,QAAQ,WAAW,WAAW,UAAU,KAAK,OAAO,IAAI,YAAY,KAAK,OAAO;AAAA,IACzF;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AClmBA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,sBAAsB;AAAA,MACxB;AAAA,MACA,iBAAmB;AAAA,QACjB,mBAAmB;AAAA,QACnB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;ACtCA;AAAA;AAsBA,QAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,QAAM,UAAU,mBAA0B;AAa1C,QAAM,cAAc,CAAC,SAAS,UAAU;AACtC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,QAAQ;AAAA,QACR;AAAA,QACA,aAAa;AAAA,MACf;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAG7C,UAAI,UAAU,KAAK,MAAM,KAAK;AAG9B,gBAAU,QAAQ,QAAQ,OAAO,CAAC;AAElC,aAAO,QAAQ,WAAW,WAAW,UAAU,SAAS,OAAO,IAAI;AAAA,IACrE;AAKA,QAAM,YAAY,CAAC,SAAS,YAAY;AACtC,YAAM,EAAE,aAAa,UAAU,SAAAC,SAAQ,IAAI;AAE3C,UAAI,SAAS,cACT;AAAA,uDACiDA,QAAO;AAAA,WACnD,oBAAI,KAAK,CAAC;AAAA,aACR,QAAQ;AAAA;AAAA,IAGf;AAEJ,gBACF;AAAA;AAAA;AAAA;AAAA,qBAIqB,gBAAgB,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAI3C,mBAAmB,OAAO,CAAC;AAAA;AAAA;AAAA;AAK3B,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,YAAY,QAAQ,OAAO,CAAC,QAAQ,QAAQ,UAAU,SAAS,QAAQ,KAAK,KAAK,EAAE;AAE5G,QAAM,qBAAqB,CAAC,YAAY,QAAQ,OAAO,CAAC,QAAQ,QAAQ,UAAU,SAAS,kBAAkB,QAAQ,KAAK,GAAG,EAAE;AAI/H,QAAM,oBAAoB,CAAC,QAAQ,UAAU,aAAa,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAAA;AAE3F,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACpGA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,mBAAmB;AAAA,MACrB;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;ACzCA;AAAA;AAAA,QAAM,EAAE,QAAQ,WAAW,IAAI;AAE/B,QAAM,UAAU,mBAA0B;AAqB1C,QAAM,cAAc,CAAC,SAAS,UAAU;AACtC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,aAAa;AAAA,QACb;AAAA,QACA,aAAa;AAAA,MACf;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,YAAM,EAAE,OAAO,IAAI;AAEnB,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAE3E,YAAM,EAAE,WAAW,OAAO,IAAI,UAAU,OAAO,OAAO;AAEtD,YAAM,SAAS,WAAW,WAAW,UAAU,WAAW,QAAQ,OAAO,IAAI,UAAU,WAAW,QAAQ,OAAO;AAEjH,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,MAAM,YAAY;AACnC,UAAI,SAAS,CAAC;AACd,YAAM,YAAY,CAAC;AACnB,UAAI,WAAW;AAEf,aAAO,KAAK,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,GAAG,MAAM,WAAW,MAAM,EAAE,CAAC;AAE/D,YAAM,UAAU,CAAC,SAAS,WAAW;AACnC,cAAM,QAAQ,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,GAAG,MAAM,GAAG;AAChD,YAAI,UAAU,OAAO,SAAS;AAAG,gBAAM,OAAO,OAAO,KAAK,GAAG;AAC7D,eAAO,KAAK,KAAK;AAAA,MACnB;AAEA,YAAM,UAAU,CAAC,SAAS,WAAW;AACnC,cAAM,IAAI,WAAW,OAAO,CAAC,CAAC;AAC9B,cAAM,IAAI,WAAW,OAAO,CAAC,CAAC;AAC9B,cAAM,IAAI,WAAW,OAAO,CAAC,CAAC;AAC9B,kBAAU,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,MAC1B;AAEA,YAAM,UAAU,CAAC,SAAS,WAAW;AAEnC,cAAM,WAAW,OAAO,IAAI,CAAC,UAAU;AACrC,gBAAM,OAAO,MAAM,MAAM,cAAc;AACvC,cAAI,MAAM,SAAS,KAAK,CAAC,CAAC;AAC1B,cAAI,MAAM,GAAG;AACX,kBAAM,UAAU,SAAS;AAAA,UAC3B,OAAO;AACL;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AACD,cAAM,QAAQ,OAAO,IAAI;AACzB,cAAM,MAAM,KAAK,QAAQ;AACzB,cAAM,OAAO,KAAK,QAAQ;AAC1B,eAAO,KAAK,KAAK;AAAA,MACnB;AAEA,YAAM,YAAY,CAAC,SAAS,WAAW;AACrC,mBAAW;AACX,YAAI,UAAU,OAAO,SAAS,GAAG;AAE/B,gBAAM,IAAI,OAAO,eAAe,OAAO,CAAC,CAAC;AACzC,cAAI;AAAG,uBAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;AAAA,QACxC;AAAA,MACF;AAGA,YAAM,QAAQ,KAAK,MAAM,IAAI;AAC7B,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAM,OAAO,MAAM,CAAC,EAAE,KAAK;AAC3B,YAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,cAAI,SAAS,KAAK,MAAM,MAAM;AAC9B,cAAI,QAAQ;AACV,kBAAM,UAAU,OAAO,CAAC;AACxB,qBAAS,OAAO,MAAM,CAAC;AACvB,oBAAQ,SAAS;AAAA,cACf,KAAK;AACH,wBAAQ,SAAS,MAAM;AACvB;AAAA,cACF,KAAK;AACH,wBAAQ,SAAS,MAAM;AACvB;AAAA,cACF,KAAK;AACH,wBAAQ,SAAS,MAAM;AACvB;AAAA,cACF,KAAK;AACH,0BAAU,SAAS,MAAM;AACzB;AAAA,YACJ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,eAAS,OAAO,OAAO,CAAC,UAAW,MAAM,MAAM,SAAS,CAAE;AAE1D,aAAO,EAAE,WAAW,OAAO;AAAA,IAC7B;AAEA,QAAM,YAAY,CAAC,QAAQ,QAAQ,YAAY;AAC7C,YAAM,aAAa,OAAO,IAAI,CAAC,UAAU,WAAW,WAAW,EAAE,aAAa,QAAQ,aAAa,QAAQ,OAAO,MAAM,OAAO,QAAQ,MAAM,OAAO,CAAC,CAAC;AACtJ,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,WAAW;AAClC,UAAI,OAAO;AACX,aAAO,QAAQ,CAAC,UAAW,QAAQ,QAAQ,KAAK;AAAA,CAAO;AACvD,cAAQ;AACR,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,UAAU;AAChC,UAAI,OAAO;AACX,YAAM,QAAQ,CAAC,SAAU,QAAQ,QAAQ,IAAI;AAAA,CAAO;AACpD,cAAQ;AACR,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAACC,YAAW;AAClC,UAAI,OAAO;AACX,MAAAA,QAAO,QAAQ,CAAC,MAAM;AACpB,YAAI,GAAG;AACL,kBAAQ,QAAQ,CAAC;AAAA;AAAA,QACnB,OAAO;AACL,kBAAQ;AAAA,QACV;AAAA,MACF,CAAC;AACD,cAAQ;AACR,aAAO;AAAA,IACT;AAEA,QAAM,yBAAyB,CAAC,WAAW;AACzC,UAAI,OAAO;AACX,aAAO,QAAQ,CAAC,OAAO,UAAW,QAAQ,YAAY,KAAK,gBAAgB,MAAM,IAAI;AAAA,CAAK;AAC1F,aAAO;AAAA,IACT;AAEA,QAAM,6BAA6B,CAAC,QAAQ,YAAY;AACtD,UAAI,OAAO;AACX,aAAO,QAAQ,CAAC,OAAO,UAAU;AAC/B,cAAM,QAAQ,MAAM;AACpB,cAAMA,UAAS,MAAM;AACrB,gBAAQ;AAAA,aACC,MAAM,IAAI;AAAA,YACX,MAAM,MAAM;AAAA;AAEpB,gBAAQ,cAAc,KAAK;AAAA,EAC7B,eAAe,KAAK,CAAC;AAAA,EACrB,gBAAgBA,OAAM,CAAC;AAAA,iDACwB,QAAQ,WAAW;AAAA;AAAA;AAAA,MAGlE,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,WAAW,QAAQ,YAAY;AAChD,YAAM,EAAE,UAAU,aAAa,SAAAC,SAAQ,IAAI;AAE3C,UAAI,OAAO,cACP;AAAA,sDACgDA,QAAO;AAAA,WAClD,oBAAI,KAAK,CAAC;AAAA,aACR,QAAQ;AAAA;AAAA,MAGf;AAGJ,cAAQ;AAAA;AAAA,aAEG,OAAO,MAAM;AAAA,aACb,UAAU,MAAM;AAAA;AAAA;AAAA,EAG3B,gBAAgB,SAAS,CAAC;AAAA;AAAA;AAAA,EAG1B,uBAAuB,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA,EAI9B,2BAA2B,QAAQ,OAAO,CAAC;AAAA;AAAA;AAK3C,aAAO;AAAA,IACT;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC7NA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,mBAAmB;AAAA,QACnB,mBAAmB;AAAA,MACrB;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;AC1CA;AAAA;AAAA,QAAM,EAAE,OAAO,WAAW,IAAI;AAE9B,QAAM,EAAE,aAAa,IAAI;AAEzB,QAAM,iBAAiB,mBAA0B;AA4BjD,QAAM,cAAc,CAAC,SAAS,QAAQ;AACpC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,MACV;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAE3E,YAAM,EAAE,UAAU,SAAS,QAAQ,YAAY,IAAI;AAGnD,YAAM,SAAS,GAAG,IAAI,qBAAqB,GAAG,IAAI;AAElD,YAAM,WAAW,mBAAmB,GAAG;AAEvC,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,YAAM,wBAAwB,CAAC,EAAE,UAAU,WAAW,SAAS,QAAQ,MAAM,MAAM,SAAS,UAAU,WAAW,MAAM,QAAQ,KAAK;AACpI,YAAM,yBAAyB,CAAC,EAAE,UAAU,WAAW,SAAS,OAAO,MAAM,aAAa,UAAU,WAAW,MAAM,MAAM;AAE3H,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,YAAM,eAAe,WAAW,uBAAuB;AACvD,YAAM,mBAAmB,WAAW,WAAW,wBAAwB;AACvE,YAAM,kBAAkB,WAAW,WAAW,gBAAgB;AAE9D,YAAM,SAAS,gBAAgB,aAAa,KAAK,UAAU,SAAS,gBAAgB,GAAG,aAAa,SAAS,QAAQ;AAErH,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAC7E,aAAO;AAAA,IAKT;AAGA,QAAM,uBAAuB,CAAC,WAAW;AACvC,UAAI,SAAS;AACb,YAAM,QAAQ,IAAI,WAAW,MAAM;AACnC,YAAM,SAAS,MAAM;AACrB,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,kBAAU,OAAO,aAAa,MAAM,CAAC,CAAC;AAAA,MACxC;AACA,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,QAAS,IAAI,eAAe,UAAa,OAAO,IAAI,UAAU;AAGhF,QAAM,eAAe,CAAC,QAAQ;AAC5B,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAM,cAAc,IAAI,WAAW,GAAG;AACtC,YAAI,MAAM;AACV,iBAAS,IAAI,GAAG,IAAI,IAAI,YAAY,KAAK;AACvC,iBAAO,OAAO,aAAa,YAAY,CAAC,CAAC;AAAA,QAC3C;AACA,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAGA,QAAM,qBAAqB,CAAC,SAAS;AACnC,YAAM,gBAAgB;AACtB,YAAM,OAAO,aAAa,IAAI;AAC9B,YAAM,WAAW,cAAc,KAAK,IAAI;AACxC,aAAQ,aAAa;AAAA,IACvB;AAEA,QAAM,gBAAgB,CAAC,MAAM,aAAa,SAAS,aAAa;AAE9D,UAAI,OAAO;AACX,UAAI,aAAa;AACf,eAAO;AAAA;AAAA,wCAE6B,OAAO;AAAA,aAClC,oBAAI,KAAK,CAAC;AAAA,eACR,QAAQ;AAAA,gBACP,KAAK,MAAM;AAAA;AAAA;AAAA,MAGzB;AACA,cAAQ;AACR,cAAQ,KAAK,KAAK,IAAI;AACtB,cAAQ;AAAA;AAAA,WAEC,KAAK,IAAI,CAAC,GAAG,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAK9C,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,SAAS;AAK9B,QAAM,uBAAuB,CAAC,KAAK,UAAU,SAAS,qBAAqB;AAEzE,YAAM,WAAW,CAAC;AAClB,YAAM,YAAY,CAAC;AACnB,YAAM,UAAU,CAAC;AACjB,YAAM,SAAS,CAAC;AAChB,UAAI,cAAc;AAClB,UAAI,MAAM;AACV,UAAI,SAAS;AACb,YAAM,QAAQ,SAAS,qBAAqB,CAAC;AAC7C,YAAM,QAAQ,SAAS,qBAAqB,CAAC;AAC7C,YAAM,QAAQ,SAAS,qBAAqB,CAAC;AAC7C,YAAM,QAAQ,SAAS,qBAAqB,CAAC;AAC7C,YAAM,KAAK,IAAI,aAAa,GAAG;AAE/B,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,gBAAQ,GAAG;AAAA,UACT,KAAK;AACH,gBAAI,GAAG,UAAU;AACjB,iBAAK;AACL;AAAA,UACF,KAAK;AACH,gBAAI,GAAG,UAAU;AACjB,iBAAK;AACL;AAAA,UACF,KAAK;AACH,gBAAI,GAAG,UAAU;AACjB,iBAAK;AACL;AAAA,UACF,KAAK;AACH,gBAAI,GAAG,UAAU;AACjB,iBAAK;AACL;AAAA,UACF;AACE,gBAAI,GAAG,SAAS;AAChB,oBAAQ,GAAG;AAAA,cACT,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AACH,qBAAK;AACL;AAAA,cACF;AACE;AAAA,YACJ;AACA;AAAA,QACJ;AAAA,MACF;AACA,UAAI,MAAM,IAAI;AACZ,iBAAS,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AAAA,MAC9C;AAEA,YAAM,iBAAiB,GAAG,WAAW;AAErC,eAAS,KAAK,GAAG,KAAK,gBAAgB,MAAM;AAQ1C,cAAM,KAAK,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAGvF,YAAI,KAAK,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AACrF,cAAM,KAAK,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AACvF,YAAI,KAAK,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAAG,WAAG,KAAK,GAAG,UAAU,CAAC;AAErF,YAAI,OAAO;AAEX,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAI,MAAM,GAAG,CAAC,CAAC;AAAG;AAClB,cAAI,MAAM,GAAG,CAAC,CAAC;AAAG;AAClB,cAAI,MAAM,GAAG,CAAC,CAAC;AAAG;AAClB,cAAI,MAAM,GAAG,CAAC,CAAC;AAAG;AAAA,QACpB;AACA,YAAI,OAAO,GAAG;AACZ,kBAAQ,IAAI,wCAAwC,IAAI;AAAA,QAC1D;AAEA,eAAO;AAEP,cAAM,WAAW,CAAC;AAAG,iBAAS,KAAK,aAAa;AAAG,iBAAS,KAAK,aAAa;AAAG,iBAAS,KAAK,aAAa;AAE5G,cAAM,MAAM,GAAG,WAAW;AAC1B,YAAI,QAAQ;AACZ,YAAI,MAAM,IAAI;AACZ,gBAAM,IAAK,MAAM;AACjB,gBAAMC,MAAK,MAAM,SAAS;AAC1B,gBAAMC,OAAM,MAAM,WAAW,KAAK;AAClC,gBAAMC,OAAM,MAAM,WAAW,MAAM;AACnC,gBAAMC,KAAI;AACV,cAAI,MAAM,GAAG;AACX,oBAAQ,CAACH,IAAGC,IAAGC,IAAGC,EAAC;AAAA,UACrB,OAAO;AACL,oBAAQ;AAAA,UACV;AACA,iBAAO,KAAK,KAAK;AAAA,QACnB;AAIA,YAAI,SAAS,GAAG;AAKd,gBAAM,KAAK,MAAM,KAAK,SAAS,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AAC1D,gBAAM,KAAK,MAAM,KAAK,SAAS,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AAC1D,gBAAM,KAAK,MAAM,KAAK,MAAM,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AACvD,gBAAM,IAAI,MAAM,KAAK,IAAI,IAAI,EAAE;AAC/B,cAAI,IAAI,GAAG;AACT,kBAAM,MAAM;AACZ,iBAAK;AACL,iBAAK;AAAA,UACP;AAAA,QACF;AACA,iBAAS,KAAK,EAAE;AAChB,iBAAS,KAAK,EAAE;AAChB,iBAAS,KAAK,EAAE;AAChB,kBAAU,KAAK,QAAQ;AACvB,gBAAQ,KAAK,EAAE;AAAA,MACjB;AAEA,UAAI,KAAK;AACP,gBAAQ,KAAK,2BAA2B,GAAG,kDAAkD;AAAA,MAE/F;AAEA,aAAO,CAAC,iBAAiB,EAAE,UAAU,WAAW,SAAS,QAAQ,OAAO,EAAE,CAAC,CAAC;AAAA,IAC9E;AAEA,QAAM,sBAAsB,CAAC,KAAK,UAAU,SAAS,qBAAqB;AAExE,UAAI,YAAY;AAGhB,YAAM,UAAU,IAAI,MAAM,UAAU;AACpC,YAAM,WAAW,CAAC;AAClB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAEvC,cAAM,OAAO;AACb,cAAM,WAAW,CAAC;AAClB,cAAM,YAAY,CAAC;AACnB,cAAM,UAAU,CAAC;AACjB,cAAM,SAAS,CAAC;AAChB,YAAI,cAAc;AAClB,YAAI,MAAM;AAEV,cAAM,QAAQ,IAAI,MAAM,IAAI;AAC5B,YAAI,SAAS;AAAM;AACnB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAErC,gBAAM,QAAQ;AACd,gBAAM,IAAI,MAAM,KAAK,MAAM,CAAC,CAAC;AAC7B,cAAI,KAAK;AAAM;AACf,cAAI,EAAE,WAAW,IAAI;AACnB,oBAAQ,IAAI,qBAAqB,MAAM,CAAC,CAAC;AACzC;AAAA,UACF;AACA,cAAI,OAAO;AACX,mBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,gBAAI,EAAE,CAAC,MAAM,OAAO;AAClB,sBAAQ,IAAI,qCAAqC,YAAY,MAAM,IAAI,QAAQ,EAAE,CAAC,IAAI,YAAY;AAClG;AAAA,YACF;AAAA,UACF;AACA,iBAAO;AACP,cAAI,MAAM;AACR;AAAA,UACF;AAEA,cAAI,IAAI;AACR,gBAAM,KAAK,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AACnG,cAAI,KAAK,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AACjG,gBAAM,KAAK,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AACnG,cAAI,KAAK,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AAAG,aAAG,KAAK,WAAW,EAAE,GAAG,CAAC,CAAC;AACjG,gBAAM,WAAW,CAAC;AAAG,mBAAS,KAAK,aAAa;AAAG,mBAAS,KAAK,aAAa;AAAG,mBAAS,KAAK,aAAa;AAI5G,cAAI,SAAS,GAAG;AAMd,kBAAM,KAAK,MAAM,KAAK,SAAS,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AAC1D,kBAAM,KAAK,MAAM,KAAK,SAAS,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AAC1D,kBAAM,KAAK,MAAM,KAAK,MAAM,MAAM,KAAK,OAAO,GAAG,IAAI,EAAE;AACvD,kBAAM,IAAI,MAAM,KAAK,IAAI,IAAI,EAAE;AAC/B,gBAAI,IAAI,GAAG;AACT,oBAAM,MAAM;AACZ,mBAAK;AACL,mBAAK;AAAA,YACP;AAAA,UACF;AACA,mBAAS,KAAK,EAAE;AAChB,mBAAS,KAAK,EAAE;AAChB,mBAAS,KAAK,EAAE;AAChB,kBAAQ,KAAK,EAAE;AACf,oBAAU,KAAK,QAAQ;AACvB;AAAA,QACF;AACA,YAAI,KAAK;AACP,kBAAQ,KAAK,2BAA2B,GAAG,kDAAkD;AAAA,QAE/F;AAEA,iBAAS;AAAA,UACP,iBAAiB,EAAE,UAAU,WAAW,QAAQ,OAAO,EAAE,CAAC;AAAA,QAC5D;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAKA,QAAM,eAAe,CAAC,QAAQ,OAAO,SAAS,WAAW;AACvD,UAAI,UAAU,MAAM,WAAW,OAAO;AAAQ,iBAAS;AACvD,YAAM,UAAU;AAAA,QACd,aAAa;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,WAAW,WAAW,OAAO;AAAA,IACtC;AAKA,QAAM,WAAW,CAAC,QAAQ,OAAO,SAAS,QAAQ,UAAU;AAG1D,UAAI,MAAM;AAAA;AAAA,WAED,KAAK,MAAM,OAAO,MAAM,YAAY,MAAM,MAAM,WAAW,OAAO,MAAM;AAAA;AAAA,aAEtE,KAAK;AAAA;AAGhB,aAAO;AACP,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,eAAO,QAAQ,OAAO,CAAC,CAAC;AAAA;AAAA,MAC1B;AACA,aAAO;AAEP,aAAO;AACP,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,eAAO,QAAQ,MAAM,CAAC,CAAC;AAAA;AAAA,MACzB;AACA,aAAO;AAEP,UAAI,UAAU,MAAM,WAAW,OAAO,QAAQ;AAC5C,eAAO;AACP,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,iBAAO,QAAQ,OAAO,CAAC,CAAC;AAAA;AAAA,QAC1B;AACA,eAAO;AAAA,MACT,OAAO;AACL,eAAO;AAAA,MACT;AACA,aAAO;AACP,aAAO;AAAA,IACT;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACjaA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,MACZ,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,cAAgB;AAAA,QACd,sBAAsB;AAAA,QACtB,mBAAmB;AAAA,QACnB,OAAS;AAAA,MACX;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;AC3CA,IAAAC,qBAAA;AAAA;AACA,QAAM,QAAQ,IAAI;AAClB,QAAM,SAAS,KAAK,IAAI;AACxB,QAAM,OAAO,KAAK,IAAI,UAAW;AACjC,QAAM,OAAO,KAAK,IAAI,UAAW,KAAK;AACtC,QAAM,YAAY;AAGlB,QAAM,YAAY;AAAA,MAChB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,cAAc,CAAC,KAAK,KAAK,GAAG;AAAA,MAC5B,MAAM,CAAC,GAAG,KAAK,GAAG;AAAA,MAClB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,QAAQ,CAAC,KAAK,KAAK,GAAG;AAAA,MACtB,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,gBAAgB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC9B,MAAM,CAAC,GAAG,GAAG,GAAG;AAAA,MAChB,YAAY,CAAC,KAAK,IAAI,GAAG;AAAA,MACzB,OAAO,CAAC,KAAK,IAAI,EAAE;AAAA,MACnB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,IAAI,KAAK,GAAG;AAAA,MACxB,YAAY,CAAC,KAAK,KAAK,CAAC;AAAA,MACxB,WAAW,CAAC,KAAK,KAAK,EAAE;AAAA,MACxB,OAAO,CAAC,KAAK,KAAK,EAAE;AAAA,MACpB,gBAAgB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC9B,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,SAAS,CAAC,KAAK,IAAI,EAAE;AAAA,MACrB,MAAM,CAAC,GAAG,KAAK,GAAG;AAAA,MAClB,UAAU,CAAC,GAAG,GAAG,GAAG;AAAA,MACpB,UAAU,CAAC,GAAG,KAAK,GAAG;AAAA,MACtB,eAAe,CAAC,KAAK,KAAK,EAAE;AAAA,MAC5B,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,WAAW,CAAC,GAAG,KAAK,CAAC;AAAA,MACrB,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,aAAa,CAAC,KAAK,GAAG,GAAG;AAAA,MACzB,gBAAgB,CAAC,IAAI,KAAK,EAAE;AAAA,MAC5B,YAAY,CAAC,KAAK,KAAK,CAAC;AAAA,MACxB,YAAY,CAAC,KAAK,IAAI,GAAG;AAAA,MACzB,SAAS,CAAC,KAAK,GAAG,CAAC;AAAA,MACnB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,cAAc,CAAC,KAAK,KAAK,GAAG;AAAA,MAC5B,eAAe,CAAC,IAAI,IAAI,GAAG;AAAA,MAC3B,eAAe,CAAC,IAAI,IAAI,EAAE;AAAA,MAC1B,eAAe,CAAC,IAAI,IAAI,EAAE;AAAA,MAC1B,eAAe,CAAC,GAAG,KAAK,GAAG;AAAA,MAC3B,YAAY,CAAC,KAAK,GAAG,GAAG;AAAA,MACxB,UAAU,CAAC,KAAK,IAAI,GAAG;AAAA,MACvB,aAAa,CAAC,GAAG,KAAK,GAAG;AAAA,MACzB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,YAAY,CAAC,IAAI,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,KAAK,IAAI,EAAE;AAAA,MACvB,aAAa,CAAC,KAAK,KAAK,GAAG;AAAA,MAC3B,aAAa,CAAC,IAAI,KAAK,EAAE;AAAA,MACzB,SAAS,CAAC,KAAK,GAAG,GAAG;AAAA,MACrB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,MAAM,CAAC,KAAK,KAAK,CAAC;AAAA,MAClB,WAAW,CAAC,KAAK,KAAK,EAAE;AAAA,MACxB,MAAM,CAAC,KAAK,KAAK,GAAG;AAAA,MACpB,MAAM,CAAC,KAAK,KAAK,GAAG;AAAA,MACpB,OAAO,CAAC,GAAG,KAAK,CAAC;AAAA,MACjB,aAAa,CAAC,KAAK,KAAK,EAAE;AAAA,MAC1B,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,WAAW,CAAC,KAAK,IAAI,EAAE;AAAA,MACvB,QAAQ,CAAC,IAAI,GAAG,GAAG;AAAA,MACnB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,eAAe,CAAC,KAAK,KAAK,GAAG;AAAA,MAC7B,WAAW,CAAC,KAAK,KAAK,CAAC;AAAA,MACvB,cAAc,CAAC,KAAK,KAAK,GAAG;AAAA,MAC5B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,sBAAsB,CAAC,KAAK,KAAK,GAAG;AAAA,MACpC,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,aAAa,CAAC,KAAK,KAAK,GAAG;AAAA,MAC3B,eAAe,CAAC,IAAI,KAAK,GAAG;AAAA,MAC5B,cAAc,CAAC,KAAK,KAAK,GAAG;AAAA,MAC5B,gBAAgB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC9B,gBAAgB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC9B,gBAAgB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC9B,aAAa,CAAC,KAAK,KAAK,GAAG;AAAA,MAC3B,MAAM,CAAC,GAAG,KAAK,CAAC;AAAA,MAChB,WAAW,CAAC,IAAI,KAAK,EAAE;AAAA,MACvB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,SAAS,CAAC,KAAK,GAAG,GAAG;AAAA,MACrB,QAAQ,CAAC,KAAK,GAAG,CAAC;AAAA,MAClB,kBAAkB,CAAC,KAAK,KAAK,GAAG;AAAA,MAChC,YAAY,CAAC,GAAG,GAAG,GAAG;AAAA,MACtB,cAAc,CAAC,KAAK,IAAI,GAAG;AAAA,MAC3B,cAAc,CAAC,KAAK,KAAK,GAAG;AAAA,MAC5B,gBAAgB,CAAC,IAAI,KAAK,GAAG;AAAA,MAC7B,iBAAiB,CAAC,KAAK,KAAK,GAAG;AAAA,MAC/B,mBAAmB,CAAC,GAAG,KAAK,GAAG;AAAA,MAC/B,iBAAiB,CAAC,IAAI,KAAK,GAAG;AAAA,MAC9B,iBAAiB,CAAC,KAAK,IAAI,GAAG;AAAA,MAC9B,cAAc,CAAC,IAAI,IAAI,GAAG;AAAA,MAC1B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,aAAa,CAAC,KAAK,KAAK,GAAG;AAAA,MAC3B,MAAM,CAAC,GAAG,GAAG,GAAG;AAAA,MAChB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,OAAO,CAAC,KAAK,KAAK,CAAC;AAAA,MACnB,WAAW,CAAC,KAAK,KAAK,EAAE;AAAA,MACxB,QAAQ,CAAC,KAAK,KAAK,CAAC;AAAA,MACpB,WAAW,CAAC,KAAK,IAAI,CAAC;AAAA,MACtB,QAAQ,CAAC,KAAK,KAAK,GAAG;AAAA,MACtB,eAAe,CAAC,KAAK,KAAK,GAAG;AAAA,MAC7B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,eAAe,CAAC,KAAK,KAAK,GAAG;AAAA,MAC7B,eAAe,CAAC,KAAK,KAAK,GAAG;AAAA,MAC7B,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,MAAM,CAAC,KAAK,KAAK,EAAE;AAAA,MACnB,MAAM,CAAC,KAAK,KAAK,GAAG;AAAA,MACpB,MAAM,CAAC,KAAK,KAAK,GAAG;AAAA,MACpB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,QAAQ,CAAC,KAAK,GAAG,GAAG;AAAA,MACpB,KAAK,CAAC,KAAK,GAAG,CAAC;AAAA,MACf,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,IAAI,KAAK,GAAG;AAAA,MACxB,aAAa,CAAC,KAAK,IAAI,EAAE;AAAA,MACzB,QAAQ,CAAC,KAAK,KAAK,GAAG;AAAA,MACtB,YAAY,CAAC,KAAK,KAAK,EAAE;AAAA,MACzB,UAAU,CAAC,IAAI,KAAK,EAAE;AAAA,MACtB,UAAU,CAAC,KAAK,KAAK,GAAG;AAAA,MACxB,QAAQ,CAAC,KAAK,IAAI,EAAE;AAAA,MACpB,QAAQ,CAAC,KAAK,KAAK,GAAG;AAAA,MACtB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,WAAW,CAAC,KAAK,IAAI,GAAG;AAAA,MACxB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,KAAK,KAAK,GAAG;AAAA,MACzB,MAAM,CAAC,KAAK,KAAK,GAAG;AAAA,MACpB,aAAa,CAAC,GAAG,KAAK,GAAG;AAAA,MACzB,WAAW,CAAC,IAAI,KAAK,GAAG;AAAA,MACxB,KAAK,CAAC,KAAK,KAAK,GAAG;AAAA,MACnB,MAAM,CAAC,GAAG,KAAK,GAAG;AAAA,MAClB,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,MACvB,QAAQ,CAAC,KAAK,IAAI,EAAE;AAAA,MACpB,WAAW,CAAC,IAAI,KAAK,GAAG;AAAA,MACxB,QAAQ,CAAC,KAAK,KAAK,GAAG;AAAA,MACtB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,OAAO,CAAC,KAAK,KAAK,GAAG;AAAA,MACrB,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,MAC1B,QAAQ,CAAC,KAAK,KAAK,CAAC;AAAA,MACpB,aAAa,CAAC,KAAK,KAAK,EAAE;AAAA,IAC5B;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrKA,IAAAC,mBAAA;AAAA;AAAA,QAAM,EAAE,QAAQ,MAAM,MAAM,UAAU,IAAI;AAG1C,QAAM,UAAU,CAAC,KAAK,gBAAgB;AAAA,MACpC,IAAI,CAAC,IAAI,YAAY,CAAC;AAAA,MACtB,IAAI,IAAI,CAAC,IAAI,YAAY,CAAC;AAAA,IAC5B;AAGA,QAAM,aAAa,CAAC,KAAK,aAAa,cAAc;AAClD,UAAI,IAAI,QAAQ,GAAG,IAAI,GAAG;AACxB,eAAO,QAAQ,KAAK,YAAY,CAAC,CAAC;AAAA,MACpC;AAEA,UAAI,IAAI,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,GAAG;AAAE,eAAO;AAAA,MAAI;AAC3B,UAAI,MAAM;AAAG,eAAO;AACpB,UAAK,IAAI,MAAO;AAEhB,UAAI,IAAI,YAAY,CAAC;AACrB,aAAO,KAAK,MAAM,IAAI,GAAM,IAAI;AAAA,IAClC;AAEA,QAAM,aAAa,CAAC,KAAK,aAAa,cAAc;AAClD,UAAI,IAAI,QAAQ,GAAG,IAAI,GAAG;AACxB,eAAO,QAAQ,KAAK,YAAY,CAAC,CAAC;AAAA,MACpC;AAEA,UAAI,IAAI,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,GAAG;AAAE,eAAO;AAAA,MAAI;AAC3B,UAAI,MAAM;AAAG,eAAO;AACpB,UAAK,IAAI,MAAO;AAEhB,UAAI,IAAI,YAAY,CAAC;AACrB,aAAO,KAAK,MAAM,IAAI,GAAM,IAAI;AAAA,IAClC;AAEA,QAAM,aAAa,CAAC,KAAK,aAAa,cAAc;AAClD,UAAI,IAAI,QAAQ,GAAG,IAAI,GAAG;AACxB,eAAO,QAAQ,KAAK,YAAY,CAAC,CAAC;AAAA,MACpC;AAEA,UAAI,IAAI,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,GAAG;AAAE,eAAO;AAAA,MAAI;AAC3B,UAAI,MAAM;AAAG,eAAO;AACpB,UAAK,IAAI,MAAO;AAEhB,UAAI,IAAI,YAAY,CAAC;AACrB,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,KAAK,SAAS;AAC7B,UAAI,IAAI,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,GAAG;AAAE,eAAO;AAAA,MAAI;AAC3B,UAAI,MAAM;AAAG,eAAO;AACpB,UAAI,IAAI,OAAO,KAAK,IAAI,GAAG;AAAA,MAE3B,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AAAA,MAE3B,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AAAA,MAE3B,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AACzB,YAAK,IAAI;AAAA,MACX,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AACzB,YAAK,IAAI;AAAA,MACX,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AACzB,YAAK,IAAI;AAAA,MACX,WACI,IAAI,OAAO,KAAK,IAAI,GAAG;AACzB,YAAK,IAAI;AAAA,MACX,OAAO;AACL,YAAK,IAAI;AAAA,MACX;AACA,aAAO;AAAA,IACT;AAGA,QAAM,WAAW,CAAC,UAAU;AAE1B,UAAI;AACJ,cAAQ,MAAM,YAAY;AAC1B,UAAI,SAAS,WAAW;AACtB,cAAM,UAAU,KAAK;AACrB,cAAM,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG;AAAA,MACjD,OAAO;AACL,YAAI,MAAM,CAAC,MAAM,KAAK;AACpB,cAAI,MAAM,WAAW,GAAG;AAEtB,oBAAQ,MAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAAA,UAC9E;AACA,cAAI,MAAM,WAAW,GAAG;AAEtB,kBAAM;AAAA,cACJ,SAAS,OAAO,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI;AAAA,cACrC,SAAS,OAAO,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI;AAAA,cACrC,SAAS,OAAO,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI;AAAA,YACvC;AAAA,UACF;AAAA,QACF,OAAO;AACL,gBAAM,MAAM;AACZ,cAAI,IAAI,IAAI,KAAK,KAAK;AACtB,cAAI,MAAM,MAAM;AAEd,gBAAI,EAAE,CAAC;AACP,gBAAI,EAAE,MAAM,EAAE,QAAQ,GAAG,IAAI,GAAG,EAAE,QAAQ,GAAG,CAAC;AAC9C,kBAAM,EAAE,MAAM,GAAG;AACjB,gBAAI,EAAE,QAAQ,GAAG,IAAI,GAAG;AAEtB,oBAAM,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC;AAC3D,oBAAM,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG;AAAA,YACjD,OAAO;AAEL,oBAAM,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC;AAC3D,oBAAM,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG;AAAA,YACjD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,SAAS,SAAS;AAClC,UAAI,WAAW,SAAS;AACtB,cAAM,OAAO,QAAQ,QAAQ;AAC7B,cAAM,MAAM,OAAO;AACnB,cAAM,MAAM,IAAI,OAAO,KAAK,GAAG;AAC/B,YAAI,IAAI,IAAI,KAAK,IAAI;AACrB,YAAI,MAAM,MAAM;AACd,cAAI,EAAE,CAAC;AACP,cAAI,IAAI,EAAE,QAAQ,GAAG,IAAI;AACzB,iBAAO,EAAE,CAAC,MAAM;AAAK;AACrB,cAAI,EAAE,MAAM,GAAG,EAAE,QAAQ,GAAG,CAAC;AAC7B,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,GAAG,GAAG,IAAI,OAAO;AAChC,YAAM,KAAK,IAAI;AACf,YAAM,KAAK,IAAI;AACf,UAAI,MAAM,MAAM,MAAM;AAAI,eAAO,CAAC,GAAG,CAAC;AACtC,UAAI,MAAM;AAAI,eAAO,CAAC,GAAG,KAAM,CAAC,EAAG;AACnC,UAAI,MAAM;AAAI,eAAO,CAAC,KAAM,CAAC,IAAK,CAAC;AACnC,aAAO,CAAC,KAAM,CAAC,IAAK,KAAM,CAAC,EAAG;AAAA,IAChC;AAGA,QAAM,aAAa,CAAC,WAAW,SAAS;AACtC,UAAI,IAAI,UAAU;AAClB,aAAO,IAAI,GAAG;AACZ,cAAM,IAAI,UAAU,IAAI,CAAC;AACzB,YAAI,QAAQ,GAAG;AACb,iBAAO,EAAE,IAAI;AAAA,QACf;AACA;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,QAAQ,cAAc;AAC/C,UAAI,QAAQ;AACZ,UAAI,WAAW,QAAQ;AACrB,YAAI,UAAU,QAAQ;AACpB,kBAAQ,CAAC,UAAU,OAAO,CAAC,GAAG,UAAU,OAAO,CAAC,GAAG,UAAU,OAAO,CAAC,GAAG,CAAC;AAAA,QAC3E,OAAO;AACL,cAAI,UAAU,MAAM;AAClB,oBAAQ,CAAC,UAAU,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,CAAC;AAAA,UACrE;AAAA,QACF;AAAA,MACF,OAAO;AAEL,YAAI,UAAU,MAAM;AAClB,kBAAQ,CAAC,UAAU,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,CAAC;AAAA,QACrE,OAAO;AACL,cAAI,UAAU,QAAQ;AACpB,oBAAQ,CAAC,UAAU,OAAO,CAAC,GAAG,UAAU,OAAO,CAAC,GAAG,UAAU,OAAO,CAAC,GAAG,CAAC;AAAA,UAC3E;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACvMA;AAAA;AAAA,QAAM,EAAE,UAAU,UAAU,QAAQ,IAAI;AACxC,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,UAAU,CAAC,KAAK,YAAY;AAChC,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,cAAc,SAAS;AAAE,YAAI,WAAW,QAAQ;AAAA,MAAS;AAAA,IAC/D;AAEA,QAAM,kBAAkB,CAAC,KAAK,YAAY;AAExC,UAAI,aAAa,SAAS;AAAE,YAAI,UAAU,QAAQ;AAAA,MAAQ;AAE1D,UAAI,WAAW,SAAS;AAAE,YAAI,OAAO,SAAS,QAAQ,KAAK;AAAG,YAAI,SAAS,IAAI;AAAA,MAAK;AACpF,UAAI,aAAa,SAAS;AAAE,YAAI,UAAU,QAAQ;AAAA,MAAQ;AAC1D,UAAI,UAAU,SAAS;AACrB,YAAI,OAAO,SAAS,QAAQ,IAAI;AAAA,MAClC,OAAO;AACL,cAAM,IAAI,SAAS,SAAS,MAAM;AAClC,YAAI,GAAG;AACL,cAAI,OAAO,SAAS,CAAC;AAAA,QACvB;AAAA,MACF;AACA,UAAI,kBAAkB,SAAS;AAAE,YAAI,UAAU,QAAQ,cAAc;AAAA,MAAE;AAEvE,UAAI,kBAAkB,SAAS;AAC7B,YAAI,cAAc,QAAQ,cAAc;AAAA,MAC1C,OAAO;AACL,cAAM,KAAK,SAAS,SAAS,cAAc;AAC3C,YAAI,IAAI;AACN,cAAI,cAAc;AAAA,QACpB;AAAA,MACF;AACA,UAAI,YAAY,SAAS;AACvB,YAAI,SAAS,SAAS,QAAQ,MAAM;AAAA,MACtC,OAAO;AACL,cAAM,IAAI,SAAS,SAAS,QAAQ;AACpC,YAAI,GAAG;AACL,cAAI,SAAS,SAAS,CAAC;AAAA,QACzB;AAAA,MACF;AACA,UAAI,oBAAoB,SAAS;AAAE,YAAI,gBAAgB,QAAQ,gBAAgB;AAAA,MAAE;AAAA,IACnF;AAEA,QAAM,sBAAsB;AAE5B,QAAM,gBAAgB,CAAC,KAAK,YAAY;AACtC,UAAI,OAAO;AACX,UAAI,eAAe,SAAS;AAC1B,eAAO,QAAQ;AAAA,MACjB,OAAO;AACL,cAAM,IAAI,SAAS,SAAS,WAAW;AACvC,YAAI,GAAG;AAAE,iBAAO;AAAA,QAAE;AAAA,MACpB;AACA,UAAI,SAAS,MAAM;AACjB,YAAI,aAAa,CAAC;AAClB,YAAI,IAAI,oBAAoB,KAAK,IAAI;AACrC,eAAO,MAAM,MAAM;AACjB,gBAAM,IAAI,oBAAoB;AAC9B,gBAAM,IAAI,KAAK,QAAQ,GAAG,IAAI;AAC9B,cAAI,IAAI,KAAK,MAAM,GAAG,CAAC;AACvB,cAAI,EAAE,KAAK;AAGX,gBAAM,IAAI,EAAE,MAAM,GAAG,EAAE,QAAQ,GAAG,CAAC;AACnC,cAAI,IAAI,EAAE,MAAM,EAAE,QAAQ,GAAG,IAAI,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK;AACzD,cAAI,EAAE,QAAQ,GAAG,IAAI,GAAG;AAAE,gBAAI,EAAE,MAAM,GAAG;AAAA,UAAE,OAAO;AAAE,gBAAI,EAAE,MAAM,GAAG;AAAA,UAAE;AACrE,cAAI;AACJ,kBAAQ,GAAG;AAAA,YACT,KAAK;AACH,kBAAI,EAAE,WAAW;AAAG,kBAAE,KAAK,CAAC;AAC5B,kBAAI,EAAE,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;AAC9B,kBAAI,WAAW,KAAK,CAAC;AACrB;AAAA,YACF,KAAK;AACH,kBAAI,EAAE,WAAW;AAAG,kBAAE,KAAK,EAAE,CAAC,CAAC;AAC/B,kBAAI,EAAE,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;AAC1B,kBAAI,WAAW,KAAK,CAAC;AACrB;AAAA,YACF,KAAK;AACH,kBAAI,EAAE,QAAQ,EAAE;AAChB,kBAAI,WAAW,KAAK,CAAC;AACrB;AAAA,YAIF;AACE;AAAA,UACJ;AAEA,iBAAO,KAAK,MAAM,GAAG,KAAK,MAAM;AAChC,cAAI,oBAAoB,KAAK,IAAI;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAEA,QAAM,gBAAgB;AAEtB,QAAM,SAAS,CAAC,SAAS,EAAE,YAAY,MAAM;AAE3C,YAAM,MAAM,EAAE,MAAM,OAAO,GAAG,GAAG,GAAG,GAAG,OAAO,QAAQ,QAAQ,QAAQ,aAAa,IAAI;AAGvF,UAAI,WAAW,CAAC,OAAO,KAAK;AAE5B,UAAI,WAAW,SAAS;AAEtB,YAAI,QAAQ,QAAQ;AACpB,YAAI,WAAW,CAAC,IAAI,OAAO,IAAI,KAAK;AAAA,MACtC;AACA,UAAI,WAAW,SAAS;AAAE,YAAI,QAAQ,QAAQ;AAAA,MAAM;AACpD,UAAI,YAAY,SAAS;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAO;AACvD,UAAI,aAAa,SAAS;AACxB,cAAM,OAAO,QAAQ,QAAQ,KAAK;AAClC,cAAM,IAAI,cAAc,KAAK,IAAI;AACjC,YAAI,MAAM,MAAM;AACd,cAAI,QAAQ,WAAW,EAAE,CAAC,CAAC;AAC3B,cAAI,QAAQ,WAAW,EAAE,CAAC,CAAC;AAC3B,cAAI,QAAQ,WAAW,EAAE,CAAC,CAAC;AAC3B,cAAI,QAAQ,WAAW,EAAE,CAAC,CAAC;AAAA,QAC7B;AAEA,YAAI,IAAI,MAAM,QAAQ,GAAG,IAAI,GAAG;AAE9B,cAAI,IAAI,QAAQ,IAAI,OAAO,WAAW;AACtC,cAAI,IAAI,QAAQ;AAGhB,cAAI,SAAS,CAAC,IAAI;AAAA,QACpB,OAAO;AAEL,gBAAM,IAAI,IAAI,SAAS,CAAC,KAAK,WAAW,IAAI,KAAK,IAAI;AACrD,cAAI,SAAS,CAAC,IAAI;AAAA,QACpB;AACA,YAAI,IAAI,OAAO,QAAQ,GAAG,IAAI,GAAG;AAE/B,cAAI,IAAI,QAAQ,IAAI,QAAQ,KAAK;AACjC,cAAI,IAAI,QAAQ;AAGhB,cAAI,SAAS,CAAC,IAAI;AAAA,QACpB,OAAO;AAEL,gBAAM,IAAI,IAAI,SAAS,CAAC,KAAK,WAAW,IAAI,MAAM,IAAI;AACtD,cAAI,SAAS,CAAC,IAAI;AAAA,QACpB;AAAA,MACF,OAAO;AACL,YAAI,QAAQ;AACZ,YAAI,QAAQ;AACZ,YAAI,QAAQ,OAAO,IAAI,SAAS,CAAC;AACjC,YAAI,QAAQ,OAAO,IAAI,SAAS,CAAC;AAAA,MACnC;AACA,UAAI,QAAQ,KAAK,KAAM,IAAI,QAAQ,IAAI,QAAU,IAAI,QAAQ,IAAI,KAAM,IAAI,KAAK;AAGhF,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,YAAY;AAC9B,YAAM,MAAM,EAAE,MAAM,WAAW,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI;AAClE,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAE3C,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAC5B,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,MAAM,QAAQ,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI;AAC/D,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAC3C,UAAI,QAAQ,SAAS;AAAE,YAAI,KAAK,QAAQ;AAAA,MAAG;AAE3C,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAC5B,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,SAAS;AAChC,YAAM,SAAS,CAAC;AAChB,YAAM,MAAM;AACZ,aAAO,KAAK,KAAK;AACjB,UAAI,IAAI,IAAI,KAAK,IAAI;AACrB,aAAO,MAAM,MAAM;AACjB,YAAI,QAAQ,EAAE,CAAC;AACf,cAAM,OAAO,IAAI,YAAY,MAAM;AACnC,gBAAQ,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;AAC3B,eAAO,KAAK,KAAK;AACjB,eAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AACnC,YAAI,IAAI,KAAK,IAAI;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,MAAM,WAAW;AAE/B,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,YAAY,SAAS;AACvB,YAAI,SAAS,gBAAgB,QAAQ,MAAM;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,YAAY;AAC9B,YAAM,MAAM,EAAE,MAAM,UAAU;AAE9B,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,YAAY,SAAS;AACvB,YAAI,SAAS,gBAAgB,QAAQ,MAAM;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,MAAM,QAAQ,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK,QAAQ,IAAI;AAEtF,UAAI,OAAO,SAAS;AAAE,YAAI,IAAI,QAAQ;AAAA,MAAE;AACxC,UAAI,OAAO,SAAS;AAAE,YAAI,IAAI,QAAQ;AAAA,MAAE;AACxC,UAAI,QAAQ,SAAS;AACnB,YAAI,KAAK,QAAQ;AACjB,YAAI,EAAE,QAAQ,UAAU;AAAE,cAAI,KAAK,IAAI;AAAA,QAAG;AAAA,MAC5C;AACA,UAAI,QAAQ,SAAS;AACnB,YAAI,KAAK,QAAQ;AACjB,YAAI,EAAE,QAAQ,UAAU;AAAE,cAAI,KAAK,IAAI;AAAA,QAAG;AAAA,MAC5C;AACA,UAAI,IAAI,OAAO,IAAI,IAAI;AACrB,gBAAQ,IAAI,iDAAiD;AAAA,MAC/D;AACA,UAAI,WAAW,SAAS;AAAE,YAAI,QAAQ,QAAQ;AAAA,MAAM;AACpD,UAAI,YAAY,SAAS;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAO;AAEvD,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAC5B,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,MAAM,UAAU,GAAG,KAAK,GAAG,KAAK,QAAQ,IAAI;AAE1D,UAAI,QAAQ,SAAS;AAAE,YAAI,IAAI,QAAQ;AAAA,MAAG;AAC1C,UAAI,QAAQ,SAAS;AAAE,YAAI,IAAI,QAAQ;AAAA,MAAG;AAC1C,UAAI,OAAO,SAAS;AAAE,YAAI,SAAS,QAAQ;AAAA,MAAE;AAE7C,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAC5B,aAAO;AAAA,IACT;AAEA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,MAAM,QAAQ;AAE5B,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,OAAO,WAAW,OAAO,SAAS;AACpC,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,OAAO;AAAS,cAAI,QAAQ;AAChC,YAAI,OAAO;AAAS,cAAI,QAAQ;AAChC,YAAI,EAAE,gBAAgB;AAAM,cAAI,aAAa,CAAC;AAC9C,cAAM,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE;AAC9B,YAAI,WAAW,KAAK,CAAC;AAAA,MACvB;AAEA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAKA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,MAAM,OAAO;AAE3B,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,WAAW,CAAC;AAChB,UAAI,OAAO,SAAS;AAClB,YAAI,KAAK;AACT,YAAI,KAAK;AAET,YAAI,IAAI;AACR,cAAM,IAAI,QAAQ,EAAE;AACpB,cAAM,SAAS,QAAQ,SAAS,CAAC,IAAI,IAAI;AACzC,eAAO,IAAI,GAAG;AACZ,gBAAM,IAAI,QAAQ,EAAE,CAAC;AACrB,kBAAQ,GAAG;AAAA,YAGT,KAAK;AACH,kBAAI,GAAG,SAAS,GAAG;AACjB,mBAAG,EAAE,KAAK,EAAE;AACZ,qBAAK;AAAA,cACP;AACA,oBAAM;AACN;AAAA,YACF,KAAK;AACH,kBAAI,GAAG,SAAS,GAAG;AACjB,oBAAI,GAAG,QAAQ,GAAG,KAAK,GAAG;AACxB,qBAAG,EAAE,KAAK,EAAE;AACZ,uBAAK;AAAA,gBACP;AAAA,cACF;AACA,oBAAM;AACN;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,oBAAM;AACN;AAAA,YAEF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,kBAAI,OAAO,MAAM;AACf,oBAAI,GAAG,SAAS,GAAG;AACjB,qBAAG,EAAE,KAAK,EAAE;AACZ,uBAAK;AAAA,gBACP;AACA,oBAAI,SAAS,KAAK,EAAE;AAAA,cACtB;AACA,mBAAK,EAAE,GAAM,GAAG,CAAC,GAAG,KAAK,IAAI,OAAO;AACpC;AAAA,YAEF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,kBAAI,OAAO,MAAM;AACf,oBAAI,GAAG,SAAS,GAAG;AACjB,qBAAG,EAAE,KAAK,EAAE;AACZ,uBAAK;AAAA,gBACP;AAAA,cACF;AACA;AAAA,YACF;AACE;AAAA,UACJ;AACA;AAAA,QACF;AACA,YAAI,MAAM,KAAK,OAAO,MAAM;AAC1B,cAAI,GAAG,SAAS,GAAG;AACjB,eAAG,EAAE,KAAK,EAAE;AAAA,UACd;AACA,cAAI,SAAS,KAAK,EAAE;AAAA,QACtB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAOA,QAAM,SAAS,CAAC,SAAS,EAAE,WAAW,MAAM;AAC1C,YAAM,MAAM,EAAE,MAAM,QAAQ;AAE5B,oBAAc,KAAK,OAAO;AAE1B,cAAQ,KAAK,OAAO;AAEpB,sBAAgB,KAAK,OAAO;AAE5B,UAAI,OAAO,WAAW,OAAO,SAAS;AACpC,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,OAAO;AAAS,cAAI,QAAQ;AAChC,YAAI,OAAO;AAAS,cAAI,QAAQ;AAChC,YAAI,EAAE,gBAAgB;AAAM,cAAI,aAAa,CAAC;AAC9C,cAAM,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE;AAC9B,YAAI,WAAW,KAAK,CAAC;AAAA,MACvB;AAEA,UAAI,UAAU,CAAC;AACf,UAAI,gBAAgB,SAAS;AAE3B,YAAI,MAAM,QAAQ,YAAY;AAC9B,YAAI,IAAI,CAAC,MAAM,KAAK;AAAE,gBAAM,IAAI,MAAM,GAAG,IAAI,MAAM;AAAA,QAAE;AACrD,YAAI,WAAW,GAAG,MAAM,QAAW;AACjC,gBAAM,WAAW,GAAG;AACpB,gBAAM,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC;AACpC,cAAI,QAAQ,KAAK,GAAG;AAAA,QACtB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC/cA;AAAA;AAAA,QAAM,EAAE,YAAY,WAAW,IAAI;AAEnC,QAAM,EAAE,SAAS,YAAY,YAAY,YAAY,QAAQ,IAAI;AAEjE,QAAM,oBAAoB,CAAC,KAAK,WAAW,WAAW;AACpD,YAAM,EAAE,aAAa,WAAW,WAAW,WAAW,WAAW,QAAQ,UAAU,eAAe,IAAI;AAEtG,YAAM,QAAQ;AAAA,QACZ,OAAO,CAACC,SAAQ,UAAU,EAAE,QAAQ,SAAS,GAAGA,IAAG;AAAA,QAEnD,MAAM,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,YAAWC,cAAa;AAChF,cAAI,IAAI,WAAWN,KAAI,GAAGC,cAAaC,UAAS;AAChD,cAAI,IAAK,IAAI,WAAWF,KAAI,GAAGC,cAAaE,UAAS;AACrD,gBAAM,IAAI,WAAWH,KAAI,OAAOC,cAAaC,UAAS;AACtD,gBAAM,IAAI,WAAWF,KAAI,QAAQC,cAAaE,UAAS;AACvD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AAGpD,cAAI;AACJ,cAAI,IAAI,KAAK,IAAI,GAAG;AAClB,gBAAK,IAAK,IAAI;AACd,gBAAK,IAAK,IAAI;AACd,gBAAI,OAAO,GAAG;AACZ,sBAAQ,WAAW,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;AAAA,YAC/D,OAAO;AACL,sBAAQ,WAAW,iBAAiB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,UAAAI,WAAU,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,GAAG,CAAC;AAAA,YACjG;AACA,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,WAAW,MAAM,WAAW,EAAE,QAAQ,KAAK,GAAG,WAAW,MAAM,SAAS,KAAK,CAAC;AAAA,YACxF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,QAAQ,CAACN,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,YAAWC,cAAa;AAClF,gBAAM,IAAI,WAAWN,KAAI,GAAGC,cAAaC,UAAS;AAClD,gBAAM,IAAK,IAAI,WAAWF,KAAI,GAAGC,cAAaE,UAAS;AACvD,gBAAM,IAAI,WAAWH,KAAI,QAAQC,cAAaG,UAAS;AAEvD,cAAI;AACJ,cAAI,IAAI,GAAG;AACT,oBAAQ,WAAW,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,UAAAE,WAAU,QAAQ,EAAE,CAAC;AACjE,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,WAAW,MAAM,WAAW,EAAE,QAAQ,KAAK,GAAG,WAAW,MAAM,SAAS,KAAK,CAAC;AAAA,YACxF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,SAAS,CAACN,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,YAAWC,cAAa;AACnF,gBAAM,KAAK,WAAWN,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAK,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACpD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AAEzD,cAAI;AACJ,cAAI,KAAK,KAAK,KAAK,GAAG;AACpB,oBAAQ,WAAW,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,GAAG,UAAAG,WAAU,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAC3E,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,WAAW,MAAM,WAAW,EAAE,QAAQ,KAAK,GAAG,WAAW,MAAM,SAAS,KAAK,CAAC;AAAA,YACxF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,MAAM,CAACN,MAAKC,cAAaC,YAAWC,YAAWC,eAAc;AAC3D,gBAAM,KAAK,WAAWJ,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACzD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AAWzD,gBAAM,QAAQ,WAAW,KAAK,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AAClD,cAAI,WAAW,SAAS;AAAA,UAExB;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,SAAS,CAACH,MAAKC,cAAaC,YAAWC,eAAc;AACnD,gBAAM,SAAS,CAAC;AAChB,mBAAS,IAAI,GAAG,IAAIH,KAAI,OAAO,QAAQ,KAAK;AAC1C,kBAAM,IAAIA,KAAI,OAAO,CAAC;AACtB,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,oBAAM,IAAI,WAAW,EAAE,GAAGC,cAAaC,UAAS;AAChD,oBAAM,IAAK,IAAI,WAAW,EAAE,GAAGD,cAAaE,UAAS;AACrD,qBAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,YACpB;AAAA,UACF;AACA,cAAI,WAAW,SAAS;AACtB,mBAAO,WAAW,MAAM,WAAW,MAAM;AAAA,UAC3C;AACA,iBAAO,WAAW,MAAM,WAAW,CAAC,GAAG,MAAM;AAAA,QAC/C;AAAA,QAEA,UAAU,CAACH,MAAKC,cAAaC,YAAWC,YAAWC,eAAc;AAC/D,gBAAM,SAAS,CAAC;AAUhB,mBAAS,IAAI,GAAG,IAAIJ,KAAI,OAAO,QAAQ,KAAK;AAC1C,kBAAM,IAAIA,KAAI,OAAO,CAAC;AACtB,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,oBAAM,IAAI,WAAW,EAAE,GAAGC,cAAaC,UAAS;AAChD,oBAAM,IAAK,IAAI,WAAW,EAAE,GAAGD,cAAaE,UAAS;AACrD,qBAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,YACpB;AAAA,UACF;AAEA,gBAAM,QAAQ,WAAW,KAAK,MAAM;AACpC,cAAI,WAAW,SAAS;AAAA,UAGxB;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,MAAM,CAACH,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,YAAWC,cAAa;AAChF,gBAAM,cAAc,WAAWN,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,YAAWC,WAAU,cAAc;AAErH,gBAAM,gBAAgB,OAAO,QAAQ,WAAW,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;AACzF,gBAAM,SAAS,cAAc,IAAI,CAAC,UAAU;AAC1C,kBAAM,OAAO,MAAM,CAAC;AACpB,gBAAI,WAAW,WAAW,KAAK,UAAU;AACvC,oBAAM,SAAS,WAAW,MAAM,SAAS,IAAI,EAAE,MAAM;AACrD,qBAAO,KAAK,OAAO,CAAC,CAAC;AACrB,qBAAO,WAAW,MAAM,WAAW,MAAM;AAAA,YAC3C;AACA,mBAAO;AAAA,UACT,CAAC;AACD,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,aAAO,MAAM,IAAI,IAAI,EAAE,KAAK,aAAa,WAAW,WAAW,WAAW,WAAW,QAAQ;AAAA,IAC/F;AAEA,WAAO,UAAU;AAEjB,QAAM,eAAe,CAAC,QAAQ,aAAa;AACzC,UAAI;AAAU,eAAO,WAAW,MAAM,aAAa,QAAQ,QAAQ;AACnE,aAAO,WAAW,MAAM,WAAW,CAAE,GAAG,MAAM;AAAA,IAChD;AAEA,QAAM,aAAa,CAAC,KAAK,aAAa,WAAW,WAAW,WAAW,WAAW,UAAU,mBAAmB;AAC7G,YAAM,QAAQ,CAAC;AACf,YAAM,KAAK;AAYX,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,WAAW,KAAK;AACpB,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AAET,YAAM,UAAU,MAAM;AACpB;AACA,mBAAW,KAAK;AAChB,aAAK;AAAA,MACP;AACA,YAAM,aAAa,MAAM;AACvB,YAAI,CAAC,MAAM,QAAQ;AAAG,gBAAM,QAAQ,IAAI,WAAW,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC;AAAA,MAC5E;AACA,eAAS,IAAI,GAAG,IAAI,IAAI,SAAS,QAAQ,KAAK;AAC5C,cAAM,KAAK,IAAI,SAAS,CAAC;AACzB,cAAM,MAAM,GAAG;AACf,YAAI,IAAI;AACR,gBAAQ,GAAG,GAAG;AAAA,UACZ,KAAK;AAEH,gBAAI,MAAM,GAAG;AACX,mBAAK;AAAG,mBAAK;AAAA,YACf;AAEA,gBAAI,KAAK,KAAK,OAAO,OAAO;AAAA,YAE5B;AAEA,gBAAI,IAAI,UAAU,IAAI,GAAG;AACvB,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,sBAAQ;AACR,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,CAAC;AAC/D,mBAAK;AAAI,mBAAK;AAAA,YAChB;AAEA,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AAEH,gBAAI,KAAK,KAAK,OAAO,OAAO;AAAA,YAE5B;AAEA,gBAAI,IAAI,UAAU,IAAI,GAAG;AACvB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,sBAAQ;AACR,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,CAAC;AAC/D,mBAAK;AAAI,mBAAK;AAAA,YAChB;AAEA,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,oBAAM,KAAK,IAAI,WAAW,IAAI,GAAG,CAAC,IAAI;AACtC,oBAAM,KAAM,IAAI,GAAG,MAAM;AACzB,oBAAM,KAAM,IAAI,GAAG,MAAM;AACzB,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,UAAU;AAAA,gBAC3C;AAAA,gBACA,UAAU,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBACvC,QAAQ,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBACrC,eAAe;AAAA,gBACf,WAAW;AAAA,gBACX,OAAO;AAAA,cACT,GAAG,MAAM,QAAQ,CAAC;AAAA,YACpB;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,oBAAM,KAAK,IAAI,WAAW,IAAI,GAAG,CAAC,IAAI;AACtC,oBAAM,KAAM,IAAI,GAAG,MAAM;AACzB,oBAAM,KAAM,IAAI,GAAG,MAAM;AACzB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,UAAU;AAAA,gBAC3C;AAAA,gBACA,UAAU,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBACvC,QAAQ,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBACrC,eAAe;AAAA,gBACf,WAAW;AAAA,gBACX,OAAO;AAAA,cACT,GAAG,MAAM,QAAQ,CAAC;AAAA,YACpB;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AACnC,oBAAM,KAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AACnC,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,oBAAM,KAAK,WAAW,IAAI,GAAG,CAAC;AAC9B,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,IAAI,WAAW;AAAA,kBACvB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK;AACX,oBAAM,KAAK;AACX,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBAAU,eAAe;AAAA,kBACvB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,oBAAM,KAAK;AACX,oBAAM,KAAK;AACX,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,yBAAW;AACX,oBAAM,QAAQ,IAAI,WAAW,MAAM,aAAa;AAAA,gBAC9C;AAAA,gBACA,eAAe;AAAA,kBACb,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,kBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW;AAAA,gBAC/B;AAAA,cACF,GAAG,MAAM,QAAQ,CAAC;AAClB,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,KAAK,WAAW,IAAI,GAAG,CAAC;AAC7B,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,IAAI,GAAG;AAC1B,mBAAK,WAAW,IAAI,GAAG,CAAC;AACxB,oBAAM,QAAQ,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,QAAQ,CAAC;AAAA,YAClF;AACA;AAAA,UACF,KAAK;AAAA,UACL,KAAK;AACH,kBAAM,QAAQ,IAAI,WAAW,MAAM,MAAM,MAAM,QAAQ,CAAC;AACxD,iBAAK;AACL,iBAAK;AACL,iBAAK;AACL;AAAA,UACF;AACE,oBAAQ,IAAI,mCAAmC,GAAG,IAAI,GAAG;AACzD;AAAA,QACJ;AAEA,cAAM,aAAa,CAAC,QAAQ,QAAQ,OAAO,QAAQ;AAEnD,YAAI,OAAO,QAAQ,MAAM,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AAC9D,cAAI,SAAS,IAAI,SAAS,IAAI,CAAC;AAG/B,cAAI,UAAU,CAAC,WAAW,OAAO,CAAC,GAAG;AACnC,gBAAI,mBAAmB,QAAQ;AAC7B,qBAAO,UAAU,CAAC,WAAW,OAAO,CAAC,GAAG;AACtC;AACA,yBAAS,IAAI,SAAS,IAAI,CAAC;AAAA,cAC7B;AAAA,YACF,WAAW,mBAAmB,SAAS;AACrC,sBAAQ;AAAA,YACV,OAAK;AACH,oBAAM,IAAI,MAAM,yBAAyB,IAAI,SAAS,CAAC,CAAC,IAAI,GAAG,GAAG,sCAAsC,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,EAAE;AAAA,YACrI;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;;;AC/gBA;AAAA;AAAA,QAAM,EAAE,SAAS,YAAY,YAAY,YAAY,QAAQ,IAAI;AAEjE,QAAM,YAAY,CAAC,KAAK,QAAQ,WAAW;AACzC,YAAM,EAAE,OAAO,QAAQ,IAAI,aAAa,WAAW,WAAW,WAAW,WAAW,QAAQ,SAAS,IAAI;AAEzG,YAAM,QAAQ;AAAA,QACZ,OAAO,CAACC,SAAQ;AACd,cAAI,OAAO,OAAO,EAAE,QAAQ,SAAS,GAAGA,IAAG;AAC3C,kBAAQ,GAAG,MAAM,GAAG,EAAE,cAAc,QAAQ,CAAC;AAAA;AAC7C,iBAAO;AAAA,QACT;AAAA,QAEA,MAAM,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,SAAQC,YAAWC,cAAa;AACxF,cAAI,IAAI,WAAWP,KAAI,GAAGC,cAAaC,UAAS;AAChD,cAAI,IAAK,IAAI,WAAWF,KAAI,GAAGC,cAAaE,UAAS;AACrD,gBAAM,IAAI,WAAWH,KAAI,OAAOC,cAAaC,UAAS;AACtD,gBAAM,IAAI,WAAWF,KAAI,QAAQC,cAAaE,UAAS;AACvD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AAEpD,cAAI;AACJ,cAAI,IAAI,KAAK,IAAI,GAAG;AAClB,iBAAK,IAAK,IAAI,GAAI,QAAQ,CAAC;AAC3B,iBAAK,IAAK,IAAI,GAAI,QAAQ,CAAC;AAC3B,gBAAI,OAAO,GAAG;AACZ,qBAAO,GAAG,MAAM,GAAG,EAAE,qCAAqC,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,eAAeF,KAAI,QAAQ;AAAA;AAAA,YAClH,OAAO;AACL,qBAAO,GAAG,MAAM,GAAG,EAAE,4CAA4C,CAAC,KAAK,CAAC,gBAAgBO,SAAQ,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE,cAAcP,KAAI,QAAQ;AAAA;AAAA,YACpK;AACA,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,GAAG,MAAM,GAAG,EAAE,4EAA4E,EAAE;AAAA;AAAA,YACtG;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,QAAQ,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,SAAQC,YAAWC,cAAa;AAC1F,gBAAM,IAAI,WAAWP,KAAI,GAAGC,cAAaC,UAAS;AAClD,gBAAM,IAAK,IAAI,WAAWF,KAAI,GAAGC,cAAaE,UAAS;AACvD,gBAAM,IAAI,WAAWH,KAAI,QAAQC,cAAaG,UAAS;AACvD,cAAI;AACJ,cAAI,IAAI,GAAG;AACT,mBAAO,GAAG,MAAM,GAAG,EAAE,kCAAkC,CAAC,KAAK,CAAC,gBAAgBG,SAAQ,aAAa,CAAC,cAAcP,KAAI,QAAQ;AAAA;AAC9H,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,GAAG,MAAM,GAAG,EAAE,4EAA4E,EAAE;AAAA;AAAA,YACtG;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,SAAS,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,YAAWC,SAAQC,YAAWC,cAAa;AAC3F,gBAAM,KAAK,WAAWP,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAK,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACpD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACzD,cAAI;AACJ,cAAI,KAAK,KAAK,KAAK,GAAG;AACpB,mBAAO,GAAG,MAAM,GAAG,EAAE,mCAAmC,EAAE,KAAK,EAAE,gBAAgBI,SAAQ,cAAc,EAAE,KAAK,EAAE,eAAeP,KAAI,QAAQ;AAAA;AAC3I,gBAAI,WAAW,QAAQ;AACrB,sBAAQ,GAAG,MAAM,GAAG,EAAE,4EAA4E,EAAE;AAAA;AAAA,YACtG;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,MAAM,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,eAAc;AAC3D,gBAAM,KAAK,WAAWJ,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACzD,gBAAM,KAAK,WAAWH,KAAI,IAAIC,cAAaC,UAAS;AACpD,gBAAM,KAAM,IAAI,WAAWF,KAAI,IAAIC,cAAaE,UAAS;AACzD,gBAAM,OAAO,GAAG,MAAM,GAAG,EAAE,wBAAwB,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,eAAeH,KAAI,QAAQ;AAAA;AACvG,cAAI,WAAW,SAAS;AAAA,UAGxB;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,SAAS,CAACA,MAAKC,cAAaC,YAAWC,eAAc;AACnD,cAAI,OAAO,GAAG,MAAM,GAAG,EAAE;AAAA;AACzB,mBAAS,IAAI,GAAG,IAAIH,KAAI,OAAO,QAAQ,KAAK;AAC1C,kBAAM,IAAIA,KAAI,OAAO,CAAC;AACtB,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,oBAAM,IAAI,WAAW,EAAE,GAAGC,cAAaC,UAAS;AAChD,oBAAM,IAAK,IAAI,WAAW,EAAE,GAAGD,cAAaE,UAAS;AACrD,sBAAQ,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;AAAA;AAAA,YAChC;AAAA,UACF;AACA,kBAAQ,GAAG,MAAM,eAAeH,KAAI,QAAQ;AAAA;AAC5C,cAAI,WAAW,QAAQ;AACrB,oBAAQ,GAAG,MAAM,GAAG,EAAE,4EAA4E,EAAE;AAAA;AAAA,UACtG;AACA,iBAAO;AAAA,QACT;AAAA,QAEA,UAAU,CAACA,MAAKC,cAAaC,YAAWC,YAAWC,eAAc;AAC/D,cAAI,OAAO,GAAG,MAAM,GAAG,EAAE;AAAA;AACzB,mBAAS,IAAI,GAAG,IAAIJ,KAAI,OAAO,QAAQ,KAAK;AAC1C,kBAAM,IAAIA,KAAI,OAAO,CAAC;AACtB,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,oBAAM,IAAI,WAAW,EAAE,GAAGC,cAAaC,UAAS;AAChD,oBAAM,IAAK,IAAI,WAAW,EAAE,GAAGD,cAAaE,UAAS;AACrD,sBAAQ,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;AAAA;AAAA,YAChC;AAAA,UACF;AACA,kBAAQ,GAAG,MAAM,cAAcH,KAAI,QAAQ;AAAA;AAC3C,cAAI,WAAW,SAAS;AAAA,UAGxB;AACA,iBAAO;AAAA,QACT;AAAA,QAEA;AAAA,MACF;AAEA,aAAO,MAAM,IAAI,IAAI,EAAE,KAAK,aAAa,WAAW,WAAW,WAAW,QAAQ,WAAW,QAAQ;AAAA,IACvG;AAEA,WAAO,UAAU;AAejB,QAAM,OAAO,CAAC,KAAK,aAAa,WAAW,WAAW,WAAW,QAAQ,WAAW,aAAa;AAC/F,YAAM,EAAE,QAAQ,IAAI,OAAO,IAAI;AAC/B,UAAI,UAAU,GAAG,MAAM,sBAAsB,IAAI,QAAQ;AAAA;AAGzD,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,WAAW,KAAK;AACpB,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,KAAK;AAET,eAAS,IAAI,GAAG,IAAI,IAAI,SAAS,QAAQ,KAAK;AAC5C,cAAM,KAAK,IAAI,SAAS,CAAC;AACzB,cAAM,MAAM,GAAG;AAEf,gBAAQ,GAAG,GAAG;AAAA,UACZ,KAAK;AAEH,gBAAI,MAAM,GAAG;AACX,mBAAK;AAAG,mBAAK;AAAA,YACf;AAEA,gBAAI,KAAK,KAAK,OAAO,OAAO;AAC1B,yBAAW,GAAG,MAAM,cAAc,QAAQ;AAAA;AAAA,YAC5C;AAEA,gBAAI,IAAI,UAAU,GAAG;AACnB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC;AACA,mBAAK;AACL,yBAAW,KAAK;AAChB,yBAAW,GAAG,MAAM,GAAG,QAAQ,wCAAwC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC;AAAA;AACrG,mBAAK;AAAI,mBAAK;AAAA,YAChB;AAEA,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,qCAAqC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,MAAM,QAAQ;AAAA;AAAA,YAClH;AACA;AAAA,UACF,KAAK;AAEH,gBAAI,KAAK,KAAK,OAAO,OAAO;AAC1B,yBAAW,GAAG,MAAM,cAAc,QAAQ;AAAA;AAAA,YAC5C;AAEA,gBAAI,IAAI,UAAU,GAAG;AACnB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B;AACA,mBAAK;AACL,yBAAW,KAAK;AAChB,yBAAW,GAAG,MAAM,GAAG,QAAQ,wCAAwC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC;AAAA;AACrG,mBAAK;AAAI,mBAAK;AAAA,YAChB;AAEA,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,qCAAqC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,MAAM,QAAQ;AAAA;AAAA,YAClH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,oBAAM,KAAK,IAAI,WAAW,IAAI,MAAM,CAAC,IAAI;AACzC,oBAAM,KAAM,IAAI,MAAM,MAAM;AAC5B,oBAAM,KAAM,IAAI,MAAM,MAAM;AAC5B,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,4CAA4C,QAAQ,gBAAgB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,eAAe,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,QAAQ;AAAA;AAAA,YACrP;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,oBAAM,KAAK,IAAI,WAAW,IAAI,MAAM,CAAC,IAAI;AACzC,oBAAM,KAAM,IAAI,MAAM,MAAM;AAC5B,oBAAM,KAAM,IAAI,MAAM,MAAM;AAC5B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,4CAA4C,QAAQ,gBAAgB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,eAAe,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,QAAQ;AAAA;AAAA,YACrP;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AACtC,oBAAM,KAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AACtC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACpO,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,oBAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACjC,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACpO,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACxN,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACxN,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,uBAAuB,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACzN,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK,CAAC,IAAI,EAAE;AAClB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,oBAAM,KAAK,CAAC,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAK,IAAE,KAAM,KAAK,GAAG,CAAC,EAAE;AACtE,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,uBAAuB,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,IAAI,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACzN,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK;AACX,oBAAM,KAAK;AACX,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACpO,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,oBAAM,KAAK;AACX,oBAAM,KAAK;AACX,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,+CAA+C,QAAQ,sBAAsB,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,QAAQ;AAAA;AACpO,oBAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,EAAE;AACjC,mBAAK,GAAG,CAAC;AACT,mBAAK,GAAG,CAAC;AAAA,YACX;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,KAAK,WAAW,IAAI,MAAM,CAAC;AAChC,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AACH,mBAAO,IAAI,UAAU,GAAG;AACtB,mBAAK,WAAW,IAAI,MAAM,CAAC;AAC3B,yBAAW,GAAG,MAAM,GAAG,QAAQ,sCAAsC,QAAQ,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,OAAO,QAAQ;AAAA;AAAA,YACpH;AACA;AAAA,UACF,KAAK;AAAA,UACL,KAAK;AACH,uBAAW,GAAG,MAAM,GAAG,QAAQ,6BAA6B,QAAQ;AAAA;AACpE,gBAAI,WAAW,SAAS;AACtB,yBAAW,GAAG,MAAM,GAAG,QAAQ,4DAA4D,QAAQ;AAAA;AAAA,YACrG;AACA,uBAAW,GAAG,MAAM,cAAc,QAAQ;AAAA;AAE1C,iBAAK;AACL,iBAAK;AACL,iBAAK;AACL;AAAA,UACF;AACE,oBAAQ,IAAI,mCAAmC,GAAG,IAAI,GAAG;AACzD;AAAA,QACJ;AAAA,MAEF;AACA,UAAI,KAAK,KAAK,OAAO,OAAO;AAC1B,mBAAW,GAAG,MAAM,cAAc,QAAQ;AAAA;AAAA,MAC5C;AACA,iBAAW,GAAG,MAAM,GAAG,EAAE;AAAA;AACzB,aAAO;AAAA,IACT;AAAA;AAAA;;;AChZA,IAAAQ,eAAA;AAAA;AAYA,QAAM,QAAQ;AAEd,QAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,QAAM,EAAE,QAAQ,IAAI;AAEpB,QAAM,UAAU,mBAA2B;AAE3C,QAAM,EAAE,YAAY,YAAY,kBAAkB,IAAI;AACtD,QAAM,EAAE,QAAQ,SAAS,WAAW,UAAU,SAAS,SAAS,YAAY,YAAY,aAAa,OAAO,IAAI;AAChH,QAAM,oBAAoB;AAC1B,QAAM,iBAAiB;AA0BvB,QAAM,cAAc,CAAC,SAAS,UAAU;AACtC,YAAM,WAAW;AAAA,QACf,aAAa;AAAA,QACb,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,OAAO,qBAAuB;AAAA,QAC9B,UAAU;AAAA,QACV,QAAQ;AAAA;AAAA,QACR,gBAAgB;AAAA,QAChB;AAAA,MACF;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,aAAO,QAAQ,WAAW,WAAW,UAAU,OAAO,OAAO,IAAI,YAAY,OAAO,OAAO;AAAA,IAC7F;AAYA,QAAM,cAAc,CAAC,KAAK,YAAY;AACpC,YAAM,EAAE,MAAM,IAAI;AAElB,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAG3E,sBAAgB,KAAK,KAAK;AAC1B,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AAEA,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,YAAM,SAAS,UAAU,SAAS,MAAM;AAExC,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAC7E,aAAO;AAAA,IACT;AAYA,QAAM,YAAY,CAAC,KAAK,YAAY;AAClC,YAAM,EAAE,UAAU,SAAAC,UAAS,OAAO,YAAY,IAAI;AAElD,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAG3E,sBAAgB,KAAK,KAAK;AAC1B,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AAGA,UAAI,OAAO,cACP;AAAA,wCACkCA,QAAO;AAAA,aAClC,oBAAI,KAAK,CAAC;AAAA,eACR,QAAQ;AAAA;AAAA,IAGjB;AACJ,cAAQ;AAER,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,YAAM,WAAW,OAAO,SAAS,MAAM;AACvC,cAAQ;AACR,cAAQ;AAER,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAC7E,aAAO;AAAA,IACT;AAGA,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,QAAM,aAAa,CAAC;AACpB,QAAM,YAAY,CAAC;AACnB,QAAM,UAAU,CAAC;AACjB,QAAI,YAAY;AAChB,QAAI;AACJ,QAAI,cAAc,CAAC,GAAG,CAAC;AAKvB,QAAM,YAAY,CAAC,SAAS,UAAU;AACpC,YAAM,EAAE,QAAQ,UAAU,eAAe,IAAI;AAC7C,YAAM,QAAQ,UAAU;AAExB,gBAAU,KAAK,KAAK;AAEpB,UAAI,IAAI;AACR,aAAO,IAAI,GAAG;AACZ;AAAA,MACF;AAEA,UAAI,aAAa,CAAC;AAElB,YAAM,SAAS;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,WAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,QAAQ,KAAK;AACzC,cAAM,MAAM,MAAM,QAAQ,CAAC;AAC3B,YAAI,SAAS,QAAQ,kBAAkB,KAAK,WAAW,MAAM,CAAC;AAC9D,iBAAS,OAAO,IAAI,CAAC,UAAU;AAC7B,cAAI,gBAAgB,KAAK;AAGvB,gBAAI,kBAAkB;AACtB,gBAAI,iBAAiB;AACrB,gBAAI,qBAAqB;AAEzB,qBAAS,IAAI,GAAG,IAAI,IAAI,WAAW,QAAQ,KAAK;AAC9C,oBAAM,IAAI,IAAI,WAAW,CAAC;AAC1B,kBAAI,YAAY,GAAG;AAAE,kCAAkB;AAAA,cAAE;AACzC,kBAAI,WAAW,GAAG;AAAE,iCAAiB;AAAA,cAAE;AACvC,kBAAI,eAAe,GAAG;AAAE,qCAAqB;AAAA,cAAE;AAAA,YACjD;AACA,gBAAI,mBAAmB,MAAM;AAC3B,kBAAI,IAAI,KAAK,IAAI,eAAe,MAAM,CAAC,CAAC;AACxC,kBAAI,IAAI,KAAK,IAAI,eAAe,MAAM,CAAC,CAAC;AACxC,sBAAQ,WAAW,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK;AAEzC,kBAAI,eAAe,MAAM,CAAC;AAC1B,kBAAI,eAAe,MAAM,CAAC;AAC1B,kBAAI,IAAI,GAAG;AACT,wBAAQ,WAAW,QAAQ,KAAK;AAAA,cAClC;AACA,kBAAI,IAAI,GAAG;AACT,wBAAQ,WAAW,QAAQ,KAAK;AAAA,cAClC;AAAA,YACF;AACA,gBAAI,oBAAoB,MAAM;AAC5B,oBAAM,IAAI,IAAI,gBAAgB,SAAS;AACvC,sBAAQ,WAAW,QAAQ,GAAG,KAAK;AAAA,YACrC;AACA,gBAAI,uBAAuB,MAAM;AAC/B,oBAAM,IAAI,WAAW,mBAAmB,UAAU,CAAC,GAAG,aAAa,SAAS;AAC5E,oBAAM,IAAK,IAAI,WAAW,mBAAmB,UAAU,CAAC,GAAG,aAAa,SAAS;AACjF,sBAAQ,WAAW,UAAU,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK;AAAA,YAC/C;AAAA,UACF;AACA,gBAAM,QAAQ,kBAAkB,QAAQ,GAAG;AAC3C,cAAI;AAAO,oBAAQ,OAAO,SAAS,OAAO,KAAK;AAC/C,iBAAO;AAAA,QACT,CAAC;AACD,qBAAa,WAAW,OAAO,MAAM;AAAA,MACvC;AAGA,gBAAU,IAAI;AAEd,aAAO;AAAA,IACT;AAKA,QAAM,SAAS,CAAC,SAAS,UAAU;AACjC,YAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,YAAM,QAAQ,UAAU;AAExB,gBAAU,KAAK,KAAK;AAEpB,UAAI,SAAS;AACb,UAAI,IAAI;AACR,aAAO,IAAI,GAAG;AACZ,kBAAU;AACV;AAAA,MACF;AAEA,UAAI,OAAO;AACX,UAAI,UAAU,GAAG;AACf,gBAAQ;AAAA,MACV;AACA,YAAM,KAAK,aAAa;AACxB,cAAQ,GAAG,MAAM,GAAG,EAAE;AAAA;AAGtB,WAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,QAAQ,KAAK;AACzC,cAAM,MAAM,MAAM,QAAQ,CAAC;AAC3B,cAAM,KAAK,YAAY;AAEvB,cAAM,SAAS;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,cAAM,UAAU,eAAe,KAAK,QAAQ,MAAM;AAClD,gBAAQ;AAER,YAAI,gBAAgB,KAAK;AAGvB,cAAI,kBAAkB;AACtB,cAAI,iBAAiB;AACrB,cAAI,qBAAqB;AAEzB,mBAAS,IAAI,GAAG,IAAI,IAAI,WAAW,QAAQ,KAAK;AAC9C,kBAAM,IAAI,IAAI,WAAW,CAAC;AAC1B,gBAAI,YAAY,GAAG;AAAE,gCAAkB;AAAA,YAAE;AACzC,gBAAI,WAAW,GAAG;AAAE,+BAAiB;AAAA,YAAE;AACvC,gBAAI,eAAe,GAAG;AAAE,mCAAqB;AAAA,YAAE;AAAA,UACjD;AACA,cAAI,mBAAmB,MAAM;AAC3B,gBAAI,IAAI,KAAK,IAAI,eAAe,MAAM,CAAC,CAAC;AACxC,gBAAI,IAAI,KAAK,IAAI,eAAe,MAAM,CAAC,CAAC;AACxC,oBAAQ,GAAG,MAAM,GAAG,EAAE,wBAAwB,CAAC,KAAK,CAAC,SAAS,EAAE;AAAA;AAEhE,gBAAI,eAAe,MAAM,CAAC;AAC1B,gBAAI,eAAe,MAAM,CAAC;AAC1B,gBAAI,IAAI,GAAG;AACT,sBAAQ,GAAG,MAAM,GAAG,EAAE,yBAAyB,EAAE;AAAA;AAAA,YACnD;AACA,gBAAI,IAAI,GAAG;AACT,sBAAQ,GAAG,MAAM,GAAG,EAAE,yBAAyB,EAAE;AAAA;AAAA,YACnD;AAAA,UACF;AACA,cAAI,oBAAoB,MAAM;AAC5B,kBAAM,IAAI,IAAI,gBAAgB,SAAS;AACvC,oBAAQ,GAAG,MAAM,GAAG,EAAE,yBAAyB,CAAC,KAAK,EAAE;AAAA;AAAA,UACzD;AACA,cAAI,uBAAuB,MAAM;AAC/B,kBAAM,IAAI,WAAW,mBAAmB,UAAU,CAAC,GAAG,aAAa,SAAS;AAC5E,kBAAM,IAAK,IAAI,WAAW,mBAAmB,UAAU,CAAC,GAAG,aAAa,SAAS;AACjF,oBAAQ,GAAG,MAAM,GAAG,EAAE,4BAA4B,CAAC,KAAK,CAAC,SAAS,EAAE;AAAA;AAAA,UACtE;AAAA,QACF;AACA,cAAM,QAAQ,kBAAkB,QAAQ,GAAG;AAC3C,YAAI,OAAO;AACT,kBAAQ,GAAG,MAAM,GAAG,EAAE,uBAAuB,KAAK,MAAM,EAAE;AAAA;AAAA,QAC5D;AACA,gBAAQ,GAAG,MAAM,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE;AAAA;AAAA;AAAA,MAC7C;AAEA,UAAI,UAAU,GAAG;AACf,gBAAQ,SAAS,YAAY,KAAK;AAClC,gBAAQ;AAAA,MACV;AAEA,gBAAU,IAAI;AAEd,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,KAAK,UAAU;AAEtC,YAAM,SAAS,IAAI,MAAM,YAAY;AACrC,UAAI,UAAU,UAAa,QAAQ,OAAO,OAAO;AAC/C,eAAO,QAAQ;AAAA,MACjB;AAEA,aAAO,GAAG,SAAS,CAAC,MAAM;AACxB,gBAAQ,IAAI,yBAAyB,OAAO,IAAI,YAAY,OAAO,MAAM,EAAE;AAC3E,gBAAQ,IAAI,CAAC;AAAA,MACf,CAAC;AAED,aAAO,GAAG,WAAW,CAAC,SAAS;AAC7B,cAAM,SAAS;AAAA,UACb,KAAK;AAAA,UACL,GAAG;AAAA,UACH,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,MAAM;AAAA,UACN,UAAU;AAAA,UACV,SAAS;AAAA,UACT,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM,MAAM;AAAE,wBAAY;AAAM,mBAAO;AAAA,UAAU;AAAA,UACjD,MAAM,MAAM;AAAA;AAAA,UACZ,OAAO,MAAM;AAAA;AAAA,UACb,OAAO,MAAM;AAAA;AAAA,UACb,WAAW,MAAM,QAAQ,IAAI,uCAAuC,KAAK,IAAI;AAAA,QAC/E;AACA,aAAK,WAAW,WAAW,CAAC,OAAO,OAAO,GAAG,OAAO,SAAS,CAAC;AAE9D,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,cAAM,MAAM,OAAO,WAAW,IAAI,OAAO,WAAW,EAAE,KAAK,YAAY,EAAE,YAAY,aAAa,MAAM,CAAC,IAAI;AAQ7G,YAAI,KAAK;AAEP,cAAI,QAAQ,KAAK;AACf,uBAAW,IAAI,EAAE,IAAI;AAAA,UACvB;AACA,cAAI,IAAI,SAAS,OAAO;AAEtB,sBAAU,KAAK,GAAG;AAClB,0BAAc,IAAI;AAClB,wBAAY,IAAI;AAChB,wBAAY,IAAI;AAChB,wBAAY,IAAI;AAAA,UAClB,OAAO;AAEL,gBAAI,cAAc,MAAM;AACtB,kBAAI,QAAQ,SAAS,GAAG;AACtB,sBAAM,QAAQ,QAAQ,IAAI;AAC1B,oBAAI,aAAa,OAAO;AACtB,wBAAM,QAAQ,KAAK,GAAG;AAAA,gBACxB;AACA,wBAAQ,KAAK,KAAK;AAAA,cACpB;AACA,kBAAI,IAAI,SAAS,SAAS;AACxB,wBAAQ,KAAK,GAAG;AAAA,cAClB;AAAA,YACF,OAAO;AACL,kBAAI,UAAU,SAAS,GAAG;AACxB,sBAAM,QAAQ,UAAU,IAAI;AAC5B,oBAAI,aAAa,OAAO;AAEtB,wBAAM,QAAQ,KAAK,GAAG;AAAA,gBACxB;AACA,0BAAU,KAAK,KAAK;AAAA,cACtB;AACA,kBAAI,IAAI,SAAS,SAAS;AACxB,0BAAU,KAAK,GAAG;AAAA,cACpB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,GAAG,YAAY,CAAC,SAAS;AAC9B,cAAM,WAAW,MAAM;AACrB,cAAI,cAAc,MAAM;AACtB,mBAAO,QAAQ,IAAI;AAAA,UACrB,OAAO;AACL,mBAAO,UAAU,IAAI;AAAA,UACvB;AAAA,QACF;AAEA,cAAM,SAAS;AAAA,UACb,KAAK;AAAA,UACL,MAAM,MAAM;AAAE,wBAAY;AAAA,UAAM;AAAA,UAChC,KAAK;AAAA,UACL,GAAG;AAAA,UACH,WAAW,MAAM;AAAA,UAAC;AAAA,QACpB;AACA,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,cAAM,MAAM,OAAO,WAAW,IAAI,OAAO,WAAW,EAAE,IAAI;AAG1D,YAAI,UAAU,WAAW,GAAG;AAC1B,mBAAS;AAAA,QACX;AAAA,MACF,CAAC;AAED,aAAO,GAAG,OAAO,MAAM;AAAA,MAEvB,CAAC;AAGD,aAAO,MAAM,GAAG,EAAE,MAAM;AACxB,aAAO;AAAA,IACT;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACjcA,IAAAC,mBAAA;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,YAAc;AAAA,MACd,MAAQ;AAAA,MACR,SAAW;AAAA,QACT,UAAY;AAAA,QACZ,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,KAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,eAAiB;AAAA,QACf,QAAU;AAAA,MACZ;AAAA,MACA,cAAgB;AAAA,QACd,sBAAsB;AAAA,QACtB,mBAAmB;AAAA,QACnB,OAAS;AAAA,MACX;AAAA,MACA,iBAAmB;AAAA,QACjB,KAAO;AAAA,QACP,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,IACb;AAAA;AAAA;;;ACrCA;AAAA;AAAA,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,kBAAkB,CAAC,QAAQ,UAAU,OAAO,kBAAkB,gBAAgB;AAClF,YAAM,SAAS,MAAM,KAAK,OAAO;AACjC,YAAM,OAAO,MAAM,KAAK,OAAO;AAC/B,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,gBAAgB,MAAM,WAAW,CAAC;AACjF,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,gBAAgB,MAAM,MAAM,CAAC;AAC5E,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,aAAa,MAAM,SAAS,CAAC,GAAG,QAAQ,CAAC;AACxF,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,aAAa,MAAM,iBAAiB,CAAC,GAAG,gBAAgB,CAAC;AACxG,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,YAAY,MAAM,KAAK,CAAC;AACvE,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,aAAa,MAAM,iBAAiB,CAAC,GAAG,MAAM,KAAK,OAAO,MAAM,KAAK,OAAO,GAAG,gBAAgB,CAAC,CAAC;AAChJ,YAAM,KAAK,SAAS,QAAQ,QAAQ,MAAM,KAAK,gBAAgB,MAAM,MAAM,KAAK,OAAO,MAAM,KAAK,OAAO,GAAG,MAAM,CAAC,CAAC;AAEpH,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AChBjB;AAAA;AAAA,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,WAAW;AAAA,MACf,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA;AAAA,MAEZ,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,SAAS;AAAA,MACT,oBAAoB;AAAA,MACpB,uBAAuB;AAAA,MACvB,yBAAyB;AAAA,MACzB,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,SAAS;AAAA,MACT,gBAAgB;AAAA;AAAA,MAEhB,KAAK;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,WAAW;AAAA;AAAA,MAEX,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,eAAe;AAAA;AAAA,MAEf,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ;AAGA,QAAM,SAAS,CAAC,YAAY;AAC1B,YAAM,MAAM,EAAE,YAAY,SAAS,IAAI;AAEvC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM,UAAU,IAAI,MAAM,IAAI,kBAAkB,EAAI;AAEvF,UAAI,QAAQ;AAAU,YAAI,WAAW,QAAQ;AAC7C,UAAI,QAAQ;AAAM,YAAI,OAAO,QAAQ;AACrC,UAAI,QAAQ;AAAkB,YAAI,mBAAmB,QAAQ;AAE7D,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM,SAAS,IAAI,MAAM,GAAG;AAE/D,UAAI,QAAQ;AAAS,YAAI,UAAU,QAAQ;AAC3C,UAAI,QAAQ;AAAM,YAAI,OAAO,QAAQ;AAErC,aAAO;AAAA,IACT;AAGA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM;AACzC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAIA,QAAM,eAAe,CAAC,YAAY;AAChC,YAAM,MAAM;AAAA,QACV,YAAY,SAAS;AAAA,QACrB,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,QAChB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,QACrB,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,QACf,kBAAkB,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,QAC7B,aAAa,CAAC,GAAG,GAAG,CAAC;AAAA,MACvB;AAEA,UAAI,QAAQ,QAAQ;AAClB,cAAM,SAAS,QAAQ,OAAO,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACzE,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,SAAS;AAAA,QACf;AAAA,MACF;AACA,UAAI,QAAQ,UAAU;AACpB,cAAM,SAAS,QAAQ,SAAS,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC3E,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,WAAW;AAAA,QACjB;AAAA,MACF;AACA,UAAI,QAAQ,OAAO;AACjB,cAAM,SAAS,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACxE,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,QAAQ;AAAA,QACd;AAAA,MACF;AACA,UAAI,QAAQ,kBAAkB;AAC5B,cAAM,SAAS,QAAQ,iBAAiB,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACnF,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,mBAAmB;AAAA,QACzB;AAAA,MACF;AACA,UAAI,QAAQ,aAAa;AACvB,cAAM,SAAS,QAAQ,YAAY,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC9E,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,cAAc;AAAA,QACpB;AAAA,MACF;AAEA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAGA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM;AACzC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAMA,QAAM,SAAS,CAAC,YAAY;AAC1B,YAAM,MAAM,EAAE,YAAY,SAAS,KAAK,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;AAExD,UAAI,QAAQ,MAAM;AAChB,cAAM,SAAS,QAAQ,KAAK,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACvE,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,OAAO;AAAA,QACb;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,UAAU,CAAC,YAAY;AAC3B,YAAM,QAAQ;AACd,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM,cAAc,GAAG,QAAQ,GAAG,aAAa,IAAI,WAAW,MAAM;AAEvG,UAAI,QAAQ,cAAc;AACxB,YAAI,eAAe,KAAK,IAAI,WAAW,QAAQ,YAAY,GAAG,KAAK;AAAA,MACrE;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,UAAI,QAAQ,WAAW;AACrB,YAAI,YAAY,KAAK,IAAI,WAAW,QAAQ,SAAS,GAAG,KAAK;AAAA,MAC/D;AACA,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,YAAY,SAAS,UAAU,QAAQ,GAAG,QAAQ,GAAG,aAAa,GAAG;AAEnF,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,YAAY,SAAS,QAAQ,QAAQ,GAAG,aAAa,GAAG;AAEtE,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,aAAa;AACvB,cAAM,SAAS,QAAQ,YAAY,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC9E,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,cAAc,KAAK,IAAI,GAAG,MAAM;AAAA,QACtC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,YAAY;AAChC,YAAM,MAAM;AAAA,QACV,YAAY,SAAS;AAAA,QACrB,KAAK;AAAA,QACL,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,cAAc,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAAA,QACzD,cAAc,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,QAC3B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,QACf,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,MAC9B;AAEA,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,QAAQ,SAAS,SAAS,MAAM,KAAK,QAAQ,SAAS,SAAS,MAAM;AAAA,MACtF;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,QAAQ,OAAO,SAAS,MAAM,KAAK,QAAQ,OAAO,SAAS,MAAM;AAAA,MAChF;AACA,UAAI,QAAQ,cAAc;AACxB,cAAM,SAAS,QAAQ,aAAa,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC/E,cAAM,YAAY,KAAK,MAAM,OAAO,SAAS,CAAC;AAC9C,cAAM,SAAS,CAAC;AAChB,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AACf,iBAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC1C;AACA,YAAI,MAAO,MAAM,MAAM,KAAK,MAAM,IAAI;AACtC,YAAI,eAAe;AAAA,MACrB;AACA,UAAI,QAAQ,aAAa;AACvB,cAAM,SAAS,QAAQ,YAAY,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC9E,cAAM,YAAY,KAAK,MAAM,OAAO,SAAS,CAAC;AAC9C,cAAM,SAAS,CAAC;AAChB,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AACf,iBAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC1E;AACA,YAAI,eAAe;AAAA,MACrB;AACA,UAAI,QAAQ,OAAO;AACjB,cAAM,SAAS,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACxE,cAAM,YAAY,KAAK,MAAM,OAAO,SAAS,CAAC;AAC9C,cAAM,SAAS,CAAC;AAChB,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AAEf,cAAI,OAAO,EAAE,MAAM;AAAG,mBAAO,EAAE,IAAI;AACnC,cAAI,OAAO,KAAK,CAAC,MAAM;AAAG,mBAAO,KAAK,CAAC,IAAI;AAC3C,iBAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC1C;AACA,YAAI,SAAS;AAAA,MACf;AACA,UAAI,QAAQ,OAAO;AACjB,cAAM,SAAS,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACxE,cAAM,YAAY,KAAK,MAAM,OAAO,SAAS,CAAC;AAC9C,cAAM,SAAS,CAAC;AAChB,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AACf,iBAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC1D;AACA,YAAI,QAAQ;AAAA,MACd;AACA,aAAO;AAAA,IACT;AAMA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,YAAY,SAAS,OAAO,UAAU,KAAK,KAAK,GAAG,QAAQ,GAAG,YAAY,GAAG,aAAa,GAAG;AAE3G,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,WAAW,QAAQ,QAAQ;AAAA,MAC5C;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,YAAY;AACtB,YAAI,aAAa,WAAW,QAAQ,UAAU;AAAA,MAChD;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,YAAY;AACjC,YAAM,MAAM,EAAE,YAAY,SAAS,YAAY,aAAa,OAAO,UAAU,KAAK,KAAK,GAAG,QAAQ,GAAG,YAAY,GAAG,aAAa,GAAG;AAEpI,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,QAAQ;AAAA,MAC5B;AACA,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,WAAW,QAAQ,QAAQ;AAAA,MAC5C;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,YAAY;AACtB,YAAI,aAAa,WAAW,QAAQ,UAAU;AAAA,MAChD;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,YAAY,SAAS,UAAU,QAAQ,GAAG,aAAa,GAAG;AAExE,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,WAAW,QAAQ,MAAM;AAAA,MACxC;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,CAAC,YAAY;AAC7B,YAAM,MAAM,EAAE,YAAY,SAAS,QAAQ,aAAa,GAAG,aAAa,GAAG,aAAa,GAAG;AAE3F,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,WAAW,QAAQ,WAAW;AAAA,MAClD;AACA,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,YAAY;AACjC,YAAM,MAAM,EAAE,YAAY,SAAS,YAAY,cAAc,CAAC,EAAE;AAEhE,UAAI,QAAQ,cAAc;AACxB,cAAM,SAAS,QAAQ,aAAa,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC/E,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,IAAI,GAAG;AAC5C,gBAAM,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;AACvC,cAAI,aAAa,KAAK,KAAK;AAAA,QAC7B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,YAAY;AAClC,YAAM,MAAM,EAAE,YAAY,SAAS,aAAa,MAAM,CAAC,GAAG,CAAC,EAAE;AAE7D,UAAI,QAAQ,MAAM;AAChB,cAAM,SAAS,QAAQ,KAAK,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACvE,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,OAAO;AAAA,QACb;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,mBAAmB,CAAC,YAAY;AACpC,YAAM,MAAM,EAAE,YAAY,SAAS,eAAe,UAAU,CAAC,EAAE;AAE/D,UAAI,QAAQ,UAAU;AACpB,cAAM,SAAS,QAAQ,SAAS,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC3E,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,IAAI,GAAG;AAC5C,gBAAM,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;AACvC,cAAI,SAAS,KAAK,KAAK;AAAA,QACzB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAMA,QAAM,aAAa,CAAC,YAAY;AAC9B,YAAM,MAAM,EAAE,YAAY,SAAS,SAAS,aAAa,CAAC,GAAG,gBAAgB,KAAK;AAElF,UAAI,QAAQ,aAAa;AACvB,YAAI,cAAc,QAAQ,YAAY,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MACnF;AAEA,UAAI,QAAQ,gBAAgB;AAC1B,YAAI,iBAAiB,QAAQ,eAAe,SAAS,MAAM,KAAK,QAAQ,eAAe,SAAS,MAAM;AAAA,MACxG;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,YAAY;AACrC,YAAM,MAAM,EAAE,YAAY,SAAS,gBAAgB,SAAS,CAAC,GAAG,gBAAgB,KAAK;AAErF,UAAI,QAAQ,YAAY;AACtB,cAAM,UAAU,QAAQ,WAAW,KAAK,EAAE,MAAM,KAAK;AACrD,YAAI,UAAU,QAAQ,IAAI,CAAC,UAAU,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC;AACvF,YAAI,UAAU,IAAI,QAAQ,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAAA,MAC9D;AAEA,UAAI,QAAQ,gBAAgB;AAC1B,YAAI,iBAAiB,QAAQ,eAAe,SAAS,MAAM,KAAK,QAAQ,eAAe,SAAS,MAAM;AAAA,MACxG;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAMA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,YAAY,SAAS,OAAO,QAAQ,CAAC,EAAE;AAErD,UAAI,QAAQ,OAAO;AACjB,cAAM,SAAS,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACxE,cAAM,YAAY,OAAO;AACzB,cAAM,YAAY,KAAK,MAAM,YAAY,CAAC;AAC1C,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AACf,cAAI,OAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC9D;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,YAAY;AACjC,YAAM,MAAM,EAAE,YAAY,SAAS,YAAY,QAAQ,CAAC,EAAE;AAE1D,UAAI,QAAQ,OAAO;AACjB,cAAM,SAAS,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AACxE,cAAM,YAAY,OAAO;AACzB,cAAM,YAAY,KAAK,MAAM,YAAY,CAAC;AAC1C,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,KAAK,IAAI;AACf,cAAI,OAAO,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,QAC9D;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,YAAY;AAClC,YAAM,MAAM,EAAE,YAAY,SAAS,aAAa,KAAK,MAAM,gBAAgB,KAAK;AAEhF,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,YAAY;AACrC,YAAM,MAAM,EAAE,YAAY,SAAS,gBAAgB,KAAK,MAAM,UAAU,CAAC,GAAG,gBAAgB,KAAK;AAEjG,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,QAAQ,SAAS,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MAC7E;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,sBAAsB,CAAC,YAAY;AACvC,YAAM,MAAM,EAAE,YAAY,SAAS,kBAAkB,KAAK,MAAM,YAAY,CAAC,GAAG,gBAAgB,KAAK;AAErG,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,YAAY;AACtB,YAAI,aAAa,QAAQ,WAAW,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MACjF;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,YAAY;AAC9B,YAAM,MAAM,EAAE,YAAY,SAAS,SAAS,KAAK,MAAM,gBAAgB,KAAK;AAE5E,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,wBAAwB,CAAC,YAAY;AACzC,YAAM,MAAM,EAAE,YAAY,SAAS,oBAAoB,KAAK,MAAM,OAAO,CAAC,GAAG,gBAAgB,KAAK;AAElG,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,OAAO;AACjB,YAAI,QAAQ,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MACvE;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,2BAA2B,CAAC,YAAY;AAC5C,YAAM,MAAM,EAAE,YAAY,SAAS,uBAAuB,KAAK,MAAM,MAAM,CAAC,GAAG,gBAAgB,KAAK;AAEpG,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,OAAO;AACjB,cAAM,UAAU,QAAQ,MAAM,KAAK,EAAE,MAAM,KAAK;AAChD,YAAI,OAAO,QAAQ,IAAI,CAAC,UAAU,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAAA,MAC1H;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,6BAA6B,CAAC,YAAY;AAC9C,YAAM,MAAM,EAAE,YAAY,SAAS,yBAAyB,KAAK,MAAM,QAAQ,CAAC,GAAG,gBAAgB,KAAK;AAExG,UAAI,UAAU,CAAC;AACf,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,OAAO;AACjB,cAAM,UAAU,QAAQ,MAAM,KAAK,EAAE,MAAM,KAAK;AAChD,YAAI,SAAS,QAAQ,IAAI,CAAC,UAAU,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAAA,MAC5H;AACA,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,YAAY;AACrC,YAAM,MAAM,EAAE,YAAY,SAAS,gBAAgB,KAAK,MAAM,OAAO,CAAC,GAAG,gBAAgB,KAAK;AAE9F,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,OAAO;AACjB,YAAI,QAAQ,QAAQ,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MACvE;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,oBAAoB,CAAC,YAAY;AACrC,YAAM,MAAM,EAAE,YAAY,SAAS,gBAAgB,KAAK,MAAM,QAAQ,MAAM,OAAO,CAAC,GAAG,gBAAgB,MAAM,YAAY,KAAK;AAE9H,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,QAAQ,OAAO,SAAS,MAAM,KAAK,QAAQ,OAAO,SAAS,MAAM;AAAA,MAChF;AACA,UAAI,QAAQ,YAAY;AACtB,cAAM,UAAU,QAAQ,WAAW,KAAK,EAAE,MAAM,KAAK;AACrD,YAAI,QAAQ,QAAQ,IAAI,CAAC,UAAU,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAAA,MAC3H;AAEA,UAAI,QAAQ,gBAAgB;AAC1B,YAAI,iBAAiB,QAAQ,eAAe,SAAS,MAAM,KAAK,QAAQ,eAAe,SAAS,MAAM;AAAA,MACxG;AACA,UAAI,QAAQ,YAAY;AACtB,YAAI,IAAI,gBAAgB;AAEtB,gBAAM,UAAU,QAAQ,WAAW,KAAK,EAAE,MAAM,KAAK;AACrD,cAAI,aAAa,QAAQ,IAAI,CAAC,UAAU,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAAA,QAChI,OAAO;AAEL,cAAI,aAAa,QAAQ,WAAW,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,QACjF;AAAA,MACF,OAAO;AAEL,YAAI,aAAa,IAAI;AAAA,MACvB;AACA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,mBAAmB,CAAC,YAAY;AACpC,YAAM,MAAM,EAAE,YAAY,SAAS,eAAe,YAAY,GAAG,YAAY,GAAG,UAAU,GAAK,UAAU,GAAK,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,OAAO,OAAO,gBAAgB,KAAK;AAElL,UAAI,QAAQ,YAAY;AACtB,YAAI,aAAa,WAAW,QAAQ,UAAU;AAAA,MAChD;AACA,UAAI,QAAQ,YAAY;AACtB,YAAI,aAAa,WAAW,QAAQ,UAAU;AAAA,MAChD;AACA,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,WAAW,QAAQ,QAAQ;AAAA,MAC5C;AACA,UAAI,QAAQ,UAAU;AACpB,YAAI,WAAW,WAAW,QAAQ,QAAQ;AAAA,MAC5C;AACA,UAAI,QAAQ,QAAQ;AAClB,YAAI,SAAS,QAAQ,OAAO,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,MACzE;AACA,UAAI,QAAQ,KAAK;AACf,YAAI,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,MACvE;AACA,UAAI,QAAQ,OAAO;AACjB,YAAI,QAAQ,QAAQ,MAAM,SAAS,MAAM,KAAK,QAAQ,MAAM,SAAS,MAAM;AAAA,MAC7E;AAEA,UAAI,QAAQ,gBAAgB;AAC1B,YAAI,iBAAiB,QAAQ,eAAe,SAAS,MAAM,KAAK,QAAQ,eAAe,SAAS,MAAM;AAAA,MACxG;AAEA,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAMA,QAAM,gBAAgB,CAAC,YAAY;AACjC,YAAM,MAAM,EAAE,YAAY,SAAS,WAAW;AAE9C,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,QAAM,cAAc,CAAC,YAAY;AAC/B,YAAM,MAAM,EAAE,YAAY,SAAS,UAAU,OAAO,CAAC,KAAK,KAAK,KAAK,CAAG,EAAE;AASzE,UAAI,QAAQ;AACZ,UAAI,QAAQ,cAAc;AACxB,gBAAQ,IAAM,QAAQ;AAAA,MACxB;AACA,UAAI,QAAQ,cAAc;AACxB,cAAM,SAAS,QAAQ,aAAa,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAC/E,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,OAAO,SAAS;AAAG,mBAAO,KAAK,KAAK;AACxC,cAAI,QAAQ;AAAA,QACd;AAAA,MACF;AACA,UAAI,QAAQ,eAAe;AACzB,cAAM,SAAS,QAAQ,cAAc,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;AAChF,YAAI,OAAO,SAAS,GAAG;AACrB,cAAI,OAAO,SAAS;AAAG,mBAAO,KAAK,KAAK;AACxC,cAAI,QAAQ;AAAA,QACd;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAIA,QAAM,WAAW,CAAC,YAAY;AAC5B,YAAM,MAAM,EAAE,YAAY,SAAS,MAAM;AAEzC,UAAI,UAAU,CAAC;AACf,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC9rBA;AAAA;AAAA,QAAM,EAAE,YAAY,YAAY,MAAM,IAAI;AAE1C,QAAM,EAAE,MAAM,MAAM,MAAM,IAAI;AAC9B,QAAM,EAAE,mBAAmB,MAAM,IAAI;AAErC,QAAM,iBAAiB,CAAC,UAAU;AAChC,YAAM,UAAU,MAAM;AACtB,YAAM,SAAS,KAAK,OAAO,MAAM,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC;AACvD,YAAM,QAAQ,CAAC;AACf,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,cAAM,QAAQ,KAAK,OAAO;AAC1B,YAAI,MAAM,GAAG;AACX,cAAI,QAAQ;AACV,iBAAK,UAAU,OAAO,KAAK,SAAS,OAAO,MAAM,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC,CAAC;AAAA,UAE1E,OAAO;AACL,iBAAK,UAAU,OAAO,KAAK,SAAS,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA,UAChE;AAAA,QACF,WACI,MAAM,UAAU,GAAG;AACrB,cAAI,QAAQ;AACV,iBAAK,UAAU,OAAO,KAAK,SAAS,OAAO,MAAM,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1E,OAAO;AACL,iBAAK,UAAU,OAAO,KAAK,SAAS,OAAO,MAAM,UAAU,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC,CAAC;AAAA,UACpF;AAAA,QACF,OAAO;AACL,eAAK,UAAU,OAAO,KAAK,SAAS,OAAO,MAAM,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC;AAAA,QACxE;AACA,cAAM,KAAK,KAAK;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,eAAe,CAAC,WAAW;AAC/B,UAAK,OAAO,CAAC,IAAI,MAAO,GAAG;AACzB,YAAK,OAAO,CAAC,IAAI,MAAO,GAAG;AACzB,cAAK,OAAO,CAAC,IAAI,MAAO,GAAG;AACzB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,GAAG,GAAG,GAAG,MAAM;AACrC,YAAM,IAAI,KAAK,SAAS,KAAK,OAAO,GAAG,GAAG,CAAC;AAC3C,YAAM,IAAI,KAAK,SAAS,KAAK,OAAO,GAAG,GAAG,CAAC;AAC3C,aAAO,KAAK,UAAU,GAAG,KAAK,MAAM,GAAG,GAAG,CAAC,CAAC;AAAA,IAC9C;AAEA,QAAM,iBAAiB,CAAC,UAAU;AAChC,YAAM,UAAU,MAAM;AACtB,YAAM,SAAS,KAAK,OAAO,MAAM,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC;AACvD,YAAM,QAAQ,CAAC;AACf,UAAI;AACJ,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,cAAM,QAAQ,KAAK,OAAO;AAC1B,YAAI,MAAM,GAAG;AACX,cAAI,QAAQ;AACV,2BAAe,OAAO,MAAM,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,UAC9D,OAAO;AACL,gBAAI,UAAU;AAAG,6BAAe,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,UACrE;AAAA,QACF,WACI,MAAM,UAAU,GAAG;AACrB,cAAI,QAAQ;AACV,2BAAe,OAAO,MAAM,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,UAC9D,OAAO;AACL,gBAAI,UAAU;AAAG,6BAAe,OAAO,MAAM,UAAU,CAAC,GAAG,MAAM,UAAU,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC;AAAA,UACnG;AAAA,QACF,OAAO;AACL,yBAAe,OAAO,MAAM,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC;AAAA,QAK5D;AAEA,YAAI,iBAAiB,KAAK,IAAI,eAAe,KAAK,IAAI;AAAG,eAAK,OAAO,OAAO,KAAK;AAEjF,cAAM,KAAK,KAAK;AAEhB,wBAAgB;AAAA,MAClB;AAEA,UAAI,aAAa,MAAM,CAAC,CAAC,GAAG;AAC1B,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAI,CAAC,aAAa,MAAM,CAAC,CAAC,GAAG;AAC3B,kBAAM,CAAC,IAAI,MAAM,CAAC;AAClB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAI,aAAa,MAAM,CAAC,CAAC,KAAK,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;AAAG,eAAK,MAAM,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC;AAAA,MAC9F;AACA,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,OAAO,UAAU;AACvC,YAAM,QAAQ,CAAC;AACf,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAM,QAAQ,KAAK,OAAO;AAC1B,cAAM,KAAK,KAAK,UAAU,OAAO,KAAK,MAAM,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAA,MACzE;AACA,aAAO;AAAA,IACT;AAGA,QAAM,wBAAwB,CAAC,KAAK,OAAO,OAAO,UAAU;AAC1D,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,CAAC,IAAI,MAAM,CAAC;AAChB,UAAI,EAAE,IAAI,MAAM,CAAC;AACjB,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI;AACV,UAAI,EAAE,IAAI;AACV,aAAO;AAAA,IACT;AAEA,QAAM,aAAa,CAAC,aAAa;AAE/B,UAAI,EAAE,UAAU,QAAQ,cAAc,cAAc,QAAQ,MAAM,IAAI,OAAO,OAAO,CAAC,GAAG,QAAQ;AAGhG,UAAI,MAAM,KAAK,YAAY,IAAI;AAAG,qBAAa,QAAQ;AAGvD,UAAI,OAAO,WAAW,GAAG;AACvB,iBAAS,MAAM,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC;AAAA,MACrC;AAGA,UAAI,aAAa,WAAW,GAAG;AAC7B,uBAAe,MAAM,IAAI,CAAC,MAAM,aAAa,CAAC,CAAC;AAAA,MACjD;AAGA,UAAI,MAAM,WAAW,OAAO,UAAU,MAAM,WAAW,aAAa,QAAQ;AAC1E,cAAM,IAAI,MAAM,8EAA8E,MAAM,MAAM,EAAE;AAAA,MAC9G;AAGA,YAAM,eAAe,WAAW,MAAM,WAAW,YAAY;AAC7D,YAAM,eAAe,MAAM,UAAU,WAAW,MAAM,QAAQ,YAAY,CAAC;AAG3E,UAAI,QAAQ,eAAe,KAAK;AAEhC,UAAI,QAAQ,eAAe,KAAK;AAEhC,UAAI,QAAQ,eAAe,OAAO,KAAK;AAIvC,YAAM,cAAc,CAAC,GAAG,GAAG,CAAC;AAC5B,YAAM,WAAW,KAAK,mBAAmB,KAAK,OAAO,GAAG,KAAK,WAAW,GAAG,GAAG,CAAC,GAAG,WAAW;AAG7F,YAAM,UAAU,MAAM,OAAO,CAAC,KAAK,SAAS,OAAO,aAAa,IAAI,GAAG,IAAI;AAC3E,UAAI,SAAS;AACX,aAAK,SAAS,aAAa,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAC7C,aAAK,mBAAmB,UAAU,KAAK,WAAW,GAAG,GAAG,CAAC,GAAG,WAAW;AACvE,gBAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;AACrC,gBAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;AACrC,gBAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,MACvC;AAGA,aAAO,kBAAkB;AAAA,QACvB,gBAAgB,MAAM;AAAA,QACtB,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU,SAAU,UAAU,OAAO,MAAM;AACzC,gBAAM,WAAW,MAAM,KAAK;AAC5B,gBAAM,QAAQ,KAAK,SAAS,KAAK,OAAO,GAAG,OAAO,KAAK,GAAG,CAAG;AAC7D,gBAAM,cAAc,aAAa,KAAK;AACtC,gBAAM,QAAQ,MAAM,KAAK;AACzB,gBAAM,QAAQ,MAAM,KAAK;AACzB,gBAAM,QAAQ,MAAM,KAAK;AAEzB,gBAAM,oBAAoB,KAAK,gBAAgB,KAAK,OAAO,GAAG,QAAQ;AACtE,gBAAM,cAAc,KAAK,YAAY,KAAK,OAAO,GAAG,KAAK;AACzD,gBAAM,YAAY,sBAAsB,KAAK,OAAO,GAAG,OAAO,OAAO,KAAK;AAC1E,gBAAM,oBAAoB,KAAK,aAAa,KAAK,OAAO,GAAG,YAAY,CAAC,GAAG,WAAW;AACtF,gBAAM,iBAAiB,KAAK,OAAO;AAMnC,eAAK,SAAS,gBAAgB,UAAU,cAAc;AACtD,eAAK,SAAS,gBAAgB,WAAW,cAAc;AACvD,eAAK,SAAS,gBAAgB,mBAAmB,cAAc;AAC/D,eAAK,SAAS,gBAAgB,mBAAmB,cAAc;AAE/D,cAAI,WAAW;AACf,qBAAW,MAAM,UAAU,aAAa,QAAQ;AAChD,qBAAW,MAAM,UAAU,gBAAgB,QAAQ;AAEnD,iBAAO;AAAA,QACT;AAAA,MACF,GAAG,YAAY;AAAA,IACjB;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACvNjB;AAAA;AAAA,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,WAAW,CAAC,SAAS,YAAY,QAAQ,KAAK,CAAC,WAAW,OAAO,eAAe,OAAO;AAE7F,QAAM,YAAY,CAAC,SAAS,YAAY;AACtC,YAAM,aAAa,SAAS,SAAS,YAAY,OAAO;AACxD,UAAI;AACJ,UAAI,YAAY;AACd,mBAAW,SAAS,SAAS,UAAU,WAAW,OAAO;AACzD,YAAI,UAAU;AACZ,iBAAO,SAAS,QAAQ,SAAS,QAAQ;AAAA,QAC3C;AAAA,MACF;AAEA,iBAAW,SAAS,SAAS,UAAU,OAAO;AAC9C,UAAI,UAAU;AACZ,eAAO,SAAS,QAAQ,SAAS,QAAQ;AAAA,MAC3C;AACA,aAAO;AAAA,IACT;AAEA,QAAM,gBAAgB,CAAC,UAAU,IAAI,KAAK;AAE1C,QAAM,iBAAiB,CAAC,aAAa;AACnC,YAAM,UAAU,SAAS,IAAI,CAAC,UAAU,cAAc,KAAK,CAAC;AAC5D,aAAO;AAAA,MACH,QAAQ,KAAK,SAAS,CAAC;AAAA;AAAA,IAE7B;AAGA,QAAM,+BAA+B,CAAC,YAAY,iBAAiB;AACjE,UAAI,EAAE,MAAM,QAAQ,UAAU,KAAK,MAAM,QAAQ,YAAY;AAAI,eAAO;AACxE,UAAI,WAAW,SAAS,KAAK,CAAC,MAAM,QAAQ,WAAW,CAAC,CAAC,GAAG;AAC1D,gBAAQ,IAAI,sCAAsC;AAClD,eAAO;AAAA,MACT;AAGA,YAAM,SAAS,CAAC;AAChB,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,cAAM,UAAU,WAAW,CAAC;AAC5B,YAAI,IAAI;AACR,YAAI,IAAI;AACR,YAAI,IAAI;AACR,cAAM,IAAI;AACV,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,gBAAM,cAAc,aAAa,QAAQ,CAAC,CAAC;AAC3C,cAAI,aAAa;AACf,iBAAK,YAAY,CAAC;AAClB,iBAAK,YAAY,CAAC;AAClB,iBAAK,YAAY,CAAC;AAAA,UACpB;AAAA,QACF;AACA,cAAM,QAAQ,CAAC,IAAI,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,CAAC;AAC5E,eAAO,KAAK,KAAK;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAEA,QAAM,6BAA6B,CAAC,YAAY,eAAe;AAC7D,UAAI,EAAE,MAAM,QAAQ,UAAU,KAAK,MAAM,QAAQ,UAAU;AAAI,eAAO;AAEtE,YAAM,SAAS,WAAW,IAAI,CAAC,UAAU,WAAW,KAAK,IAAI,WAAW,KAAK,IAAI,IAAI;AACrF,aAAO;AAAA,IACT;AAGA,QAAM,eAAe,CAAC,OAAO,UAAU;AACrC,UAAI,CAAC;AAAO,eAAO;AACnB,UAAI,CAAC,MAAM,QAAQ,MAAM,UAAU;AAAG,eAAO;AAE7C,UAAI,SAAS;AACb,UAAI,MAAM,mBAAmB,MAAM;AACjC,iBAAS,6BAA6B,MAAM,YAAY,MAAM,MAAM;AAAA,MACtE,OAAO;AACL,iBAAS,2BAA2B,MAAM,YAAY,MAAM,MAAM;AAAA,MACpE;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MAEA;AAAA,MAEA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACzFA;AAAA;AAAA,QAAM,QAAQ;AAEd,QAAM,EAAE,cAAc,SAAS,IAAI;AACnC,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,cAAc,CAAC,SAAS,YAAY;AACxC,UAAI,QAAQ,SAAS,SAAS,gBAAgB,OAAO;AACrD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,UAAU,MAAM;AACtB,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,cAAc,SAAS;AACzB,gBAAM,YAAY,QAAQ,IAAI,CAAC,UAAU;AACvC,gBAAI,SAAS,MAAM,IAAI,CAAC,MAAM,WAAW,OAAO,CAAC,CAAC;AAClD,kBAAM,OAAO,OAAO,UAAU,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC;AAC/C,gBAAI,QAAQ,GAAG;AACb,sBAAQ,KAAK,sDAAsD;AACnE,uBAAS,CAAC;AAAA,YACZ;AACA,mBAAO;AAAA,UACT,CAAC;AACD,cAAI,MAAM,mBAAmB,MAAM;AACjC,kBAAM,aAAa;AAAA,UACrB,OAAO;AACL,kBAAM,aAAa,QAAQ,IAAI,CAAC,OAAO,MAAM,CAAC;AAAA,UAChD;AACA,gBAAM,SAAS,aAAa,OAAO,KAAK;AAExC,iBAAO,EAAE,WAAW,OAAO;AAAA,QAC7B;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,SAAS,OAAO;AAC1C,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,cAAM,SAAS,MAAM;AACrB,YAAI,cAAc,QAAQ;AACxB,cAAI,KAAK;AACT,gBAAM,YAAY,OAAO,IAAI,CAAC,UAAU;AACtC,gBAAI,SAAS,CAAC;AACd,qBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,qBAAO,KAAK,WAAW,OAAO,EAAE,CAAC;AACjC;AAAA,YACF;AACA,kBAAM,OAAO,OAAO,UAAU,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC;AAC/C,gBAAI,QAAQ,GAAG;AACb,sBAAQ,KAAK,8CAA8C;AAC3D,uBAAS,CAAC;AAAA,YACZ;AACA,mBAAO;AAAA,UACT,CAAC;AACD,cAAI,MAAM,mBAAmB,MAAM;AACjC,gBAAI,KAAK;AACT,kBAAM,aAAa,OAAO,IAAI,CAAC,UAAU;AACvC,oBAAM,QAAQ,CAAC;AACf,uBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,sBAAM,KAAK,EAAE;AACb;AAAA,cACF;AACA,qBAAO;AAAA,YACT,CAAC;AAAA,UACH,OAAO;AACL,kBAAM,aAAa,UAAU,IAAI,CAAC,IAAI,MAAM,CAAC;AAAA,UAC/C;AACA,gBAAM,SAAS,aAAa,OAAO,KAAK;AAExC,iBAAO,EAAE,WAAW,OAAO;AAAA,QAC7B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,SAAS,YAAY;AAC5C,UAAI;AAEJ,YAAM,aAAa,YAAY,SAAS,OAAO;AAC/C,UAAI,YAAY;AACd,cAAM,EAAE,WAAW,OAAO,IAAI;AAC9B,mBAAW,UAAU,IAAI,CAAC,QAAQ,MAAM;AACtC,cAAI;AACJ,cAAI,QAAQ;AACV,mBAAO,MAAM,OAAO,SAAS,OAAO,CAAC,GAAG,MAAM,WAAW,KAAK,MAAM,CAAC;AAAA,UACvE,OAAO;AACL,mBAAO,MAAM,WAAW,KAAK,MAAM;AAAA,UACrC;AACA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AChGA;AAAA;AAAA,QAAM,EAAE,eAAe,IAAI;AAE3B,QAAM,EAAE,YAAY,IAAI;AAExB,QAAM,gBAAgB,CAAC,SAAS,YAAY;AAC1C,YAAM,aAAa,YAAY,SAAS,OAAO;AAC/C,UAAI,YAAY;AACd,cAAM,EAAE,WAAW,OAAO,IAAI;AAC9B,YAAI,OAAO;AACX,kBAAU,QAAQ,CAAC,QAAQ,MAAM;AAC/B,cAAI,QAAQ;AACV,kBAAM,YAAY,OAAO,CAAC;AAC1B,oBAAQ,eAAe,CAAC,gBAAgB,SAAS,sBAAsB,eAAe,MAAM,CAAC;AAAA,mBAClF,CAAC;AAAA;AAAA,UAEd,OAAO;AACL,oBAAQ,eAAe,CAAC,sBAAsB,eAAe,MAAM,CAAC;AAAA,mBACzD,CAAC;AAAA;AAAA,UAEd;AAAA,QACF,CAAC;AACD,cAAM,YAAY;AAClB,eAAO,EAAE,WAAW,KAAK;AAAA,MAC3B;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC3BjB;AAAA;AAAA,QAAM,EAAE,WAAW,IAAI;AAEvB,QAAM,EAAE,SAAS,IAAI;AACrB,QAAM,EAAE,UAAU,aAAa,IAAI;AAEnC,QAAM,cAAc,CAAC,SAAS,YAAY;AACxC,UAAI,QAAQ,SAAS,SAAS,aAAa,OAAO;AAClD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,YAAY;AACd,gBAAM,SAAS,WAAW;AAC1B,gBAAM,YAAY,OAAO;AACzB,gBAAM,WAAW,KAAK,MAAM,YAAY,CAAC;AACzC,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,UAAU,MAAM;AACpC,kBAAM,KAAK,KAAK;AAChB,kBAAM,KAAK,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;AAAA,UACjC;AACA,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,OAAO;AAEb,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,gBAAgB,OAAO;AACjD,UAAI,OAAO;AACT,cAAM,WAAW,MAAM;AACvB,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,YAAY;AACd,gBAAM,SAAS,WAAW;AAC1B,gBAAM,UAAU,SAAS;AACzB,gBAAM,QAAQ,CAAC;AACf,cAAI,KAAK;AACT,mBAAS,KAAK,GAAG,KAAK,SAAS,MAAM;AACnC,kBAAM,cAAc,KAAK,MAAM,SAAS,EAAE,CAAC;AAC3C,qBAAS,KAAK,GAAG,KAAM,cAAc,GAAI,MAAM;AAC7C,oBAAM,KAAK,CAAC,IAAI,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC;AAAA,YACvC;AACA,kBAAM;AAAA,UACR;AACA,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,OAAO,kBAAkB,OAAO;AAEtC,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,kBAAkB,OAAO;AACnD,UAAI,OAAO;AACT,cAAM,aAAa,MAAM;AACzB,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,YAAY;AACd,gBAAM,SAAS,WAAW;AAC1B,gBAAM,YAAY,WAAW;AAC7B,gBAAM,QAAQ,CAAC;AACf,cAAI,KAAK;AACT,mBAAS,KAAK,GAAG,KAAK,WAAW,MAAM;AACrC,kBAAM,cAAc,KAAK,MAAM,WAAW,EAAE,CAAC;AAC7C,qBAAS,KAAK,GAAG,KAAM,cAAc,GAAI,MAAM;AAC7C,oBAAM,OAAO,CAAC,KAAK,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,CAAC;AAC/C,kBAAK,KAAK,MAAO;AAAG,qBAAK,QAAQ;AACjC,oBAAM,KAAK,IAAI;AAAA,YACjB;AACA,kBAAM;AAAA,UACR;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,mBAAmB,SAAS;AAEzC,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,SAAS,OAAO;AAC1C,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,YAAY;AACd,gBAAM,SAAS,WAAW;AAC1B,gBAAM,YAAY,OAAO;AACzB,gBAAM,WAAW,KAAK,MAAM,YAAY,CAAC;AACzC,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,UAAU,MAAM;AACpC,kBAAM,KAAK,KAAK;AAChB,kBAAM,KAAK,CAAC,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;AAAA,UACzC;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,SAAS,QAAQ;AAE9B,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,oBAAoB,OAAO;AACrD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,cAAM,QAAQ,MAAM;AACpB,YAAI,cAAc,SAAS,MAAM,SAAS,GAAG;AAC3C,gBAAM,SAAS,WAAW;AAC1B,gBAAM,WAAW,KAAK,MAAM,MAAM,SAAS,CAAC;AAC5C,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,UAAU,MAAM;AACpC,kBAAM,KAAK,KAAK;AAChB,kBAAM,KAAK,CAAC,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC;AAAA,UACtD;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO;AAEb,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,uBAAuB,OAAO;AACxD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,cAAM,OAAO,MAAM;AACnB,YAAI,cAAc,QAAQ,KAAK,SAAS,GAAG;AACzC,gBAAM,SAAS,WAAW;AAC1B,gBAAM,UAAU,KAAK;AACrB,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,SAAS,MAAM;AACnC,kBAAM,MAAM,KAAK,EAAE;AACnB,kBAAM,cAAc,IAAI;AACxB,qBAAS,KAAK,GAAG,KAAM,cAAc,GAAI,MAAM;AAC7C,oBAAM,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;AAAA,YAC3C;AAAA,UACF;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,yBAAyB,OAAO;AAE7C,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,yBAAyB,OAAO;AAC1D,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,cAAM,SAAS,MAAM;AACrB,YAAI,cAAc,UAAU,OAAO,SAAS,GAAG;AAC7C,gBAAM,SAAS,WAAW;AAC1B,gBAAM,YAAY,OAAO;AACzB,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,WAAW,MAAM;AACrC,kBAAM,QAAQ,OAAO,EAAE;AACvB,kBAAM,cAAc,MAAM;AAC1B,qBAAS,KAAK,GAAG,KAAM,cAAc,GAAI,MAAM;AAC7C,oBAAM,OAAO,CAAC,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC;AACrD,kBAAK,KAAK,MAAO;AAAG,qBAAK,QAAQ;AACjC,oBAAM,KAAK,IAAI;AAAA,YACjB;AAAA,UACF;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,2BAA2B,SAAS;AAEjD,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,gBAAgB,OAAO;AACjD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,cAAM,QAAQ,MAAM;AACpB,YAAI,cAAc,SAAS,MAAM,SAAS,GAAG;AAC3C,gBAAM,SAAS,WAAW;AAC1B,gBAAM,WAAW,KAAK,MAAM,MAAM,SAAS,CAAC;AAC5C,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,UAAU,MAAM;AACpC,kBAAM,KAAK,KAAK;AAChB,kBAAM,KAAK,CAAC,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC;AAAA,UACrE;AACA,gBAAM,aAAa;AACnB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,iBAAiB,QAAQ;AAEtC,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,gBAAgB,OAAO;AACjD,UAAI,OAAO;AACT,cAAM,aAAa,SAAS,SAAS,YAAY,MAAM,OAAO;AAC9D,cAAM,QAAQ,MAAM;AACpB,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,cAAc,SAAS,MAAM,SAAS,GAAG;AAC3C,gBAAM,SAAS,WAAW;AAC1B,gBAAM,WAAW,MAAM;AACvB,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,cAAc,MAAM,MAAM,YAAY;AAC5C,gBAAM,OAAO,kBAAkB,QAAQ;AAEvC,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,cAAQ,SAAS,SAAS,eAAe,OAAO;AAChD,UAAI,OAAO;AACT,cAAM,SAAS,MAAM;AACrB,cAAM,QAAQ,SAAS,SAAS,OAAO,MAAM,OAAO;AACpD,YAAI,UAAU,OAAO,SAAS,GAAG;AAC/B,gBAAM,aAAa,MAAM;AACzB,gBAAM,WAAW,MAAM;AACvB,gBAAM,aAAa,MAAM;AACzB,gBAAM,WAAW,MAAM;AAGvB,gBAAM,SAAS,CAAC;AAChB,cAAI,KAAK;AACT,mBAAS,KAAK,GAAG,KAAK,YAAY,EAAE,IAAI;AACtC,qBAAS,KAAK,GAAG,KAAK,YAAY,EAAE,IAAI;AACtC,oBAAM,IAAI,KAAK;AACf,oBAAM,IAAI,KAAK;AACf,oBAAM,IAAI,OAAO,EAAE;AAEnB;AAEA,qBAAO,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,YACvB;AAAA,UACF;AAEA,gBAAM,QAAQ,CAAC;AACf,mBAAS,KAAK,GAAG,KAAK,aAAa,GAAG,EAAE,IAAI;AAC1C,qBAAS,KAAK,GAAG,KAAK,aAAa,GAAG,EAAE,IAAI;AAC1C,oBAAM,MAAM,KAAM,KAAK;AACvB,oBAAM,MAAO,KAAK,IAAM,KAAK;AAC7B,oBAAM,MAAM,MAAO,KAAK,KAAK;AAC7B,oBAAM,MAAO,KAAK,KAAO,KAAK,KAAK;AAEnC,oBAAM,YAAY,CAAC,KAAK,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,IAAI,OAAO,GAAG,CAAC,CAAC;AAC7G,kBAAI,QAAQ;AACZ,kBAAI,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC;AAAG,wBAAQ;AAC1G,kBAAI,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC;AAAG,wBAAQ;AAC1G,kBAAI,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC;AAAG,wBAAQ;AAE1G,kBAAI,UAAU;AAAG,sBAAM,KAAK,CAAC,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC;AAC5D,kBAAI,UAAU;AAAG,sBAAM,KAAK,CAAC,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC;AAC5D,kBAAI,UAAU;AAAG,sBAAM,KAAK,CAAC,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC;AAC5D,kBAAI,UAAU;AAAG,sBAAM,KAAK,CAAC,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC;AAAA,YAC9D;AAAA,UACF;AAEA,gBAAM,cAAc,MAAM,MAAM,YAAY;AAE5C,cAAI,MAAM,mBAAmB,MAAM;AACjC,kBAAM,aAAa;AAAA,UACrB,OAAO;AAAA,UAEP;AACA,gBAAM,SAAS,aAAa,OAAO,KAAK;AACxC,gBAAM,OAAO,mBAAmB,UAAU,MAAM,UAAU;AAE1D,iBAAO,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY;AAAA,QACpD;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,CAAC,SAAS,YAAY;AAC5C,UAAI;AAEJ,YAAM,aAAa,YAAY,SAAS,OAAO;AAC/C,UAAI,YAAY;AACd,mBAAW,WAAW,WAAW,UAAU;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACpSA;AAAA;AAAA,QAAM,EAAE,eAAe,IAAI;AAE3B,QAAM,EAAE,YAAY,IAAI;AAExB,QAAM,wBAAwB,CAAC,MAAM,QAAQ,OAAO,QAAQ,gBAAgB;AAC1E,YAAM,aAAa,MAAM,QAAQ,MAAM,IAAI,eAAe,MAAM,IAAI;AACpE,YAAM,YAAY;AAClB,YAAM,OAAO;AAAA,UACL,IAAI,SAAS,OAAO,MAAM,YAAY,MAAM,MAAM;AAAA,mBACzC,eAAe,MAAM,CAAC;AAAA,kBACvB,eAAe,KAAK,CAAC;AAAA,mBACpB,UAAU;AAAA,yBACJ,WAAW;AAAA;AAElC,aAAO,EAAE,WAAW,KAAK;AAAA,IAC3B;AAMA,QAAM,gBAAgB,CAAC,SAAS,YAAY;AAC1C,YAAM,aAAa,YAAY,SAAS,OAAO;AAC/C,UAAI,YAAY;AACd,cAAM,EAAE,MAAM,QAAQ,OAAO,QAAQ,YAAY,IAAI;AACrD,eAAO,sBAAsB,MAAM,QAAQ,OAAO,QAAQ,WAAW;AAAA,MACvE;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC9BjB;AAAA;AAAA,QAAM,EAAE,WAAW,IAAI;AAEvB,QAAM,EAAE,OAAO,MAAM,IAAI;AAEzB,QAAM,aAAa;AAEnB,QAAM,EAAE,SAAS,IAAI;AACrB,QAAM,EAAE,UAAU,WAAW,eAAe,IAAI;AAEhD,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AAEtB,QAAM,iBAAiB,CAAC,SAAS,WAAW;AAC1C,UAAI,OAAO;AAAA;AAAA,qBAEQ,OAAO,EAAE;AAAA;AAAA;AAI5B,YAAM,UAAU,OAAO;AAEvB,YAAM,QAAQ,UAAU,SAAS,OAAO;AAGxC,UAAI;AAGJ,UAAI,QAAQ,SAAS,SAAS,KAAK,OAAO;AAC1C,UAAI,OAAO;AACT,oBAAY,6BAA6B,MAAM,IAAI;AAAA,MACrD,OAAO;AACL,gBAAQ,SAAS,SAAS,MAAM,OAAO;AACvC,YAAI,OAAO;AACT,kBAAQ,6FAA6F,MAAM,YAAY,IAAI,MAAM,YAAY,cAAc,MAAM,MAAM,eAAe,MAAM,WAAW,iBAAiB,MAAM,SAAS,KAAK,MAAM,SAAS;AAAA;AAE3P,sBAAY;AAAA,QACd,OAAO;AACL,kBAAQ,SAAS,SAAS,UAAU,OAAO;AAC3C,cAAI,OAAO;AACT,oBAAQ,+EAA+E,MAAM,MAAM,aAAa,MAAM,MAAM,eAAe,MAAM,WAAW;AAAA;AAE5J,wBAAY;AAAA,UACd,OAAO;AACL,oBAAQ,SAAS,SAAS,QAAQ,OAAO;AACzC,gBAAI,OAAO;AACT,0BAAY,8BAA8B,MAAM,MAAM,eAAe,MAAM,WAAW;AAAA,YACxF,OAAO;AACL,sBAAQ,SAAS,SAAS,WAAW,OAAO;AAC5C,kBAAI,OAAO;AAET,sBAAM,WAAW,WAAW,KAAK;AAEjC,sBAAM,WAAW,MAAM,WAAW,QAAQ;AAC1C,sBAAM,iBAAiB,SAAS,IAAI,CAAC,YAAY,eAAe,MAAM,SAAS,OAAO,CAAC,CAAC;AACxF,wBAAQ;AAAA,IAChB,eAAe,KAAK,OAAO,CAAC;AAAA;AAAA;AAGpB,4BAAY;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,WAAW;AAEd,gBAAQ,SAAS,SAAS,OAAO,OAAO;AACxC,YAAI,OAAO;AACT,sBAAY,2BAA2B,MAAM,MAAM,iBAAiB,MAAM,UAAU,eAAe,MAAM,QAAQ,eAAe,MAAM,WAAW;AAAA,QACnJ,OAAO;AACL,kBAAQ,SAAS,SAAS,YAAY,OAAO;AAC7C,cAAI,OAAO;AACT,gBAAI,MAAM,gBAAgB,OAAO;AAC/B,0BAAY,8BAA8B,MAAM,MAAM,iBAAiB,MAAM,UAAU,eAAe,MAAM,QAAQ,eAAe,MAAM,WAAW;AAAA,YACtJ,OAAO;AACL,0BAAY,wGAAwG,MAAM,MAAM,iBAAiB,MAAM,UAAU,eAAe,MAAM,QAAQ,eAAe,MAAM,WAAW;AAAA,YAChO;AAAA,UACF,OAAO;AACL,oBAAQ,SAAS,SAAS,UAAU,OAAO;AAC3C,gBAAI,OAAO;AAET,0BAAY,2BAA2B,MAAM,MAAM,eAAe,MAAM,WAAW;AAAA,YACrF,OAAO;AACL,sBAAQ,SAAS,SAAS,QAAQ,OAAO;AACzC,kBAAI,OAAO;AACT,oBAAI,MAAM,gBAAgB,MAAM,aAAa;AAC3C,8BAAY,2BAA2B,MAAM,WAAW,eAAe,MAAM,WAAW;AAAA,gBAC1F,OAAO;AACL,sBAAI,MAAM,gBAAgB,GAAG;AAC3B,gCAAY,8BAA8B,MAAM,WAAW,eAAe,MAAM,WAAW;AAAA,kBAC7F,OAAO;AACL,gCAAY,gDAAgD,MAAM,WAAW,eAAe,MAAM,WAAW,kCAAkC,MAAM,WAAW,eAAe,MAAM,WAAW;AAAA,kBAClM;AAAA,gBACF;AAAA,cACF,OAAO;AACL,wBAAQ,SAAS,SAAS,YAAY,OAAO;AAC7C,oBAAI,OAAO;AACT,wBAAM,eAAe,MAAM,aAAa,KAAK,MAAM;AACnD,8BAAY,qBAAqB,YAAY;AAAA,gBAC/C,OAAO;AACL,0BAAQ,SAAS,SAAS,aAAa,OAAO;AAC9C,sBAAI,OAAO;AACT,gCAAY,gCAAgC,MAAM,IAAI;AAAA,kBACxD,OAAO;AACL,4BAAQ,SAAS,SAAS,eAAe,OAAO;AAChD,wBAAI,OAAO;AACT,4BAAM,YAAY,MAAM,SAAS;AACjC,4BAAM,WAAW,KAAK,MAAM,YAAY,CAAC;AACzC,8BAAQ;AAAA,wBACF,SAAS,YAAY,QAAQ;AAAA,qBAChC,eAAe,MAAM,QAAQ,CAAC;AAAA;AAAA,wBAE3B,QAAQ;AAAA;AAAA;AAAA;AAId,kCAAY;AAAA,oBACd;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,UAAU,cAAc,SAAS,OAAO;AAC5C,UAAI,SAAS;AACX,oBAAY,QAAQ;AACpB,gBAAQ,QAAQ;AAAA,MAClB;AAEA,gBAAU,cAAc,SAAS,OAAO;AACxC,UAAI,SAAS;AACX,oBAAY,QAAQ;AACpB,gBAAQ,QAAQ;AAAA,MAClB;AAEA,UAAI,WAAW;AACb,YAAI,OAAO;AACT,kBAAQ,4BAA4B,KAAK,MAAM,SAAS;AAAA,QAC1D,OAAO;AACL,kBAAQ,kBAAkB,SAAS;AAAA,QACrC;AAAA,MACF;AAEA,cAAQ;AAAA;AAAA;AAAA;AAIR,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC1JjB;AAAA;AAAA,QAAM,kBAAkB;AAExB,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,iBAAiB;AAGvB,QAAM,qBAAqB,CAAC,SAAS,WAAW;AAC9C,UAAI,OAAO;AAAA;AAAA,qBAEQ,OAAO,EAAE;AAAA;AAAA;AAI5B,YAAM,UAAU,OAAO;AACvB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,gBAAQ,kCAAkC,IAAI,EAAE;AAAA;AAAA,MAClD;AAEA,YAAM,SAAS,gBAAgB,OAAO,QAAQ,OAAO,UAAU,OAAO,OAAO,OAAO,kBAAkB,OAAO,WAAW;AAGxH,cAAQ;AAAA,oBACU,MAAM;AAAA;AAAA;AAAA;AAKxB,cAAQ,qBAAqB,SAAS,OAAO;AAE7C,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC,SAAS,WAAW;AAC1C,UAAI,OAAO;AAAA;AAAA,qBAEQ,OAAO,EAAE;AAAA;AAAA;AAI5B,YAAM,UAAU,OAAO;AACvB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,gBAAQ,kCAAkC,IAAI,EAAE;AAAA;AAAA,MAClD;AAEA,cAAQ;AAAA;AAAA;AAAA;AAKR,cAAQ,qBAAqB,SAAS,OAAO;AAE7C,aAAO;AAAA,IACT;AAEA,QAAM,iBAAiB,CAAC;AAExB,QAAM,sBAAsB,CAAC,SAAS,WAAW;AAC/C,UAAI,eAAe,SAAS,OAAO,EAAE;AAAG,eAAO;AAE/C,qBAAe,KAAK,OAAO,EAAE;AAE7B,UAAI,OAAO;AACX,cAAQ,OAAO,YAAY;AAAA,QACzB,KAAK,SAAS;AACZ,kBAAQ,mBAAmB,SAAS,MAAM;AAC1C;AAAA,QACF,KAAK,SAAS;AACZ,kBAAQ,eAAe,SAAS,MAAM;AACtC;AAAA,QACF,KAAK,SAAS;AACZ,kBAAQ,eAAe,SAAS,MAAM;AACtC;AAAA,QACF;AACE,kBAAQ,IAAI,kCAAkC,OAAO,UAAU;AAC/D;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAGA,QAAM,uBAAuB,CAAC,SAAS,YAAY,QAAQ,OAAO,CAAC,MAAM,QAAQ,UAAU,QAAQ,oBAAoB,SAAS,MAAM,GAAG,EAAE;AAE3I,WAAO,UAAU;AAAA;AAAA;;;ACrFjB,IAAAC,iBAAA;AAAA;AAAA,QAAM,QAAQ;AAEd,QAAM;AAAA,MACJ;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,QAAI,UAAU;AACd,QAAI,gBAAgB,SAAS;AAG7B,QAAM,aAAa,CAAC;AACpB,QAAM,UAAU,oBAAI,IAAI;AAExB,QAAM,eAAe,CAAC;AACtB,QAAM,cAAc,CAAC;AAErB,QAAM,YAAY,EAAE,QAAQ,GAAK,MAAM,SAAS;AAChD,QAAM,WAAW,EAAE,QAAQ,GAAK,MAAM,UAAU;AAEhD,QAAI,SAAS;AAEb,QAAM,kBAAkB;AAAA,MACtB,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,MAEb,KAAK;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,WAAW;AAAA,MAEX,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,eAAe;AAAA,MAEf,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,SAAS;AAAA,MACT,oBAAoB;AAAA,MACpB,uBAAuB;AAAA,MACvB,yBAAyB;AAAA,MACzB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,eAAe;AAAA,MAEf,SAAS;AAAA,MACT,gBAAgB;AAAA,MAEhB,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ;AAEA,QAAI,WAAW;AACf,QAAM,cAAc,OAAO,SAAS,YAAY,MAAM,EAAE;AAExD,QAAM,kBAAkB,CAAC,KAAK,UAAU;AAEtC,YAAM,SAAS,IAAI,MAAM,YAAY;AAErC,aAAO,GAAG,SAAS,CAAC,MAAM;AACxB,gBAAQ,IAAI,eAAe,EAAE,IAAI,YAAY,EAAE,MAAM,oBAAoB,EAAE,CAAC,GAAG;AAAA,MACjF,CAAC;AAED,aAAO,GAAG,WAAW,CAAC,SAAS;AAE7B,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,YAAI,MAAM,gBAAgB,WAAW,IAAI,gBAAgB,WAAW,EAAE,KAAK,YAAY,EAAE,WAAW,CAAC,IAAI;AAEzG,YAAI,KAAK;AACP,cAAI,KAAK,YAAY;AAGrB,cAAI,KAAK,WAAW,KAAK;AACvB,kBAAM,aAAa,KAAK,WAAW;AACnC,gBAAI,QAAQ,IAAI,UAAU,GAAG;AAC3B,oBAAM,MAAM,QAAQ,IAAI,UAAU;AAClC,kBAAI,IAAI,eAAe,IAAI,YAAY;AACrC,wBAAQ,IAAI,gCAAgC,UAAU,0BAA0B,IAAI,UAAU,OAAO,IAAI,UAAU,EAAE;AAAA,cACvH;AACA,oBAAM;AAAA,YACR,OAAO;AACL,sBAAQ,IAAI,wBAAwB,UAAU,uCAAuC,IAAI,UAAU,EAAE;AAAA,YACvG;AAAA,UACF,OAAO;AACL,gBAAI,KAAK,WAAW,KAAK;AACvB,oBAAM,aAAa,KAAK,WAAW;AACnC,kBAAI,QAAQ,IAAI,UAAU,GAAG;AAC3B,wBAAQ,IAAI,2BAA2B,UAAU,mBAAmB;AAAA,cACtE,OAAO;AACL,wBAAQ,IAAI,YAAY,GAAG;AAAA,cAC7B;AAAA,YACF;AAAA,UACF;AAIA,kBAAQ,IAAI,YAAY;AAAA,YACtB,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AACZ,8BAAgB,IAAI;AACpB;AAAA,YACF;AACE;AAAA,UACJ;AAMA,kBAAQ,eAAe;AAAA,YACrB,KAAK,SAAS;AACZ,kBAAI,aAAa,KAAK;AAEpB,2BAAW,KAAK,GAAG;AAAA,cACrB;AAEA,kBAAI,IAAI,eAAe,SAAS,MAAM;AACpC,oBAAI,IAAI,aAAa,UAAU;AAC7B,4BAAU,SAAS,IAAI;AACvB,4BAAU,OAAO,IAAI;AAAA,gBACvB;AACA,oBAAI,IAAI,aAAa,SAAS;AAC5B,2BAAS,SAAS,IAAI;AACtB,2BAAS,OAAO,IAAI;AAAA,gBACtB;AAAA,cACF;AACA;AAAA,YACF,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AACZ,kBAAI,WAAW,SAAS,GAAG;AACzB,sBAAM,QAAQ,WAAW,IAAI;AAE7B,oBAAI,aAAa,OAAO;AAEtB,wBAAM,QAAQ,KAAK,GAAG;AAAA,gBACxB;AACA,2BAAW,KAAK,KAAK;AAErB,oBAAI,aAAa,KAAK;AAEpB,6BAAW,KAAK,GAAG;AAAA,gBACrB;AAAA,cACF;AACA;AAAA,YACF;AACE,sBAAQ,IAAI,iCAAiC;AAC7C;AAAA,UACJ;AACA,oBAAU;AAAA,QACZ;AAAA,MACF,CAAC;AAED,aAAO,GAAG,YAAY,CAAC,SAAS;AAC9B,cAAM,cAAc,KAAK,KAAK,YAAY;AAC1C,gBAAQ,aAAa;AAAA,UAEnB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH;AAAA,UACF;AAEE;AAAA,QACJ;AAEA,cAAM,gBAAgB,MAAM;AAC1B,cAAI,WAAW,SAAS,GAAG;AACzB,4BAAgB,WAAW,WAAW,SAAS,CAAC,EAAE;AAAA,UACpD;AAAA,QACF;AAIA,YAAI,MAAM;AACV,gBAAQ,eAAe;AAAA,UACrB,KAAK,SAAS;AACZ,gBAAI,WAAW,SAAS,GAAG;AACzB,oBAAM,WAAW,IAAI;AAErB,4BAAc;AAAA,YAChB;AAEA,gBAAI,WAAW,WAAW,GAAG;AAE3B,kBAAI,SAAS;AACb,kBAAI,QAAQ;AACZ,uBAAS;AAAA,YACX;AACA;AAAA,UACF,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AAAA,UACd,KAAK,SAAS;AACZ,gBAAI,WAAW,SAAS,GAAG;AACzB,oBAAM,WAAW,IAAI;AAErB,4BAAc;AAAA,YAChB;AACA;AAAA,UACF;AACE,oBAAQ,IAAI,iCAAiC,aAAa;AAC1D;AAAA,QACJ;AAAA,MACF,CAAC;AAED,aAAO,GAAG,QAAQ,CAAC,UAAU;AAC3B,YAAI,UAAU,MAAM;AAClB,kBAAQ,MAAM,KAAK;AACnB,cAAI,MAAM,SAAS,KAAK,WAAW,kBAAkB,GAAG;AACtD,oBAAQ,QAAQ;AAAA,UAClB;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,GAAG,OAAO,MAAM;AAAA,MAEvB,CAAC;AAGD,aAAO,MAAM,GAAG,EAAE,MAAM;AAAA,IAC1B;AAEA,QAAM,QAAQ,CAAC,KAAK,UAAU;AAC5B,sBAAgB,KAAK,KAAK;AAE1B,aAAO,EAAE,QAAQ,cAAc,YAAY;AAAA,IAC7C;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACrVjB,IAAAC,qBAAA;AAAA;AAAA,QAAM,SAAU,IAAI;AAEpB,WAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACJA,IAAAC,qBAAA;AAAA;AAAA,QAAM,uBAAuB;AAE7B,QAAM,EAAE,SAAS,IAAI;AACrB,QAAM,QAAQ;AAEd,QAAM,YAAY,CAAC,SAAS,QAAQ;AAClC,YAAM,WAAW;AAAA,QACf,OAAO,qBAAuB;AAAA,MAChC;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,YAAM,EAAE,SAAS,OAAO,aAAa,SAAS,IAAI;AAElD,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAG3E,YAAM,EAAE,QAAQ,cAAc,YAAY,IAAI,MAAM,KAAK,KAAK;AAG9D,UAAI,OAAO,cACP;AAAA,sDACgD,OAAO;AAAA,WAClD,oBAAI,KAAK,CAAC;AAAA,aACR,QAAQ;AAAA;AAAA,IAGf;AAEJ,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AAEA,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAE5E,cAAQ,OAAO,QAAQ,EAAE,cAAc,YAAY,CAAC;AAEpD,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO;AAAA,IACT;AAKA,QAAM,SAAS,CAAC,KAAK,SAAS;AAC5B,UAAI,IAAI,eAAe,SAAS,OAAQ,CAAC,IAAI;AAAU,cAAM,IAAI,MAAM,eAAe;AAEtF,UAAI,IAAI,QAAQ,SAAS,KAAK,IAAI,QAAQ,CAAC,EAAE,eAAe,SAAS;AAAO,cAAM,IAAI,MAAM,4BAA4B;AAExH,YAAM,QAAQ,IAAI,QAAQ,CAAC;AAC3B,YAAM,UAAU,MAAM;AACtB,YAAM,SAAS,IAAI;AACnB,YAAM,QAAQ,IAAI;AAElB,UAAI,OAAO;AAGX,aAAO,iBAAiB,QAAQ,MAAM;AAAA,aAC3B,OAAO,IAAI,KAAK,OAAO,MAAM;AAAA,cAC5B,MAAM,IAAI,KAAK,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBvC,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,gBAAQ,kCAAkC,IAAI,EAAE;AAAA;AAAA,MAClD;AAEA,cAAQ;AAER,cAAQ,qBAAqB,CAAC,GAAG,OAAO;AAExC,cAAQ;AAER,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC9FjB;AAAA;AAAA,QAAM,EAAE,UAAU,YAAY,YAAY,WAAW,IAAI;AAEzD,QAAM,EAAE,SAAS,IAAI;AACrB,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,aAAa;AAEnB,QAAM,uBAAuB,CAAC,SAAS,YAAY;AACjD,UAAI;AAIJ,UAAI,SAAS,SAAS,SAAS,KAAK,OAAO;AAC3C,UAAI,QAAQ;AACV,mBAAW,WAAW,OAAO,EAAE,MAAM,OAAO,KAAK,CAAC;AAClD,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,MAAM,OAAO;AACxC,UAAI,QAAQ;AACV,mBAAW,WAAW,QAAQ,CAAC,KAAK,KAAK,GAAG,WAAW,iBAAiB;AAAA,UACtE,aAAa,CAAC,OAAO,cAAc,OAAO,YAAY;AAAA,UACtD,QAAQ,OAAO;AAAA,UACf,UAAU,OAAO;AAAA,UACjB,WAAW,CAAC,OAAO,WAAW,OAAO,SAAS;AAAA,QAChD,CAAC,CAAC;AACF,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,UAAU,OAAO;AAC5C,UAAI,QAAQ;AACV,mBAAW,WAAW,QAAQ,CAAC,KAAK,KAAK,GAAG,WAAW,SAAS;AAAA,UAC9D,QAAQ,OAAO;AAAA,UACf,QAAQ,OAAO;AAAA,UACf,UAAU,OAAO;AAAA,QACnB,CAAC,CAAC;AACF,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,QAAQ,OAAO;AAC1C,UAAI,QAAQ;AACV,mBAAW,WAAW,OAAO,EAAE,QAAQ,OAAO,QAAQ,UAAU,OAAO,YAAY,CAAC;AACpF,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,WAAW,OAAO;AAC7C,UAAI,QAAQ;AACV,mBAAW,WAAW,MAAM;AAC5B,eAAO;AAAA,MACT;AAIA,eAAS,SAAS,SAAS,OAAO,OAAO;AACzC,UAAI,QAAQ;AACV,mBAAW,WAAW,IAAI,EAAE,QAAQ,OAAO,QAAQ,YAAY,OAAO,YAAY,UAAU,OAAO,UAAU,UAAU,OAAO,YAAY,CAAC;AAC3I,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,YAAY,OAAO;AAC9C,UAAI,QAAQ;AACV,YAAI,OAAO,gBAAgB,OAAO;AAChC,qBAAW,WAAW,OAAO,EAAE,QAAQ,OAAO,QAAQ,YAAY,OAAO,YAAY,UAAU,OAAO,UAAU,UAAU,OAAO,YAAY,CAAC;AAAA,QAChJ,OAAO;AACL,qBAAW,WAAW,MAAM,WAAW,WAAW,MAAM,SAAS,WAAW,MAAM;AAAA,YAChF,WAAW,IAAI,EAAE,QAAQ,OAAO,QAAQ,YAAY,OAAO,YAAY,UAAU,OAAO,UAAU,UAAU,OAAO,YAAY,CAAC;AAAA,UAClI,CAAC,CAAC;AAAA,QACJ;AACA,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,UAAU,OAAO;AAC5C,UAAI,QAAQ;AAEV,mBAAW,WAAW,IAAI,EAAE,QAAQ,OAAO,QAAQ,UAAU,OAAO,YAAY,CAAC;AACjF,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,QAAQ,OAAO;AAC1C,UAAI,QAAQ;AACV,YAAI,OAAO,gBAAgB,OAAO,aAAa;AAC7C,qBAAW,WAAW,IAAI,EAAE,QAAQ,OAAO,aAAa,UAAU,OAAO,YAAY,CAAC;AAAA,QACxF,OAAO;AACL,cAAI,OAAO,gBAAgB,GAAG;AAC5B,uBAAW,WAAW,OAAO,EAAE,QAAQ,OAAO,aAAa,UAAU,OAAO,YAAY,CAAC;AAAA,UAC3F,OAAO;AACL,uBAAW,SAAS,SAAS,WAAW,OAAO,EAAE,QAAQ,OAAO,aAAa,UAAU,OAAO,YAAY,CAAC,GAAG,WAAW,OAAO,EAAE,QAAQ,OAAO,aAAa,UAAU,OAAO,YAAY,CAAC,CAAC;AAAA,UAC/L;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,YAAY,OAAO;AAC9C,UAAI,QAAQ;AACV,mBAAW,WAAW,KAAK,CAAC,OAAO,YAAY,CAAC;AAChD,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,aAAa,OAAO;AAC/C,UAAI,QAAQ;AACV,mBAAW,WAAW,UAAU,EAAE,MAAM,OAAO,KAAK,CAAC;AACrD,eAAO;AAAA,MACT;AAEA,eAAS,SAAS,SAAS,eAAe,OAAO;AACjD,UAAI,QAAQ;AACV,cAAM,WAAW,OAAO;AACxB,cAAM,YAAY,SAAS;AAC3B,cAAM,WAAW,KAAK,MAAM,YAAY,CAAC;AACzC,mBAAW,CAAC;AACZ,iBAAS,IAAI,GAAG,IAAI,UAAU,IAAI,IAAI,GAAG;AACvC,mBAAS,KAAK,WAAW,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;AAAA,QAC5F;AACA,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACvHjB;AAAA;AAAA,QAAM,EAAE,QAAQ,WAAW,IAAI;AAE/B,QAAM,kBAAkB;AAExB,QAAM,EAAE,SAAS,IAAI;AACrB,QAAM,EAAE,UAAU,IAAI;AAEtB,QAAM,uBAAuB;AAC7B,QAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAM,EAAE,gBAAgB,IAAI;AAE5B,QAAM,mBAAmB,oBAAI,IAAI;AAEjC,QAAM,uBAAuB,CAAC,SAAS,WAAW;AAEhD,YAAM,aAAa,OAAO,QAAQ,IAAI,CAACC,YAAW,sBAAsB,SAASA,OAAM,CAAC,EAAE,OAAO,CAAC,MAAM,KAAK,IAAI;AACjH,UAAI,WAAW,WAAW;AAAG,eAAO;AAGpC,YAAM,SAAS,gBAAgB,OAAO,QAAQ,OAAO,UAAU,OAAO,OAAO,OAAO,kBAAkB,OAAO,WAAW;AAExH,aAAO,WAAW,IAAI,CAAC,aAAa;AAClC,cAAM,QAAQ,SAAS;AACvB,mBAAW,WAAW,UAAU,QAAQ,QAAQ;AAChD,YAAI;AAAO,mBAAS,QAAQ;AAC5B,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,QAAM,mBAAmB,CAAC,SAAS,WAAW;AAE5C,YAAM,UAAU,OAAO;AACvB,YAAM,QAAQ,UAAU,SAAS,OAAO;AAExC,UAAI,WAAW,qBAAqB,SAAS,OAAO;AACpD,UAAI,CAAC;AAAU,mBAAW,gBAAgB,SAAS,OAAO;AAC1D,UAAI,CAAC;AAAU,mBAAW,gBAAgB,SAAS,OAAO;AAC1D,UAAI,CAAC;AAAU,mBAAW;AAE1B,UAAI,YAAY,OAAO;AACrB,mBAAW,OAAO,SAAS,OAAO,QAAQ;AAAA,MAC5C;AACA,aAAO;AAAA,IACT;AAEA,QAAM,mBAAmB,CAAC,SAAS,WAAW;AAE5C,YAAM,aAAa,OAAO,QAAQ,IAAI,CAACA,YAAW,sBAAsB,SAASA,OAAM,CAAC,EAAE,OAAO,CAAC,MAAM,KAAK,IAAI;AACjH,UAAI,WAAW,WAAW;AAAG,eAAO;AACpC,aAAO;AAAA,IACT;AAEA,QAAM,wBAAwB,CAAC,SAAS,WAAW;AACjD,UAAI;AACJ,cAAQ,OAAO,YAAY;AAAA,QACzB,KAAK,SAAS;AACZ,qBAAW,qBAAqB,SAAS,MAAM;AAC/C;AAAA,QACF,KAAK,SAAS;AACZ,qBAAW,iBAAiB,SAAS,MAAM;AAC3C;AAAA,QACF,KAAK,SAAS;AACZ,qBAAW,iBAAiB,SAAS,MAAM;AAC3C;AAAA,QACF;AACE,kBAAQ,IAAI,kCAAkC,OAAO,UAAU;AAC/D;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAEA,QAAM,yBAAyB,CAAC,SAAS,YAAY;AACnD,YAAM,aAAa,QAAQ,IAAI,CAAC,WAAW,sBAAsB,SAAS,MAAM,CAAC,EAAE,OAAO,CAAC,MAAM,KAAK,IAAI;AAE1G,uBAAiB,MAAM;AAEvB,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC/EjB,IAAAC,uBAAA;AAAA;AAAA,QAAM,EAAE,QAAQ,IAAI;AAEpB,QAAM,QAAQ;AACd,QAAM,yBAAyB;AAC/B,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,cAAc,CAAC,SAAS,QAAQ;AACpC,YAAM,WAAW;AAAA,QACf,OAAO,qBAAuB;AAAA,MAChC;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAC7C,YAAM,EAAE,MAAM,IAAI;AAElB,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,EAAE,CAAC;AAG3E,YAAM,EAAE,OAAO,IAAI,MAAM,KAAK,KAAK;AAEnC,UAAI,OAAO,eAAe,SAAS,OAAQ,CAAC,OAAO;AAAU,cAAM,IAAI,MAAM,eAAe;AAC5F,UAAI,OAAO,QAAQ,SAAS,KAAK,OAAO,QAAQ,CAAC,EAAE,eAAe,SAAS;AAAO,cAAM,IAAI,MAAM,4BAA4B;AAE9H,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,GAAG,CAAC;AAG5E,YAAM,QAAQ,OAAO,QAAQ,CAAC;AAC9B,YAAM,UAAU,MAAM;AAEtB,UAAI,aAAa,uBAAuB,SAAS,OAAO;AACxD,UAAI,QAAQ;AAAS,qBAAa,QAAQ,UAAU;AAEpD,iBAAW,QAAQ,kBAAkB,QAAQ,eAAe,EAAE,UAAU,IAAI,CAAC;AAE7E,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACnCjB,IAAAC,eAAA;AAAA;AAuBA,QAAM,UAAU,mBAA2B;AAE3C,QAAM,YAAY;AAClB,QAAM,cAAc;AAepB,QAAM,cAAc,CAAC,SAAS,UAAU;AACtC,YAAM,WAAW;AAAA,QACf,UAAU;AAAA,QACV,QAAQ;AAAA,QACR;AAAA,QACA,SAAS;AAAA,QACT,aAAa;AAAA,MACf;AACA,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO;AAE7C,aAAO,QAAQ,WAAW,WAAW,UAAU,SAAS,KAAK,IAAI,YAAY,SAAS,KAAK;AAAA,IAC7F;AAEA,QAAM,YAAY;AAElB,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC3DA;AAAA;AAAA,QAAM,kBAAkB;AACxB,QAAM,kBAAkB;AACxB,QAAM,mBAAmB;AACzB,QAAM,kBAAkB;AAExB,QAAM,kBAAkB;AACxB,QAAM,kBAAkB;AACxB,QAAM,kBAAkB;AAExB,QAAM,gBAAgB,CAAC;AACvB,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAC3D,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAC3D,kBAAc,iBAAiB,SAAS,IAAI,iBAAiB;AAC7D,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAC3D,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAC3D,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAC3D,kBAAc,gBAAgB,SAAS,IAAI,gBAAgB;AAE3D,WAAO,UAAU;AAAA;AAAA;;;AClBjB;AAAA;AAAA,QAAM,EAAE,UAAU,cAAc,IAAI;AAEpC,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,iBAAiB;AACvB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AAEtB,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AAEtB,QAAM,eAAe,CAAC,QAAQ,WAAW,cAAc,cAAc,QAAQ,MAAM,CAAC;AAEpF,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,IACF;AAAA;AAAA;",
  "names": ["Blob", "Blob", "a", "require_src", "i", "require_stringify", "a", "require_stringify", "a", "require_src", "i", "l", "i2", "_a", "_b", "td", "err", "dat", "fl", "Deflate", "AsyncDeflate", "Inflate", "AsyncInflate", "Gzip", "AsyncGzip", "Gunzip", "AsyncGunzip", "Zlib", "AsyncZlib", "Unzlib", "AsyncUnzlib", "Decompress", "AsyncDecompress", "DecodeUTF8", "ch", "EncodeUTF8", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "Zip", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "Unzip", "final", "e", "require_stringify", "a", "require_src", "options", "data", "objects", "require_package", "node", "require_src", "require_package", "require_colorindex2017", "require_helpers", "mod", "p1", "p2", "cag", "require_translate", "script", "layer", "require_package", "version", "require_package", "colors", "version", "require_package", "r", "g", "b", "a", "require_package", "require_constants", "require_helpers", "obj", "svgUnitsPmm", "svgUnitsX", "svgUnitsY", "svgUnitsV", "svgGroups", "segments", "obj", "svgUnitsPmm", "svgUnitsX", "svgUnitsY", "svgUnitsV", "params", "svgGroups", "segments", "require_src", "version", "require_package", "require_parse", "require_constants", "require_translate", "object", "require_instantiate", "require_src"]
}
