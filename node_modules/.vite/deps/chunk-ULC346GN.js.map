{
  "version": 3,
  "sources": ["../../@jscad/modeling/src/utils/flatten.js", "../../@jscad/modeling/src/geometries/geom2/clone.js", "../../@jscad/modeling/src/maths/mat4/add.js", "../../@jscad/modeling/src/maths/mat4/create.js", "../../@jscad/modeling/src/maths/mat4/clone.js", "../../@jscad/modeling/src/maths/mat4/copy.js", "../../@jscad/modeling/src/maths/mat4/invert.js", "../../@jscad/modeling/src/maths/mat4/equals.js", "../../@jscad/modeling/src/maths/constants.js", "../../@jscad/modeling/src/maths/utils/trigonometry.js", "../../@jscad/modeling/src/maths/mat4/identity.js", "../../@jscad/modeling/src/maths/mat4/fromRotation.js", "../../@jscad/modeling/src/maths/mat4/fromScaling.js", "../../@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js", "../../@jscad/modeling/src/maths/mat4/fromTranslation.js", "../../@jscad/modeling/src/maths/mat4/fromValues.js", "../../@jscad/modeling/src/maths/vec3/abs.js", "../../@jscad/modeling/src/maths/vec3/add.js", "../../@jscad/modeling/src/maths/vec3/dot.js", "../../@jscad/modeling/src/maths/vec3/angle.js", "../../@jscad/modeling/src/maths/vec3/create.js", "../../@jscad/modeling/src/maths/vec3/clone.js", "../../@jscad/modeling/src/maths/vec3/copy.js", "../../@jscad/modeling/src/maths/vec3/cross.js", "../../@jscad/modeling/src/maths/vec3/distance.js", "../../@jscad/modeling/src/maths/vec3/divide.js", "../../@jscad/modeling/src/maths/vec3/equals.js", "../../@jscad/modeling/src/maths/vec3/fromScalar.js", "../../@jscad/modeling/src/maths/vec3/fromValues.js", "../../@jscad/modeling/src/maths/vec3/fromVec2.js", "../../@jscad/modeling/src/maths/vec3/length.js", "../../@jscad/modeling/src/maths/vec3/lerp.js", "../../@jscad/modeling/src/maths/vec3/max.js", "../../@jscad/modeling/src/maths/vec3/min.js", "../../@jscad/modeling/src/maths/vec3/multiply.js", "../../@jscad/modeling/src/maths/vec3/negate.js", "../../@jscad/modeling/src/maths/vec3/normalize.js", "../../@jscad/modeling/src/maths/vec3/orthogonal.js", "../../@jscad/modeling/src/maths/vec3/rotateX.js", "../../@jscad/modeling/src/maths/vec3/rotateY.js", "../../@jscad/modeling/src/maths/vec3/rotateZ.js", "../../@jscad/modeling/src/maths/vec3/scale.js", "../../@jscad/modeling/src/maths/vec3/snap.js", "../../@jscad/modeling/src/maths/vec3/squaredDistance.js", "../../@jscad/modeling/src/maths/vec3/squaredLength.js", "../../@jscad/modeling/src/maths/vec3/subtract.js", "../../@jscad/modeling/src/maths/vec3/toString.js", "../../@jscad/modeling/src/maths/vec3/transform.js", "../../@jscad/modeling/src/maths/vec3/index.js", "../../@jscad/modeling/src/maths/mat4/fromVectorRotation.js", "../../@jscad/modeling/src/maths/mat4/fromXRotation.js", "../../@jscad/modeling/src/maths/mat4/fromYRotation.js", "../../@jscad/modeling/src/maths/mat4/fromZRotation.js", "../../@jscad/modeling/src/maths/mat4/isIdentity.js", "../../@jscad/modeling/src/maths/mat4/isOnlyTransformScale.js", "../../@jscad/modeling/src/maths/mat4/isMirroring.js", "../../@jscad/modeling/src/maths/mat4/mirrorByPlane.js", "../../@jscad/modeling/src/maths/mat4/multiply.js", "../../@jscad/modeling/src/maths/mat4/rotate.js", "../../@jscad/modeling/src/maths/mat4/rotateX.js", "../../@jscad/modeling/src/maths/mat4/rotateY.js", "../../@jscad/modeling/src/maths/mat4/rotateZ.js", "../../@jscad/modeling/src/maths/mat4/scale.js", "../../@jscad/modeling/src/maths/mat4/subtract.js", "../../@jscad/modeling/src/maths/mat4/toString.js", "../../@jscad/modeling/src/maths/mat4/translate.js", "../../@jscad/modeling/src/maths/mat4/index.js", "../../@jscad/modeling/src/geometries/geom2/create.js", "../../@jscad/modeling/src/maths/vec2/abs.js", "../../@jscad/modeling/src/maths/vec2/add.js", "../../@jscad/modeling/src/maths/vec2/angleRadians.js", "../../@jscad/modeling/src/maths/vec2/angle.js", "../../@jscad/modeling/src/maths/vec2/angleDegrees.js", "../../@jscad/modeling/src/maths/vec2/create.js", "../../@jscad/modeling/src/maths/vec2/clone.js", "../../@jscad/modeling/src/maths/vec2/copy.js", "../../@jscad/modeling/src/maths/vec2/cross.js", "../../@jscad/modeling/src/maths/vec2/distance.js", "../../@jscad/modeling/src/maths/vec2/divide.js", "../../@jscad/modeling/src/maths/vec2/dot.js", "../../@jscad/modeling/src/maths/vec2/equals.js", "../../@jscad/modeling/src/maths/vec2/fromAngleRadians.js", "../../@jscad/modeling/src/maths/vec2/fromAngleDegrees.js", "../../@jscad/modeling/src/maths/vec2/fromScalar.js", "../../@jscad/modeling/src/maths/vec2/fromValues.js", "../../@jscad/modeling/src/maths/vec2/length.js", "../../@jscad/modeling/src/maths/vec2/lerp.js", "../../@jscad/modeling/src/maths/vec2/max.js", "../../@jscad/modeling/src/maths/vec2/min.js", "../../@jscad/modeling/src/maths/vec2/multiply.js", "../../@jscad/modeling/src/maths/vec2/negate.js", "../../@jscad/modeling/src/maths/vec2/rotate.js", "../../@jscad/modeling/src/maths/vec2/normal.js", "../../@jscad/modeling/src/maths/vec2/normalize.js", "../../@jscad/modeling/src/maths/vec2/scale.js", "../../@jscad/modeling/src/maths/vec2/snap.js", "../../@jscad/modeling/src/maths/vec2/squaredDistance.js", "../../@jscad/modeling/src/maths/vec2/squaredLength.js", "../../@jscad/modeling/src/maths/vec2/subtract.js", "../../@jscad/modeling/src/maths/vec2/toString.js", "../../@jscad/modeling/src/maths/vec2/transform.js", "../../@jscad/modeling/src/maths/vec2/index.js", "../../@jscad/modeling/src/geometries/geom2/fromPoints.js", "../../@jscad/modeling/src/geometries/geom2/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/geom2/isA.js", "../../@jscad/modeling/src/geometries/geom2/applyTransforms.js", "../../@jscad/modeling/src/geometries/geom2/toSides.js", "../../@jscad/modeling/src/geometries/geom2/reverse.js", "../../@jscad/modeling/src/geometries/geom2/toOutlines.js", "../../@jscad/modeling/src/geometries/geom2/toPoints.js", "../../@jscad/modeling/src/geometries/geom2/toString.js", "../../@jscad/modeling/src/geometries/geom2/toCompactBinary.js", "../../@jscad/modeling/src/geometries/geom2/transform.js", "../../@jscad/modeling/src/geometries/geom2/validate.js", "../../@jscad/modeling/src/geometries/geom2/index.js", "../../@jscad/modeling/src/geometries/geom3/clone.js", "../../@jscad/modeling/src/geometries/geom3/create.js", "../../@jscad/modeling/src/geometries/poly3/create.js", "../../@jscad/modeling/src/geometries/poly3/clone.js", "../../@jscad/modeling/src/geometries/poly3/fromPoints.js", "../../@jscad/modeling/src/geometries/poly3/fromPointsAndPlane.js", "../../@jscad/modeling/src/maths/vec4/create.js", "../../@jscad/modeling/src/maths/vec4/clone.js", "../../@jscad/modeling/src/maths/vec4/copy.js", "../../@jscad/modeling/src/maths/vec4/equals.js", "../../@jscad/modeling/src/maths/plane/flip.js", "../../@jscad/modeling/src/maths/plane/fromNormalAndPoint.js", "../../@jscad/modeling/src/maths/vec4/fromValues.js", "../../@jscad/modeling/src/maths/plane/fromPoints.js", "../../@jscad/modeling/src/maths/plane/fromPointsRandom.js", "../../@jscad/modeling/src/maths/plane/projectionOfPoint.js", "../../@jscad/modeling/src/maths/plane/signedDistanceToPoint.js", "../../@jscad/modeling/src/maths/vec4/toString.js", "../../@jscad/modeling/src/maths/plane/transform.js", "../../@jscad/modeling/src/maths/plane/index.js", "../../@jscad/modeling/src/geometries/poly3/invert.js", "../../@jscad/modeling/src/geometries/poly3/isA.js", "../../@jscad/modeling/src/geometries/poly3/isConvex.js", "../../@jscad/modeling/src/geometries/poly3/plane.js", "../../@jscad/modeling/src/geometries/poly3/measureArea.js", "../../@jscad/modeling/src/geometries/poly3/measureBoundingBox.js", "../../@jscad/modeling/src/maths/vec4/dot.js", "../../@jscad/modeling/src/maths/vec4/fromScalar.js", "../../@jscad/modeling/src/maths/vec4/transform.js", "../../@jscad/modeling/src/maths/vec4/index.js", "../../@jscad/modeling/src/geometries/poly3/measureBoundingSphere.js", "../../@jscad/modeling/src/geometries/poly3/measureSignedVolume.js", "../../@jscad/modeling/src/geometries/poly3/toPoints.js", "../../@jscad/modeling/src/geometries/poly3/toString.js", "../../@jscad/modeling/src/geometries/poly3/transform.js", "../../@jscad/modeling/src/geometries/poly3/validate.js", "../../@jscad/modeling/src/geometries/poly3/index.js", "../../@jscad/modeling/src/geometries/geom3/fromPoints.js", "../../@jscad/modeling/src/geometries/geom3/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/geom3/applyTransforms.js", "../../@jscad/modeling/src/geometries/geom3/toPolygons.js", "../../@jscad/modeling/src/geometries/geom3/invert.js", "../../@jscad/modeling/src/geometries/geom3/isA.js", "../../@jscad/modeling/src/geometries/geom3/toPoints.js", "../../@jscad/modeling/src/geometries/geom3/toString.js", "../../@jscad/modeling/src/geometries/geom3/toCompactBinary.js", "../../@jscad/modeling/src/geometries/geom3/transform.js", "../../@jscad/modeling/src/geometries/geom3/validate.js", "../../@jscad/modeling/src/geometries/geom3/index.js", "../../@jscad/modeling/src/geometries/path2/clone.js", "../../@jscad/modeling/src/geometries/path2/close.js", "../../@jscad/modeling/src/geometries/path2/create.js", "../../@jscad/modeling/src/geometries/path2/fromPoints.js", "../../@jscad/modeling/src/geometries/path2/applyTransforms.js", "../../@jscad/modeling/src/geometries/path2/toPoints.js", "../../@jscad/modeling/src/geometries/path2/appendArc.js", "../../@jscad/modeling/src/geometries/path2/concat.js", "../../@jscad/modeling/src/geometries/path2/appendPoints.js", "../../@jscad/modeling/src/geometries/path2/appendBezier.js", "../../@jscad/modeling/src/geometries/path2/equals.js", "../../@jscad/modeling/src/geometries/path2/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/path2/isA.js", "../../@jscad/modeling/src/geometries/path2/reverse.js", "../../@jscad/modeling/src/geometries/path2/toString.js", "../../@jscad/modeling/src/geometries/path2/toCompactBinary.js", "../../@jscad/modeling/src/geometries/path2/transform.js", "../../@jscad/modeling/src/geometries/path2/validate.js", "../../@jscad/modeling/src/geometries/path2/index.js", "../../@jscad/modeling/src/colors/colorize.js", "../../@jscad/modeling/src/colors/cssColors.js", "../../@jscad/modeling/src/colors/colorNameToRgb.js", "../../@jscad/modeling/src/colors/hexToRgb.js", "../../@jscad/modeling/src/colors/hueToColorComponent.js", "../../@jscad/modeling/src/colors/hslToRgb.js", "../../@jscad/modeling/src/colors/hsvToRgb.js", "../../@jscad/modeling/src/colors/rgbToHex.js", "../../@jscad/modeling/src/colors/rgbToHsl.js", "../../@jscad/modeling/src/colors/rgbToHsv.js", "../../@jscad/modeling/src/colors/index.js", "../../@jscad/modeling/src/curves/index.js", "../../@jscad/modeling/src/maths/utils/area.js", "../../@jscad/modeling/src/geometries/poly2/measureArea.js", "../../@jscad/modeling/src/geometries/poly2/create.js", "../../@jscad/modeling/src/geometries/poly2/flip.js", "../../@jscad/modeling/src/geometries/poly2/arePointsInside.js", "../../@jscad/modeling/src/geometries/poly2/index.js", "../../@jscad/modeling/src/geometries/index.js", "../../@jscad/modeling/src/maths/line2/create.js", "../../@jscad/modeling/src/maths/line2/clone.js", "../../@jscad/modeling/src/maths/line2/direction.js", "../../@jscad/modeling/src/maths/line2/origin.js", "../../@jscad/modeling/src/maths/line2/closestPoint.js", "../../@jscad/modeling/src/maths/line2/copy.js", "../../@jscad/modeling/src/maths/line2/distanceToPoint.js", "../../@jscad/modeling/src/maths/line2/equals.js", "../../@jscad/modeling/src/maths/line2/fromPoints.js", "../../@jscad/modeling/src/maths/line2/fromValues.js", "../../@jscad/modeling/src/maths/utils/aboutEqualNormals.js", "../../@jscad/modeling/src/maths/utils/interpolateBetween2DPointsForY.js", "../../@jscad/modeling/src/maths/utils/intersect.js", "../../@jscad/modeling/src/maths/utils/solve2Linear.js", "../../@jscad/modeling/src/maths/utils/index.js", "../../@jscad/modeling/src/maths/line2/intersectPointOfLines.js", "../../@jscad/modeling/src/maths/line2/reverse.js", "../../@jscad/modeling/src/maths/line2/toString.js", "../../@jscad/modeling/src/maths/line2/transform.js", "../../@jscad/modeling/src/maths/line2/xAtY.js", "../../@jscad/modeling/src/maths/line2/index.js", "../../@jscad/modeling/src/maths/line3/create.js", "../../@jscad/modeling/src/maths/line3/clone.js", "../../@jscad/modeling/src/maths/line3/closestPoint.js", "../../@jscad/modeling/src/maths/line3/copy.js", "../../@jscad/modeling/src/maths/line3/direction.js", "../../@jscad/modeling/src/maths/line3/distanceToPoint.js", "../../@jscad/modeling/src/maths/line3/equals.js", "../../@jscad/modeling/src/maths/line3/fromPointAndDirection.js", "../../@jscad/modeling/src/maths/line3/fromPlanes.js", "../../@jscad/modeling/src/maths/line3/fromPoints.js", "../../@jscad/modeling/src/maths/line3/intersectPointOfLineAndPlane.js", "../../@jscad/modeling/src/maths/line3/origin.js", "../../@jscad/modeling/src/maths/line3/reverse.js", "../../@jscad/modeling/src/maths/line3/toString.js", "../../@jscad/modeling/src/maths/line3/transform.js", "../../@jscad/modeling/src/maths/line3/index.js", "../../@jscad/modeling/src/maths/index.js", "../../@jscad/modeling/src/measurements/measureArea.js", "../../@jscad/modeling/src/measurements/measureAggregateArea.js", "../../@jscad/modeling/src/measurements/measureBoundingBox.js", "../../@jscad/modeling/src/measurements/measureAggregateBoundingBox.js", "../../@jscad/modeling/src/measurements/calculateEpsilonFromBounds.js", "../../@jscad/modeling/src/measurements/measureAggregateEpsilon.js", "../../@jscad/modeling/src/measurements/measureVolume.js", "../../@jscad/modeling/src/measurements/measureAggregateVolume.js", "../../@jscad/modeling/src/measurements/measureBoundingSphere.js", "../../@jscad/modeling/src/measurements/measureCenter.js", "../../@jscad/modeling/src/measurements/measureCenterOfMass.js", "../../@jscad/modeling/src/measurements/measureDimensions.js", "../../@jscad/modeling/src/measurements/measureEpsilon.js", "../../@jscad/modeling/src/measurements/index.js", "../../@jscad/modeling/src/primitives/commonChecks.js", "../../@jscad/modeling/src/primitives/arc.js", "../../@jscad/modeling/src/primitives/ellipse.js", "../../@jscad/modeling/src/primitives/circle.js", "../../@jscad/modeling/src/primitives/cuboid.js", "../../@jscad/modeling/src/primitives/cube.js", "../../@jscad/modeling/src/primitives/cylinderElliptic.js", "../../@jscad/modeling/src/primitives/cylinder.js", "../../@jscad/modeling/src/primitives/ellipsoid.js", "../../@jscad/modeling/src/primitives/polyhedron.js", "../../@jscad/modeling/src/primitives/geodesicSphere.js", "../../@jscad/modeling/src/primitives/line.js", "../../@jscad/modeling/src/primitives/polygon.js", "../../@jscad/modeling/src/primitives/rectangle.js", "../../@jscad/modeling/src/primitives/roundedCuboid.js", "../../@jscad/modeling/src/primitives/roundedCylinder.js", "../../@jscad/modeling/src/primitives/roundedRectangle.js", "../../@jscad/modeling/src/primitives/sphere.js", "../../@jscad/modeling/src/primitives/square.js", "../../@jscad/modeling/src/primitives/star.js", "../../@jscad/modeling/src/operations/transforms/mirror.js", "../../@jscad/modeling/src/operations/extrusions/slice/calculatePlane.js", "../../@jscad/modeling/src/operations/extrusions/slice/create.js", "../../@jscad/modeling/src/operations/extrusions/slice/clone.js", "../../@jscad/modeling/src/operations/extrusions/slice/equals.js", "../../@jscad/modeling/src/operations/extrusions/slice/fromPoints.js", "../../@jscad/modeling/src/operations/extrusions/slice/fromSides.js", "../../@jscad/modeling/src/operations/extrusions/slice/isA.js", "../../@jscad/modeling/src/operations/extrusions/slice/reverse.js", "../../@jscad/modeling/src/operations/extrusions/slice/toEdges.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedListSort.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedList.js", "../../@jscad/modeling/src/operations/extrusions/earcut/triangle.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedPolygon.js", "../../@jscad/modeling/src/operations/extrusions/earcut/eliminateHoles.js", "../../@jscad/modeling/src/operations/extrusions/earcut/index.js", "../../@jscad/modeling/src/operations/extrusions/earcut/assignHoles.js", "../../@jscad/modeling/src/operations/extrusions/earcut/polygonHierarchy.js", "../../@jscad/modeling/src/operations/extrusions/slice/toPolygons.js", "../../@jscad/modeling/src/operations/extrusions/slice/toString.js", "../../@jscad/modeling/src/operations/extrusions/slice/transform.js", "../../@jscad/modeling/src/operations/extrusions/slice/index.js", "../../@jscad/modeling/src/operations/extrusions/slice/repair.js", "../../@jscad/modeling/src/operations/extrusions/extrudeWalls.js", "../../@jscad/modeling/src/operations/extrusions/extrudeFromSlices.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRotate.js", "../../@jscad/modeling/src/operations/transforms/rotate.js", "../../@jscad/modeling/src/operations/transforms/translate.js", "../../@jscad/modeling/src/primitives/torus.js", "../../@jscad/modeling/src/primitives/triangle.js", "../../@jscad/modeling/src/primitives/index.js", "../../@jscad/modeling/src/text/fonts/single-line/hershey/simplex.js", "../../@jscad/modeling/src/text/vectorParams.js", "../../@jscad/modeling/src/text/vectorChar.js", "../../@jscad/modeling/src/text/vectorText.js", "../../@jscad/modeling/src/text/index.js", "../../@jscad/modeling/src/utils/areAllShapesTheSameType.js", "../../@jscad/modeling/src/utils/degToRad.js", "../../@jscad/modeling/src/utils/fnNumberSort.js", "../../@jscad/modeling/src/utils/insertSorted.js", "../../@jscad/modeling/src/utils/radiusToSegments.js", "../../@jscad/modeling/src/utils/radToDeg.js", "../../@jscad/modeling/src/utils/index.js", "../../@jscad/modeling/src/operations/booleans/fromFakePolygons.js", "../../@jscad/modeling/src/operations/booleans/to3DWalls.js", "../../@jscad/modeling/src/maths/OrthoNormalBasis.js", "../../@jscad/modeling/src/operations/modifiers/reTesselateCoplanarPolygons.js", "../../@jscad/modeling/src/operations/modifiers/retessellate.js", "../../@jscad/modeling/src/operations/booleans/mayOverlap.js", "../../@jscad/modeling/src/operations/booleans/trees/Node.js", "../../@jscad/modeling/src/operations/booleans/trees/splitLineSegmentByPlane.js", "../../@jscad/modeling/src/operations/booleans/trees/splitPolygonByPlane.js", "../../@jscad/modeling/src/operations/booleans/trees/PolygonTreeNode.js", "../../@jscad/modeling/src/operations/booleans/trees/Tree.js", "../../@jscad/modeling/src/operations/booleans/trees/index.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom3.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom2.js", "../../@jscad/modeling/src/operations/booleans/intersect.js", "../../@jscad/modeling/src/operations/booleans/scissionGeom3.js", "../../@jscad/modeling/src/operations/booleans/scission.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom3.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom2.js", "../../@jscad/modeling/src/operations/booleans/subtract.js", "../../@jscad/modeling/src/operations/booleans/unionGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/unionGeom3.js", "../../@jscad/modeling/src/operations/booleans/unionGeom2.js", "../../@jscad/modeling/src/operations/booleans/union.js", "../../@jscad/modeling/src/operations/booleans/index.js", "../../@jscad/modeling/src/operations/expansions/offsetFromPoints.js", "../../@jscad/modeling/src/operations/expansions/expandGeom2.js", "../../@jscad/modeling/src/operations/expansions/extrudePolygon.js", "../../@jscad/modeling/src/operations/expansions/expandShell.js", "../../@jscad/modeling/src/operations/expansions/expandGeom3.js", "../../@jscad/modeling/src/operations/expansions/expandPath2.js", "../../@jscad/modeling/src/operations/expansions/expand.js", "../../@jscad/modeling/src/operations/expansions/offsetGeom2.js", "../../@jscad/modeling/src/operations/expansions/offsetPath2.js", "../../@jscad/modeling/src/operations/expansions/offset.js", "../../@jscad/modeling/src/operations/expansions/index.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinearGeom2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinearPath2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinear.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangularPath2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangularGeom2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangular.js", "../../@jscad/modeling/src/operations/extrusions/extrudeHelical.js", "../../@jscad/modeling/src/operations/extrusions/project.js", "../../@jscad/modeling/src/operations/extrusions/index.js", "../../@jscad/modeling/src/operations/hulls/hullPoints2.js", "../../@jscad/modeling/src/operations/hulls/toUniquePoints.js", "../../@jscad/modeling/src/operations/hulls/hullPath2.js", "../../@jscad/modeling/src/operations/hulls/hullGeom2.js", "../../@jscad/modeling/src/operations/hulls/quickhull/point-line-distance.js", "../../@jscad/modeling/src/operations/hulls/quickhull/get-plane-normal.js", "../../@jscad/modeling/src/operations/hulls/quickhull/VertexList.js", "../../@jscad/modeling/src/operations/hulls/quickhull/Vertex.js", "../../@jscad/modeling/src/operations/hulls/quickhull/HalfEdge.js", "../../@jscad/modeling/src/operations/hulls/quickhull/Face.js", "../../@jscad/modeling/src/operations/hulls/quickhull/QuickHull.js", "../../@jscad/modeling/src/operations/hulls/quickhull/index.js", "../../@jscad/modeling/src/operations/hulls/hullGeom3.js", "../../@jscad/modeling/src/operations/hulls/hull.js", "../../@jscad/modeling/src/operations/hulls/hullChain.js", "../../@jscad/modeling/src/operations/hulls/index.js", "../../@jscad/modeling/src/operations/modifiers/snapPolygons.js", "../../@jscad/modeling/src/operations/modifiers/mergePolygons.js", "../../@jscad/modeling/src/operations/modifiers/insertTjunctions.js", "../../@jscad/modeling/src/operations/modifiers/triangulatePolygons.js", "../../@jscad/modeling/src/operations/modifiers/generalize.js", "../../@jscad/modeling/src/operations/modifiers/snap.js", "../../@jscad/modeling/src/operations/modifiers/index.js", "../../@jscad/modeling/src/utils/padArrayToLength.js", "../../@jscad/modeling/src/operations/transforms/align.js", "../../@jscad/modeling/src/operations/transforms/center.js", "../../@jscad/modeling/src/operations/transforms/scale.js", "../../@jscad/modeling/src/operations/transforms/transform.js", "../../@jscad/modeling/src/operations/transforms/index.js", "../../@jscad/modeling/src/index.js"],
  "sourcesContent": ["/**\n * Flatten the given list of arguments into a single flat array.\n * The arguments can be composed of multiple depths of objects and arrays.\n * @param {Array} arr - list of arguments\n * @returns {Array} a flat list of arguments\n * @alias module:modeling/utils.flatten\n */\nconst flatten = (arr) => arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), [])\n\nmodule.exports = flatten\n", "/**\n * Performs a shallow clone of the given geometry.\n * @param {geom2} geometry - the geometry to clone\n * @returns {geom2} new geometry\n * @alias module:modeling/geometries/geom2.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "/**\n * Adds the two matrices (A+B).\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  out[2] = a[2] + b[2]\n  out[3] = a[3] + b[3]\n  out[4] = a[4] + b[4]\n  out[5] = a[5] + b[5]\n  out[6] = a[6] + b[6]\n  out[7] = a[7] + b[7]\n  out[8] = a[8] + b[8]\n  out[9] = a[9] + b[9]\n  out[10] = a[10] + b[10]\n  out[11] = a[11] + b[11]\n  out[12] = a[12] + b[12]\n  out[13] = a[13] + b[13]\n  out[14] = a[14] + b[14]\n  out[15] = a[15] + b[15]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).\n * See fromValues().\n * @typedef {Array} mat4\n */\n\n/**\n * Creates a new identity matrix.\n *\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.create\n */\nconst create = () => [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Creates a clone of the given matrix.\n *\n * @param {mat4} matrix - matrix to clone\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.clone\n */\nconst clone = (matrix) => {\n  const out = create()\n  out[0] = matrix[0]\n  out[1] = matrix[1]\n  out[2] = matrix[2]\n  out[3] = matrix[3]\n  out[4] = matrix[4]\n  out[5] = matrix[5]\n  out[6] = matrix[6]\n  out[7] = matrix[7]\n  out[8] = matrix[8]\n  out[9] = matrix[9]\n  out[10] = matrix[10]\n  out[11] = matrix[11]\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Creates a copy of the given matrix.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to copy\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.copy\n */\nconst copy = (out, matrix) => {\n  out[0] = matrix[0]\n  out[1] = matrix[1]\n  out[2] = matrix[2]\n  out[3] = matrix[3]\n  out[4] = matrix[4]\n  out[5] = matrix[5]\n  out[6] = matrix[6]\n  out[7] = matrix[7]\n  out[8] = matrix[8]\n  out[9] = matrix[9]\n  out[10] = matrix[10]\n  out[11] = matrix[11]\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Creates a invert copy of the given matrix.\n * @author Julian Lloyd\n * code from https://github.com/jlmakes/rematrix/blob/master/src/index.js\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to invert\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.invert\n */\nconst invert = (out, matrix) => {\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n  const a30 = matrix[12]\n  const a31 = matrix[13]\n  const a32 = matrix[14]\n  const a33 = matrix[15]\n\n  const b00 = a00 * a11 - a01 * a10\n  const b01 = a00 * a12 - a02 * a10\n  const b02 = a00 * a13 - a03 * a10\n  const b03 = a01 * a12 - a02 * a11\n  const b04 = a01 * a13 - a03 * a11\n  const b05 = a02 * a13 - a03 * a12\n  const b06 = a20 * a31 - a21 * a30\n  const b07 = a20 * a32 - a22 * a30\n  const b08 = a20 * a33 - a23 * a30\n  const b09 = a21 * a32 - a22 * a31\n  const b10 = a21 * a33 - a23 * a31\n  const b11 = a22 * a33 - a23 * a32\n\n  // Calculate the determinant\n  let det =\n    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06\n\n  if (!det) {\n    return null\n  }\n  det = 1.0 / det\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det\n\n  return out\n}\n\nmodule.exports = invert\n", "/**\n * Returns whether or not the matrices have exactly the same elements in the same position.\n *\n * @param {mat4} a - first matrix\n * @param {mat4} b - second matrix\n * @returns {Boolean} true if the matrices are equal\n * @alias module:modeling/maths/mat4.equals\n */\nconst equals = (a, b) => (\n  a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n  a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n  a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n  a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15]\n)\n\nmodule.exports = equals\n", "/**\n * The resolution of space, currently one hundred nanometers.\n * This should be 1 / EPS.\n * @alias module:modeling/maths.spatialResolution\n * @default\n */\nconst spatialResolution = 1e5\n\n/**\n * Epsilon used during determination of near zero distances.\n * This should be 1 / spacialResolution.\n * @default\n * @alias module:modeling/maths.EPS\n */\nconst EPS = 1e-5\n\n/**\n * Smaller epsilon used for measuring near zero distances.\n * @default\n * @alias module:modeling/maths.NEPS\n */\nconst NEPS = 1e-13\n// NEPS is derived from a series of tests to determine the optimal precision\n// for comparing coplanar polygons, as provided by the sphere primitive at high\n// segmentation. NEPS is for 64 bit Number values.\n\n/**\n * The TAU property represents the ratio of the circumference of a circle to its radius.\n * Approximately 6.28318530717958647692\n * @default\n * @example\n * const { TAU } = require('@jscad/modeling').maths.constants\n */\nconst TAU = Math.PI * 2\n\nmodule.exports = {\n  EPS,\n  NEPS,\n  TAU,\n  spatialResolution\n}\n", "const { NEPS } = require('../constants')\n\n/*\n * Returns zero if n is within epsilon of zero, otherwise return n\n */\nconst rezero = (n) => Math.abs(n) < NEPS ? 0 : n\n\n/**\n * Return Math.sin but accurate for TAU / 4 rotations.\n * Fixes rounding errors when sin should be 0.\n *\n * @param {Number} radians - angle in radians\n * @returns {Number} sine of the given angle\n * @alias module:modeling/utils.sin\n * @example\n * sin(TAU / 2) == 0\n * sin(TAU) == 0\n */\nconst sin = (radians) => rezero(Math.sin(radians))\n\n/**\n * Return Math.cos but accurate for TAU / 4 rotations.\n * Fixes rounding errors when cos should be 0.\n *\n * @param {Number} radians - angle in radians\n * @returns {Number} cosine of the given angle\n * @alias module:modeling/utils.cos\n * @example\n * cos(TAU * 0.25) == 0\n * cos(TAU * 0.75) == 0\n */\nconst cos = (radians) => rezero(Math.cos(radians))\n\nmodule.exports = { sin, cos }\n", "/**\n * Set a matrix to the identity transform.\n *\n * @param {mat4} out - receiving matrix\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.identity\n */\nconst identity = (out) => {\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = identity\n", "const { EPS } = require('../constants')\n\nconst { sin, cos } = require('../utils/trigonometry')\n\nconst identity = require('./identity')\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotate(dest, dest, rad, axis)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} rad - angle to rotate the matrix by\n * @param {vec3} axis - axis of which to rotate around\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromRotation\n * @example\n * let matrix = fromRotation(create(), TAU / 4, [0, 0, 3])\n */\nconst fromRotation = (out, rad, axis) => {\n  let [x, y, z] = axis\n  const lengthSquared = x * x + y * y + z * z\n\n  if (Math.abs(lengthSquared) < EPS) {\n    // axis is 0,0,0 or almost\n    return identity(out)\n  }\n\n  const len = 1 / Math.sqrt(lengthSquared)\n  x *= len\n  y *= len\n  z *= len\n\n  const s = sin(rad)\n  const c = cos(rad)\n  const t = 1 - c\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c\n  out[1] = y * x * t + z * s\n  out[2] = z * x * t - y * s\n  out[3] = 0\n  out[4] = x * y * t - z * s\n  out[5] = y * y * t + c\n  out[6] = z * y * t + x * s\n  out[7] = 0\n  out[8] = x * z * t + y * s\n  out[9] = y * z * t - x * s\n  out[10] = z * z * t + c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromRotation\n", "/**\n * Creates a matrix from a vector scaling.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.scale(dest, dest, vec)\n *\n * @param {mat4} out - receiving matrix\n * @param {vec3} vector - X, Y, Z factors by which to scale\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromScaling\n * @example\n * let matrix = fromScaling([1, 2, 0.5])\n */\nconst fromScaling = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = vector[1]\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = vector[2]\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromScaling\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given Tait–Bryan angles.\n *\n * Tait-Bryan Euler angle convention using active, intrinsic rotations around the axes in the order z-y-x.\n * @see https://en.wikipedia.org/wiki/Euler_angles\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} yaw - Z rotation in radians\n * @param {Number} pitch - Y rotation in radians\n * @param {Number} roll - X rotation in radians\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromTaitBryanRotation\n * @example\n * let matrix = fromTaitBryanRotation(create(), TAU / 4, 0, TAU / 2)\n */\nconst fromTaitBryanRotation = (out, yaw, pitch, roll) => {\n  // precompute sines and cosines of Euler angles\n  const sy = sin(yaw)\n  const cy = cos(yaw)\n  const sp = sin(pitch)\n  const cp = cos(pitch)\n  const sr = sin(roll)\n  const cr = cos(roll)\n\n  // create and populate rotation matrix\n  // left-hand-rule rotation\n  // const els = [\n  //  cp*cy, sr*sp*cy - cr*sy, sr*sy + cr*sp*cy, 0,\n  //  cp*sy, cr*cy + sr*sp*sy, cr*sp*sy - sr*cy, 0,\n  //  -sp, sr*cp, cr*cp, 0,\n  //  0, 0, 0, 1\n  // ]\n  // right-hand-rule rotation\n  out[0] = cp * cy\n  out[1] = cp * sy\n  out[2] = -sp\n  out[3] = 0\n  out[4] = sr * sp * cy - cr * sy\n  out[5] = cr * cy + sr * sp * sy\n  out[6] = sr * cp\n  out[7] = 0\n  out[8] = sr * sy + cr * sp * cy\n  out[9] = cr * sp * sy - sr * cy\n  out[10] = cr * cp\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromTaitBryanRotation\n", "/**\n * Creates a matrix from a vector translation.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.translate(dest, dest, vec)\n *\n * @param {mat4} out - receiving matrix\n * @param {vec3} vector - offset (vector) of translation\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromTranslation\n * @example\n * let matrix = fromTranslation(create(), [1, 2, 3])\n */\nconst fromTranslation = (out, vector) => {\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = vector[0]\n  out[13] = vector[1]\n  out[14] = vector[2]\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromTranslation\n", "const create = require('./create')\n\n/**\n * Create a matrix with the given values.\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromValues\n * @example\n * let matrix = fromValues(\n *   1, 0, 0, 1,\n *   0, 1, 0, 0,\n *   0, 0, 1, 0,\n *   0, 0, 0, 1\n * )\n */\nconst fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) => {\n  const out = create()\n  out[0] = m00\n  out[1] = m01\n  out[2] = m02\n  out[3] = m03\n  out[4] = m10\n  out[5] = m11\n  out[6] = m12\n  out[7] = m13\n  out[8] = m20\n  out[9] = m21\n  out[10] = m22\n  out[11] = m23\n  out[12] = m30\n  out[13] = m31\n  out[14] = m32\n  out[15] = m33\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Calculates the absolute coordinates of the give vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector of reference\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.abs\n */\nconst abs = (out, vector) => {\n  out[0] = Math.abs(vector[0])\n  out[1] = Math.abs(vector[1])\n  out[2] = Math.abs(vector[2])\n  return out\n}\n\nmodule.exports = abs\n", "/**\n * Adds the coordinates of two vectors (A+B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  out[2] = a[2] + b[2]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Calculates the dot product of two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec3.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\nmodule.exports = dot\n", "const dot = require('./dot')\n\n/**\n * Calculate the angle between two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} angle (radians)\n * @alias module:modeling/maths/vec3.angle\n */\nconst angle = (a, b) => {\n  const ax = a[0]\n  const ay = a[1]\n  const az = a[2]\n  const bx = b[0]\n  const by = b[1]\n  const bz = b[2]\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az)\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz)\n  const mag = mag1 * mag2\n  const cosine = mag && dot(a, b) / mag\n  return Math.acos(Math.min(Math.max(cosine, -1), 1))\n}\n\nmodule.exports = angle\n", "/**\n * Represents a three dimensional vector.\n * See fromValues().\n * @typedef {Array} vec3\n */\n\n/**\n * Creates a new vector initialized to [0,0,0].\n *\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.create\n */\nconst create = () => [0, 0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec3} vector - vector to clone\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to copy\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Computes the cross product of the given vectors (AxB).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.cross\n */\nconst cross = (out, a, b) => {\n  const ax = a[0]\n  const ay = a[1]\n  const az = a[2]\n  const bx = b[0]\n  const by = b[1]\n  const bz = b[2]\n\n  out[0] = ay * bz - az * by\n  out[1] = az * bx - ax * bz\n  out[2] = ax * by - ay * bx\n  return out\n}\n\nmodule.exports = cross\n", "/**\n * Calculates the Euclidian distance between the given vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} distance\n * @alias module:modeling/maths/vec3.distance\n */\nconst distance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  const z = b[2] - a[2]\n  return Math.sqrt(x * x + y * y + z * z)\n}\n\nmodule.exports = distance\n", "/**\n * Divides the coordinates of two vectors (A/B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - dividend vector\n * @param {vec3} b - divisor vector\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.divide\n */\nconst divide = (out, a, b) => {\n  out[0] = a[0] / b[0]\n  out[1] = a[1] / b[1]\n  out[2] = a[2] / b[2]\n  return out\n}\n\nmodule.exports = divide\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Boolean} true if a and b are equal\n * @alias module:modeling/maths/vec3.equals\n */\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2])\n\nmodule.exports = equals\n", "/**\n * Creates a vector from a single scalar value.\n * All components of the resulting vector have the given value.\n *\n * @param {vec3} out - receiving vector\n * @param {Number} scalar\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  out[2] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "const create = require('./create')\n\n/**\n * Creates a new vector initialized with the given values.\n *\n * @param {Number} x - X component\n * @param {Number} y - Y component\n * @param {Number} z - Z component\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.fromValues\n */\nconst fromValues = (x, y, z) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Create a new vector by extending a 2D vector with a Z value.\n *\n * @param {vec3} out - receiving vector\n * @param {Array} vector - 2D vector of values\n * @param {Number} [z=0] - Z value\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.fromVec2\n */\nconst fromVector2 = (out, vector, z = 0) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = z\n  return out\n}\n\nmodule.exports = fromVector2\n", "/**\n * Calculates the length of a vector.\n *\n * @param {vec3} vector - vector to calculate length of\n * @returns {Number} length\n * @alias module:modeling/maths/vec3.length\n */\nconst length = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  return Math.sqrt(x * x + y * y + z * z)\n}\n\nmodule.exports = length\n", "/**\n * Performs a linear interpolation between two vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @param {Number} t - interpolant (0.0 to 1.0) applied between the two inputs\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.lerp\n */\nconst lerp = (out, a, b, t) => {\n  out[0] = a[0] + t * (b[0] - a[0])\n  out[1] = a[1] + t * (b[1] - a[1])\n  out[2] = a[2] + t * (b[2] - a[2])\n  return out\n}\n\nmodule.exports = lerp\n", "/**\n * Returns the maximum coordinates of the given vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.max\n */\nconst max = (out, a, b) => {\n  out[0] = Math.max(a[0], b[0])\n  out[1] = Math.max(a[1], b[1])\n  out[2] = Math.max(a[2], b[2])\n  return out\n}\n\nmodule.exports = max\n", "/**\n * Returns the minimum coordinates of the given vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.min\n */\nconst min = (out, a, b) => {\n  out[0] = Math.min(a[0], b[0])\n  out[1] = Math.min(a[1], b[1])\n  out[2] = Math.min(a[2], b[2])\n  return out\n}\n\nmodule.exports = min\n", "/**\n * Multiply the coordinates of the given vectors (A*B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.multiply\n */\nconst multiply = (out, a, b) => {\n  out[0] = a[0] * b[0]\n  out[1] = a[1] * b[1]\n  out[2] = a[2] * b[2]\n  return out\n}\n\nmodule.exports = multiply\n", "/**\n * Negates the coordinates of the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to negate\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.negate\n */\nconst negate = (out, vector) => {\n  out[0] = -vector[0]\n  out[1] = -vector[1]\n  out[2] = -vector[2]\n  return out\n}\n\nmodule.exports = negate\n", "/**\n * Normalize the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to normalize\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.normalize\n */\nconst normalize = (out, vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  let len = x * x + y * y + z * z\n  if (len > 0) {\n    len = 1 / Math.sqrt(len)\n  }\n  out[0] = x * len\n  out[1] = y * len\n  out[2] = z * len\n  return out\n}\n\nmodule.exports = normalize\n", "const abs = require('./abs')\nconst create = require('./create')\nconst cross = require('./cross')\n\n/**\n * Create a new vector that is orthogonal to the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector of reference\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.orthogonal\n */\nconst orthogonal = (out, vector) => {\n  const bV = abs(create(), vector)\n  const b0 = 0 + ((bV[0] < bV[1]) && (bV[0] < bV[2]))\n  const b1 = 0 + ((bV[1] <= bV[0]) && (bV[1] < bV[2]))\n  const b2 = 0 + ((bV[2] <= bV[0]) && (bV[2] <= bV[1]))\n\n  return cross(out, vector, [b0, b1, b2])\n}\n\nmodule.exports = orthogonal\n", "/**\n * Rotate the given vector around the given origin, X axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateX\n */\nconst rotateX = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n\n  // translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n  p[2] = vector[2] - origin[2]\n\n  // perform rotation\n  r[0] = p[0]\n  r[1] = p[1] * Math.cos(radians) - p[2] * Math.sin(radians)\n  r[2] = p[1] * Math.sin(radians) + p[2] * Math.cos(radians)\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = r[2] + origin[2]\n\n  return out\n}\n\nmodule.exports = rotateX\n", "/**\n * Rotate the given vector around the given origin, Y axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateY\n */\nconst rotateY = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n\n  // translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n  p[2] = vector[2] - origin[2]\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(radians) + p[0] * Math.cos(radians)\n  r[1] = p[1]\n  r[2] = p[2] * Math.cos(radians) - p[0] * Math.sin(radians)\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = r[2] + origin[2]\n\n  return out\n}\n\nmodule.exports = rotateY\n", "/**\n * Rotate the given vector around the given origin, Z axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation in radians\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateZ\n */\nconst rotateZ = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n  // Translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n\n  // perform rotation\n  r[0] = (p[0] * Math.cos(radians)) - (p[1] * Math.sin(radians))\n  r[1] = (p[0] * Math.sin(radians)) + (p[1] * Math.cos(radians))\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = vector[2]\n\n  return out\n}\n\nmodule.exports = rotateZ\n", "/**\n * Scales the coordinates of the given vector by a scalar number.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to scale\n * @param {Number} amount - amount to scale the vector by\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.scale\n */\nconst scale = (out, vector, amount) => {\n  out[0] = vector[0] * amount\n  out[1] = vector[1] * amount\n  out[2] = vector[2] * amount\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Snaps the coordinates of the given vector to the given epsilon.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to snap\n * @param {Number} epsilon - epsilon of precision, less than 0\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.snap\n */\nconst snap = (out, vector, epsilon) => {\n  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0\n  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0\n  out[2] = Math.round(vector[2] / epsilon) * epsilon + 0\n  return out\n}\n\nmodule.exports = snap\n", "/**\n * Calculates the squared distance between two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} squared distance\n * @alias module:modeling/maths/vec3.squaredDistance\n */\nconst squaredDistance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  const z = b[2] - a[2]\n  return x * x + y * y + z * z\n}\n\nmodule.exports = squaredDistance\n", "/**\n * Calculates the squared length of the given vector.\n *\n * @param {vec3} vector - vector to calculate squared length of\n * @returns {Number} squared length\n * @alias module:modeling/maths/vec3.squaredLength\n */\nconst squaredLength = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  return x * x + y * y + z * z\n}\n\nmodule.exports = squaredLength\n", "/**\n * Subtracts the coordinates of two vectors (A-B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - minuend vector\n * @param {vec3} b - subtrahend vector\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  out[2] = a[2] - b[2]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Convert the given vector to a representative string.\n * @param {vec3} vec - vector of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/vec3.toString\n */\nconst toString = (vec) => `[${vec[0].toFixed(7)}, ${vec[1].toFixed(7)}, ${vec[2].toFixed(7)}]`\n\nmodule.exports = toString\n", "/**\n * Transforms the given vector using the given matrix.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to transform\n * @param {mat4} matrix - transform matrix\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.transform\n */\nconst transform = (out, vector, matrix) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]\n  w = w || 1.0\n  out[0] = (matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w\n  out[1] = (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w\n  out[2] = (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a three dimensional vector.\n * @see {@link vec3} for data structure information.\n * @module modeling/maths/vec3\n */\nmodule.exports = {\n  abs: require('./abs'),\n  add: require('./add'),\n  angle: require('./angle'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  cross: require('./cross'),\n  distance: require('./distance'),\n  divide: require('./divide'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  fromVec2: require('./fromVec2'),\n  length: require('./length'),\n  lerp: require('./lerp'),\n  max: require('./max'),\n  min: require('./min'),\n  multiply: require('./multiply'),\n  negate: require('./negate'),\n  normalize: require('./normalize'),\n  orthogonal: require('./orthogonal'),\n  rotateX: require('./rotateX'),\n  rotateY: require('./rotateY'),\n  rotateZ: require('./rotateZ'),\n  scale: require('./scale'),\n  snap: require('./snap'),\n  squaredDistance: require('./squaredDistance'),\n  squaredLength: require('./squaredLength'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec3 = require('../vec3')\n\nconst fromRotation = require('./fromRotation')\n\n/**\n * Create a matrix that rotates the given source to the given target vector.\n *\n * Each vector must be a directional vector with a length greater than zero.\n * @see https://gist.github.com/kevinmoran/b45980723e53edeb8a5a43c49f134724\n * @param {mat4} out - receiving matrix\n * @param {vec3} source - source vector\n * @param {vec3} target - target vector\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromVectorRotation\n * @example\n * let matrix = fromVectorRotation(mat4.create(), [1, 2, 2], [-3, 3, 12])\n */\nconst fromVectorRotation = (out, source, target) => {\n  const sourceNormal = vec3.normalize(vec3.create(), source)\n  const targetNormal = vec3.normalize(vec3.create(), target)\n\n  const axis = vec3.cross(vec3.create(), targetNormal, sourceNormal)\n  const cosA = vec3.dot(targetNormal, sourceNormal)\n  if (cosA === -1.0) return fromRotation(out, Math.PI, vec3.orthogonal(axis, sourceNormal))\n\n  const k = 1 / (1 + cosA)\n  out[0] = (axis[0] * axis[0] * k) + cosA\n  out[1] = (axis[1] * axis[0] * k) - axis[2]\n  out[2] = (axis[2] * axis[0] * k) + axis[1]\n  out[3] = 0\n\n  out[4] = (axis[0] * axis[1] * k) + axis[2]\n  out[5] = (axis[1] * axis[1] * k) + cosA\n  out[6] = (axis[2] * axis[1] * k) - axis[0]\n  out[7] = 0\n\n  out[8] = (axis[0] * axis[2] * k) - axis[1]\n  out[9] = (axis[1] * axis[2] * k) + axis[0]\n  out[10] = (axis[2] * axis[2] * k) + cosA\n  out[11] = 0\n\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromVectorRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the X axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateX(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromXRotation\n * @example\n * let matrix = fromXRotation(create(), TAU / 4)\n */\nconst fromXRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = c\n  out[6] = s\n  out[7] = 0\n  out[8] = 0\n  out[9] = -s\n  out[10] = c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromXRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the Y axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateY(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromYRotation\n * @example\n * let matrix = fromYRotation(create(), TAU / 4)\n */\nconst fromYRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c\n  out[1] = 0\n  out[2] = -s\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = s\n  out[9] = 0\n  out[10] = c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromYRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the Z axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateZ(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromZRotation\n * @example\n * let matrix = fromZRotation(create(), TAU / 4)\n */\nconst fromZRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c\n  out[1] = s\n  out[2] = 0\n  out[3] = 0\n  out[4] = -s\n  out[5] = c\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromZRotation\n", "/**\n * Determine whether the given matrix is the identity transform.\n * This is equivalent to (but much faster than):\n *\n *     mat4.equals(mat4.create(), matrix)\n *\n * @param {mat4} matrix - the matrix\n * @returns {Boolean} true if matrix is the identity transform\n * @alias module:modeling/maths/mat4.isIdentity\n * @example\n * if (mat4.isIdentity(mymatrix)) ...\n */\nconst isIdentity = (matrix) => (\n  matrix[0] === 1 && matrix[1] === 0 && matrix[2] === 0 && matrix[3] === 0 &&\n  matrix[4] === 0 && matrix[5] === 1 && matrix[6] === 0 && matrix[7] === 0 &&\n  matrix[8] === 0 && matrix[9] === 0 && matrix[10] === 1 && matrix[11] === 0 &&\n  matrix[12] === 0 && matrix[13] === 0 && matrix[14] === 0 && matrix[15] === 1\n)\n\nmodule.exports = isIdentity\n", "\n/**\n * Determine whether the given matrix is only translate and/or scale.\n * This code returns true for TAU / 2 rotation as it can be interpreted as scale.\n *\n * @param {mat4} matrix - the matrix\n * @returns {Boolean} true if matrix is for translate and/or scale\n * @alias module:modeling/maths/mat4.isOnlyTransformScale\n */\nconst isOnlyTransformScale = (matrix) => (\n\n  // TODO check if it is worth the effort to add recognition of 90 deg rotations\n\n  isZero(matrix[1]) && isZero(matrix[2]) && isZero(matrix[3]) &&\n  isZero(matrix[4]) && isZero(matrix[6]) && isZero(matrix[7]) &&\n  isZero(matrix[8]) && isZero(matrix[9]) && isZero(matrix[11]) &&\n  matrix[15] === 1\n)\n\nconst isZero = (num) => Math.abs(num) < Number.EPSILON\n\nmodule.exports = isOnlyTransformScale\n", "/**\n * Determine whether the given matrix is a mirroring transformation.\n *\n * @param {mat4} matrix - matrix of reference\n * @returns {Boolean} true if matrix is a mirroring transformation\n * @alias module:modeling/maths/mat4.isMirroring\n */\nconst isMirroring = (matrix) => {\n  // const xVector = [matrix[0], matrix[4], matrix[8]]\n  // const yVector = [matrix[1], matrix[5], matrix[9]]\n  // const zVector = [matrix[2], matrix[6], matrix[10]]\n\n  // for a true orthogonal, non-mirrored base, xVector.cross(yVector) == zVector\n  // If they have an opposite direction then we are mirroring\n  // calcuate xVector.cross(yVector)\n  const x = matrix[4] * matrix[9] - matrix[8] * matrix[5]\n  const y = matrix[8] * matrix[1] - matrix[0] * matrix[9]\n  const z = matrix[0] * matrix[5] - matrix[4] * matrix[1]\n  // calcualte dot(cross, zVector)\n  const d = x * matrix[2] + y * matrix[6] + z * matrix[10]\n  return (d < 0)\n}\n\nmodule.exports = isMirroring\n", "/**\n * Create a matrix for mirroring about the given plane.\n *\n * @param {mat4} out - receiving matrix\n * @param {vec4} plane - plane of which to mirror the matrix\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.mirrorByPlane\n */\nconst mirrorByPlane = (out, plane) => {\n  const [nx, ny, nz, w] = plane\n\n  out[0] = (1.0 - 2.0 * nx * nx)\n  out[1] = (-2.0 * ny * nx)\n  out[2] = (-2.0 * nz * nx)\n  out[3] = 0\n  out[4] = (-2.0 * nx * ny)\n  out[5] = (1.0 - 2.0 * ny * ny)\n  out[6] = (-2.0 * nz * ny)\n  out[7] = 0\n  out[8] = (-2.0 * nx * nz)\n  out[9] = (-2.0 * ny * nz)\n  out[10] = (1.0 - 2.0 * nz * nz)\n  out[11] = 0\n  out[12] = (2.0 * nx * w)\n  out[13] = (2.0 * ny * w)\n  out[14] = (2.0 * nz * w)\n  out[15] = 1\n\n  return out\n}\n\nmodule.exports = mirrorByPlane\n", "/**\n * Multiplies the two matrices.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.multiply\n */\nconst multiply = (out, a, b) => {\n  const a00 = a[0]\n  const a01 = a[1]\n  const a02 = a[2]\n  const a03 = a[3]\n  const a10 = a[4]\n  const a11 = a[5]\n  const a12 = a[6]\n  const a13 = a[7]\n  const a20 = a[8]\n  const a21 = a[9]\n  const a22 = a[10]\n  const a23 = a[11]\n  const a30 = a[12]\n  const a31 = a[13]\n  const a32 = a[14]\n  const a33 = a[15]\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0]\n  let b1 = b[1]\n  let b2 = b[2]\n  let b3 = b[3]\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[4]\n  b1 = b[5]\n  b2 = b[6]\n  b3 = b[7]\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[8]\n  b1 = b[9]\n  b2 = b[10]\n  b3 = b[11]\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[12]\n  b1 = b[13]\n  b2 = b[14]\n  b3 = b[15]\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  return out\n}\n\nmodule.exports = multiply\n", "const { EPS } = require('../constants')\n\nconst { sin, cos } = require('../utils/trigonometry')\n\nconst copy = require('./copy')\n\n/**\n * Rotates a matrix by the given angle about the given axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @param {vec3} axis - axis to rotate around\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotate\n */\nconst rotate = (out, matrix, radians, axis) => {\n  let [x, y, z] = axis\n  const lengthSquared = x * x + y * y + z * z\n\n  if (Math.abs(lengthSquared) < EPS) {\n    // axis is 0,0,0 or almost\n    return copy(out, matrix)\n  }\n\n  const len = 1 / Math.sqrt(lengthSquared)\n  x *= len\n  y *= len\n  z *= len\n\n  const s = sin(radians)\n  const c = cos(radians)\n  const t = 1 - c\n\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  // Construct the elements of the rotation matrix\n  const b00 = x * x * t + c\n  const b01 = y * x * t + z * s\n  const b02 = z * x * t - y * s\n  const b10 = x * y * t - z * s\n  const b11 = y * y * t + c\n  const b12 = z * y * t + x * s\n  const b20 = x * z * t + y * s\n  const b21 = y * z * t - x * s\n  const b22 = z * z * t + c\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n  return out\n}\n\nmodule.exports = rotate\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the X axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateX\n */\nconst rotateX = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0] = matrix[0]\n    out[1] = matrix[1]\n    out[2] = matrix[2]\n    out[3] = matrix[3]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s\n  out[5] = a11 * c + a21 * s\n  out[6] = a12 * c + a22 * s\n  out[7] = a13 * c + a23 * s\n  out[8] = a20 * c - a10 * s\n  out[9] = a21 * c - a11 * s\n  out[10] = a22 * c - a12 * s\n  out[11] = a23 * c - a13 * s\n  return out\n}\n\nmodule.exports = rotateX\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the Y axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateY\n */\nconst rotateY = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4] = matrix[4]\n    out[5] = matrix[5]\n    out[6] = matrix[6]\n    out[7] = matrix[7]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s\n  out[1] = a01 * c - a21 * s\n  out[2] = a02 * c - a22 * s\n  out[3] = a03 * c - a23 * s\n  out[8] = a00 * s + a20 * c\n  out[9] = a01 * s + a21 * c\n  out[10] = a02 * s + a22 * c\n  out[11] = a03 * s + a23 * c\n  return out\n}\n\nmodule.exports = rotateY\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the Z axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateZ\n */\nconst rotateZ = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8] = matrix[8]\n    out[9] = matrix[9]\n    out[10] = matrix[10]\n    out[11] = matrix[11]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s\n  out[1] = a01 * c + a11 * s\n  out[2] = a02 * c + a12 * s\n  out[3] = a03 * c + a13 * s\n  out[4] = a10 * c - a00 * s\n  out[5] = a11 * c - a01 * s\n  out[6] = a12 * c - a02 * s\n  out[7] = a13 * c - a03 * s\n  return out\n}\n\nmodule.exports = rotateZ\n", "/**\n * Scales the matrix by the given dimensions.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to scale\n * @param {vec3} dimensions - dimensions to scale the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.scale\n */\nconst scale = (out, matrix, dimensions) => {\n  const x = dimensions[0]\n  const y = dimensions[1]\n  const z = dimensions[2]\n\n  out[0] = matrix[0] * x\n  out[1] = matrix[1] * x\n  out[2] = matrix[2] * x\n  out[3] = matrix[3] * x\n  out[4] = matrix[4] * y\n  out[5] = matrix[5] * y\n  out[6] = matrix[6] * y\n  out[7] = matrix[7] * y\n  out[8] = matrix[8] * z\n  out[9] = matrix[9] * z\n  out[10] = matrix[10] * z\n  out[11] = matrix[11] * z\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Subtracts matrix b from matrix a. (A-B)\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  out[2] = a[2] - b[2]\n  out[3] = a[3] - b[3]\n  out[4] = a[4] - b[4]\n  out[5] = a[5] - b[5]\n  out[6] = a[6] - b[6]\n  out[7] = a[7] - b[7]\n  out[8] = a[8] - b[8]\n  out[9] = a[9] - b[9]\n  out[10] = a[10] - b[10]\n  out[11] = a[11] - b[11]\n  out[12] = a[12] - b[12]\n  out[13] = a[13] - b[13]\n  out[14] = a[14] - b[14]\n  out[15] = a[15] - b[15]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Return a string representing the given matrix.\n *\n * @param {mat4} mat - matrix of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/mat4.toString\n */\nconst toString = (mat) => mat.map((n) => n.toFixed(7)).toString()\n\nmodule.exports = toString\n", "/**\n * Translate the matrix by the given offset vector.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to translate\n * @param {vec3} offsets - offset vector to translate by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.translate\n */\nconst translate = (out, matrix, offsets) => {\n  const x = offsets[0]\n  const y = offsets[1]\n  const z = offsets[2]\n  let a00\n  let a01\n  let a02\n  let a03\n  let a10\n  let a11\n  let a12\n  let a13\n  let a20\n  let a21\n  let a22\n  let a23\n\n  if (matrix === out) {\n  // 0-11 assignments are unnecessary\n    out[12] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]\n    out[13] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]\n    out[14] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]\n    out[15] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]\n  } else {\n    a00 = matrix[0]; a01 = matrix[1]; a02 = matrix[2]; a03 = matrix[3]\n    a10 = matrix[4]; a11 = matrix[5]; a12 = matrix[6]; a13 = matrix[7]\n    a20 = matrix[8]; a21 = matrix[9]; a22 = matrix[10]; a23 = matrix[11]\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23\n\n    out[12] = a00 * x + a10 * y + a20 * z + matrix[12]\n    out[13] = a01 * x + a11 * y + a21 * z + matrix[13]\n    out[14] = a02 * x + a12 * y + a22 * z + matrix[14]\n    out[15] = a03 * x + a13 * y + a23 * z + matrix[15]\n  }\n\n  return out\n}\n\nmodule.exports = translate\n", "/**\n * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).\n * @see {@link mat4} for data structure information.\n * @module modeling/maths/mat4\n */\nmodule.exports = {\n  add: require('./add'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  invert: require('./invert'),\n  equals: require('./equals'),\n  fromRotation: require('./fromRotation'),\n  fromScaling: require('./fromScaling'),\n  fromTaitBryanRotation: require('./fromTaitBryanRotation'),\n  fromTranslation: require('./fromTranslation'),\n  fromValues: require('./fromValues'),\n  fromVectorRotation: require('./fromVectorRotation'),\n  fromXRotation: require('./fromXRotation'),\n  fromYRotation: require('./fromYRotation'),\n  fromZRotation: require('./fromZRotation'),\n  identity: require('./identity'),\n  isIdentity: require('./isIdentity'),\n  isOnlyTransformScale: require('./isOnlyTransformScale'),\n  isMirroring: require('./isMirroring'),\n  mirrorByPlane: require('./mirrorByPlane'),\n  multiply: require('./multiply'),\n  rotate: require('./rotate'),\n  rotateX: require('./rotateX'),\n  rotateY: require('./rotateY'),\n  rotateZ: require('./rotateZ'),\n  scale: require('./scale'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  translate: require('./translate')\n}\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 2D geometry consisting of a list of sides.\n * @typedef {Object} geom2\n * @property {Array} sides - list of sides, each side containing two points\n * @property {mat4} transforms - transforms to apply to the sides, see transform()\n */\n\n/**\n * Create a new 2D geometry composed of unordered sides (two connected points).\n * @param {Array} [sides] - list of sides where each side is an array of two points\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.create\n */\nconst create = (sides) => {\n  if (sides === undefined) {\n    sides = [] // empty contents\n  }\n  return {\n    sides: sides,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "/**\n * Calculates the absolute coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector of reference\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.abs\n */\nconst abs = (out, vector) => {\n  out[0] = Math.abs(vector[0])\n  out[1] = Math.abs(vector[1])\n  return out\n}\n\nmodule.exports = abs\n", "/**\n * Adds the coordinates of two vectors (A+B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Calculate the angle of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} angle in radians\n * @alias module:modeling/maths/vec2.angleRadians\n */\nconst angleRadians = (vector) => Math.atan2(vector[1], vector[0]) // y=sin, x=cos\n\nmodule.exports = angleRadians\n", "module.exports = require('./angleRadians')\n", "const angleRadians = require('./angleRadians')\n\n/**\n * Calculate the angle of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} angle in degrees\n * @alias module:modeling/maths/vec2.angleDegrees\n */\nconst angleDegrees = (vector) => angleRadians(vector) * 57.29577951308232\n\nmodule.exports = angleDegrees\n", "/**\n * Represents a two dimensional vector.\n * See fromValues().\n * @typedef {Array} vec2\n */\n\n/**\n * Creates a new vector, initialized to [0,0].\n *\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.create\n */\nconst create = () => [0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec2} vector - vector to clone\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - source vector\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Computes the cross product (3D) of two vectors.\n *\n * @param {vec3} out - receiving vector (3D)\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec2.cross\n */\nconst cross = (out, a, b) => {\n  out[0] = 0\n  out[1] = 0\n  out[2] = a[0] * b[1] - a[1] * b[0]\n  return out\n}\n\nmodule.exports = cross\n", "/**\n * Calculates the distance between two vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} distance\n * @alias module:modeling/maths/vec2.distance\n */\nconst distance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  return Math.sqrt(x * x + y * y)\n}\n\nmodule.exports = distance\n", "/**\n * Divides the coordinates of two vectors (A/B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.divide\n */\nconst divide = (out, a, b) => {\n  out[0] = a[0] / b[0]\n  out[1] = a[1] / b[1]\n  return out\n}\n\nmodule.exports = divide\n", "/**\n * Calculates the dot product of two vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec2.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1]\n\nmodule.exports = dot\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Boolean} true if a and b are equal\n * @alias module:modeling/maths/vec2.equals\n */\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1])\n\nmodule.exports = equals\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Create a new vector in the direction of the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} radians - angle in radians\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromAngleRadians\n */\nconst fromAngleRadians = (out, radians) => {\n  out[0] = cos(radians)\n  out[1] = sin(radians)\n  return out\n}\n\nmodule.exports = fromAngleRadians\n", "const fromAngleRadians = require('./fromAngleRadians')\n\n/**\n * Create a new vector in the direction of the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} degrees - angle in degrees\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromAngleDegrees\n */\nconst fromAngleDegrees = (out, degrees) => fromAngleRadians(out, degrees * 0.017453292519943295)\n\nmodule.exports = fromAngleDegrees\n", "/**\n * Create a vector from a single scalar value.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} scalar - the scalar value\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "const create = require('./create')\n\n/**\n * Creates a new vector initialized with the given values.\n *\n * @param {Number} x - X coordinate\n * @param {Number} y - Y coordinate\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.fromValues\n */\nconst fromValues = (x, y) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Calculates the length of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} length\n * @alias module:modeling/maths/vec2.length\n */\nconst length = (vector) => Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1])\n\nmodule.exports = length\n", "/**\n * Performs a linear interpolation between two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @param {Number} t - interpolation amount between the two vectors\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.lerp\n */\nconst lerp = (out, a, b, t) => {\n  const ax = a[0]\n  const ay = a[1]\n  out[0] = ax + t * (b[0] - ax)\n  out[1] = ay + t * (b[1] - ay)\n  return out\n}\n\nmodule.exports = lerp\n", "/**\n * Returns the maximum coordinates of two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.max\n */\nconst max = (out, a, b) => {\n  out[0] = Math.max(a[0], b[0])\n  out[1] = Math.max(a[1], b[1])\n  return out\n}\n\nmodule.exports = max\n", "/**\n * Returns the minimum coordinates of two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.min\n */\nconst min = (out, a, b) => {\n  out[0] = Math.min(a[0], b[0])\n  out[1] = Math.min(a[1], b[1])\n  return out\n}\n\nmodule.exports = min\n", "/**\n * Multiplies the coordinates of two vectors (A*B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.multiply\n */\nconst multiply = (out, a, b) => {\n  out[0] = a[0] * b[0]\n  out[1] = a[1] * b[1]\n  return out\n}\n\nmodule.exports = multiply\n", "/**\n * Negates the coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to negate\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.negate\n */\nconst negate = (out, vector) => {\n  out[0] = -vector[0]\n  out[1] = -vector[1]\n  return out\n}\n\nmodule.exports = negate\n", "/**\n * Rotates the given vector by the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to rotate\n * @param {vec2} origin - origin of the rotation\n * @param {Number} radians - angle of rotation (radians)\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.rotate\n */\nconst rotate = (out, vector, origin, radians) => {\n  const x = vector[0] - origin[0]\n  const y = vector[1] - origin[1]\n  const c = Math.cos(radians)\n  const s = Math.sin(radians)\n\n  out[0] = x * c - y * s + origin[0]\n  out[1] = x * s + y * c + origin[1]\n\n  return out\n}\n\nmodule.exports = rotate\n", "const { TAU } = require('../constants')\n\nconst create = require('./create')\nconst rotate = require('./rotate')\n\n/**\n * Calculates the normal of the given vector.\n * The normal value is the given vector rotated 90 degrees.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - given value\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.normal\n */\nconst normal = (out, vector) => rotate(out, vector, create(), (TAU / 4))\n\nmodule.exports = normal\n", "/**\n * Normalize the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to normalize\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.normalize\n */\nconst normalize = (out, vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  let len = x * x + y * y\n  if (len > 0) {\n    len = 1 / Math.sqrt(len)\n  }\n  out[0] = x * len\n  out[1] = y * len\n  return out\n}\n\n// old this.dividedBy(this.length())\n\nmodule.exports = normalize\n", "/**\n * Scales the coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to scale\n * @param {Number} amount - amount to scale\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.scale\n */\nconst scale = (out, vector, amount) => {\n  out[0] = vector[0] * amount\n  out[1] = vector[1] * amount\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Snaps the coordinates of the given vector to the given epsilon.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to snap\n * @param {Number} epsilon - epsilon of precision, less than 0\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.snap\n */\nconst snap = (out, vector, epsilon) => {\n  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0\n  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0\n  return out\n}\n\nmodule.exports = snap\n", "/**\n * Calculates the squared distance between the given vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} squared distance\n * @alias module:modeling/maths/vec2.squaredDistance\n */\nconst squaredDistance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  return x * x + y * y\n}\n\nmodule.exports = squaredDistance\n", "/**\n * Calculates the squared length of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} squared length\n * @alias module:modeling/maths/vec2.squaredLength\n */\nconst squaredLength = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  return x * x + y * y\n}\n\nmodule.exports = squaredLength\n", "/**\n * Subtracts the coordinates of two vectors (A-B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Convert the given vector to a representative string.\n *\n * @param {vec2} vector - vector of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/vec2.toString\n */\nconst toString = (vector) => `[${vector[0].toFixed(7)}, ${vector[1].toFixed(7)}]`\n\nmodule.exports = toString\n", "/**\n * Transforms the given vector using the given matrix.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.transform\n */\nconst transform = (out, vector, matrix) => {\n  const x = vector[0]\n  const y = vector[1]\n  out[0] = matrix[0] * x + matrix[4] * y + matrix[12]\n  out[1] = matrix[1] * x + matrix[5] * y + matrix[13]\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a two dimensional vector.\n * @module modeling/maths/vec2\n */\nmodule.exports = {\n  abs: require('./abs'),\n  add: require('./add'),\n  angle: require('./angle'),\n  angleDegrees: require('./angleDegrees'),\n  angleRadians: require('./angleRadians'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  cross: require('./cross'),\n  distance: require('./distance'),\n  divide: require('./divide'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromAngleDegrees: require('./fromAngleDegrees'),\n  fromAngleRadians: require('./fromAngleRadians'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  length: require('./length'),\n  lerp: require('./lerp'),\n  max: require('./max'),\n  min: require('./min'),\n  multiply: require('./multiply'),\n  negate: require('./negate'),\n  normal: require('./normal'),\n  normalize: require('./normalize'),\n  rotate: require('./rotate'),\n  scale: require('./scale'),\n  snap: require('./snap'),\n  squaredDistance: require('./squaredDistance'),\n  squaredLength: require('./squaredLength'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new 2D geometry from the given points.\n * The direction (rotation) of the points is not relevant,\n * as the points can define a convex or a concave polygon.\n * The geometry must not self intersect, i.e. the sides cannot cross.\n * @param {Array} points - list of points in 2D space\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.fromPoints\n */\nconst fromPoints = (points) => {\n  if (!Array.isArray(points)) {\n    throw new Error('the given points must be an array')\n  }\n  let length = points.length\n  if (length < 3) {\n    throw new Error('the given points must define a closed geometry with three or more points')\n  }\n  // adjust length if the given points are closed by the same point\n  if (vec2.equals(points[0], points[length - 1])) --length\n\n  const sides = []\n  let prevpoint = points[length - 1]\n  for (let i = 0; i < length; i++) {\n    const point = points[i]\n    sides.push([vec2.clone(prevpoint), vec2.clone(point)])\n    prevpoint = point\n  }\n  return create(sides)\n}\n\nmodule.exports = fromPoints\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new 2D geometry from the given compact binary data.\n * @param {Array} data - compact binary data\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 0) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  for (let i = 21; i < data.length; i += 4) {\n    const point0 = vec2.fromValues(data[i + 0], data[i + 1])\n    const point1 = vec2.fromValues(data[i + 2], data[i + 3])\n    created.sides.push([point0, point1])\n  }\n  // transfer known properties, i.e. color\n  if (data[17] >= 0) {\n    created.color = [data[17], data[18], data[19], data[20]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "/**\n * Determine if the given object is a 2D geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true, if the object matches a geom2 based object\n * @alias module:modeling/geometries/geom2.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('sides' in object && 'transforms' in object) {\n      if (Array.isArray(object.sides) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toSides().\n * @param {geom2} geometry - the geometry to transform\n * @returns {geom2} the given geometry\n *\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  // apply transforms to each side\n  geometry.sides = geometry.sides.map((side) => {\n    const p0 = vec2.transform(vec2.create(), side[0], geometry.transforms)\n    const p1 = vec2.transform(vec2.create(), side[1], geometry.transforms)\n    return [p0, p1]\n  })\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of sides from the given geometry.\n * The returned array should not be modified as the data is shared with the geometry.\n * NOTE: The sides returned do NOT define an order. Use toOutlines() for ordered points.\n * @param {geom2} geometry - the geometry\n * @returns {Array} an array of sides\n * @alias module:modeling/geometries/geom2.toSides\n *\n * @example\n * let sharedsides = toSides(geometry)\n */\nconst toSides = (geometry) => applyTransforms(geometry).sides\n\nmodule.exports = toSides\n", "const create = require('./create')\nconst toSides = require('./toSides')\n\n/**\n * Reverses the given geometry so that the sides are flipped in the opposite order.\n * This swaps the left (interior) and right (exterior) edges.\n * @param {geom2} geometry - the geometry to reverse\n * @returns {geom2} the new reversed geometry\n * @alias module:modeling/geometries/geom2.reverse\n *\n * @example\n * let newgeometry = reverse(geometry)\n */\nconst reverse = (geometry) => {\n  const oldsides = toSides(geometry)\n\n  const newsides = oldsides.map((side) => [side[1], side[0]])\n  newsides.reverse() // is this required?\n  return create(newsides)\n}\n\nmodule.exports = reverse\n", "const vec2 = require('../../maths/vec2')\n\nconst toSides = require('./toSides')\n\n/*\n * Create a list of edges which SHARE vertices.\n * This allows the edges to be traversed in order.\n */\nconst toSharedVertices = (sides) => {\n  const unique = new Map() // {key: vertex}\n  const getUniqueVertex = (vertex) => {\n    const key = vertex.toString()\n    if (unique.has(key)) {\n      return unique.get(key)\n    } else {\n      unique.set(key, vertex)\n      return vertex\n    }\n  }\n\n  return sides.map((side) => side.map(getUniqueVertex))\n}\n\n/*\n * Convert a list of sides into a map from vertex to edges.\n */\nconst toVertexMap = (sides) => {\n  const vertexMap = new Map()\n  // first map to edges with shared vertices\n  const edges = toSharedVertices(sides)\n  // construct adjacent edges map\n  edges.forEach((edge) => {\n    if (vertexMap.has(edge[0])) {\n      vertexMap.get(edge[0]).push(edge)\n    } else {\n      vertexMap.set(edge[0], [edge])\n    }\n  })\n  return vertexMap\n}\n\n/**\n * Create the outline(s) of the given geometry.\n * @param {geom2} geometry - geometry to create outlines from\n * @returns {Array} an array of outlines, where each outline is an array of ordered points\n * @alias module:modeling/geometries/geom2.toOutlines\n *\n * @example\n * let geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))\n * let outlines = toOutlines(geometry) // returns two outlines\n */\nconst toOutlines = (geometry) => {\n  const vertexMap = toVertexMap(toSides(geometry)) // {vertex: [edges]}\n  const outlines = []\n  while (true) {\n    let startSide\n    for (const [vertex, edges] of vertexMap) {\n      startSide = edges.shift()\n      if (!startSide) {\n        vertexMap.delete(vertex)\n        continue\n      }\n      break\n    }\n    if (startSide === undefined) break // all starting sides have been visited\n\n    const connectedVertexPoints = []\n    const startVertex = startSide[0]\n    while (true) {\n      connectedVertexPoints.push(startSide[0])\n      const nextVertex = startSide[1]\n      if (nextVertex === startVertex) break // the outline has been closed\n      const nextPossibleSides = vertexMap.get(nextVertex)\n      if (!nextPossibleSides) {\n        throw new Error(`geometry is not closed at vertex ${nextVertex}`)\n      }\n      const nextSide = popNextSide(startSide, nextPossibleSides)\n      if (nextPossibleSides.length === 0) {\n        vertexMap.delete(nextVertex)\n      }\n      startSide = nextSide\n    } // inner loop\n\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (connectedVertexPoints.length > 0) {\n      connectedVertexPoints.push(connectedVertexPoints.shift())\n    }\n    outlines.push(connectedVertexPoints)\n  } // outer loop\n  vertexMap.clear()\n  return outlines\n}\n\n// find the first counter-clockwise edge from startSide and pop from nextSides\nconst popNextSide = (startSide, nextSides) => {\n  if (nextSides.length === 1) {\n    return nextSides.pop()\n  }\n  const v0 = vec2.create()\n  const startAngle = vec2.angleDegrees(vec2.subtract(v0, startSide[1], startSide[0]))\n  let bestAngle\n  let bestIndex\n  nextSides.forEach((nextSide, index) => {\n    const nextAngle = vec2.angleDegrees(vec2.subtract(v0, nextSide[1], nextSide[0]))\n    let angle = nextAngle - startAngle\n    if (angle < -180) angle += 360\n    if (angle >= 180) angle -= 360\n    if (bestIndex === undefined || angle > bestAngle) {\n      bestIndex = index\n      bestAngle = angle\n    }\n  })\n  const nextSide = nextSides[bestIndex]\n  nextSides.splice(bestIndex, 1) // remove side from list\n  return nextSide\n}\n\nmodule.exports = toOutlines\n", "const toSides = require('./toSides')\n\n/**\n * Produces an array of points from the given geometry.\n * The returned array should not be modified as the points are shared with the geometry.\n * NOTE: The points returned do NOT define an order. Use toOutlines() for ordered points.\n * @param {geom2} geometry - the geometry\n * @returns {Array} an array of points\n * @alias module:modeling/geometries/geom2.toPoints\n *\n * @example\n * let sharedpoints = toPoints(geometry)\n */\nconst toPoints = (geometry) => {\n  const sides = toSides(geometry)\n  const points = sides.map((side) => side[0])\n  // due to the logic of fromPoints()\n  // move the first point to the last\n  if (points.length > 0) {\n    points.push(points.shift())\n  }\n  return points\n}\n\nmodule.exports = toPoints\n", "const vec2 = require('../../maths/vec2')\n\nconst toSides = require('./toSides')\n\n/**\n * Create a string representing the contents of the given geometry.\n * @param {geom2} geometry - the geometry\n * @returns {String} a representative string\n * @alias module:modeling/geometries/geom2.toString\n *\n * @example\n * console.out(toString(geometry))\n */\nconst toString = (geometry) => {\n  const sides = toSides(geometry)\n  let result = 'geom2 (' + sides.length + ' sides):\\n[\\n'\n  sides.forEach((side) => {\n    result += '  [' + vec2.toString(side[0]) + ', ' + vec2.toString(side[1]) + ']\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n", "/**\n * Produces a compact binary representation from the given geometry.\n * @param {geom2} geometry - the geometry\n * @returns {TypedArray} compact binary representation\n * @alias module:modeling/geometries/geom2.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const sides = geometry.sides\n  const transforms = geometry.transforms\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 4 + (sides.length * 4)) // type + transforms + color + sides data\n\n  compacted[0] = 0 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = color[0]\n  compacted[18] = color[1]\n  compacted[19] = color[2]\n  compacted[20] = color[3]\n\n  for (let i = 0; i < sides.length; i++) {\n    const ci = i * 4 + 21\n    const point0 = sides[i][0]\n    const point1 = sides[i][1]\n    compacted[ci + 0] = point0[0]\n    compacted[ci + 1] = point0[1]\n    compacted[ci + 2] = point1[0]\n    compacted[ci + 3] = point1[1]\n  }\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the sides, as this function only adjusts the transforms.\n * The transforms are applied when accessing the sides via toSides().\n * @param {mat4} matrix - the matrix to transform with\n * @param {geom2} geometry - the geometry to transform\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.transform\n *\n * @example\n * let newgeometry = transform(fromZRotation(degToRad(90)), geometry)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const vec2 = require('../../maths/vec2')\nconst isA = require('./isA')\nconst toOutlines = require('./toOutlines')\n\n/**\n * Determine if the given object is a valid geom2.\n * Checks for closedness, self-edges, and valid data points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/geom2.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid geom2 structure')\n  }\n\n  // check for closedness\n  toOutlines(object)\n\n  // check for self-edges\n  object.sides.forEach((side) => {\n    if (vec2.equals(side[0], side[1])) {\n      throw new Error(`geom2 self-edge ${side[0]}`)\n    }\n  })\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`geom2 invalid transforms ${object.transforms}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 2D geometry consisting of a list of sides.\n * @see {@link geom2} for data structure information.\n * @module modeling/geometries/geom2\n *\n * @example\n * colorize([0.5,0,1,1], square()) // purple square\n *\n * @example\n * {\n *   \"sides\": [[[-1,1],[-1,-1]],[[-1,-1],[1,-1]],[[1,-1],[1,1]],[[1,1],[-1,1]]],\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0.5,0,1,1]\n * }\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toOutlines: require('./toOutlines'),\n  toPoints: require('./toPoints'),\n  toSides: require('./toSides'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "/**\n * Performs a shallow clone of the given geometry.\n * @param {geom3} geometry - the geometry to clone\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 3D geometry consisting of a list of polygons.\n * @typedef {Object} geom3\n * @property {Array} polygons - list of polygons, each polygon containing three or more points\n * @property {mat4} transforms - transforms to apply to the polygons, see transform()\n */\n\n/**\n * Create a new 3D geometry composed of the given polygons.\n * @param {Array} [polygons] - list of polygons, or undefined\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.create\n */\nconst create = (polygons) => {\n  if (polygons === undefined) {\n    polygons = [] // empty contents\n  }\n  return {\n    polygons,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "\n/**\n * Represents a convex 3D polygon. The vertices used to initialize a polygon must\n * be coplanar and form a convex shape. The vertices do not have to be `vec3`\n * instances but they must behave similarly.\n * @typedef {Object} poly3\n * @property {Array} vertices - list of ordered vertices (3D)\n */\n\n/**\n * Creates a new 3D polygon with initial values.\n *\n * @param {Array} [vertices] - a list of vertices (3D)\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.create\n */\nconst create = (vertices) => {\n  if (vertices === undefined || vertices.length < 3) {\n    vertices = [] // empty contents\n  }\n  return { vertices }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\nconst vec3 = require('../../maths/vec3')\n\n/**\n * Create a deep clone of the given polygon\n *\n * @param {poly3} [out] - receiving polygon\n * @param {poly3} polygon - polygon to clone\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.clone\n */\nconst clone = (...params) => {\n  let out\n  let poly3\n  if (params.length === 1) {\n    out = create()\n    poly3 = params[0]\n  } else {\n    out = params[0]\n    poly3 = params[1]\n  }\n  // deep clone of vertices\n  out.vertices = poly3.vertices.map((vec) => vec3.clone(vec))\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a polygon from the given points.\n *\n * @param {Array} points - list of points (3D)\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.fromPoints\n *\n * @example\n * const points = [\n *   [0,  0, 0],\n *   [0, 10, 0],\n *   [0, 10, 10]\n * ]\n * const polygon = fromPoints(points)\n */\nconst fromPoints = (points) => {\n  const vertices = points.map((point) => vec3.clone(point))\n  return create(vertices)\n}\n\nmodule.exports = fromPoints\n", "const create = require('./create')\n\n/**\n * Create a polygon from the given vertices and plane.\n * NOTE: No checks are performed on the parameters.\n * @param {Array} vertices - list of vertices (3D)\n * @param {plane} plane - plane of the polygon\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.fromPointsAndPlane\n */\nconst fromPointsAndPlane = (vertices, plane) => {\n  const poly = create(vertices)\n  poly.plane = plane // retain the plane for later use\n  return poly\n}\n\nmodule.exports = fromPointsAndPlane\n", "/**\n * Represents a four dimensional vector.\n * See fromValues().\n * @typedef {Array} vec4\n */\n\n/**\n * Creates a new vector initialized to [0,0,0,0].\n *\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.create\n */\nconst create = () => [0, 0, 0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec4} vector - source vector\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  out[3] = vector[3]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec4} out - receiving vector\n * @param {vec4} vector - source vector\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  out[3] = vector[3]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec4} a - first vector\n * @param {vec4} b - second vector\n * @return {Boolean} true if vectors are equal\n * @alias module:modeling/maths/vec4.equals\n */\nconst equals = (a, b) => ((a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]))\n\nmodule.exports = equals\n", "/**\n * Flip the given plane.\n *\n * @param {plane} out - receiving plane\n * @param {plane} plane - plane to flip\n * @return {plane} out\n * @alias module:modeling/maths/plane.flip\n */\nconst flip = (out, plane) => {\n  out[0] = -plane[0]\n  out[1] = -plane[1]\n  out[2] = -plane[2]\n  out[3] = -plane[3]\n  return out\n}\n\nmodule.exports = flip\n", "const vec3 = require('../vec3')\n\n/**\n * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)\n * and distance from 0,0,0.\n *\n * The contents of the array are a normal [0,1,2] and a distance [3].\n * @see https://en.wikipedia.org/wiki/Hesse_normal_form\n * @typedef {Array} plane\n */\n\n/**\n * Create a new plane from the given normal and point values.\n *\n * @param {plane} out - receiving plane\n * @param {vec3} normal - directional vector\n * @param {vec3} point - origin of plane\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromNormalAndPoint\n */\nconst fromNormalAndPoint = (out, normal, point) => {\n  const u = vec3.normalize(vec3.create(), normal)\n  const w = vec3.dot(point, u)\n\n  out[0] = u[0]\n  out[1] = u[1]\n  out[2] = u[2]\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromNormalAndPoint\n", "const create = require('./create')\n\n/**\n * Creates a new vector with the given values.\n *\n * @param {Number} x - X component\n * @param {Number} y - Y component\n * @param {Number} z - Z component\n * @param {Number} w - W component\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.fromValues\n */\nconst fromValues = (x, y, z, w) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromValues\n", "const vec3 = require('../vec3')\n\n/**\n * Create a plane from the given points.\n *\n * @param {plane} out - receiving plane\n * @param {Array} vertices - points on the plane\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromPoints\n */\nconst fromPoints = (out, ...vertices) => {\n  const len = vertices.length\n\n  // Calculate normal vector for a single vertex\n  // Inline to avoid allocations\n  const ba = vec3.create()\n  const ca = vec3.create()\n  const vertexNormal = (index) => {\n    const a = vertices[index]\n    const b = vertices[(index + 1) % len]\n    const c = vertices[(index + 2) % len]\n    vec3.subtract(ba, b, a) // ba = b - a\n    vec3.subtract(ca, c, a) // ca = c - a\n    vec3.cross(ba, ba, ca) // ba = ba x ca\n    vec3.normalize(ba, ba)\n    return ba\n  }\n\n  out[0] = 0\n  out[1] = 0\n  out[2] = 0\n  if (len === 3) {\n    // optimization for triangles, which are always coplanar\n    vec3.copy(out, vertexNormal(0))\n  } else {\n    // sum of vertex normals\n    vertices.forEach((v, i) => {\n      vec3.add(out, out, vertexNormal(i))\n    })\n    // renormalize normal vector\n    vec3.normalize(out, out)\n  }\n  out[3] = vec3.dot(out, vertices[0])\n  return out\n}\n\nmodule.exports = fromPoints\n", "const { EPS } = require('../constants')\n\nconst vec3 = require('../vec3')\n\n/**\n * Create a new plane from the given points like fromPoints,\n * but allow the vectors to be on one point or one line.\n * In such a case, a random plane through the given points is constructed.\n *\n * @param {plane} out - receiving plane\n * @param {vec3} a - 3D point\n * @param {vec3} b - 3D point\n * @param {vec3} c - 3D point\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromPointsRandom\n */\nconst fromPointsRandom = (out, a, b, c) => {\n  let ba = vec3.subtract(vec3.create(), b, a)\n  let ca = vec3.subtract(vec3.create(), c, a)\n  if (vec3.length(ba) < EPS) {\n    ba = vec3.orthogonal(ba, ca)\n  }\n  if (vec3.length(ca) < EPS) {\n    ca = vec3.orthogonal(ca, ba)\n  }\n  let normal = vec3.cross(vec3.create(), ba, ca)\n  if (vec3.length(normal) < EPS) {\n    // this would mean that ba == ca.negated()\n    ca = vec3.orthogonal(ca, ba)\n    normal = vec3.cross(normal, ba, ca)\n  }\n  normal = vec3.normalize(normal, normal)\n  const w = vec3.dot(normal, a)\n\n  out[0] = normal[0]\n  out[1] = normal[1]\n  out[2] = normal[2]\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromPointsRandom\n", "const vec3 = require('../vec3')\n\n/**\n * Project the given point on to the given plane.\n *\n * @param {plane} plane - plane of reference\n * @param {vec3} point - point of reference\n * @return {vec3} projected point on plane\n * @alias module:modeling/maths/plane.projectionOfPoint\n */\nconst projectionOfPoint = (plane, point) => {\n  const a = point[0] * plane[0] + point[1] * plane[1] + point[2] * plane[2] - plane[3]\n  const x = point[0] - a * plane[0]\n  const y = point[1] - a * plane[1]\n  const z = point[2] - a * plane[2]\n  return vec3.fromValues(x, y, z)\n}\n\nmodule.exports = projectionOfPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Calculate the distance to the given point.\n *\n * @param {plane} plane - plane of reference\n * @param {vec3} point - point of reference\n * @return {Number} signed distance to point\n * @alias module:modeling/maths/plane.signedDistanceToPoint\n */\nconst signedDistanceToPoint = (plane, point) => vec3.dot(plane, point) - plane[3]\n\nmodule.exports = signedDistanceToPoint\n", "/**\n * Convert the given vector to a representative string.\n *\n * @param {vec4} vec - vector to convert\n * @returns {String} representative string\n * @alias module:modeling/maths/vec4.toString\n */\nconst toString = (vec) => `(${vec[0].toFixed(9)}, ${vec[1].toFixed(9)}, ${vec[2].toFixed(9)}, ${vec[3].toFixed(9)})`\n\nmodule.exports = toString\n", "const mat4 = require('../mat4')\nconst vec3 = require('../vec3')\n\nconst fromPoints = require('./fromPoints')\nconst flip = require('./flip')\n\n/**\n * Transform the given plane using the given matrix\n *\n * @param {plane} out - receiving plane\n * @param {plane} plane - plane to transform\n * @param {mat4} matrix - matrix to transform with\n * @return {plane} out\n * @alias module:modeling/maths/plane.transform\n */\nconst transform = (out, plane, matrix) => {\n  const ismirror = mat4.isMirroring(matrix)\n  // get two vectors in the plane:\n  const r = vec3.orthogonal(vec3.create(), plane)\n  const u = vec3.cross(r, plane, r)\n  const v = vec3.cross(vec3.create(), plane, u)\n  // get 3 points in the plane:\n  let point1 = vec3.fromScalar(vec3.create(), plane[3])\n  vec3.multiply(point1, point1, plane)\n  let point2 = vec3.add(vec3.create(), point1, u)\n  let point3 = vec3.add(vec3.create(), point1, v)\n  // transform the points:\n  point1 = vec3.transform(point1, point1, matrix)\n  point2 = vec3.transform(point2, point2, matrix)\n  point3 = vec3.transform(point3, point3, matrix)\n  // and create a new plane from the transformed points:\n  fromPoints(out, point1, point2, point3)\n  if (ismirror) {\n    // the transform is mirroring so flip the plane\n    flip(out, out)\n  }\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)\n * and distance from 0,0,0.\n * @see {@link plane} for data structure information.\n * @module modeling/maths/plane\n */\nmodule.exports = {\n  /**\n   * @see [vec4.clone()]{@link module:modeling/maths/vec4.clone}\n   * @function clone\n   */\n  clone: require('../vec4/clone'),\n  /**\n   * @see [vec4.copy()]{@link module:modeling/maths/vec4.copy}\n   * @function copy\n   */\n  copy: require('../vec4/copy'),\n  /**\n   * @see [vec4.create()]{@link module:modeling/maths/vec4.create}\n   * @function create\n   */\n  create: require('../vec4/create'),\n  /**\n   * @see [vec4.equals()]{@link module:modeling/maths/vec4.equals}\n   * @function equals\n   */\n  equals: require('../vec4/equals'),\n  flip: require('./flip'),\n  fromNormalAndPoint: require('./fromNormalAndPoint'),\n  /**\n   * @see [vec4.fromValues()]{@link module:modeling/maths/vec4.fromValues}\n   * @function fromValues\n   */\n  fromValues: require('../vec4/fromValues'),\n  fromPoints: require('./fromPoints'),\n  fromPointsRandom: require('./fromPointsRandom'),\n  projectionOfPoint: require('./projectionOfPoint'),\n  signedDistanceToPoint: require('./signedDistanceToPoint'),\n  /**\n   * @see [vec4.toString()]{@link module:modeling/maths/vec4.toString}\n   * @function toString\n   */\n  toString: require('../vec4/toString'),\n  transform: require('./transform')\n}\n", "const plane = require('../../maths/plane')\nconst create = require('./create')\n\n/**\n * Invert the give polygon to face the opposite direction.\n *\n * @param {poly3} polygon - the polygon to invert\n * @returns {poly3} a new poly3\n * @alias module:modeling/geometries/poly3.invert\n */\nconst invert = (polygon) => {\n  const vertices = polygon.vertices.slice().reverse()\n  const inverted = create(vertices)\n  if (polygon.plane) {\n    // Flip existing plane to save recompute\n    inverted.plane = plane.flip(plane.create(), polygon.plane)\n  }\n  return inverted\n}\n\nmodule.exports = invert\n", "/**\n * Determine if the given object is a polygon.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a poly3\n * @alias module:modeling/geometries/poly3.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('vertices' in object) {\n      if (Array.isArray(object.vertices)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const plane = require('../../maths/plane')\nconst vec3 = require('../../maths/vec3')\n\n/**\n * Check whether the given polygon is convex.\n * @param {poly3} polygon - the polygon to interrogate\n * @returns {Boolean} true if convex\n * @alias module:modeling/geometries/poly3.isConvex\n */\nconst isConvex = (polygon) => areVerticesConvex(polygon.vertices)\n\nconst areVerticesConvex = (vertices) => {\n  const numvertices = vertices.length\n  if (numvertices > 2) {\n    // note: plane ~= normal point\n    const normal = plane.fromPoints(plane.create(), ...vertices)\n    let prevprevpos = vertices[numvertices - 2]\n    let prevpos = vertices[numvertices - 1]\n    for (let i = 0; i < numvertices; i++) {\n      const pos = vertices[i]\n      if (!isConvexPoint(prevprevpos, prevpos, pos, normal)) {\n        return false\n      }\n      prevprevpos = prevpos\n      prevpos = pos\n    }\n  }\n  return true\n}\n\n// calculate whether three points form a convex corner\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\n//  normal: the normal vector of the plane\nconst isConvexPoint = (prevpoint, point, nextpoint, normal) => {\n  const crossproduct = vec3.cross(\n    vec3.create(),\n    vec3.subtract(vec3.create(), point, prevpoint),\n    vec3.subtract(vec3.create(), nextpoint, point)\n  )\n  const crossdotnormal = vec3.dot(crossproduct, normal)\n  return crossdotnormal >= 0\n}\n\nmodule.exports = isConvex\n", "const mplane = require('../../maths/plane/')\n\nconst plane = (polygon) => {\n  if (!polygon.plane) {\n    polygon.plane = mplane.fromPoints(mplane.create(), ...polygon.vertices)\n  }\n  return polygon.plane\n}\n\nmodule.exports = plane\n", "const plane = require('./plane')\n\n/**\n * Measure the area of the given polygon.\n * @see 2000 softSurfer http://geomalgorithms.com\n * @param {poly3} polygon - the polygon to measure\n * @return {Number} area of the polygon\n * @alias module:modeling/geometries/poly3.measureArea\n */\nconst measureArea = (polygon) => {\n  const n = polygon.vertices.length\n  if (n < 3) {\n    return 0 // degenerate polygon\n  }\n  const vertices = polygon.vertices\n\n  // calculate a normal vector\n  const normal = plane(polygon)\n\n  // determine direction of projection\n  const ax = Math.abs(normal[0])\n  const ay = Math.abs(normal[1])\n  const az = Math.abs(normal[2])\n\n  if (ax + ay + az === 0) {\n    // normal does not exist\n    return 0\n  }\n\n  let coord = 3 // ignore Z coordinates\n  if ((ax > ay) && (ax > az)) {\n    coord = 1 // ignore X coordinates\n  } else\n  if (ay > az) {\n    coord = 2 // ignore Y coordinates\n  }\n\n  let area = 0\n  let h = 0\n  let i = 1\n  let j = 2\n  switch (coord) {\n    case 1: // ignore X coordinates\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]))\n      }\n      area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]))\n      // scale to get area\n      area /= (2 * normal[0])\n      break\n\n    case 2: // ignore Y coordinates\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]))\n      }\n      area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]))\n      // scale to get area\n      area /= (2 * normal[1])\n      break\n\n    case 3: // ignore Z coordinates\n    default:\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]))\n      }\n      area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]))\n      // scale to get area\n      area /= (2 * normal[2])\n      break\n  }\n  return area\n}\n\nmodule.exports = measureArea\n", "const vec3 = require('../../maths/vec3')\n\n/**\n * @param {poly3} polygon - the polygon to measure\n * @returns {Array} an array of two vectors (3D);  minimum and maximum coordinates\n * @alias module:modeling/geometries/poly3.measureBoundingBox\n */\nconst measureBoundingBox = (polygon) => {\n  const vertices = polygon.vertices\n  const numvertices = vertices.length\n  const min = numvertices === 0 ? vec3.create() : vec3.clone(vertices[0])\n  const max = vec3.clone(min)\n  for (let i = 1; i < numvertices; i++) {\n    vec3.min(min, min, vertices[i])\n    vec3.max(max, max, vertices[i])\n  }\n  return [min, max]\n}\n\nmodule.exports = measureBoundingBox\n", "/**\n * Calculates the dot product of the given vectors.\n *\n * @param {vec4} a - first vector\n * @param {vec4} b - second vector\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec4.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]\n\nmodule.exports = dot\n", "/**\n * Create a new vector from the given scalar value.\n *\n * @param {vec4} out - receiving vector\n * @param  {Number} scalar\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  out[2] = scalar\n  out[3] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "/**\n * Transform the given vector using the given matrix.\n *\n * @param {vec4} out - receiving vector\n * @param {vec4} vector - vector to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.transform\n */\nconst transform = (out, vector, matrix) => {\n  const [x, y, z, w] = vector\n\n  out[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12] * w\n  out[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13] * w\n  out[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14] * w\n  out[3] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15] * w\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a four dimensional vector.\n * @see {@link vec4} for data structure information.\n * @module modeling/maths/vec4\n */\nmodule.exports = {\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec4 = require('../../maths/vec4')\n\nconst cache = new WeakMap()\n\n/**\n * Measure the bounding sphere of the given polygon.\n * @param {poly3} polygon - the polygon to measure\n * @returns {vec4} the computed bounding sphere; center point (3D) and radius\n * @alias module:modeling/geometries/poly3.measureBoundingSphere\n */\nconst measureBoundingSphere = (polygon) => {\n  const boundingSphere = cache.get(polygon)\n  if (boundingSphere) return boundingSphere\n\n  const vertices = polygon.vertices\n  const out = vec4.create()\n\n  if (vertices.length === 0) {\n    out[0] = 0\n    out[1] = 0\n    out[2] = 0\n    out[3] = 0\n    return out\n  }\n\n  // keep a list of min/max vertices by axis\n  let minx = vertices[0]\n  let miny = minx\n  let minz = minx\n  let maxx = minx\n  let maxy = minx\n  let maxz = minx\n\n  vertices.forEach((v) => {\n    if (minx[0] > v[0]) minx = v\n    if (miny[1] > v[1]) miny = v\n    if (minz[2] > v[2]) minz = v\n    if (maxx[0] < v[0]) maxx = v\n    if (maxy[1] < v[1]) maxy = v\n    if (maxz[2] < v[2]) maxz = v\n  })\n\n  out[0] = (minx[0] + maxx[0]) * 0.5 // center of sphere\n  out[1] = (miny[1] + maxy[1]) * 0.5\n  out[2] = (minz[2] + maxz[2]) * 0.5\n  const x = out[0] - maxx[0]\n  const y = out[1] - maxy[1]\n  const z = out[2] - maxz[2]\n  out[3] = Math.sqrt(x * x + y * y + z * z) // radius of sphere\n\n  cache.set(polygon, out)\n\n  return out\n}\n\nmodule.exports = measureBoundingSphere\n", "const vec3 = require('../../maths/vec3')\n\n/**\n * Measure the signed volume of the given polygon, which must be convex.\n * The volume is that formed by the tetrahedron connected to the axis [0,0,0],\n * and will be positive or negative based on the rotation of the vertices.\n * @see http://chenlab.ece.cornell.edu/Publication/Cha/icip01_Cha.pdf\n * @param {poly3} polygon - the polygon to measure\n * @return {Number} volume of the polygon\n * @alias module:modeling/geometries/poly3.measureSignedVolume\n */\nconst measureSignedVolume = (polygon) => {\n  let signedVolume = 0\n  const vertices = polygon.vertices\n  // calculate based on triangular polygons\n  const cross = vec3.create()\n  for (let i = 0; i < vertices.length - 2; i++) {\n    vec3.cross(cross, vertices[i + 1], vertices[i + 2])\n    signedVolume += vec3.dot(vertices[0], cross)\n  }\n  signedVolume /= 6\n  return signedVolume\n}\n\nmodule.exports = measureSignedVolume\n", "/**\n * Return the given polygon as a list of points.\n * NOTE: The returned array should not be modified as the points are shared with the geometry.\n * @param {poly3} polygon - the polygon\n * @return {Array} list of points (3D)\n * @alias module:modeling/geometries/poly3.toPoints\n */\nconst toPoints = (polygon) => polygon.vertices\n\nmodule.exports = toPoints\n", "const vec3 = require('../../maths/vec3/')\n\n/**\n * @param {poly3} polygon - the polygon to measure\n * @return {String} the string representation\n * @alias module:modeling/geometries/poly3.toString\n */\nconst toString = (polygon) => {\n  let result = 'poly3: vertices: ['\n  polygon.vertices.forEach((vertex) => {\n    result += `${vec3.toString(vertex)}, `\n  })\n  result += ']'\n  return result\n}\n\nmodule.exports = toString\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Transform the given polygon using the given matrix.\n * @param {mat4} matrix - the matrix to transform with\n * @param {poly3} polygon - the polygon to transform\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.transform\n */\nconst transform = (matrix, polygon) => {\n  const vertices = polygon.vertices.map((vertex) => vec3.transform(vec3.create(), vertex, matrix))\n  if (mat4.isMirroring(matrix)) {\n    // reverse the order to preserve the orientation\n    vertices.reverse()\n  }\n  return create(vertices)\n}\n\nmodule.exports = transform\n", "const signedDistanceToPoint = require('../../maths/plane/signedDistanceToPoint')\nconst { NEPS } = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\nconst isA = require('./isA')\nconst isConvex = require('./isConvex')\nconst measureArea = require('./measureArea')\nconst plane = require('./plane')\n\n/**\n * Determine if the given object is a valid polygon.\n * Checks for valid data structure, convex polygons, and duplicate points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/poly3.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid poly3 structure')\n  }\n\n  // check for empty polygon\n  if (object.vertices.length < 3) {\n    throw new Error(`poly3 not enough vertices ${object.vertices.length}`)\n  }\n  // check area\n  if (measureArea(object) <= 0) {\n    throw new Error('poly3 area must be greater than zero')\n  }\n\n  // check for duplicate points\n  for (let i = 0; i < object.vertices.length; i++) {\n    if (vec3.equals(object.vertices[i], object.vertices[(i + 1) % object.vertices.length])) {\n      throw new Error(`poly3 duplicate vertex ${object.vertices[i]}`)\n    }\n  }\n\n  // check convexity\n  if (!isConvex(object)) {\n    throw new Error('poly3 must be convex')\n  }\n\n  // check for infinity, nan\n  object.vertices.forEach((vertex) => {\n    if (!vertex.every(Number.isFinite)) {\n      throw new Error(`poly3 invalid vertex ${vertex}`)\n    }\n  })\n\n  // check that points are co-planar\n  if (object.vertices.length > 3) {\n    const normal = plane(object)\n    object.vertices.forEach((vertex) => {\n      const dist = Math.abs(signedDistanceToPoint(normal, vertex))\n      if (dist > NEPS) {\n        throw new Error(`poly3 must be coplanar: vertex ${vertex} distance ${dist}`)\n      }\n    })\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a convex 3D polygon consisting of a list of ordered vertices.\n * @see {@link poly3} for data structure information.\n * @module modeling/geometries/poly3\n *\n * @example\n * poly3.create([[0,0,0], [4,0,0], [4,3,12]])\n *\n * @example\n * {\"vertices\": [[0,0,0], [4,0,0], [4,3,12]]}\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromPointsAndPlane: require('./fromPointsAndPlane'),\n  invert: require('./invert'),\n  isA: require('./isA'),\n  isConvex: require('./isConvex'),\n  measureArea: require('./measureArea'),\n  measureBoundingBox: require('./measureBoundingBox'),\n  measureBoundingSphere: require('./measureBoundingSphere'),\n  measureSignedVolume: require('./measureSignedVolume'),\n  plane: require('./plane'),\n  toPoints: require('./toPoints'),\n  toString: require('./toString'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "const poly3 = require('../poly3')\n\nconst create = require('./create')\n\n/**\n * Construct a new 3D geometry from a list of points.\n * The list of points should contain sub-arrays, each defining a single polygon of points.\n * In addition, the points should follow the right-hand rule for rotation in order to\n * define an external facing polygon.\n * @param {Array} listofpoints - list of lists, where each list is a set of points to construct a polygon\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.fromPoints\n */\nconst fromPoints = (listofpoints) => {\n  if (!Array.isArray(listofpoints)) {\n    throw new Error('the given points must be an array')\n  }\n\n  const polygons = listofpoints.map((points, index) => {\n    // TODO catch the error, and rethrow with index\n    const polygon = poly3.create(points)\n    return polygon\n  })\n  const result = create(polygons)\n  return result\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../../maths/vec3')\nconst mat4 = require('../../maths/mat4')\n\nconst poly3 = require('../poly3')\n\nconst create = require('./create')\n\n/**\n * Construct a new 3D geometry from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 1) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  const numberOfVertices = data[21]\n  let ci = 22\n  let vi = data.length - (numberOfVertices * 3)\n  while (vi < data.length) {\n    const verticesPerPolygon = data[ci]\n    ci++\n\n    const vertices = []\n    for (let i = 0; i < verticesPerPolygon; i++) {\n      vertices.push(vec3.fromValues(data[vi], data[vi + 1], data[vi + 2]))\n      vi += 3\n    }\n    created.polygons.push(poly3.create(vertices))\n  }\n\n  // transfer known properties, i.e. color\n  if (data[17] >= 0) {\n    created.color = [data[17], data[18], data[19], data[20]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\nconst poly3 = require('../poly3')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toPolygons.\n * @param {geom3} geometry - the geometry to transform\n * @returns {geom3} the given geometry\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  // apply transforms to each polygon\n  geometry.polygons = geometry.polygons.map((polygon) => poly3.transform(geometry.transforms, polygon))\n  // reset transforms\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of polygons from the given geometry, after applying transforms.\n * The returned array should not be modified as the polygons are shared with the geometry.\n * @param {geom3} geometry - the geometry\n * @returns {Array} an array of polygons\n * @alias module:modeling/geometries/geom3.toPolygons\n *\n * @example\n * let sharedpolygons = toPolygons(geometry)\n */\nconst toPolygons = (geometry) => applyTransforms(geometry).polygons\n\nmodule.exports = toPolygons\n", "const poly3 = require('../poly3')\n\nconst create = require('./create')\nconst toPolygons = require('./toPolygons')\n\n/**\n * Invert the given geometry, transposing solid and empty space.\n * @param {geom3} geometry - the geometry to invert\n * @return {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.invert\n */\nconst invert = (geometry) => {\n  const polygons = toPolygons(geometry)\n  const newpolygons = polygons.map((polygon) => poly3.invert(polygon))\n  return create(newpolygons)\n}\n\nmodule.exports = invert\n", "/**\n * Determine if the given object is a 3D geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a geom3\n * @alias module:modeling/geometries/geom3.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('polygons' in object && 'transforms' in object) {\n      if (Array.isArray(object.polygons) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const poly3 = require('../poly3')\n\nconst toPolygons = require('./toPolygons')\n\n/**\n * Return the given geometry as a list of points, after applying transforms.\n * The returned array should not be modified as the points are shared with the geometry.\n * @param {geom3} geometry - the geometry\n * @return {Array} list of points, where each sub-array represents a polygon\n * @alias module:modeling/geometries/geom3.toPoints\n */\nconst toPoints = (geometry) => {\n  const polygons = toPolygons(geometry)\n  const listofpoints = polygons.map((polygon) => poly3.toPoints(polygon))\n  return listofpoints\n}\n\nmodule.exports = toPoints\n", "const poly3 = require('../poly3')\n\nconst toPolygons = require('./toPolygons')\n\n/**\n * Create a string representing the contents of the given geometry.\n * @param {geom3} geometry - the geometry\n * @returns {String} a representative string\n * @alias module:modeling/geometries/geom3.toString\n *\n * @example\n * console.out(toString(geometry))\n */\nconst toString = (geometry) => {\n  const polygons = toPolygons(geometry)\n  let result = 'geom3 (' + polygons.length + ' polygons):\\n'\n  polygons.forEach((polygon) => {\n    result += '  ' + poly3.toString(polygon) + '\\n'\n  })\n  return result\n}\n\nmodule.exports = toString\n", "const poly3 = require('../poly3')\n\n/**\n * Return the given geometry in compact binary representation.\n * @param {geom3} geometry - the geometry\n * @return {TypedArray} compact binary representation\n * @alias module:modeling/geometries/geom3.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const polygons = geometry.polygons\n  const transforms = geometry.transforms\n\n  const numberOfPolygons = polygons.length\n  const numberOfVertices = polygons.reduce((count, polygon) => count + polygon.vertices.length, 0)\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 4 + 1 + numberOfPolygons + (numberOfVertices * 3))\n  // type + transforms + color + numberOfPolygons + numberOfVerticesPerPolygon[] + vertices data[]\n\n  compacted[0] = 1 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = color[0]\n  compacted[18] = color[1]\n  compacted[19] = color[2]\n  compacted[20] = color[3]\n\n  compacted[21] = numberOfVertices\n\n  let ci = 22\n  let vi = ci + numberOfPolygons\n  polygons.forEach((polygon) => {\n    const points = poly3.toPoints(polygon)\n    // record the number of vertices per polygon\n    compacted[ci] = points.length\n    ci++\n    // convert the vertices\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i]\n      compacted[vi + 0] = point[0]\n      compacted[vi + 1] = point[1]\n      compacted[vi + 2] = point[2]\n      vi += 3\n    }\n  })\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the polygons, as this function only adjusts the transforms.\n * See applyTransforms() for the actual application of the transforms to the polygons.\n * @param {mat4} matrix - the matrix to transform with\n * @param {geom3} geometry - the geometry to transform\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.transform\n *\n * @example\n * let newgeometry = transform(fromXRotation(degToRad(90)), geometry)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const poly3 = require('../poly3')\nconst isA = require('./isA')\n\n/**\n * Determine if the given object is a valid 3D geometry.\n * Checks for valid data structure, convex polygon faces, and manifold edges.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/geom3.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid geom3 structure')\n  }\n\n  // check polygons\n  object.polygons.forEach(poly3.validate)\n  validateManifold(object)\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`geom3 invalid transforms ${object.transforms}`)\n  }\n\n  // TODO: check for self-intersecting\n}\n\n/*\n * Check manifold edge condition: Every edge is in exactly 2 faces\n */\nconst validateManifold = (object) => {\n  // count of each edge\n  const edgeCount = new Map()\n  object.polygons.forEach(({ vertices }) => {\n    vertices.forEach((v, i) => {\n      const v1 = `${v}`\n      const v2 = `${vertices[(i + 1) % vertices.length]}`\n      // sort for undirected edge\n      const edge = `${v1}/${v2}`\n      const count = edgeCount.has(edge) ? edgeCount.get(edge) : 0\n      edgeCount.set(edge, count + 1)\n    })\n  })\n\n  // check that edges are always matched\n  const nonManifold = []\n  edgeCount.forEach((count, edge) => {\n    const complementEdge = edge.split('/').reverse().join('/')\n    const complementCount = edgeCount.get(complementEdge)\n    if (count !== complementCount) {\n      nonManifold.push(edge.replace('/', ' -> '))\n    }\n  })\n  if (nonManifold.length > 0) {\n    throw new Error(`non-manifold edges ${nonManifold.length}\\n${nonManifold.join('\\n')}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 3D geometry consisting of a list of polygons.\n * @see {@link geom3} for data structure information.\n * @module modeling/geometries/geom3\n *\n * @example\n * colorize([0,0.5,1,0.6], cube()) // transparent ice cube\n *\n * @example\n * {\n *   \"polygons\": [\n *     {\"vertices\": [[-1,-1,-1], [-1,-1,1], [-1,1,1], [-1,1,-1]]},\n *     {\"vertices\": [[1,-1,-1], [1,1,-1], [1,1,1], [1,-1,1]]},\n *     {\"vertices\": [[-1,-1,-1], [1,-1,-1], [1,-1,1], [-1,-1,1]]},\n *     {\"vertices\": [[-1,1,-1], [-1,1,1], [1,1,1], [1,1,-1]]},\n *     {\"vertices\": [[-1,-1,-1], [-1,1,-1], [1,1,-1], [1,-1,-1]]},\n *     {\"vertices\": [[-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]]}\n *   ],\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0,0.5,1,0.6]\n * }\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  invert: require('./invert'),\n  isA: require('./isA'),\n  toPoints: require('./toPoints'),\n  toPolygons: require('./toPolygons'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "/**\n * Performs a shallow clone of the give geometry.\n * @param {path2} geometry - the geometry to clone\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "const { EPS } = require('../../maths/constants')\n\nconst vec2 = require('../../maths/vec2')\n\nconst clone = require('./clone')\n\n/**\n * Close the given geometry.\n * @param {path2} geometry - the path to close\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.close\n */\nconst close = (geometry) => {\n  if (geometry.isClosed) return geometry\n\n  const cloned = clone(geometry)\n  cloned.isClosed = true\n\n  if (cloned.points.length > 1) {\n    // make sure the paths are formed properly\n    const points = cloned.points\n    const p0 = points[0]\n    let pn = points[points.length - 1]\n    while (vec2.distance(p0, pn) < (EPS * EPS)) {\n      points.pop()\n      if (points.length === 1) break\n      pn = points[points.length - 1]\n    }\n  }\n  return cloned\n}\n\nmodule.exports = close\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 2D geometry consisting of a list of ordered points.\n * @typedef {Object} path2\n * @property {Array} points - list of ordered points\n * @property {Boolean} isClosed - true if the path is closed where start and end points are the same\n * @property {mat4} transforms - transforms to apply to the points, see transform()\n */\n\n/**\n * Create an empty, open path.\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.create\n *\n * @example\n * let newpath = create()\n */\nconst create = (points) => {\n  if (points === undefined) {\n    points = []\n  }\n  return {\n    points: points,\n    isClosed: false,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "const { EPS } = require('../../maths/constants')\n\nconst vec2 = require('../../maths/vec2')\n\nconst close = require('./close')\nconst create = require('./create')\n\n/**\n * Create a new path from the given points.\n * The points must be provided an array of points,\n * where each point is an array of two numbers.\n * @param {Object} options - options for construction\n * @param {Boolean} [options.closed=false] - if the path should be open or closed\n * @param {Array} points - array of points (2D) from which to create the path\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromPoints\n *\n * @example:\n * my newpath = fromPoints({closed: true}, [[10, 10], [-10, 10]])\n */\nconst fromPoints = (options, points) => {\n  const defaults = { closed: false }\n  let { closed } = Object.assign({}, defaults, options)\n\n  let created = create()\n  created.points = points.map((point) => vec2.clone(point))\n\n  // check if first and last points are equal\n  if (created.points.length > 1) {\n    const p0 = created.points[0]\n    const pn = created.points[created.points.length - 1]\n    if (vec2.distance(p0, pn) < (EPS * EPS)) {\n      // and close automatically\n      closed = true\n    }\n  }\n  if (closed === true) created = close(created)\n\n  return created\n}\n\nmodule.exports = fromPoints\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toPoints.\n * @param {path} geometry - the geometry to transform\n * @returns {path} the given geometry\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  geometry.points = geometry.points.map((point) => vec2.transform(vec2.create(), point, geometry.transforms))\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of points from the given geometry.\n * The returned array should not be modified as the data is shared with the geometry.\n * @param {path2} geometry - the geometry\n * @returns {Array} an array of points\n * @alias module:modeling/geometries/path2.toPoints\n *\n * @example\n * let sharedpoints = toPoints(geometry)\n */\nconst toPoints = (geometry) => applyTransforms(geometry).points\n\nmodule.exports = toPoints\n", "const { TAU } = require('../../maths/constants')\nconst vec2 = require('../../maths/vec2')\n\nconst fromPoints = require('./fromPoints')\nconst toPoints = require('./toPoints')\n\n/**\n * Append a series of points to the given geometry that represent an arc.\n * This implementation follows the SVG specifications.\n * @see http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n * @param {Object} options - options for construction\n * @param {vec2} options.endpoint - end point of arc (REQUIRED)\n * @param {vec2} [options.radius=[0,0]] - radius of arc (X and Y)\n * @param {Number} [options.xaxisrotation=0] - rotation (RADIANS) of the X axis of the arc with respect to the X axis of the coordinate system\n * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\n * @param {Boolean} [options.large=false] - draw an arc longer than TAU / 2 radians\n * @param {Number} [options.segments=16] - number of segments per full rotation\n * @param {path2} geometry - the path of which to append the arc\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendArc\n *\n * @example\n * let p1 = path2.fromPoints({}, [[27.5,-22.96875]]);\n * p1 = path2.appendPoints([[27.5,-3.28125]], p1);\n * p1 = path2.appendArc({endpoint: [12.5, -22.96875], radius: [15, -19.6875]}, p1);\n */\nconst appendArc = (options, geometry) => {\n  const defaults = {\n    radius: [0, 0], // X and Y radius\n    xaxisrotation: 0,\n    clockwise: false,\n    large: false,\n    segments: 16\n  }\n  let { endpoint, radius, xaxisrotation, clockwise, large, segments } = Object.assign({}, defaults, options)\n\n  // validate the given options\n  if (!Array.isArray(endpoint)) throw new Error('endpoint must be an array of X and Y values')\n  if (endpoint.length < 2) throw new Error('endpoint must contain X and Y values')\n  endpoint = vec2.clone(endpoint)\n\n  if (!Array.isArray(radius)) throw new Error('radius must be an array of X and Y values')\n  if (radius.length < 2) throw new Error('radius must contain X and Y values')\n\n  if (segments < 4) throw new Error('segments must be four or more')\n\n  const decimals = 100000\n\n  // validate the given geometry\n  if (geometry.isClosed) {\n    throw new Error('the given path cannot be closed')\n  }\n\n  const points = toPoints(geometry)\n  if (points.length < 1) {\n    throw new Error('the given path must contain one or more points (as the starting point for the arc)')\n  }\n\n  let xradius = radius[0]\n  let yradius = radius[1]\n  const startpoint = points[points.length - 1]\n\n  // round to precision in order to have determinate calculations\n  xradius = Math.round(xradius * decimals) / decimals\n  yradius = Math.round(yradius * decimals) / decimals\n  endpoint = vec2.fromValues(Math.round(endpoint[0] * decimals) / decimals, Math.round(endpoint[1] * decimals) / decimals)\n\n  const sweepFlag = !clockwise\n  let newpoints = []\n  if ((xradius === 0) || (yradius === 0)) {\n    // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\n    // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\n    newpoints.push(endpoint)\n  } else {\n    xradius = Math.abs(xradius)\n    yradius = Math.abs(yradius)\n\n    // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\n    const phi = xaxisrotation\n    const cosphi = Math.cos(phi)\n    const sinphi = Math.sin(phi)\n    const minushalfdistance = vec2.subtract(vec2.create(), startpoint, endpoint)\n    vec2.scale(minushalfdistance, minushalfdistance, 0.5)\n    // F.6.5.1:\n    // round to precision in order to have determinate calculations\n    const x = Math.round((cosphi * minushalfdistance[0] + sinphi * minushalfdistance[1]) * decimals) / decimals\n    const y = Math.round((-sinphi * minushalfdistance[0] + cosphi * minushalfdistance[1]) * decimals) / decimals\n    const startTranslated = vec2.fromValues(x, y)\n    // F.6.6.2:\n    const biglambda = (startTranslated[0] * startTranslated[0]) / (xradius * xradius) + (startTranslated[1] * startTranslated[1]) / (yradius * yradius)\n    if (biglambda > 1.0) {\n      // F.6.6.3:\n      const sqrtbiglambda = Math.sqrt(biglambda)\n      xradius *= sqrtbiglambda\n      yradius *= sqrtbiglambda\n      // round to precision in order to have determinate calculations\n      xradius = Math.round(xradius * decimals) / decimals\n      yradius = Math.round(yradius * decimals) / decimals\n    }\n    // F.6.5.2:\n    let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated[1] * startTranslated[1] - yradius * yradius * startTranslated[0] * startTranslated[0]) / (xradius * xradius * startTranslated[1] * startTranslated[1] + yradius * yradius * startTranslated[0] * startTranslated[0]))\n    if (sweepFlag === large) multiplier1 = -multiplier1\n    const centerTranslated = vec2.fromValues(xradius * startTranslated[1] / yradius, -yradius * startTranslated[0] / xradius)\n    vec2.scale(centerTranslated, centerTranslated, multiplier1)\n    // F.6.5.3:\n    let center = vec2.fromValues(cosphi * centerTranslated[0] - sinphi * centerTranslated[1], sinphi * centerTranslated[0] + cosphi * centerTranslated[1])\n    center = vec2.add(center, center, vec2.scale(vec2.create(), vec2.add(vec2.create(), startpoint, endpoint), 0.5))\n\n    // F.6.5.5:\n    const vector1 = vec2.fromValues((startTranslated[0] - centerTranslated[0]) / xradius, (startTranslated[1] - centerTranslated[1]) / yradius)\n    const vector2 = vec2.fromValues((-startTranslated[0] - centerTranslated[0]) / xradius, (-startTranslated[1] - centerTranslated[1]) / yradius)\n    const theta1 = vec2.angleRadians(vector1)\n    const theta2 = vec2.angleRadians(vector2)\n    let deltatheta = theta2 - theta1\n    deltatheta = deltatheta % TAU\n    if ((!sweepFlag) && (deltatheta > 0)) {\n      deltatheta -= TAU\n    } else if ((sweepFlag) && (deltatheta < 0)) {\n      deltatheta += TAU\n    }\n\n    // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\n    let numsteps = Math.ceil(Math.abs(deltatheta) / TAU * segments) + 1\n    if (numsteps < 1) numsteps = 1\n    for (let step = 1; step < numsteps; step++) {\n      const theta = theta1 + step / numsteps * deltatheta\n      const costheta = Math.cos(theta)\n      const sintheta = Math.sin(theta)\n      // F.6.3.1:\n      const point = vec2.fromValues(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta)\n      vec2.add(point, point, center)\n      newpoints.push(point)\n    }\n    // ensure end point is precisely what user gave as parameter\n    if (numsteps) newpoints.push(options.endpoint)\n  }\n  newpoints = points.concat(newpoints)\n  const result = fromPoints({}, newpoints)\n  return result\n}\n\nmodule.exports = appendArc\n", "const fromPoints = require('./fromPoints')\nconst toPoints = require('./toPoints')\n\nconst { equals } = require('../../maths/vec2')\n\n/**\n * Concatenate the given paths.\n *\n * If both contain the same point at the junction, merge it into one.\n * A concatenation of zero paths is an empty, open path.\n * A concatenation of one closed path to a series of open paths produces a closed path.\n * A concatenation of a path to a closed path is an error.\n * @param {...path2} paths - the paths to concatenate\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.concat\n *\n * @example\n * let newpath = concat(fromPoints({}, [[1, 2]]), fromPoints({}, [[3, 4]]))\n */\nconst concat = (...paths) => {\n  // Only the last path can be closed, producing a closed path.\n  let isClosed = false\n  let newpoints = []\n  paths.forEach((path, i) => {\n    const tmp = toPoints(path).slice()\n    if (newpoints.length > 0 && tmp.length > 0 && equals(tmp[0], newpoints[newpoints.length - 1])) tmp.shift()\n    if (tmp.length > 0 && isClosed) {\n      throw new Error(`Cannot concatenate to a closed path; check the ${i}th path`)\n    }\n    isClosed = path.isClosed\n    newpoints = newpoints.concat(tmp)\n  })\n  return fromPoints({ closed: isClosed }, newpoints)\n}\n\nmodule.exports = concat\n", "const concat = require('./concat')\nconst create = require('./create')\n\n/**\n * Append the given list of points to the end of the given geometry.\n * @param {Array} points - the points (2D) to append to the given path\n * @param {path2} geometry - the given path\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendPoints\n * @example\n * let newpath = appendPoints([[3, 4], [4, 5]], oldpath)\n */\nconst appendPoints = (points, geometry) => concat(geometry, create(points))\n\nmodule.exports = appendPoints\n", "const { TAU } = require('../../maths/constants')\nconst vec2 = require('../../maths/vec2')\nconst vec3 = require('../../maths/vec2')\n\nconst appendPoints = require('./appendPoints')\nconst toPoints = require('./toPoints')\n\n/**\n * Append a series of points to the given geometry that represent a Bezier curve.\n * The Bézier curve starts at the last point in the given geometry, and ends at the last control point.\n * The other control points are intermediate control points to transition the curve from start to end points.\n * The first control point may be null to ensure a smooth transition occurs. In this case,\n * the second to last point of the given geometry is mirrored into the control points of the Bezier curve.\n * In other words, the trailing gradient of the geometry matches the new gradient of the curve.\n * @param {Object} options - options for construction\n * @param {Array} options.controlPoints - list of control points (2D) for the bezier curve\n * @param {Number} [options.segment=16] - number of segments per 360 rotation\n * @param {path2} geometry - the path of which to appended points\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendBezier\n *\n * @example\n * let p5 = path2.create({}, [[10,-20]])\n * p5 = path2.appendBezier({controlPoints: [[10,-10],[25,-10],[25,-20]]}, p5);\n * p5 = path2.appendBezier({controlPoints: [null, [25,-30],[40,-30],[40,-20]]}, p5)\n */\nconst appendBezier = (options, geometry) => {\n  const defaults = {\n    segments: 16\n  }\n  let { controlPoints, segments } = Object.assign({}, defaults, options)\n\n  // validate the given options\n  if (!Array.isArray(controlPoints)) throw new Error('controlPoints must be an array of one or more points')\n  if (controlPoints.length < 1) throw new Error('controlPoints must be an array of one or more points')\n\n  if (segments < 4) throw new Error('segments must be four or more')\n\n  // validate the given geometry\n  if (geometry.isClosed) {\n    throw new Error('the given geometry cannot be closed')\n  }\n\n  const points = toPoints(geometry)\n  if (points.length < 1) {\n    throw new Error('the given path must contain one or more points (as the starting point for the bezier curve)')\n  }\n\n  // make a copy of the control points\n  controlPoints = controlPoints.slice()\n\n  // special handling of null control point (only first is allowed)\n  const firstControlPoint = controlPoints[0]\n  if (firstControlPoint === null) {\n    if (controlPoints.length < 2) {\n      throw new Error('a null control point must be passed with one more control points')\n    }\n    // special handling of a previous bezier curve\n    let lastBezierControlPoint = points[points.length - 2]\n    if ('lastBezierControlPoint' in geometry) {\n      lastBezierControlPoint = geometry.lastBezierControlPoint\n    }\n    if (!Array.isArray(lastBezierControlPoint)) {\n      throw new Error('the given path must contain TWO or more points if given a null control point')\n    }\n    // replace the first control point with the mirror of the last bezier control point\n    const controlpoint = vec2.scale(vec2.create(), points[points.length - 1], 2)\n    vec2.subtract(controlpoint, controlpoint, lastBezierControlPoint)\n\n    controlPoints[0] = controlpoint\n  }\n\n  // add a control point for the previous end point\n  controlPoints.unshift(points[points.length - 1])\n\n  const bezierOrder = controlPoints.length - 1\n  const factorials = []\n  let fact = 1\n  for (let i = 0; i <= bezierOrder; ++i) {\n    if (i > 0) fact *= i\n    factorials.push(fact)\n  }\n\n  const binomials = []\n  for (let i = 0; i <= bezierOrder; ++i) {\n    const binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])\n    binomials.push(binomial)\n  }\n\n  const v0 = vec2.create()\n  const v1 = vec2.create()\n  const v3 = vec3.create()\n  const getPointForT = (t) => {\n    let tk = 1 // = pow(t,k)\n    let oneMinusTNMinusK = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)\n    const invOneMinusT = (t !== 1) ? (1 / (1 - t)) : 1\n    const point = vec2.create() // 0, 0, 0\n    for (let k = 0; k <= bezierOrder; ++k) {\n      if (k === bezierOrder) oneMinusTNMinusK = 1\n      const bernsteinCoefficient = binomials[k] * tk * oneMinusTNMinusK\n      const derivativePoint = vec2.scale(v0, controlPoints[k], bernsteinCoefficient)\n      vec2.add(point, point, derivativePoint)\n      tk *= t\n      oneMinusTNMinusK *= invOneMinusT\n    }\n    return point\n  }\n\n  const newpoints = []\n  const newpointsT = []\n  const numsteps = bezierOrder + 1\n  for (let i = 0; i < numsteps; ++i) {\n    const t = i / (numsteps - 1)\n    const point = getPointForT(t)\n    newpoints.push(point)\n    newpointsT.push(t)\n  }\n\n  // subdivide each segment until the angle at each vertex becomes small enough:\n  let subdivideBase = 1\n  const maxangle = TAU / segments\n  const maxsinangle = Math.sin(maxangle)\n  while (subdivideBase < newpoints.length - 1) {\n    const dir1 = vec2.subtract(v0, newpoints[subdivideBase], newpoints[subdivideBase - 1])\n    vec2.normalize(dir1, dir1)\n    const dir2 = vec2.subtract(v1, newpoints[subdivideBase + 1], newpoints[subdivideBase])\n    vec2.normalize(dir2, dir2)\n    const sinangle = vec2.cross(v3, dir1, dir2) // the sine of the angle\n    if (Math.abs(sinangle[2]) > maxsinangle) {\n      // angle is too big, we need to subdivide\n      const t0 = newpointsT[subdivideBase - 1]\n      const t1 = newpointsT[subdivideBase + 1]\n      const newt0 = t0 + (t1 - t0) * 1 / 3\n      const newt1 = t0 + (t1 - t0) * 2 / 3\n      const point0 = getPointForT(newt0)\n      const point1 = getPointForT(newt1)\n      // remove the point at subdivideBase and replace with 2 new points:\n      newpoints.splice(subdivideBase, 1, point0, point1)\n      newpointsT.splice(subdivideBase, 1, newt0, newt1)\n      // re - evaluate the angles, starting at the previous junction since it has changed:\n      subdivideBase--\n      if (subdivideBase < 1) subdivideBase = 1\n    } else {\n      ++subdivideBase\n    }\n  }\n\n  // append to the new points to the given path\n  // but skip the first new point because it is identical to the last point in the given path\n  newpoints.shift()\n  const result = appendPoints(newpoints, geometry)\n  result.lastBezierControlPoint = controlPoints[controlPoints.length - 2]\n  return result\n}\n\nmodule.exports = appendBezier\n", "const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n  * Determine if the given paths are equal.\n  * For closed paths, this includes equality under point order rotation.\n  * @param {path2} a - the first path to compare\n  * @param {path2} b - the second path to compare\n  * @returns {Boolean}\n  * @alias module:modeling/geometries/path2.equals\n  */\nconst equals = (a, b) => {\n  if (a.isClosed !== b.isClosed) {\n    return false\n  }\n  if (a.points.length !== b.points.length) {\n    return false\n  }\n\n  const apoints = toPoints(a)\n  const bpoints = toPoints(b)\n\n  // closed paths might be equal under graph rotation\n  // so try comparison by rotating across all points\n  const length = apoints.length\n  let offset = 0\n  do {\n    let unequal = false\n    for (let i = 0; i < length; i++) {\n      if (!vec2.equals(apoints[i], bpoints[(i + offset) % length])) {\n        unequal = true\n        break\n      }\n    }\n    if (unequal === false) {\n      return true\n    }\n    // unequal open paths should only be compared once, never rotated\n    if (!a.isClosed) {\n      return false\n    }\n  } while (++offset < length)\n  return false\n}\n\nmodule.exports = equals\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new path from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 2) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  created.isClosed = !!data[17]\n\n  for (let i = 22; i < data.length; i += 2) {\n    const point = vec2.fromValues(data[i], data[i + 1])\n    created.points.push(point)\n  }\n  // transfer known properties, i.e. color\n  if (data[18] >= 0) {\n    created.color = [data[18], data[19], data[20], data[21]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "/**\n * Determine if the given object is a path2 geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a path2\n * @alias module:modeling/geometries/path2.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    // see create for the required attributes and types\n    if ('points' in object && 'transforms' in object && 'isClosed' in object) {\n      // NOTE: transforms should be a TypedArray, which has a read-only length\n      if (Array.isArray(object.points) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const clone = require('./clone')\n\n/**\n * Reverses the path so that the points are in the opposite order.\n * This swaps the left (interior) and right (exterior) edges.\n * @param {path2} geometry - the path to reverse\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.reverse\n *\n * @example\n * let newpath = reverse(mypath)\n */\nconst reverse = (geometry) => {\n  // NOTE: this only updates the order of the points\n  const cloned = clone(geometry)\n  cloned.points = geometry.points.slice().reverse()\n  return cloned\n}\n\nmodule.exports = reverse\n", "const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n * Create a string representing the contents of the given path.\n * @param {path2} geometry - the path\n * @returns {String} a representative string\n * @alias module:modeling/geometries/path2.toString\n *\n * @example\n * console.out(toString(path))\n */\nconst toString = (geometry) => {\n  const points = toPoints(geometry)\n  let result = 'path (' + points.length + ' points, ' + geometry.isClosed + '):\\n[\\n'\n  points.forEach((point) => {\n    result += '  ' + vec2.toString(point) + ',\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n", "/**\n * Produce a compact binary representation from the given path.\n * @param {path2} geometry - the path geometry\n * @returns {TypedArray} compact binary representation\n * @alias module:modeling/geometries/path2.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const points = geometry.points\n  const transforms = geometry.transforms\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 1 + 4 + (points.length * 2)) // type + transforms + isClosed + color + points data\n\n  compacted[0] = 2 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = geometry.isClosed ? 1 : 0\n\n  compacted[18] = color[0]\n  compacted[19] = color[1]\n  compacted[20] = color[2]\n  compacted[21] = color[3]\n\n  for (let j = 0; j < points.length; j++) {\n    const ci = j * 2 + 22\n    const point = points[j]\n    compacted[ci] = point[0]\n    compacted[ci + 1] = point[1]\n  }\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the points, as this function only adjusts the transforms.\n * The transforms are applied when accessing the points via toPoints().\n * @param {mat4} matrix - the matrix to transform with\n * @param {path2} geometry - the geometry to transform\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.transform\n *\n * @example\n * let newpath = transform(fromZRotation(TAU / 8), path)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const vec2 = require('../../maths/vec2')\nconst isA = require('./isA')\n\n/**\n * Determine if the given object is a valid path2.\n * Checks for valid data points, and duplicate points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/path2.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid path2 structure')\n  }\n\n  // check for duplicate points\n  if (object.points.length > 1) {\n    for (let i = 0; i < object.points.length; i++) {\n      if (vec2.equals(object.points[i], object.points[(i + 1) % object.points.length])) {\n        throw new Error(`path2 duplicate points ${object.points[i]}`)\n      }\n    }\n  }\n\n  // check for infinity, nan\n  object.points.forEach((point) => {\n    if (!point.every(Number.isFinite)) {\n      throw new Error(`path2 invalid point ${point}`)\n    }\n  })\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`path2 invalid transforms ${object.transforms}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 2D geometry consisting of a list of ordered points.\n * @see {@link path2} for data structure information.\n * @module modeling/geometries/path2\n *\n * @example\n * colorize([0,0,0,1], path2.fromPoints({ closed: true }, [[0,0], [4,0], [4,3]]))\n *\n * @example\n * {\n *   \"points\": [[0,0], [4,0], [4,3]],\n *   \"isClosed\": true,\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0,0,0,1]\n * }\n */\nmodule.exports = {\n  appendArc: require('./appendArc'),\n  appendBezier: require('./appendBezier'),\n  appendPoints: require('./appendPoints'),\n  clone: require('./clone'),\n  close: require('./close'),\n  concat: require('./concat'),\n  create: require('./create'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toPoints: require('./toPoints'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst colorGeom2 = (color, object) => {\n  const newgeom2 = geom2.clone(object)\n  newgeom2.color = color\n  return newgeom2\n}\n\nconst colorGeom3 = (color, object) => {\n  const newgeom3 = geom3.clone(object)\n  newgeom3.color = color\n  return newgeom3\n}\n\nconst colorPath2 = (color, object) => {\n  const newpath2 = path2.clone(object)\n  newpath2.color = color\n  return newpath2\n}\n\nconst colorPoly3 = (color, object) => {\n  const newpoly = poly3.clone(object)\n  newpoly.color = color\n  return newpoly\n}\n\n/**\n * Assign the given color to the given objects.\n * @param {Array} color - RGBA color values, where each value is between 0 and 1.0\n * @param {Object|Array} objects - the objects of which to apply the given color\n * @return {Object|Array} new object, or list of new objects with an additional attribute 'color'\n * @alias module:modeling/colors.colorize\n *\n * @example\n * let redSphere = colorize([1,0,0], sphere()) // red\n * let greenCircle = colorize([0,1,0,0.8], circle()) // green transparent\n * let blueArc = colorize([0,0,1], arc()) // blue\n * let wildcylinder = colorize(colorNameToRgb('fuchsia'), cylinder()) // CSS color\n */\nconst colorize = (color, ...objects) => {\n  if (!Array.isArray(color)) throw new Error('color must be an array')\n  if (color.length < 3) throw new Error('color must contain R, G and B values')\n  if (color.length === 3) color = [color[0], color[1], color[2], 1.0] // add alpha\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (geom2.isA(object)) return colorGeom2(color, object)\n    if (geom3.isA(object)) return colorGeom3(color, object)\n    if (path2.isA(object)) return colorPath2(color, object)\n    if (poly3.isA(object)) return colorPoly3(color, object)\n\n    object.color = color\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = colorize\n", "/**\n * @alias module:modeling/colors.cssColors\n * @see CSS color table from http://www.w3.org/TR/css3-color/\n * @enum {Array}\n * @example\n * let newshape = colorize(cssColors.red, oldshape)\n */\nconst cssColors = {\n  // basic color keywords\n  black: [0 / 255, 0 / 255, 0 / 255],\n  silver: [192 / 255, 192 / 255, 192 / 255],\n  gray: [128 / 255, 128 / 255, 128 / 255],\n  white: [255 / 255, 255 / 255, 255 / 255],\n  maroon: [128 / 255, 0 / 255, 0 / 255],\n  red: [255 / 255, 0 / 255, 0 / 255],\n  purple: [128 / 255, 0 / 255, 128 / 255],\n  fuchsia: [255 / 255, 0 / 255, 255 / 255],\n  green: [0 / 255, 128 / 255, 0 / 255],\n  lime: [0 / 255, 255 / 255, 0 / 255],\n  olive: [128 / 255, 128 / 255, 0 / 255],\n  yellow: [255 / 255, 255 / 255, 0 / 255],\n  navy: [0 / 255, 0 / 255, 128 / 255],\n  blue: [0 / 255, 0 / 255, 255 / 255],\n  teal: [0 / 255, 128 / 255, 128 / 255],\n  aqua: [0 / 255, 255 / 255, 255 / 255],\n  // extended color keywords\n  aliceblue: [240 / 255, 248 / 255, 255 / 255],\n  antiquewhite: [250 / 255, 235 / 255, 215 / 255],\n  // 'aqua': [ 0 / 255, 255 / 255, 255 / 255 ],\n  aquamarine: [127 / 255, 255 / 255, 212 / 255],\n  azure: [240 / 255, 255 / 255, 255 / 255],\n  beige: [245 / 255, 245 / 255, 220 / 255],\n  bisque: [255 / 255, 228 / 255, 196 / 255],\n  // 'black': [ 0 / 255, 0 / 255, 0 / 255 ],\n  blanchedalmond: [255 / 255, 235 / 255, 205 / 255],\n  // 'blue': [ 0 / 255, 0 / 255, 255 / 255 ],\n  blueviolet: [138 / 255, 43 / 255, 226 / 255],\n  brown: [165 / 255, 42 / 255, 42 / 255],\n  burlywood: [222 / 255, 184 / 255, 135 / 255],\n  cadetblue: [95 / 255, 158 / 255, 160 / 255],\n  chartreuse: [127 / 255, 255 / 255, 0 / 255],\n  chocolate: [210 / 255, 105 / 255, 30 / 255],\n  coral: [255 / 255, 127 / 255, 80 / 255],\n  cornflowerblue: [100 / 255, 149 / 255, 237 / 255],\n  cornsilk: [255 / 255, 248 / 255, 220 / 255],\n  crimson: [220 / 255, 20 / 255, 60 / 255],\n  cyan: [0 / 255, 255 / 255, 255 / 255],\n  darkblue: [0 / 255, 0 / 255, 139 / 255],\n  darkcyan: [0 / 255, 139 / 255, 139 / 255],\n  darkgoldenrod: [184 / 255, 134 / 255, 11 / 255],\n  darkgray: [169 / 255, 169 / 255, 169 / 255],\n  darkgreen: [0 / 255, 100 / 255, 0 / 255],\n  darkgrey: [169 / 255, 169 / 255, 169 / 255],\n  darkkhaki: [189 / 255, 183 / 255, 107 / 255],\n  darkmagenta: [139 / 255, 0 / 255, 139 / 255],\n  darkolivegreen: [85 / 255, 107 / 255, 47 / 255],\n  darkorange: [255 / 255, 140 / 255, 0 / 255],\n  darkorchid: [153 / 255, 50 / 255, 204 / 255],\n  darkred: [139 / 255, 0 / 255, 0 / 255],\n  darksalmon: [233 / 255, 150 / 255, 122 / 255],\n  darkseagreen: [143 / 255, 188 / 255, 143 / 255],\n  darkslateblue: [72 / 255, 61 / 255, 139 / 255],\n  darkslategray: [47 / 255, 79 / 255, 79 / 255],\n  darkslategrey: [47 / 255, 79 / 255, 79 / 255],\n  darkturquoise: [0 / 255, 206 / 255, 209 / 255],\n  darkviolet: [148 / 255, 0 / 255, 211 / 255],\n  deeppink: [255 / 255, 20 / 255, 147 / 255],\n  deepskyblue: [0 / 255, 191 / 255, 255 / 255],\n  dimgray: [105 / 255, 105 / 255, 105 / 255],\n  dimgrey: [105 / 255, 105 / 255, 105 / 255],\n  dodgerblue: [30 / 255, 144 / 255, 255 / 255],\n  firebrick: [178 / 255, 34 / 255, 34 / 255],\n  floralwhite: [255 / 255, 250 / 255, 240 / 255],\n  forestgreen: [34 / 255, 139 / 255, 34 / 255],\n  // 'fuchsia': [ 255 / 255, 0 / 255, 255 / 255 ],\n  gainsboro: [220 / 255, 220 / 255, 220 / 255],\n  ghostwhite: [248 / 255, 248 / 255, 255 / 255],\n  gold: [255 / 255, 215 / 255, 0 / 255],\n  goldenrod: [218 / 255, 165 / 255, 32 / 255],\n  // 'gray': [ 128 / 255, 128 / 255, 128 / 255 ],\n  // 'green': [ 0 / 255, 128 / 255, 0 / 255 ],\n  greenyellow: [173 / 255, 255 / 255, 47 / 255],\n  grey: [128 / 255, 128 / 255, 128 / 255],\n  honeydew: [240 / 255, 255 / 255, 240 / 255],\n  hotpink: [255 / 255, 105 / 255, 180 / 255],\n  indianred: [205 / 255, 92 / 255, 92 / 255],\n  indigo: [75 / 255, 0 / 255, 130 / 255],\n  ivory: [255 / 255, 255 / 255, 240 / 255],\n  khaki: [240 / 255, 230 / 255, 140 / 255],\n  lavender: [230 / 255, 230 / 255, 250 / 255],\n  lavenderblush: [255 / 255, 240 / 255, 245 / 255],\n  lawngreen: [124 / 255, 252 / 255, 0 / 255],\n  lemonchiffon: [255 / 255, 250 / 255, 205 / 255],\n  lightblue: [173 / 255, 216 / 255, 230 / 255],\n  lightcoral: [240 / 255, 128 / 255, 128 / 255],\n  lightcyan: [224 / 255, 255 / 255, 255 / 255],\n  lightgoldenrodyellow: [250 / 255, 250 / 255, 210 / 255],\n  lightgray: [211 / 255, 211 / 255, 211 / 255],\n  lightgreen: [144 / 255, 238 / 255, 144 / 255],\n  lightgrey: [211 / 255, 211 / 255, 211 / 255],\n  lightpink: [255 / 255, 182 / 255, 193 / 255],\n  lightsalmon: [255 / 255, 160 / 255, 122 / 255],\n  lightseagreen: [32 / 255, 178 / 255, 170 / 255],\n  lightskyblue: [135 / 255, 206 / 255, 250 / 255],\n  lightslategray: [119 / 255, 136 / 255, 153 / 255],\n  lightslategrey: [119 / 255, 136 / 255, 153 / 255],\n  lightsteelblue: [176 / 255, 196 / 255, 222 / 255],\n  lightyellow: [255 / 255, 255 / 255, 224 / 255],\n  // 'lime': [ 0 / 255, 255 / 255, 0 / 255 ],\n  limegreen: [50 / 255, 205 / 255, 50 / 255],\n  linen: [250 / 255, 240 / 255, 230 / 255],\n  magenta: [255 / 255, 0 / 255, 255 / 255],\n  // 'maroon': [ 128 / 255, 0 / 255, 0 / 255 ],\n  mediumaquamarine: [102 / 255, 205 / 255, 170 / 255],\n  mediumblue: [0 / 255, 0 / 255, 205 / 255],\n  mediumorchid: [186 / 255, 85 / 255, 211 / 255],\n  mediumpurple: [147 / 255, 112 / 255, 219 / 255],\n  mediumseagreen: [60 / 255, 179 / 255, 113 / 255],\n  mediumslateblue: [123 / 255, 104 / 255, 238 / 255],\n  mediumspringgreen: [0 / 255, 250 / 255, 154 / 255],\n  mediumturquoise: [72 / 255, 209 / 255, 204 / 255],\n  mediumvioletred: [199 / 255, 21 / 255, 133 / 255],\n  midnightblue: [25 / 255, 25 / 255, 112 / 255],\n  mintcream: [245 / 255, 255 / 255, 250 / 255],\n  mistyrose: [255 / 255, 228 / 255, 225 / 255],\n  moccasin: [255 / 255, 228 / 255, 181 / 255],\n  navajowhite: [255 / 255, 222 / 255, 173 / 255],\n  // 'navy': [ 0 / 255, 0 / 255, 128 / 255 ],\n  oldlace: [253 / 255, 245 / 255, 230 / 255],\n  // 'olive': [ 128 / 255, 128 / 255, 0 / 255 ],\n  olivedrab: [107 / 255, 142 / 255, 35 / 255],\n  orange: [255 / 255, 165 / 255, 0 / 255],\n  orangered: [255 / 255, 69 / 255, 0 / 255],\n  orchid: [218 / 255, 112 / 255, 214 / 255],\n  palegoldenrod: [238 / 255, 232 / 255, 170 / 255],\n  palegreen: [152 / 255, 251 / 255, 152 / 255],\n  paleturquoise: [175 / 255, 238 / 255, 238 / 255],\n  palevioletred: [219 / 255, 112 / 255, 147 / 255],\n  papayawhip: [255 / 255, 239 / 255, 213 / 255],\n  peachpuff: [255 / 255, 218 / 255, 185 / 255],\n  peru: [205 / 255, 133 / 255, 63 / 255],\n  pink: [255 / 255, 192 / 255, 203 / 255],\n  plum: [221 / 255, 160 / 255, 221 / 255],\n  powderblue: [176 / 255, 224 / 255, 230 / 255],\n  // 'purple': [ 128 / 255, 0 / 255, 128 / 255 ],\n  // 'red': [ 255 / 255, 0 / 255, 0 / 255 ],\n  rosybrown: [188 / 255, 143 / 255, 143 / 255],\n  royalblue: [65 / 255, 105 / 255, 225 / 255],\n  saddlebrown: [139 / 255, 69 / 255, 19 / 255],\n  salmon: [250 / 255, 128 / 255, 114 / 255],\n  sandybrown: [244 / 255, 164 / 255, 96 / 255],\n  seagreen: [46 / 255, 139 / 255, 87 / 255],\n  seashell: [255 / 255, 245 / 255, 238 / 255],\n  sienna: [160 / 255, 82 / 255, 45 / 255],\n  // 'silver': [ 192 / 255, 192 / 255, 192 / 255 ],\n  skyblue: [135 / 255, 206 / 255, 235 / 255],\n  slateblue: [106 / 255, 90 / 255, 205 / 255],\n  slategray: [112 / 255, 128 / 255, 144 / 255],\n  slategrey: [112 / 255, 128 / 255, 144 / 255],\n  snow: [255 / 255, 250 / 255, 250 / 255],\n  springgreen: [0 / 255, 255 / 255, 127 / 255],\n  steelblue: [70 / 255, 130 / 255, 180 / 255],\n  tan: [210 / 255, 180 / 255, 140 / 255],\n  // 'teal': [ 0 / 255, 128 / 255, 128 / 255 ],\n  thistle: [216 / 255, 191 / 255, 216 / 255],\n  tomato: [255 / 255, 99 / 255, 71 / 255],\n  turquoise: [64 / 255, 224 / 255, 208 / 255],\n  violet: [238 / 255, 130 / 255, 238 / 255],\n  wheat: [245 / 255, 222 / 255, 179 / 255],\n  // 'white': [ 255 / 255, 255 / 255, 255 / 255 ],\n  whitesmoke: [245 / 255, 245 / 255, 245 / 255],\n  // 'yellow': [ 255 / 255, 255 / 255, 0 / 255 ],\n  yellowgreen: [154 / 255, 205 / 255, 50 / 255]\n}\n\nmodule.exports = cssColors\n", "const cssColors = require('./cssColors')\n\n/**\n * Converts a CSS color name to RGB color.\n *\n * @param {String} s - the CSS color name\n * @return {Array} the RGB color, or undefined if not found\n * @alias module:modeling/colors.colorNameToRgb\n * @example\n * let mysphere = colorize(colorNameToRgb('lightblue'), sphere())\n */\nconst colorNameToRgb = (s) => cssColors[s.toLowerCase()]\n\nmodule.exports = colorNameToRgb\n", "/**\n * Converts CSS color notations (string of hex values) to RGB values.\n *\n * @see https://www.w3.org/TR/css-color-3/\n * @param {String} notation - color notation\n * @return {Array} RGB color values\n * @alias module:modeling/colors.hexToRgb\n *\n * @example\n * let mysphere = colorize(hexToRgb('#000080'), sphere()) // navy blue\n */\nconst hexToRgb = (notation) => {\n  notation = notation.replace('#', '')\n  if (notation.length < 6) throw new Error('the given notation must contain 3 or more hex values')\n\n  const r = parseInt(notation.substring(0, 2), 16) / 255\n  const g = parseInt(notation.substring(2, 4), 16) / 255\n  const b = parseInt(notation.substring(4, 6), 16) / 255\n  if (notation.length >= 8) {\n    const a = parseInt(notation.substring(6, 8), 16) / 255\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hexToRgb\n", "/**\n * Convert hue values to a color component (ie one of r, g, b)\n * @param  {Number} p\n * @param  {Number} q\n * @param  {Number} t\n * @return {Number} color component\n * @alias module:modeling/colors.hueToColorComponent\n */\nconst hueToColorComponent = (p, q, t) => {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nmodule.exports = hueToColorComponent\n", "const flatten = require('../utils/flatten')\n\nconst hueToColorComponent = require('./hueToColorComponent')\n\n/**\n * Converts HSL color values to RGB color values.\n *\n * @see http://en.wikipedia.org/wiki/HSL_color_space\n * @param {...Number|Array} values - HSL or HSLA color values\n * @return {Array} RGB or RGBA color values\n * @alias module:modeling/colors.hslToRgb\n *\n * @example\n * let mysphere = colorize(hslToRgb([0.9166666666666666, 1, 0.5]), sphere())\n */\nconst hslToRgb = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain H, S and L values')\n\n  const h = values[0]\n  const s = values[1]\n  const l = values[2]\n\n  let r = l // default is achromatic\n  let g = l\n  let b = l\n\n  if (s !== 0) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hueToColorComponent(p, q, h + 1 / 3)\n    g = hueToColorComponent(p, q, h)\n    b = hueToColorComponent(p, q, h - 1 / 3)\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hslToRgb\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts HSV color values to RGB color values.\n *\n * @see http://en.wikipedia.org/wiki/HSV_color_space.\n * @param {...Number|Array} values - HSV or HSVA color values\n * @return {Array} RGB or RGBA color values\n * @alias module:modeling/colors.hsvToRgb\n *\n * @example\n * let mysphere = colorize(hsvToRgb([0.9166666666666666, 1, 1]), sphere())\n */\nconst hsvToRgb = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain H, S and V values')\n\n  const h = values[0]\n  const s = values[1]\n  const v = values[2]\n\n  let r = 0\n  let g = 0\n  let b = 0\n\n  const i = Math.floor(h * 6)\n  const f = h * 6 - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n\n  switch (i % 6) {\n    case 0:\n      r = v\n      g = t\n      b = p\n      break\n    case 1:\n      r = q\n      g = v\n      b = p\n      break\n    case 2:\n      r = p\n      g = v\n      b = t\n      break\n    case 3:\n      r = p\n      g = q\n      b = v\n      break\n    case 4:\n      r = t\n      g = p\n      b = v\n      break\n    case 5:\n      r = v\n      g = p\n      b = q\n      break\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hsvToRgb\n", "const flatten = require('../utils/flatten')\n\n/**\n * Convert the given RGB color values to CSS color notation (string)\n * @see https://www.w3.org/TR/css-color-3/\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {String} CSS color notation\n * @alias module:modeling/colors.rgbToHex\n */\nconst rgbToHex = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0] * 255\n  const g = values[1] * 255\n  const b = values[2] * 255\n\n  let s = `#${Number(0x1000000 + r * 0x10000 + g * 0x100 + b).toString(16).substring(1, 7)}`\n\n  if (values.length > 3) {\n    // convert alpha to opacity\n    s = s + Number(values[3] * 255).toString(16)\n  }\n  return s\n}\n\nmodule.exports = rgbToHex\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts an RGB color value to HSL.\n *\n * @see http://en.wikipedia.org/wiki/HSL_color_space.\n * @see http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {Array} HSL or HSLA color values\n * @alias module:modeling/colors.rgbToHsl\n */\nconst rgbToHsl = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0]\n  const g = values[1]\n  const b = values[2]\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  let s\n  const l = (max + min) / 2\n\n  if (max === min) {\n    h = s = 0 // achromatic\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [h, s, l, a]\n  }\n  return [h, s, l]\n}\n\nmodule.exports = rgbToHsl\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts an RGB color value to HSV.\n *\n * @see http://en.wikipedia.org/wiki/HSV_color_space.\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {Array} HSV or HSVA color values\n * @alias module:modeling/colors.rgbToHsv\n */\nconst rgbToHsv = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0]\n  const g = values[1]\n  const b = values[2]\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  if (values.length > 3) {\n    // add alpha if provided\n    const a = values[3]\n    return [h, s, v, a]\n  }\n  return [h, s, v]\n}\n\nmodule.exports = rgbToHsv\n", "/**\n * All shapes (primitives or the results of operations) can be assigned a color (RGBA).\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/colors\n * @example\n * const { colorize, hexToRgb } = require('@jscad/modeling').colors\n */\nmodule.exports = {\n  colorize: require('./colorize'),\n  colorNameToRgb: require('./colorNameToRgb'),\n  cssColors: require('./cssColors'),\n  hexToRgb: require('./hexToRgb'),\n  hslToRgb: require('./hslToRgb'),\n  hsvToRgb: require('./hsvToRgb'),\n  hueToColorComponent: require('./hueToColorComponent'),\n  rgbToHex: require('./rgbToHex'),\n  rgbToHsl: require('./rgbToHsl'),\n  rgbToHsv: require('./rgbToHsv')\n}\n", "/**\n * Curves are n-dimensional mathematical constructs that define a path from point 0 to point 1.\n * @module modeling/curves\n * @example\n * const { bezier } = require('@jscad/modeling').curves\n\n */\nmodule.exports = {\n  bezier: require('./bezier')\n}\n", "/**\n * Calculate the area under the given points.\n * @param {Array} points - list of 2D points\n * @return {Number} area under the given points\n * @alias module:modeling/maths/utils.area\n */\nconst area = (points) => {\n  let area = 0\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    area += points[i][0] * points[j][1]\n    area -= points[j][0] * points[i][1]\n  }\n  return (area / 2.0)\n}\n\nmodule.exports = area\n", "/**\n * Measure the area under the given polygon.\n *\n * @param {poly2} polygon - the polygon to measure\n * @return {Number} the area of the polygon\n * @alias module:modeling/geometries/poly2.measureArea\n */\nconst area = require('../../maths/utils/area')\n\nconst measureArea = (polygon) => area(polygon.vertices)\n\nmodule.exports = measureArea\n", "/**\n * Represents a convex 2D polygon consisting of a list of ordered vertices.\n * @typedef {Object} poly2\n * @property {Array} vertices - list of ordered vertices (2D)\n */\n\n/**\n * Creates a new polygon with initial values.\n *\n * @param {Array} [vertices] - list of vertices (2D)\n * @returns {poly2} a new polygon\n * @alias module:modeling/geometries/poly2.create\n *\n * @example\n * let polygon = create()\n */\nconst create = (vertices) => {\n  if (vertices === undefined || vertices.length < 3) {\n    vertices = [] // empty contents\n  }\n  return { vertices: vertices }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Flip the give polygon, rotating the opposite direction.\n *\n * @param {poly2} polygon - the polygon to flip\n * @returns {poly2} a new polygon\n * @alias module:modeling/geometries/poly2.flip\n */\nconst flip = (polygon) => {\n  const vertices = polygon.vertices.slice().reverse()\n  return create(vertices)\n}\n\nmodule.exports = flip\n", "const measureArea = require('./measureArea')\nconst flip = require('./flip')\n\n/**\n * Determine if the given points are inside the given polygon.\n *\n * @param {Array} points - a list of points, where each point is an array with X and Y values\n * @param {poly2} polygon - a 2D polygon\n * @return {Integer} 1 if all points are inside, 0 if some or none are inside\n * @alias module:modeling/geometries/poly2.arePointsInside\n */\nconst arePointsInside = (points, polygon) => {\n  if (points.length === 0) return 0 // nothing to check\n\n  const vertices = polygon.vertices\n  if (vertices.length < 3) return 0 // nothing can be inside an empty polygon\n\n  if (measureArea(polygon) < 0) {\n    polygon = flip(polygon) // CCW is required\n  }\n\n  const sum = points.reduce((acc, point) => acc + isPointInside(point, vertices), 0)\n  return sum === points.length ? 1 : 0\n}\n\n/*\n * Determine if the given point is inside the polygon.\n *\n * @see http://erich.realtimerendering.com/ptinpoly/ (Crossings Test)\n * @param {Array} point - an array with X and Y values\n * @param {Array} polygon - a list of points, where each point is an array with X and Y values\n * @return {Integer} 1 if the point is inside, 0 if outside\n */\nconst isPointInside = (point, polygon) => {\n  const numverts = polygon.length\n\n  const tx = point[0]\n  const ty = point[1]\n\n  let vtx0 = polygon[numverts - 1]\n  let vtx1 = polygon[0]\n\n  let yflag0 = (vtx0[1] > ty)\n\n  let insideFlag = 0\n\n  let i = 0\n  for (let j = (numverts + 1); --j;) {\n    /*\n     * check if Y endpoints straddle (are on opposite sides) of point's Y\n     * if so, +X ray could intersect this edge.\n     */\n    const yflag1 = (vtx1[1] > ty)\n    if (yflag0 !== yflag1) {\n      /*\n       * check if X endpoints are on same side of the point's X\n       * if so, it's easy to test if edge hits or misses.\n       */\n      const xflag0 = (vtx0[0] > tx)\n      const xflag1 = (vtx1[0] > tx)\n      if (xflag0 && xflag1) {\n        /* if edge's X values are both right of the point, then the point must be inside */\n        insideFlag = !insideFlag\n      } else {\n        /*\n         * if X endpoints straddle the point, then\n         * the compute intersection of polygon edge with +X ray\n         * if intersection >= point's X then the +X ray hits it.\n         */\n        if ((vtx1[0] - (vtx1[1] - ty) * (vtx0[0] - vtx1[0]) / (vtx0[1] - vtx1[1])) >= tx) {\n          insideFlag = !insideFlag\n        }\n      }\n    }\n    /* move to next pair of vertices, retaining info as possible */\n    yflag0 = yflag1\n    vtx0 = vtx1\n    vtx1 = polygon[++i]\n  }\n  return insideFlag\n}\n\nmodule.exports = arePointsInside\n", "/**\n * Represents a 2D polygon consisting of a list of ordered vertices.\n * @see {@link poly2} for data structure information.\n * @module modeling/geometries/poly2\n *\n * @example\n * poly2.create([[0,0], [4,0], [4,3]])\n *\n * @example\n * {\"vertices\": [[0,0], [4,0], [4,3]]}\n */\nmodule.exports = {\n  arePointsInside: require('./arePointsInside'),\n  create: require('./create'),\n  flip: require('./flip'),\n  measureArea: require('./measureArea')\n}\n", "/**\n * Geometries are objects that represent the contents of primitives or the results of operations.\n * Note: Geometries are considered immutable, so never change the contents directly.\n *\n * @see {@link geom2} - 2D geometry consisting of sides\n * @see {@link geom3} - 3D geometry consisting of polygons\n * @see {@link path2} - 2D geometry consisting of ordered points\n * @see {@link poly2} - 2D polygon consisting of ordered vertices\n * @see {@link poly3} - 3D polygon consisting of ordered vertices\n *\n * @module modeling/geometries\n * @example\n * const { geom2, geom3, path2, poly2, poly3 } = require('@jscad/modeling').geometries\n */\nmodule.exports = {\n  geom2: require('./geom2'),\n  geom3: require('./geom3'),\n  path2: require('./path2'),\n  poly2: require('./poly2'),\n  poly3: require('./poly3')\n}\n", "/**\n * Represents a unbounded line in 2D space, positioned at a point of origin.\n * A line is parametrized by a normal vector (perpendicular to the line, rotated 90 degrees counter clockwise) and\n * distance from the origin.\n *\n * Equation: A Point (P) is on Line (L) if dot(L.normal, P) == L.distance\n *\n * The contents of the array are a normal [0,1] and a distance [2].\n * @typedef {Array} line2\n */\n\n/**\n * Create a line, positioned at 0,0, and running along the X axis.\n *\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.create\n */\nconst create = () => [0, 1, 0] // normal and distance\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given line.\n *\n * @param {line2} line - line to clone\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.clone\n */\nconst clone = (line) => {\n  const out = create()\n  out[0] = line[0]\n  out[1] = line[1]\n  out[2] = line[2]\n  return out\n}\n\nmodule.exports = clone\n", "const vec2 = require('../vec2')\n\n/**\n * Return the direction of the given line.\n *\n * @param {line2} line - line of reference\n * @return {vec2} a vector in the direction of the line\n * @alias module:modeling/maths/line2.direction\n */\nconst direction = (line) => {\n  const vector = vec2.normal(vec2.create(), line)\n  vec2.negate(vector, vector)\n  return vector\n}\n\nmodule.exports = direction\n", "const vec2 = require('../vec2')\n\n/**\n * Return the origin of the given line.\n * The origin is the point on the line which is closest to the origin [0, 0].\n *\n * @param {line2} line - line of reference\n * @return {vec2} the origin of the line\n * @alias module:modeling/maths/line2.origin\n */\nconst origin = (line) => vec2.scale(vec2.create(), line, line[2])\n\nmodule.exports = origin\n", "const vec2 = require('../vec2')\n\nconst direction = require('./direction')\nconst origin = require('./origin')\n\n/**\n * Determine the closest point on the given line to the given point.\n *\n * @param {line2} line - line of reference\n * @param {vec2} point - point of reference\n * @returns {vec2} closest point\n * @alias module:modeling/maths/line2.closestPoint\n */\nconst closestPoint = (line, point) => {\n  const orig = origin(line)\n  const dir = direction(line)\n\n  const v = vec2.subtract(vec2.create(), point, orig)\n  const dist = vec2.dot(v, dir)\n  vec2.scale(v, dir, dist)\n  vec2.add(v, v, orig)\n  return v\n}\n\nmodule.exports = closestPoint\n", "/**\n * Copy the given line to the receiving line.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to copy\n * @returns {line2} out\n * @alias module:modeling/maths/line2.copy\n */\nconst copy = (out, line) => {\n  out[0] = line[0]\n  out[1] = line[1]\n  out[2] = line[2]\n  return out\n}\n\nmodule.exports = copy\n", "const vec2 = require('../vec2')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {line2} line - line of reference\n * @param {vec2} point - point of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line2.distanceToPoint\n */\nconst distanceToPoint = (line, point) => {\n  let distance = vec2.dot(point, line)\n  distance = Math.abs(distance - line[2])\n  return distance\n}\n\nmodule.exports = distanceToPoint\n", "/**\n * Compare the given lines for equality.\n *\n * @param {line2} line1 - first line to compare\n * @param {line2} line2 - second line to compare\n * @return {Boolean} true if lines are equal\n * @alias module:modeling/maths/line2.equals\n */\nconst equals = (line1, line2) => (line1[0] === line2[0]) && (line1[1] === line2[1] && (line1[2] === line2[2]))\n\nmodule.exports = equals\n", "const vec2 = require('../vec2')\n\n/**\n * Create a new line that passes through the given points.\n *\n * @param {line2} out - receiving line\n * @param {vec2} point1 - start point of the line\n * @param {vec2} point2 - end point of the line\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.fromPoints\n */\nconst fromPoints = (out, point1, point2) => {\n  const vector = vec2.subtract(vec2.create(), point2, point1) // directional vector\n\n  vec2.normal(vector, vector)\n  vec2.normalize(vector, vector) // normalized\n\n  const distance = vec2.dot(point1, vector)\n\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = distance\n  return out\n}\n\nmodule.exports = fromPoints\n", "const create = require('./create')\n\n/**\n * Creates a new line initialized with the given values.\n *\n * @param {Number} x - X coordinate of the unit normal\n * @param {Number} y - Y coordinate of the unit normal\n * @param {Number} d - distance of the line from [0,0]\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.fromValues\n */\nconst fromValues = (x, y, d) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = d\n  return out\n}\n\nmodule.exports = fromValues\n", "const { NEPS } = require('../constants')\n\n/**\n * Compare two normals (unit vectors) for near equality.\n * @param {vec3} a - normal a\n * @param {vec3} b - normal b\n * @returns {Boolean} true if a and b are nearly equal\n * @alias module:modeling/maths/utils.aboutEqualNormals\n */\nconst aboutEqualNormals = (a, b) => (Math.abs(a[0] - b[0]) <= NEPS && Math.abs(a[1] - b[1]) <= NEPS && Math.abs(a[2] - b[2]) <= NEPS)\n\nmodule.exports = aboutEqualNormals\n", "/**\n * Get the X coordinate of a point with a certain Y coordinate, interpolated between two points.\n * Interpolation is robust even if the points have the same Y coordinate\n * @param {vec2} point1\n * @param {vec2} point2\n * @param {Number} y\n * @return {Array} X and Y of interpolated point\n * @alias module:modeling/maths/utils.interpolateBetween2DPointsForY\n */\nconst interpolateBetween2DPointsForY = (point1, point2, y) => {\n  let f1 = y - point1[1]\n  let f2 = point2[1] - point1[1]\n  if (f2 < 0) {\n    f1 = -f1\n    f2 = -f2\n  }\n  let t\n  if (f1 <= 0) {\n    t = 0.0\n  } else if (f1 >= f2) {\n    t = 1.0\n  } else if (f2 < 1e-10) { // FIXME Should this be EPS?\n    t = 0.5\n  } else {\n    t = f1 / f2\n  }\n  const result = point1[0] + t * (point2[0] - point1[0])\n  return result\n}\n\nmodule.exports = interpolateBetween2DPointsForY\n", "/**\n * Calculate the intersect point of the two line segments (p1-p2 and p3-p4), end points included.\n * Note: If the line segments do NOT intersect then undefined is returned.\n * @see http://paulbourke.net/geometry/pointlineplane/\n * @param {vec2} p1 - first point of first line segment\n * @param {vec2} p2 - second point of first line segment\n * @param {vec2} p3 - first point of second line segment\n * @param {vec2} p4 - second point of second line segment\n * @returns {vec2} intersection point of the two line segments, or undefined\n * @alias module:modeling/maths/utils.intersect\n */\nconst intersect = (p1, p2, p3, p4) => {\n  // Check if none of the lines are of length 0\n  if ((p1[0] === p2[0] && p1[1] === p2[1]) || (p3[0] === p4[0] && p3[1] === p4[1])) {\n    return undefined\n  }\n\n  const denominator = ((p4[1] - p3[1]) * (p2[0] - p1[0]) - (p4[0] - p3[0]) * (p2[1] - p1[1]))\n\n  // Lines are parallel\n  if (Math.abs(denominator) < Number.MIN_VALUE) {\n    return undefined\n  }\n\n  const ua = ((p4[0] - p3[0]) * (p1[1] - p3[1]) - (p4[1] - p3[1]) * (p1[0] - p3[0])) / denominator\n  const ub = ((p2[0] - p1[0]) * (p1[1] - p3[1]) - (p2[1] - p1[1]) * (p1[0] - p3[0])) / denominator\n\n  // is the intersection along the segments\n  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n    return undefined\n  }\n\n  // Return the x and y coordinates of the intersection\n  const x = p1[0] + ua * (p2[0] - p1[0])\n  const y = p1[1] + ua * (p2[1] - p1[1])\n\n  return [x, y]\n}\n\nmodule.exports = intersect\n", "const solve2Linear = (a, b, c, d, u, v) => {\n  const det = a * d - b * c\n  const invdet = 1.0 / det\n  let x = u * d - b * v\n  let y = -u * c + a * v\n  x *= invdet\n  y *= invdet\n  return [x, y]\n}\n\nmodule.exports = solve2Linear\n", "/**\n * Utility functions for maths.\n * @module modeling/maths/utils\n * @example\n * const { area, solve2Linear } = require('@jscad/maths').utils\n */\nmodule.exports = {\n  aboutEqualNormals: require('./aboutEqualNormals'),\n  area: require('./area'),\n  cos: require('./trigonometry').cos,\n  interpolateBetween2DPointsForY: require('./interpolateBetween2DPointsForY'),\n  intersect: require('./intersect'),\n  sin: require('./trigonometry').sin,\n  solve2Linear: require('./solve2Linear')\n}\n", "const vec2 = require('../vec2')\nconst { solve2Linear } = require('../utils')\n\n/**\n * Return the point of intersection between the given lines.\n *\n * NOTES:\n * The point will have Infinity values if the lines are parallel.\n * The point will have NaN values if the lines are the same.\n *\n * @param {line2} line1 - line of reference\n * @param {line2} line2 - line of reference\n * @return {vec2} the point of intersection\n * @alias module:modeling/maths/line2.intersectPointOfLines\n */\nconst intersectToLine = (line1, line2) => {\n  const point = solve2Linear(line1[0], line1[1], line2[0], line2[1], line1[2], line2[2])\n  return vec2.clone(point)\n}\n\nmodule.exports = intersectToLine\n", "const vec2 = require('../vec2')\n\nconst copy = require('./copy')\nconst fromValues = require('./fromValues')\n\n/**\n * Create a new line in the opposite direction as the given.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to reverse\n * @returns {line2} out\n * @alias module:modeling/maths/line2.reverse\n */\nconst reverse = (out, line) => {\n  const normal = vec2.negate(vec2.create(), line)\n  const distance = -line[2]\n  return copy(out, fromValues(normal[0], normal[1], distance))\n}\n\nmodule.exports = reverse\n", "/**\n * Return a string representing the given line.\n *\n * @param {line2} line - line of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/line2.toString\n */\nconst toString = (line) => `line2: (${line[0].toFixed(7)}, ${line[1].toFixed(7)}, ${line[2].toFixed(7)})`\n\nmodule.exports = toString\n", "const vec2 = require('../vec2')\n\nconst fromPoints = require('./fromPoints')\nconst origin = require('./origin')\nconst direction = require('./direction')\n\n/**\n * Transforms the given line using the given matrix.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {line2} out\n * @alias module:modeling/maths/line2.transform\n */\nconst transform = (out, line, matrix) => {\n  const org = origin(line)\n  const dir = direction(line)\n\n  vec2.transform(org, org, matrix)\n  vec2.transform(dir, dir, matrix)\n\n  return fromPoints(out, org, dir)\n}\n\nmodule.exports = transform\n", "const origin = require('./origin')\n\n/**\n * Determine the X coordinate of the given line at the Y coordinate.\n *\n * The X coordinate will be Infinity if the line is parallel to the X axis.\n *\n * @param {line2} line - line of reference\n * @param {Number} y - Y coordinate on the line\n * @return {Number} the X coordinate on the line\n * @alias module:modeling/maths/line2.xAtY\n */\nconst xAtY = (line, y) => {\n  let x = (line[2] - (line[1] * y)) / line[0]\n  if (Number.isNaN(x)) {\n    const org = origin(line)\n    x = org[0]\n  }\n  return x\n}\n\nmodule.exports = xAtY\n", "/**\n * Represents a unbounded line in 2D space, positioned at a point of origin.\n * @see {@link line2} for data structure information.\n * @module modeling/maths/line2\n */\nmodule.exports = {\n  clone: require('./clone'),\n  closestPoint: require('./closestPoint'),\n  copy: require('./copy'),\n  create: require('./create'),\n  direction: require('./direction'),\n  distanceToPoint: require('./distanceToPoint'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromValues: require('./fromValues'),\n  intersectPointOfLines: require('./intersectPointOfLines'),\n  origin: require('./origin'),\n  reverse: require('./reverse'),\n  toString: require('./toString'),\n  transform: require('./transform'),\n  xAtY: require('./xAtY')\n}\n", "const vec3 = require('../vec3')\n\n/**\n * Represents a unbounded line in 3D space, positioned at a point of origin.\n * A line is parametrized by a point of origin and a directional vector.\n *\n * The array contents are two 3D vectors; origin [0,0,0] and directional vector [0,0,1].\n * @see https://en.wikipedia.org/wiki/Hesse_normal_form\n * @typedef {Array} line3\n */\n\n/**\n * Create a line, positioned at 0,0,0 and lying on the X axis.\n *\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.create\n */\nconst create = () => [\n  vec3.fromValues(0, 0, 0), // origin\n  vec3.fromValues(0, 0, 1) // direction\n]\n\nmodule.exports = create\n", "const vec3 = require('../vec3')\n\nconst create = require('./create')\n\n/**\n * Create a clone of the given line.\n *\n * @param {line3} line - line to clone\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.clone\n */\nconst clone = (line) => {\n  const out = create()\n  vec3.copy(out[0], line[0])\n  vec3.copy(out[1], line[1])\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../vec3')\n\n/**\n * Determine the closest point on the given line to the given point.\n *\n * @param {line3} line - line of reference\n * @param {vec3} point - point of reference\n * @returns {vec3} a point\n * @alias module:modeling/maths/line3.closestPoint\n */\nconst closestPoint = (line, point) => {\n  const lpoint = line[0]\n  const ldirection = line[1]\n\n  const a = vec3.dot(vec3.subtract(vec3.create(), point, lpoint), ldirection)\n  const b = vec3.dot(ldirection, ldirection)\n  const t = a / b\n\n  const closestpoint = vec3.scale(vec3.create(), ldirection, t)\n  vec3.add(closestpoint, closestpoint, lpoint)\n  return closestpoint\n}\n\nmodule.exports = closestPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Copy the given line into the receiving line.\n *\n * @param {line3} out - receiving line\n * @param {line3} line - line to copy\n * @returns {line3} out\n * @alias module:modeling/maths/line3.copy\n */\nconst copy = (out, line) => {\n  vec3.copy(out[0], line[0])\n  vec3.copy(out[1], line[1])\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Return the direction of the given line.\n *\n * @param {line3} line - line for reference\n * @return {vec3} the relative vector in the direction of the line\n * @alias module:modeling/maths/line3.direction\n */\nconst direction = (line) => line[1]\n\nmodule.exports = direction\n", "const vec3 = require('../vec3')\n\nconst closestPoint = require('./closestPoint')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {line3} line - line of reference\n * @param {vec3} point - point of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line3.distanceToPoint\n */\nconst distanceToPoint = (line, point) => {\n  const closest = closestPoint(line, point)\n  const distancevector = vec3.subtract(vec3.create(), point, closest)\n  return vec3.length(distancevector)\n}\n\nmodule.exports = distanceToPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Compare the given lines for equality.\n *\n * @param {line3} line1 - first line to compare\n * @param {line3} line2 - second line to compare\n * @return {Boolean} true if lines are equal\n * @alias module:modeling/maths/line3.equals\n */\nconst equals = (line1, line2) => {\n  // compare directions (unit vectors)\n  if (!vec3.equals(line1[1], line2[1])) return false\n\n  // compare points\n  if (!vec3.equals(line1[0], line2[0])) return false\n\n  // why would lines with the same slope (direction) and different points be equal?\n  // let distance = distanceToPoint(line1, line2[0])\n  // if (distance > EPS) return false\n\n  return true\n}\n\nmodule.exports = equals\n", "const vec3 = require('../vec3')\n\n/**\n * Create a line from the given point (origin) and direction.\n *\n * The point can be any random point on the line.\n * The direction must be a vector with positive or negative distance from the point.\n *\n * See the logic of fromPoints() for appropriate values.\n *\n * @param {line3} out - receiving line\n * @param {vec3} point - start point of the line segment\n * @param {vec3} direction - direction of the line segment\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPointAndDirection\n */\nconst fromPointAndDirection = (out, point, direction) => {\n  const unit = vec3.normalize(vec3.create(), direction)\n\n  vec3.copy(out[0], point)\n  vec3.copy(out[1], unit)\n  return out\n}\n\nmodule.exports = fromPointAndDirection\n", "const vec3 = require('../vec3')\nconst { solve2Linear } = require('../utils')\n\nconst { EPS } = require('../constants')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line the intersection of the given planes.\n *\n * @param {line3} out - receiving line\n * @param {plane} plane1 - first plane of reference\n * @param {plane} plane2 - second plane of reference\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPlanes\n */\nconst fromPlanes = (out, plane1, plane2) => {\n  let direction = vec3.cross(vec3.create(), plane1, plane2)\n  let length = vec3.length(direction)\n  if (length < EPS) {\n    throw new Error('parallel planes do not intersect')\n  }\n  length = (1.0 / length)\n  direction = vec3.scale(direction, direction, length)\n\n  const absx = Math.abs(direction[0])\n  const absy = Math.abs(direction[1])\n  const absz = Math.abs(direction[2])\n  let origin\n  let r\n  if ((absx >= absy) && (absx >= absz)) {\n    // find a point p for which x is zero\n    r = solve2Linear(plane1[1], plane1[2], plane2[1], plane2[2], plane1[3], plane2[3])\n    origin = vec3.fromValues(0, r[0], r[1])\n  } else if ((absy >= absx) && (absy >= absz)) {\n    // find a point p for which y is zero\n    r = solve2Linear(plane1[0], plane1[2], plane2[0], plane2[2], plane1[3], plane2[3])\n    origin = vec3.fromValues(r[0], 0, r[1])\n  } else {\n    // find a point p for which z is zero\n    r = solve2Linear(plane1[0], plane1[1], plane2[0], plane2[1], plane1[3], plane2[3])\n    origin = vec3.fromValues(r[0], r[1], 0)\n  }\n  return fromPointAndDirection(out, origin, direction)\n}\n\nmodule.exports = fromPlanes\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line that passes through the given points.\n *\n * @param {line3} out - receiving line\n * @param {vec3} point1 - start point of the line segment\n * @param {vec3} point2 - end point of the line segment\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPoints\n */\nconst fromPoints = (out, point1, point2) => {\n  const direction = vec3.subtract(vec3.create(), point2, point1)\n  return fromPointAndDirection(out, point1, direction)\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../vec3')\n\n/**\n * Determine the closest point on the given plane to the given line.\n *\n * NOTES:\n * The point of intersection will be invalid if the line is parallel to the plane, e.g. NaN.\n *\n * @param {line3} line - line of reference\n * @param {plane} plane - plane of reference\n * @returns {vec3} a point on the line\n * @alias module:modeling/maths/line3.intersectPointOfLineAndPlane\n */\nconst intersectToPlane = (line, plane) => {\n  // plane: plane.normal * p = plane.w\n  const pnormal = plane\n  const pw = plane[3]\n\n  const lpoint = line[0]\n  const ldirection = line[1]\n\n  // point: p = line.point + labda * line.direction\n  const labda = (pw - vec3.dot(pnormal, lpoint)) / vec3.dot(pnormal, ldirection)\n\n  const point = vec3.add(vec3.create(), lpoint, vec3.scale(vec3.create(), ldirection, labda))\n  return point\n}\n\nmodule.exports = intersectToPlane\n", "/**\n * Return the origin of the given line.\n *\n * @param {line3} line - line of reference\n * @return {vec3} the origin of the line\n * @alias module:modeling/maths/line3.origin\n */\nconst origin = (line) => line[0]\n\nmodule.exports = origin\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line in the opposite direction as the given.\n *\n * @param {line3} out - receiving line\n * @param {line3} line - line to reverse\n * @returns {line3} out\n * @alias module:modeling/maths/line3.reverse\n */\nconst reverse = (out, line) => {\n  const point = vec3.clone(line[0])\n  const direction = vec3.negate(vec3.create(), line[1])\n  return fromPointAndDirection(out, point, direction)\n}\n\nmodule.exports = reverse\n", "/**\n * Return a string representing the given line.\n *\n * @param {line3} line - line of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/line3.toString\n */\nconst toString = (line) => {\n  const point = line[0]\n  const direction = line[1]\n  return `line3: point: (${point[0].toFixed(7)}, ${point[1].toFixed(7)}, ${point[2].toFixed(7)}) direction: (${direction[0].toFixed(7)}, ${direction[1].toFixed(7)}, ${direction[2].toFixed(7)})`\n}\n\nmodule.exports = toString\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Transforms the given line using the given matrix.\n *\n * @param {line3} out - line to update\n * @param {line3} line - line to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.transform\n */\nconst transform = (out, line, matrix) => {\n  const point = line[0]\n  const direction = line[1]\n  const pointPlusDirection = vec3.add(vec3.create(), point, direction)\n\n  const newpoint = vec3.transform(vec3.create(), point, matrix)\n  const newPointPlusDirection = vec3.transform(pointPlusDirection, pointPlusDirection, matrix)\n  const newdirection = vec3.subtract(newPointPlusDirection, newPointPlusDirection, newpoint)\n\n  return fromPointAndDirection(out, newpoint, newdirection)\n}\n\nmodule.exports = transform\n", "/**\n * Represents a unbounded line in 3D space, positioned at a point of origin.\n * @see {@link line3} for data structure information.\n * @module modeling/maths/line3\n */\nmodule.exports = {\n  clone: require('./clone'),\n  closestPoint: require('./closestPoint'),\n  copy: require('./copy'),\n  create: require('./create'),\n  direction: require('./direction'),\n  distanceToPoint: require('./distanceToPoint'),\n  equals: require('./equals'),\n  fromPlanes: require('./fromPlanes'),\n  fromPointAndDirection: require('./fromPointAndDirection'),\n  fromPoints: require('./fromPoints'),\n  intersectPointOfLineAndPlane: require('./intersectPointOfLineAndPlane'),\n  origin: require('./origin'),\n  reverse: require('./reverse'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "/**\n * Maths are computational units for fundamental Euclidean geometry. All maths operate upon array data structures.\n * Note: Maths data structures are considered immutable, so never change the contents directly.\n * @see Most computations are based upon the glMatrix library (glmatrix.net)\n * @module modeling/maths\n * @example\n * const { constants, line2, mat4, vec2, vec3 } = require('@jscad/modeling').maths\n\n */\nmodule.exports = {\n  constants: require('./constants'),\n  line2: require('./line2'),\n  line3: require('./line3'),\n  mat4: require('./mat4'),\n  plane: require('./plane'),\n  utils: require('./utils'),\n  vec2: require('./vec2'),\n  vec3: require('./vec3'),\n  vec4: require('./vec4')\n}\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the area of the given geometry.\n * NOTE: paths are infinitely narrow and do not have an area\n *\n * @param {path2} geometry - geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfPath2 = () => 0\n\n/*\n * Measure the area of the given geometry.\n * For a counter clockwise rotating geometry (about Z) the area is positive, otherwise negative.\n *\n * @see http://paulbourke.net/geometry/polygonmesh/\n * @param {geom2} geometry - 2D geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfGeom2 = (geometry) => {\n  let area = cache.get(geometry)\n  if (area) return area\n\n  const sides = geom2.toSides(geometry)\n  area = sides.reduce((area, side) => area + (side[0][0] * side[1][1] - side[0][1] * side[1][0]), 0)\n  area *= 0.5\n\n  cache.set(geometry, area)\n\n  return area\n}\n\n/*\n * Measure the area of the given geometry.\n *\n * @param {geom3} geometry - 3D geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfGeom3 = (geometry) => {\n  let area = cache.get(geometry)\n  if (area) return area\n\n  const polygons = geom3.toPolygons(geometry)\n  area = polygons.reduce((area, polygon) => area + poly3.measureArea(polygon), 0)\n\n  cache.set(geometry, area)\n\n  return area\n}\n\n/**\n * Measure the area of the given geometries.\n * @param {...Objects} geometries - the geometries to measure\n * @return {Number|Array} the area, or a list of areas for each geometry\n * @alias module:modeling/measurements.measureArea\n *\n * @example\n * let area = measureArea(sphere())\n */\nconst measureArea = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureAreaOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureAreaOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureAreaOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureArea\n", "const flatten = require('../utils/flatten')\n\nconst measureArea = require('./measureArea')\n\n/**\n * Measure the total (aggregate) area for the given geometries.\n * Note: This measurement will not account for overlapping geometry\n * @param {...Object} geometries - the geometries to measure.\n * @return {Number} the total surface area for the group of geometry.\n * @alias module:modeling/measurements.measureAggregateArea\n *\n * @example\n * let totalArea = measureAggregateArea(sphere(),cube())\n */\nconst measureAggregateArea = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateArea: no geometries supplied')\n  const areas = measureArea(geometries)\n  if (geometries.length === 1) {\n    return areas\n  }\n  const result = 0\n  return areas.reduce((result, area) => result + area, result)\n}\n\nmodule.exports = measureAggregateArea\n", "const flatten = require('../utils/flatten')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the min and max bounds of the given (path2) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfPath2 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const points = path2.toPoints(geometry)\n\n  let minpoint\n  if (points.length === 0) {\n    minpoint = vec2.create()\n  } else {\n    minpoint = vec2.clone(points[0])\n  }\n  let maxpoint = vec2.clone(minpoint)\n\n  points.forEach((point) => {\n    vec2.min(minpoint, minpoint, point)\n    vec2.max(maxpoint, maxpoint, point)\n  })\n  minpoint = [minpoint[0], minpoint[1], 0]\n  maxpoint = [maxpoint[0], maxpoint[1], 0]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/*\n * Measure the min and max bounds of the given (geom2) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfGeom2 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const points = geom2.toPoints(geometry)\n\n  let minpoint\n  if (points.length === 0) {\n    minpoint = vec2.create()\n  } else {\n    minpoint = vec2.clone(points[0])\n  }\n  let maxpoint = vec2.clone(minpoint)\n\n  points.forEach((point) => {\n    vec2.min(minpoint, minpoint, point)\n    vec2.max(maxpoint, maxpoint, point)\n  })\n\n  minpoint = [minpoint[0], minpoint[1], 0]\n  maxpoint = [maxpoint[0], maxpoint[1], 0]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/*\n * Measure the min and max bounds of the given (geom3) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfGeom3 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const polygons = geom3.toPolygons(geometry)\n\n  let minpoint = vec3.create()\n  if (polygons.length > 0) {\n    const points = poly3.toPoints(polygons[0])\n    vec3.copy(minpoint, points[0])\n  }\n  let maxpoint = vec3.clone(minpoint)\n\n  polygons.forEach((polygon) => {\n    poly3.toPoints(polygon).forEach((point) => {\n      vec3.min(minpoint, minpoint, point)\n      vec3.max(maxpoint, maxpoint, point)\n    })\n  })\n\n  minpoint = [minpoint[0], minpoint[1], minpoint[2]]\n  maxpoint = [maxpoint[0], maxpoint[1], maxpoint[2]]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/**\n * Measure the min and max bounds of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the min and max bounds, or a list of bounds for each geometry\n * @alias module:modeling/measurements.measureBoundingBox\n *\n * @example\n * let bounds = measureBoundingBox(sphere())\n */\nconst measureBoundingBox = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureBoundingBoxOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureBoundingBoxOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureBoundingBoxOfGeom3(geometry)\n    return [[0, 0, 0], [0, 0, 0]]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureBoundingBox\n", "const flatten = require('../utils/flatten')\nconst vec3min = require('../maths/vec3/min')\nconst vec3max = require('../maths/vec3/max')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the aggregated minimum and maximum bounds for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the min and max bounds for the group of geometry, i.e. [[x,y,z],[X,Y,Z]]\n * @alias module:modeling/measurements.measureAggregateBoundingBox\n *\n * @example\n * let bounds = measureAggregateBoundingBox(sphere(),cube())\n */\nconst measureAggregateBoundingBox = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateBoundingBox: no geometries supplied')\n  const bounds = measureBoundingBox(geometries)\n  if (geometries.length === 1) {\n    return bounds\n  }\n  const result = [[Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE], [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]]\n  return bounds.reduce((result, item) => {\n    result = [vec3min(result[0], result[0], item[0]), vec3max(result[1], result[1], item[1])]\n    return result\n  }, result)\n}\n\nmodule.exports = measureAggregateBoundingBox\n", "const { EPS } = require('../maths/constants')\n\nconst calculateEpsilonFromBounds = (bounds, dimensions) => {\n  let total = 0\n  for (let i = 0; i < dimensions; i++) {\n    total += bounds[1][i] - bounds[0][i]\n  }\n  return EPS * total / dimensions\n}\n\nmodule.exports = calculateEpsilonFromBounds\n", "const flatten = require('../utils/flatten')\nconst measureAggregateBoundingBox = require('./measureAggregateBoundingBox')\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst { geom2, geom3, path2 } = require('../geometries')\n\n/**\n * Measure the aggregated Epsilon for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number} the aggregated Epsilon for the whole group of geometries\n * @alias module:modeling/measurements.measureAggregateEpsilon\n *\n * @example\n * let groupEpsilon = measureAggregateEpsilon(sphere(),cube())\n */\nconst measureAggregateEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateEpsilon: no geometries supplied')\n  const bounds = measureAggregateBoundingBox(geometries)\n\n  let dimensions = 0\n  dimensions = geometries.reduce((dimensions, geometry) => {\n    if (path2.isA(geometry) || geom2.isA(geometry)) return Math.max(dimensions, 2)\n    if (geom3.isA(geometry)) return Math.max(dimensions, 3)\n    return 0\n  }, dimensions)\n  return calculateEpsilonFromBounds(bounds, dimensions)\n}\n\nmodule.exports = measureAggregateEpsilon\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the volume of the given geometry.\n * NOTE: paths are infinitely narrow and do not have an volume\n *\n * @param {Path2} geometry - geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfPath2 = () => 0\n\n/*\n * Measure the volume of the given geometry.\n * NOTE: 2D geometry are infinitely thin and do not have an volume\n *\n * @param {Geom2} geometry - 2D geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfGeom2 = () => 0\n\n/*\n * Measure the volume of the given geometry.\n *\n * @param {Geom3} geometry - 3D geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfGeom3 = (geometry) => {\n  let volume = cache.get(geometry)\n  if (volume) return volume\n\n  const polygons = geom3.toPolygons(geometry)\n  volume = polygons.reduce((volume, polygon) => volume + poly3.measureSignedVolume(polygon), 0)\n\n  cache.set(geometry, volume)\n\n  return volume\n}\n\n/**\n * Measure the volume of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the volume, or a list of volumes for each geometry\n * @alias module:modeling/measurements.measureVolume\n *\n * @example\n * let volume = measureVolume(sphere())\n */\nconst measureVolume = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureVolumeOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureVolumeOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureVolumeOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureVolume\n", "const flatten = require('../utils/flatten')\n\nconst measureVolume = require('./measureVolume')\n\n/**\n * Measure the total (aggregate) volume for the given geometries.\n * Note: This measurement will not account for overlapping geometry\n * @param {...Object} geometries - the geometries to measure.\n * @return {Number} the volume for the group of geometry.\n * @alias module:modeling/measurements.measureAggregateVolume\n *\n * @example\n * let totalVolume = measureAggregateVolume(sphere(),cube())\n */\nconst measureAggregateVolume = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateVolume: no geometries supplied')\n  const volumes = measureVolume(geometries)\n  if (geometries.length === 1) {\n    return volumes\n  }\n  const result = 0\n  return volumes.reduce((result, volume) => result + volume, result)\n}\n\nmodule.exports = measureAggregateVolume\n", "const flatten = require('../utils/flatten')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cacheOfBoundingSpheres = new WeakMap()\n\n/*\n * Measure the bounding sphere of the given (path2) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfPath2 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const points = path2.toPoints(geometry)\n\n  if (points.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    const temp = vec3.create()\n    points.forEach((point) => {\n      vec3.add(centroid, centroid, vec3.fromVec2(temp, point, 0))\n      numPoints++\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    points.forEach((point) => {\n      radius = Math.max(radius, vec2.squaredDistance(centroid, point))\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/*\n * Measure the bounding sphere of the given (geom2) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfGeom2 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const sides = geom2.toSides(geometry)\n\n  if (sides.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    const temp = vec3.create()\n    sides.forEach((side) => {\n      vec3.add(centroid, centroid, vec3.fromVec2(temp, side[0], 0))\n      numPoints++\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    sides.forEach((side) => {\n      radius = Math.max(radius, vec2.squaredDistance(centroid, side[0]))\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/*\n * Measure the bounding sphere of the given (geom3) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfGeom3 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const polygons = geom3.toPolygons(geometry)\n\n  if (polygons.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    polygons.forEach((polygon) => {\n      poly3.toPoints(polygon).forEach((point) => {\n        vec3.add(centroid, centroid, point)\n        numPoints++\n      })\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    polygons.forEach((polygon) => {\n      poly3.toPoints(polygon).forEach((point) => {\n        radius = Math.max(radius, vec3.squaredDistance(centroid, point))\n      })\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/**\n * Measure the (approximate) bounding sphere of the given geometries.\n * @see https://en.wikipedia.org/wiki/Bounding_sphere\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the bounding sphere for each geometry, i.e. [centroid, radius]\n * @alias module:modeling/measurements.measureBoundingSphere\n *\n * @example\n * let bounds = measureBoundingSphere(cube())\n */\nconst measureBoundingSphere = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureBoundingSphereOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureBoundingSphereOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureBoundingSphereOfGeom3(geometry)\n    return [[0, 0, 0], 0]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureBoundingSphere\n", "const flatten = require('../utils/flatten')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the center of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the center point for each geometry, i.e. [X, Y, Z]\n * @alias module:modeling/measurements.measureCenter\n *\n * @example\n * let center = measureCenter(sphere())\n */\nconst measureCenter = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    const bounds = measureBoundingBox(geometry)\n    return [\n      (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2)),\n      (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2)),\n      (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))\n    ]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureCenter\n", "const flatten = require('../utils/flatten')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\n\nconst cacheOfCenterOfMass = new WeakMap()\n\n/*\n * Measure the center of mass for the given geometry.\n *\n * @see http://paulbourke.net/geometry/polygonmesh/\n * @return {Array} the center of mass for the geometry\n */\nconst measureCenterOfMassGeom2 = (geometry) => {\n  let centerOfMass = cacheOfCenterOfMass.get(geometry)\n  if (centerOfMass !== undefined) return centerOfMass\n\n  const sides = geom2.toSides(geometry)\n\n  let area = 0\n  let x = 0\n  let y = 0\n  if (sides.length > 0) {\n    for (let i = 0; i < sides.length; i++) {\n      const p1 = sides[i][0]\n      const p2 = sides[i][1]\n\n      const a = p1[0] * p2[1] - p1[1] * p2[0]\n      area += a\n      x += (p1[0] + p2[0]) * a\n      y += (p1[1] + p2[1]) * a\n    }\n    area /= 2\n\n    const f = 1 / (area * 6)\n    x *= f\n    y *= f\n  }\n\n  centerOfMass = vec3.fromValues(x, y, 0)\n\n  cacheOfCenterOfMass.set(geometry, centerOfMass)\n  return centerOfMass\n}\n\n/*\n * Measure the center of mass for the given geometry.\n * @return {Array} the center of mass for the geometry\n */\nconst measureCenterOfMassGeom3 = (geometry) => {\n  let centerOfMass = cacheOfCenterOfMass.get(geometry)\n  if (centerOfMass !== undefined) return centerOfMass\n\n  centerOfMass = vec3.create() // 0, 0, 0\n\n  const polygons = geom3.toPolygons(geometry)\n  if (polygons.length === 0) return centerOfMass\n\n  let totalVolume = 0\n  const vector = vec3.create() // for speed\n  polygons.forEach((polygon) => {\n    // calculate volume and center of each tetrahedron\n    const vertices = polygon.vertices\n    for (let i = 0; i < vertices.length - 2; i++) {\n      vec3.cross(vector, vertices[i + 1], vertices[i + 2])\n      const volume = vec3.dot(vertices[0], vector) / 6\n\n      totalVolume += volume\n\n      vec3.add(vector, vertices[0], vertices[i + 1])\n      vec3.add(vector, vector, vertices[i + 2])\n      const weightedCenter = vec3.scale(vector, vector, 1 / 4 * volume)\n\n      vec3.add(centerOfMass, centerOfMass, weightedCenter)\n    }\n  })\n  vec3.scale(centerOfMass, centerOfMass, 1 / totalVolume)\n\n  cacheOfCenterOfMass.set(geometry, centerOfMass)\n  return centerOfMass\n}\n\n/**\n * Measure the center of mass for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the center of mass for each geometry, i.e. [X, Y, Z]\n * @alias module:modeling/measurements.measureCenterOfMass\n *\n * @example\n * let center = measureCenterOfMass(sphere())\n */\nconst measureCenterOfMass = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    // NOTE: center of mass for geometry path2 is not possible\n    if (geom2.isA(geometry)) return measureCenterOfMassGeom2(geometry)\n    if (geom3.isA(geometry)) return measureCenterOfMassGeom3(geometry)\n    return [0, 0, 0]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureCenterOfMass\n", "const flatten = require('../utils/flatten')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the dimensions of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the dimensions for each geometry, i.e. [width, depth, height]\n * @alias module:modeling/measurements.measureDimensions\n *\n * @example\n * let dimensions = measureDimensions(sphere())\n */\nconst measureDimensions = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    const boundingBox = measureBoundingBox(geometry)\n    return [\n      boundingBox[1][0] - boundingBox[0][0],\n      boundingBox[1][1] - boundingBox[0][1],\n      boundingBox[1][2] - boundingBox[0][2]\n    ]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureDimensions\n", "const flatten = require('../utils/flatten')\nconst { geom2, geom3, path2 } = require('../geometries')\n\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/*\n * Measure the epsilon of the given (path2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfPath2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n\n/*\n * Measure the epsilon of the given (geom2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n\n/*\n * Measure the epsilon of the given (geom3) geometry.\n * @return {Float} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom3 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 3)\n\n/**\n * Measure the epsilon of the given geometries.\n * Epsilon values are used in various functions to determine minimum distances between points, planes, etc.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the epsilon, or a list of epsilons for each geometry\n * @alias module:modeling/measurements.measureEpsilon\n *\n * @example\n * let epsilon = measureEpsilon(sphere())\n */\nconst measureEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureEpsilonOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureEpsilonOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureEpsilonOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureEpsilon\n", "/**\n * All shapes (primitives or the results of operations) can be measured, e.g. calculate volume, etc.\n * @module modeling/measurements\n * @example\n * const { measureArea, measureBoundingBox, measureVolume } = require('@jscad/modeling').measurements\n */\nmodule.exports = {\n  measureAggregateArea: require('./measureAggregateArea'),\n  measureAggregateBoundingBox: require('./measureAggregateBoundingBox'),\n  measureAggregateEpsilon: require('./measureAggregateEpsilon'),\n  measureAggregateVolume: require('./measureAggregateVolume'),\n  measureArea: require('./measureArea'),\n  measureBoundingBox: require('./measureBoundingBox'),\n  measureBoundingSphere: require('./measureBoundingSphere'),\n  measureCenter: require('./measureCenter'),\n  measureCenterOfMass: require('./measureCenterOfMass'),\n  measureDimensions: require('./measureDimensions'),\n  measureEpsilon: require('./measureEpsilon'),\n  measureVolume: require('./measureVolume')\n}\n", "// verify that the array has the given dimension, and contains Number values\nconst isNumberArray = (array, dimension) => {\n  if (Array.isArray(array) && array.length >= dimension) {\n    return array.every((n) => Number.isFinite(n))\n  }\n  return false\n}\n\n// verify that the value is a Number greater than the constant\nconst isGT = (value, constant) => (Number.isFinite(value) && value > constant)\n\n// verify that the value is a Number greater than or equal to the constant\nconst isGTE = (value, constant) => (Number.isFinite(value) && value >= constant)\n\nmodule.exports = {\n  isNumberArray,\n  isGT,\n  isGTE\n}\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst path2 = require('../geometries/path2')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an arc in two dimensional space where all points are at the same distance from the center.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of arc\n * @param {Number} [options.radius=1] - radius of arc\n * @param {Number} [options.startAngle=0] - starting angle of the arc, in radians\n * @param {Number} [options.endAngle=TAU] - ending angle of the arc, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Boolean} [options.makeTangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\n * @returns {path2} new 2D path\n * @alias module:modeling/primitives.arc\n */\nconst arc = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: 1,\n    startAngle: 0,\n    endAngle: TAU,\n    makeTangent: false,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, makeTangent, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minangle = Math.acos(((radius * radius) + (radius * radius) - (EPS * EPS)) / (2 * radius * radius))\n\n  const centerv = vec2.clone(center)\n  let point\n  const pointArray = []\n  if (rotation < minangle) {\n    // there is no rotation, just a single point\n    point = vec2.fromAngleRadians(vec2.create(), startAngle)\n    vec2.scale(point, point, radius)\n    vec2.add(point, point, centerv)\n    pointArray.push(point)\n  } else {\n    // note: add one additional step to acheive full rotation\n    const numsteps = Math.max(1, Math.floor(segments * (rotation / TAU))) + 1\n    let edgestepsize = numsteps * 0.5 / rotation // step size for half a degree\n    if (edgestepsize > 0.25) edgestepsize = 0.25\n\n    const totalsteps = makeTangent ? (numsteps + 2) : numsteps\n    for (let i = 0; i <= totalsteps; i++) {\n      let step = i\n      if (makeTangent) {\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize\n        if (step < 0) step = 0\n        if (step > numsteps) step = numsteps\n      }\n      const angle = startAngle + (step * (rotation / numsteps))\n      point = vec2.fromAngleRadians(vec2.create(), angle)\n      vec2.scale(point, point, radius)\n      vec2.add(point, point, centerv)\n      pointArray.push(point)\n    }\n  }\n  return path2.fromPoints({ closed: false }, pointArray)\n}\n\nmodule.exports = arc\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned ellipse in two dimensional space.\n * @see https://en.wikipedia.org/wiki/Ellipse\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of ellipse\n * @param {Array} [options.radius=[1,1]] - radius of ellipse, along X and Y\n * @param {Number} [options.startAngle=0] - start angle of ellipse, in radians\n * @param {Number} [options.endAngle=TAU] - end angle of ellipse, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.ellipse\n * @example\n * let myshape = ellipse({radius: [5,10]})\n */\nconst ellipse = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: [1, 1],\n    startAngle: 0,\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(radius, 2)) throw new Error('radius must be an array of X and Y values')\n  if (!radius.every((n) => n >= 0)) throw new Error('radius values must be positive')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 3)) throw new Error('segments must be three or more')\n\n  // if any radius is zero return empty geometry\n  if (radius[0] === 0 || radius[1] === 0) return geom2.create()\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minradius = Math.min(radius[0], radius[1])\n  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /\n                            (2 * minradius * minradius))\n  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')\n\n  segments = Math.floor(segments * (rotation / TAU))\n\n  const centerv = vec2.clone(center)\n  const step = rotation / segments // radians per segment\n\n  const points = []\n  segments = (rotation < TAU) ? segments + 1 : segments\n  for (let i = 0; i < segments; i++) {\n    const angle = (step * i) + startAngle\n    const point = vec2.fromValues(radius[0] * cos(angle), radius[1] * sin(angle))\n    vec2.add(point, centerv, point)\n    points.push(point)\n  }\n  if (rotation < TAU) points.push(centerv)\n  return geom2.fromPoints(points)\n}\n\nmodule.exports = ellipse\n", "const { TAU } = require('../maths/constants')\n\nconst ellipse = require('./ellipse')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct a circle in two dimensional space where all points are at the same distance from the center.\n * @see [ellipse]{@link module:modeling/primitives.ellipse} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.startAngle=0] - start angle of circle, in radians\n * @param {Number} [options.endAngle=TAU] - end angle of circle, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.circle\n * @example\n * let myshape = circle({radius: 10})\n */\nconst circle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: 1,\n    startAngle: 0,\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isGTE(radius, 0)) throw new Error('radius must be positive')\n\n  radius = [radius, radius]\n\n  return ellipse({ center, radius, startAngle, endAngle, segments })\n}\n\nmodule.exports = circle\n", "const geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned solid cuboid in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cuboid\n * @param {Array} [options.size=[2,2,2]] - dimensions of cuboid; width, depth, height\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.cuboid\n *\n * @example\n * let myshape = cuboid({size: [5, 10, 5]})\n */\nconst cuboid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: [2, 2, 2]\n  }\n  const { center, size } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(size, 3)) throw new Error('size must be an array of width, depth and height values')\n  if (!size.every((n) => n >= 0)) throw new Error('size values must be positive')\n\n  // if any size is zero return empty geometry\n  if (size[0] === 0 || size[1] === 0 || size[2] === 0) return geom3.create()\n\n  const result = geom3.create(\n    // adjust a basic shape to size\n    [\n      [[0, 4, 6, 2], [-1, 0, 0]],\n      [[1, 3, 7, 5], [+1, 0, 0]],\n      [[0, 1, 5, 4], [0, -1, 0]],\n      [[2, 6, 7, 3], [0, +1, 0]],\n      [[0, 2, 3, 1], [0, 0, -1]],\n      [[4, 5, 7, 6], [0, 0, +1]]\n    ].map((info) => {\n      const points = info[0].map((i) => {\n        const pos = [\n          center[0] + (size[0] / 2) * (2 * !!(i & 1) - 1),\n          center[1] + (size[1] / 2) * (2 * !!(i & 2) - 1),\n          center[2] + (size[2] / 2) * (2 * !!(i & 4) - 1)\n        ]\n        return pos\n      })\n      return poly3.create(points)\n    })\n  )\n  return result\n}\n\nmodule.exports = cuboid\n", "const cuboid = require('./cuboid')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned solid cube in three dimensional space with six square faces.\n * @see [cuboid]{@link module:modeling/primitives.cuboid} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cube\n * @param {Number} [options.size=2] - dimension of cube\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.cube\n * @example\n * let myshape = cube({size: 10})\n */\nconst cube = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: 2\n  }\n  let { center, size } = Object.assign({}, defaults, options)\n\n  if (!isGTE(size, 0)) throw new Error('size must be positive')\n\n  size = [size, size, size]\n\n  return cuboid({ center, size })\n}\n\nmodule.exports = cube\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct a Z axis-aligned elliptic cylinder in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Array} [options.startRadius=[1,1]] - radius of rounded start, must be two dimensional array\n * @param {Number} [options.startAngle=0] - start angle of cylinder, in radians\n * @param {Array} [options.endRadius=[1,1]] - radius of rounded end, must be two dimensional array\n * @param {Number} [options.endAngle=TAU] - end angle of cylinder, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new geometry\n * @alias module:modeling/primitives.cylinderElliptic\n *\n * @example\n * let myshape = cylinderElliptic({height: 2, startRadius: [10,5], endRadius: [8,3]})\n */\nconst cylinderElliptic = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    startRadius: [1, 1],\n    startAngle: 0,\n    endRadius: [1, 1],\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, height, startRadius, startAngle, endRadius, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isGT(height, 0)) throw new Error('height must be greater then zero')\n  if (!isNumberArray(startRadius, 2)) throw new Error('startRadius must be an array of X and Y values')\n  if (!startRadius.every((n) => n >= 0)) throw new Error('startRadius values must be positive')\n  if (!isNumberArray(endRadius, 2)) throw new Error('endRadius must be an array of X and Y values')\n  if (!endRadius.every((n) => n >= 0)) throw new Error('endRadius values must be positive')\n  if (endRadius.every((n) => n === 0) && startRadius.every((n) => n === 0)) throw new Error('at least one radius must be positive')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minradius = Math.min(startRadius[0], startRadius[1], endRadius[0], endRadius[1])\n  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /\n                            (2 * minradius * minradius))\n  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')\n\n  const slices = Math.floor(segments * (rotation / TAU))\n\n  const start = vec3.fromValues(0, 0, -(height / 2))\n  const end = vec3.fromValues(0, 0, height / 2)\n  const ray = vec3.subtract(vec3.create(), end, start)\n\n  const axisX = vec3.fromValues(1, 0, 0)\n  const axisY = vec3.fromValues(0, 1, 0)\n\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n  const v3 = vec3.create()\n  const point = (stack, slice, radius) => {\n    const angle = slice * rotation + startAngle\n    vec3.scale(v1, axisX, radius[0] * cos(angle))\n    vec3.scale(v2, axisY, radius[1] * sin(angle))\n    vec3.add(v1, v1, v2)\n\n    vec3.scale(v3, ray, stack)\n    vec3.add(v3, v3, start)\n    return vec3.add(vec3.create(), v1, v3)\n  }\n\n  // adjust the points to center\n  const fromPoints = (...points) => {\n    const newpoints = points.map((point) => vec3.add(vec3.create(), point, center))\n    return poly3.create(newpoints)\n  }\n\n  const polygons = []\n  for (let i = 0; i < slices; i++) {\n    const t0 = i / slices\n    let t1 = (i + 1) / slices\n    // fix rounding error when rotating TAU radians\n    if (rotation === TAU && i === slices - 1) t1 = 0\n\n    if (endRadius[0] === startRadius[0] && endRadius[1] === startRadius[1]) {\n      polygons.push(fromPoints(start, point(0, t1, endRadius), point(0, t0, endRadius)))\n      polygons.push(fromPoints(point(0, t1, endRadius), point(1, t1, endRadius), point(1, t0, endRadius), point(0, t0, endRadius)))\n      polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))\n    } else {\n      if (startRadius[0] > 0 && startRadius[1] > 0) {\n        polygons.push(fromPoints(start, point(0, t1, startRadius), point(0, t0, startRadius)))\n      }\n      if (startRadius[0] > 0 || startRadius[1] > 0) {\n        polygons.push(fromPoints(point(0, t0, startRadius), point(0, t1, startRadius), point(1, t0, endRadius)))\n      }\n      if (endRadius[0] > 0 && endRadius[1] > 0) {\n        polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))\n      }\n      if (endRadius[0] > 0 || endRadius[1] > 0) {\n        polygons.push(fromPoints(point(1, t0, endRadius), point(0, t1, startRadius), point(1, t1, endRadius)))\n      }\n    }\n  }\n  if (rotation < TAU) {\n    polygons.push(fromPoints(start, point(0, 0, startRadius), end))\n    polygons.push(fromPoints(point(0, 0, startRadius), point(1, 0, endRadius), end))\n    polygons.push(fromPoints(start, end, point(0, 1, startRadius)))\n    polygons.push(fromPoints(point(0, 1, startRadius), end, point(1, 1, endRadius)))\n  }\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = cylinderElliptic\n", "const geom3 = require('../geometries/geom3')\n\nconst cylinderElliptic = require('./cylinderElliptic')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct a Z axis-aligned cylinder in three dimensional space.\n * @see [cylinderElliptic]{@link module:modeling/primitives.cylinderElliptic} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder (at both start and end)\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new geometry\n * @alias module:modeling/primitives.cylinder\n *\n * @example\n * let myshape = cylinder({height: 2, radius: 10})\n */\nconst cylinder = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    radius: 1,\n    segments: 32\n  }\n  const { center, height, radius, segments } = Object.assign({}, defaults, options)\n\n  if (!isGTE(radius, 0)) throw new Error('radius must be positive')\n\n  // if size is zero return empty geometry\n  if (height === 0 || radius === 0) return geom3.create()\n\n  const newoptions = {\n    center,\n    height,\n    startRadius: [radius, radius],\n    endRadius: [radius, radius],\n    segments\n  }\n\n  return cylinderElliptic(newoptions)\n}\n\nmodule.exports = cylinder\n", "const { TAU } = require('../maths/constants')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned ellipsoid in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of ellipsoid\n * @param {Array} [options.radius=[1,1,1]] - radius of ellipsoid, along X, Y and Z\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.ellipsoid\n *\n * @example\n * let myshape = ellipsoid({radius: [5, 10, 20]})\n*/\nconst ellipsoid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    radius: [1, 1, 1],\n    segments: 32,\n    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]\n  }\n  const { center, radius, segments, axes } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(radius, 3)) throw new Error('radius must be an array of X, Y and Z values')\n  if (!radius.every((n) => n >= 0)) throw new Error('radius values must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  // if any radius is zero return empty geometry\n  if (radius[0] === 0 || radius[1] === 0 || radius[2] === 0) return geom3.create()\n\n  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[0]), radius[0])\n  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[1]), radius[1])\n  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[2]), radius[2])\n\n  const qsegments = Math.round(segments / 4)\n  let prevcylinderpoint\n  const polygons = []\n  const p1 = vec3.create()\n  const p2 = vec3.create()\n  for (let slice1 = 0; slice1 <= segments; slice1++) {\n    const angle = TAU * slice1 / segments\n    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(p1, xvector, cos(angle)), vec3.scale(p2, yvector, sin(angle)))\n    if (slice1 > 0) {\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qsegments; slice2++) {\n        const pitch = TAU / 4 * slice2 / qsegments\n        const cospitch = cos(pitch)\n        const sinpitch = sin(pitch)\n        if (slice2 > 0) {\n          let points = []\n          let point\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(point, point, center))\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(point, point, center))\n          if (slice2 < qsegments) {\n            point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n            points.push(vec3.add(point, point, center))\n          }\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n          points.push(vec3.add(point, point, center))\n\n          polygons.push(poly3.create(points))\n\n          points = []\n          point = vec3.add(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          point = vec3.add(point, vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          if (slice2 < qsegments) {\n            point = vec3.add(point, vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n            points.push(vec3.add(vec3.create(), center, point))\n          }\n          point = vec3.add(point, vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          points.reverse()\n\n          polygons.push(poly3.create(points))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  return geom3.create(polygons)\n}\n\nmodule.exports = ellipsoid\n", "const geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct a polyhedron in three dimensional space from the given set of 3D points and faces.\n * The faces can define outward or inward facing polygons (orientation).\n * However, each face must define a counter clockwise rotation of points which follows the right hand rule.\n * @param {Object} options - options for construction\n * @param {Array} options.points - list of points in 3D space\n * @param {Array} options.faces - list of faces, where each face is a set of indexes into the points\n * @param {Array} [options.colors=undefined] - list of RGBA colors to apply to each face\n * @param {String} [options.orientation='outward'] - orientation of faces\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.polyhedron\n *\n * @example\n * let mypoints = [ [10, 10, 0], [10, -10, 0], [-10, -10, 0], [-10, 10, 0], [0, 0, 10] ]\n * let myfaces = [ [0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 0, 4], [1, 0, 3], [2, 1, 3] ]\n * let myshape = polyhedron({points: mypoint, faces: myfaces, orientation: 'inward'})\n */\nconst polyhedron = (options) => {\n  const defaults = {\n    points: [],\n    faces: [],\n    colors: undefined,\n    orientation: 'outward'\n  }\n  const { points, faces, colors, orientation } = Object.assign({}, defaults, options)\n\n  if (!(Array.isArray(points) && Array.isArray(faces))) {\n    throw new Error('points and faces must be arrays')\n  }\n  if (points.length < 3) {\n    throw new Error('three or more points are required')\n  }\n  if (faces.length < 1) {\n    throw new Error('one or more faces are required')\n  }\n  if (colors) {\n    if (!Array.isArray(colors)) {\n      throw new Error('colors must be an array')\n    }\n    if (colors.length !== faces.length) {\n      throw new Error('faces and colors must have the same length')\n    }\n  }\n  points.forEach((point, i) => {\n    if (!isNumberArray(point, 3)) throw new Error(`point ${i} must be an array of X, Y, Z values`)\n  })\n  faces.forEach((face, i) => {\n    if (face.length < 3) throw new Error(`face ${i} must contain 3 or more indexes`)\n    if (!isNumberArray(face, face.length)) throw new Error(`face ${i} must be an array of numbers`)\n  })\n\n  // invert the faces if orientation is inwards, as all internals expect outwarding facing polygons\n  if (orientation !== 'outward') {\n    faces.forEach((face) => face.reverse())\n  }\n\n  const polygons = faces.map((face, findex) => {\n    const polygon = poly3.create(face.map((pindex) => points[pindex]))\n    if (colors && colors[findex]) polygon.color = colors[findex]\n    return polygon\n  })\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = polyhedron\n", "const mat4 = require('../maths/mat4')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\n\nconst polyhedron = require('./polyhedron')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct a geodesic sphere based on icosahedron symmetry.\n * @param {Object} [options] - options for construction\n * @param {Number} [options.radius=1] - target radius of sphere\n * @param {Number} [options.frequency=6] - subdivision frequency per face, multiples of 6\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.geodesicSphere\n *\n * @example\n * let myshape = geodesicSphere({radius: 15, frequency: 18})\n */\nconst geodesicSphere = (options) => {\n  const defaults = {\n    radius: 1,\n    frequency: 6\n  }\n  let { radius, frequency } = Object.assign({}, defaults, options)\n\n  if (!isGTE(radius, 0)) throw new Error('radius must be positive')\n  if (!isGTE(frequency, 6)) throw new Error('frequency must be six or more')\n\n  // if radius is zero return empty geometry\n  if (radius === 0) return geom3.create()\n\n  // adjust the frequency to base 6\n  frequency = Math.floor(frequency / 6)\n\n  const ci = [ // hard-coded data of icosahedron (20 faces, all triangles)\n    [0.850651, 0.000000, -0.525731],\n    [0.850651, -0.000000, 0.525731],\n    [-0.850651, -0.000000, 0.525731],\n    [-0.850651, 0.000000, -0.525731],\n    [0.000000, -0.525731, 0.850651],\n    [0.000000, 0.525731, 0.850651],\n    [0.000000, 0.525731, -0.850651],\n    [0.000000, -0.525731, -0.850651],\n    [-0.525731, -0.850651, -0.000000],\n    [0.525731, -0.850651, -0.000000],\n    [0.525731, 0.850651, 0.000000],\n    [-0.525731, 0.850651, 0.000000]]\n\n  const ti = [[0, 9, 1], [1, 10, 0], [6, 7, 0], [10, 6, 0], [7, 9, 0], [5, 1, 4], [4, 1, 9], [5, 10, 1], [2, 8, 3], [3, 11, 2], [2, 5, 4],\n    [4, 8, 2], [2, 11, 5], [3, 7, 6], [6, 11, 3], [8, 7, 3], [9, 8, 4], [11, 10, 5], [10, 11, 6], [8, 9, 7]]\n\n  const geodesicSubDivide = (p, frequency, offset) => {\n    const p1 = p[0]\n    const p2 = p[1]\n    const p3 = p[2]\n    let n = offset\n    const c = []\n    const f = []\n\n    //           p3\n    //           /\\\n    //          /__\\     frequency = 3\n    //      i  /\\  /\\\n    //        /__\\/__\\       total triangles = 9 (frequency*frequency)\n    //       /\\  /\\  /\\\n    //     0/__\\/__\\/__\\\n    //    p1 0   j      p2\n\n    for (let i = 0; i < frequency; i++) {\n      for (let j = 0; j < frequency - i; j++) {\n        const t0 = i / frequency\n        const t1 = (i + 1) / frequency\n        const s0 = j / (frequency - i)\n        const s1 = (j + 1) / (frequency - i)\n        const s2 = frequency - i - 1 ? j / (frequency - i - 1) : 1\n        const q = []\n\n        q[0] = mix3(mix3(p1, p2, s0), p3, t0)\n        q[1] = mix3(mix3(p1, p2, s1), p3, t0)\n        q[2] = mix3(mix3(p1, p2, s2), p3, t1)\n\n        // -- normalize\n        for (let k = 0; k < 3; k++) {\n          const r = vec3.length(q[k])\n          for (let l = 0; l < 3; l++) {\n            q[k][l] /= r\n          }\n        }\n        c.push(q[0], q[1], q[2])\n        f.push([n, n + 1, n + 2]); n += 3\n\n        if (j < frequency - i - 1) {\n          const s3 = frequency - i - 1 ? (j + 1) / (frequency - i - 1) : 1\n          q[0] = mix3(mix3(p1, p2, s1), p3, t0)\n          q[1] = mix3(mix3(p1, p2, s3), p3, t1)\n          q[2] = mix3(mix3(p1, p2, s2), p3, t1)\n\n          // -- normalize\n          for (let k = 0; k < 3; k++) {\n            const r = vec3.length(q[k])\n            for (let l = 0; l < 3; l++) {\n              q[k][l] /= r\n            }\n          }\n          c.push(q[0], q[1], q[2])\n          f.push([n, n + 1, n + 2]); n += 3\n        }\n      }\n    }\n    return { points: c, triangles: f, offset: n }\n  }\n\n  const mix3 = (a, b, f) => {\n    const _f = 1 - f\n    const c = []\n    for (let i = 0; i < 3; i++) {\n      c[i] = a[i] * _f + b[i] * f\n    }\n    return c\n  }\n\n  let points = []\n  let faces = []\n  let offset = 0\n\n  for (let i = 0; i < ti.length; i++) {\n    const g = geodesicSubDivide([ci[ti[i][0]], ci[ti[i][1]], ci[ti[i][2]]], frequency, offset)\n    points = points.concat(g.points)\n    faces = faces.concat(g.triangles)\n    offset = g.offset\n  }\n\n  let geometry = polyhedron({ points: points, faces: faces, orientation: 'inward' })\n  if (radius !== 1) geometry = geom3.transform(mat4.fromScaling(mat4.create(), [radius, radius, radius]), geometry)\n  return geometry\n}\n\nmodule.exports = geodesicSphere\n", "const path2 = require('../geometries/path2')\n\n/**\n * Construct a new line in two dimensional space from the given points.\n * The points must be provided as an array, where each element is a 2D point.\n * @param {Array} points - array of points from which to create the path\n * @returns {path2} new 2D path\n * @alias module:modeling/primitives.line\n *\n * @example\n * let myshape = line([[10, 10], [-10, 10]])\n */\nconst line = (points) => {\n  if (!Array.isArray(points)) throw new Error('points must be an array')\n\n  return path2.fromPoints({}, points)\n}\n\nmodule.exports = line\n", "const geom2 = require('../geometries/geom2')\n\n/**\n * Construct a polygon in two dimensional space from a list of points, or a list of points and paths.\n * NOTE: The ordering of points is VERY IMPORTANT.\n * @param {Object} options - options for construction\n * @param {Array} options.points - points of the polygon : either flat or nested array of 2D points\n * @param {Array} [options.paths] - paths of the polygon : either flat or nested array of point indexes\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.polygon\n *\n * @example\n * let roof = [[10,11], [0,11], [5,20]]\n * let wall = [[0,0], [10,0], [10,10], [0,10]]\n *\n * let poly = polygon({ points: roof })\n * or\n * let poly = polygon({ points: [roof, wall] })\n * or\n * let poly = polygon({ points: roof, paths: [0, 1, 2] })\n * or\n * let poly = polygon({ points: [roof, wall], paths: [[0, 1, 2], [3, 4, 5, 6]] })\n */\nconst polygon = (options) => {\n  const defaults = {\n    points: [],\n    paths: []\n  }\n  const { points, paths } = Object.assign({}, defaults, options)\n\n  if (!(Array.isArray(points) && Array.isArray(paths))) throw new Error('points and paths must be arrays')\n\n  let listofpolys = points\n  if (Array.isArray(points[0])) {\n    if (!Array.isArray(points[0][0])) {\n      // points is an array of something... convert to list\n      listofpolys = [points]\n    }\n  }\n\n  listofpolys.forEach((list, i) => {\n    if (!Array.isArray(list)) throw new Error('list of points ' + i + ' must be an array')\n    if (list.length < 3) throw new Error('list of points ' + i + ' must contain three or more points')\n    list.forEach((point, j) => {\n      if (!Array.isArray(point)) throw new Error('list of points ' + i + ', point ' + j + ' must be an array')\n      if (point.length < 2) throw new Error('list of points ' + i + ', point ' + j + ' must contain by X and Y values')\n    })\n  })\n\n  let listofpaths = paths\n  if (paths.length === 0) {\n    // create a list of paths based on the points\n    let count = 0\n    listofpaths = listofpolys.map((list) => list.map((point) => count++))\n  }\n\n  // flatten the listofpoints for indexed access\n  const allpoints = []\n  listofpolys.forEach((list) => list.forEach((point) => allpoints.push(point)))\n\n  let sides = []\n  listofpaths.forEach((path) => {\n    const setofpoints = path.map((index) => allpoints[index])\n    const geometry = geom2.fromPoints(setofpoints)\n    sides = sides.concat(geom2.toSides(geometry))\n  })\n  return geom2.create(sides)\n}\n\nmodule.exports = polygon\n", "const vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned rectangle in two dimensional space with four sides at right angles.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of rectangle\n * @param {Array} [options.size=[2,2]] - dimension of rectangle, width and length\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.rectangle\n *\n * @example\n * let myshape = rectangle({size: [10, 20]})\n */\nconst rectangle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: [2, 2]\n  }\n  const { center, size } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')\n  if (!size.every((n) => n >= 0)) throw new Error('size values must be positive')\n\n  // if any size is zero return empty geometry\n  if (size[0] === 0 || size[1] === 0) return geom2.create()\n\n  const point = [size[0] / 2, size[1] / 2]\n  const pswap = [point[0], -point[1]]\n\n  const points = [\n    vec2.subtract(vec2.create(), center, point),\n    vec2.add(vec2.create(), center, pswap),\n    vec2.add(vec2.create(), center, point),\n    vec2.subtract(vec2.create(), center, pswap)\n  ]\n  return geom2.fromPoints(points)\n}\n\nmodule.exports = rectangle\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\nconst cuboid = require('./cuboid')\n\nconst createCorners = (center, size, radius, segments, slice, positive) => {\n  const pitch = (TAU / 4) * slice / segments\n  const cospitch = cos(pitch)\n  const sinpitch = sin(pitch)\n\n  const layersegments = segments - slice\n  let layerradius = radius * cospitch\n  let layeroffset = size[2] - (radius - (radius * sinpitch))\n  if (!positive) layeroffset = (radius - (radius * sinpitch)) - size[2]\n\n  layerradius = layerradius > EPS ? layerradius : 0\n\n  const corner0 = vec3.add(vec3.create(), center, [size[0] - radius, size[1] - radius, layeroffset])\n  const corner1 = vec3.add(vec3.create(), center, [radius - size[0], size[1] - radius, layeroffset])\n  const corner2 = vec3.add(vec3.create(), center, [radius - size[0], radius - size[1], layeroffset])\n  const corner3 = vec3.add(vec3.create(), center, [size[0] - radius, radius - size[1], layeroffset])\n  const corner0Points = []\n  const corner1Points = []\n  const corner2Points = []\n  const corner3Points = []\n  for (let i = 0; i <= layersegments; i++) {\n    const radians = layersegments > 0 ? TAU / 4 * i / layersegments : 0\n    const point2d = vec2.fromAngleRadians(vec2.create(), radians)\n    vec2.scale(point2d, point2d, layerradius)\n    const point3d = vec3.fromVec2(vec3.create(), point2d)\n    corner0Points.push(vec3.add(vec3.create(), corner0, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner1Points.push(vec3.add(vec3.create(), corner1, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner2Points.push(vec3.add(vec3.create(), corner2, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner3Points.push(vec3.add(vec3.create(), corner3, point3d))\n  }\n  if (!positive) {\n    corner0Points.reverse()\n    corner1Points.reverse()\n    corner2Points.reverse()\n    corner3Points.reverse()\n    return [corner3Points, corner2Points, corner1Points, corner0Points]\n  }\n  return [corner0Points, corner1Points, corner2Points, corner3Points]\n}\n\nconst stitchCorners = (previousCorners, currentCorners) => {\n  const polygons = []\n  for (let i = 0; i < previousCorners.length; i++) {\n    const previous = previousCorners[i]\n    const current = currentCorners[i]\n    for (let j = 0; j < (previous.length - 1); j++) {\n      polygons.push(poly3.create([previous[j], previous[j + 1], current[j]]))\n\n      if (j < (current.length - 1)) {\n        polygons.push(poly3.create([current[j], previous[j + 1], current[j + 1]]))\n      }\n    }\n  }\n  return polygons\n}\n\nconst stitchWalls = (previousCorners, currentCorners) => {\n  const polygons = []\n  for (let i = 0; i < previousCorners.length; i++) {\n    let previous = previousCorners[i]\n    let current = currentCorners[i]\n    const p0 = previous[previous.length - 1]\n    const c0 = current[current.length - 1]\n\n    const j = (i + 1) % previousCorners.length\n    previous = previousCorners[j]\n    current = currentCorners[j]\n    const p1 = previous[0]\n    const c1 = current[0]\n\n    polygons.push(poly3.create([p0, p1, c1, c0]))\n  }\n  return polygons\n}\n\nconst stitchSides = (bottomCorners, topCorners) => {\n  // make a copy and reverse the bottom corners\n  bottomCorners = [bottomCorners[3], bottomCorners[2], bottomCorners[1], bottomCorners[0]]\n  bottomCorners = bottomCorners.map((corner) => corner.slice().reverse())\n\n  const bottomPoints = []\n  bottomCorners.forEach((corner) => {\n    corner.forEach((point) => bottomPoints.push(point))\n  })\n\n  const topPoints = []\n  topCorners.forEach((corner) => {\n    corner.forEach((point) => topPoints.push(point))\n  })\n\n  const polygons = []\n  for (let i = 0; i < topPoints.length; i++) {\n    const j = (i + 1) % topPoints.length\n    polygons.push(poly3.create([bottomPoints[i], bottomPoints[j], topPoints[j], topPoints[i]]))\n  }\n  return polygons\n}\n\n/**\n * Construct an axis-aligned solid cuboid in three dimensional space with rounded corners.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of rounded cube\n * @param {Array} [options.size=[2,2,2]] - dimension of rounded cube; width, depth, height\n * @param {Number} [options.roundRadius=0.2] - radius of rounded edges\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.roundedCuboid\n *\n * @example\n * let mycube = roundedCuboid({size: [10, 20, 10], roundRadius: 2, segments: 16})\n */\nconst roundedCuboid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: [2, 2, 2],\n    roundRadius: 0.2,\n    segments: 32\n  }\n  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(size, 3)) throw new Error('size must be an array of X, Y and Z values')\n  if (!size.every((n) => n >= 0)) throw new Error('size values must be positive')\n  if (!isGTE(roundRadius, 0)) throw new Error('roundRadius must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  // if any size is zero return empty geometry\n  if (size[0] === 0 || size[1] === 0 || size[2] === 0) return geom3.create()\n\n  // if roundRadius is zero, return cuboid\n  if (roundRadius === 0) return cuboid({ center, size })\n\n  size = size.map((v) => v / 2) // convert to radius\n\n  if (roundRadius > (size[0] - EPS) ||\n      roundRadius > (size[1] - EPS) ||\n      roundRadius > (size[2] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')\n\n  segments = Math.floor(segments / 4)\n\n  let prevCornersPos = null\n  let prevCornersNeg = null\n  let polygons = []\n  for (let slice = 0; slice <= segments; slice++) {\n    const cornersPos = createCorners(center, size, roundRadius, segments, slice, true)\n    const cornersNeg = createCorners(center, size, roundRadius, segments, slice, false)\n\n    if (slice === 0) {\n      polygons = polygons.concat(stitchSides(cornersNeg, cornersPos))\n    }\n\n    if (prevCornersPos) {\n      polygons = polygons.concat(stitchCorners(prevCornersPos, cornersPos),\n        stitchWalls(prevCornersPos, cornersPos))\n    }\n    if (prevCornersNeg) {\n      polygons = polygons.concat(stitchCorners(prevCornersNeg, cornersNeg),\n        stitchWalls(prevCornersNeg, cornersNeg))\n    }\n\n    if (slice === segments) {\n      // add the top\n      let points = cornersPos.map((corner) => corner[0])\n      polygons.push(poly3.create(points))\n      // add the bottom\n      points = cornersNeg.map((corner) => corner[0])\n      polygons.push(poly3.create(points))\n    }\n\n    prevCornersPos = cornersPos\n    prevCornersNeg = cornersNeg\n  }\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = roundedCuboid\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\nconst cylinder = require('./cylinder')\n\n/**\n * Construct a Z axis-aligned solid cylinder in three dimensional space with rounded ends.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder\n * @param {Number} [options.roundRadius=0.2] - radius of rounded edges\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.roundedCylinder\n *\n * @example\n * let myshape = roundedCylinder({ height: 10, radius: 2, roundRadius: 0.5 })\n */\nconst roundedCylinder = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    radius: 1,\n    roundRadius: 0.2,\n    segments: 32\n  }\n  const { center, height, radius, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isGTE(height, 0)) throw new Error('height must be positive')\n  if (!isGTE(radius, 0)) throw new Error('radius must be positive')\n  if (!isGTE(roundRadius, 0)) throw new Error('roundRadius must be positive')\n  if (roundRadius > radius) throw new Error('roundRadius must be smaller then the radius')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  // if size is zero return empty geometry\n  if (height === 0 || radius === 0) return geom3.create()\n\n  // if roundRadius is zero, return cylinder\n  if (roundRadius === 0) return cylinder({ center, height, radius })\n\n  const start = [0, 0, -(height / 2)]\n  const end = [0, 0, height / 2]\n  const direction = vec3.subtract(vec3.create(), end, start)\n  const length = vec3.length(direction)\n\n  if ((2 * roundRadius) > (length - EPS)) throw new Error('height must be larger than twice roundRadius')\n\n  let defaultnormal\n  if (Math.abs(direction[0]) > Math.abs(direction[1])) {\n    defaultnormal = vec3.fromValues(0, 1, 0)\n  } else {\n    defaultnormal = vec3.fromValues(1, 0, 0)\n  }\n\n  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), direction), roundRadius)\n  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), zvector, defaultnormal)), radius)\n  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), xvector, zvector)), radius)\n\n  vec3.add(start, start, zvector)\n  vec3.subtract(end, end, zvector)\n\n  const qsegments = Math.floor(0.25 * segments)\n\n  const fromPoints = (points) => {\n    // adjust the points to center\n    const newpoints = points.map((point) => vec3.add(point, point, center))\n    return poly3.create(newpoints)\n  }\n\n  const polygons = []\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n  let prevcylinderpoint\n  for (let slice1 = 0; slice1 <= segments; slice1++) {\n    const angle = TAU * slice1 / segments\n    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(v1, xvector, cos(angle)), vec3.scale(v2, yvector, sin(angle)))\n    if (slice1 > 0) {\n      // cylinder wall\n      let points = []\n      points.push(vec3.add(vec3.create(), start, cylinderpoint))\n      points.push(vec3.add(vec3.create(), start, prevcylinderpoint))\n      points.push(vec3.add(vec3.create(), end, prevcylinderpoint))\n      points.push(vec3.add(vec3.create(), end, cylinderpoint))\n      polygons.push(fromPoints(points))\n\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qsegments; slice2++) {\n        const pitch = TAU / 4 * slice2 / qsegments\n        const cospitch = cos(pitch)\n        const sinpitch = sin(pitch)\n        if (slice2 > 0) {\n          // cylinder rounding, start\n          points = []\n          let point\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))\n          points.push(point)\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))\n          points.push(point)\n          if (slice2 < qsegments) {\n            point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))\n            points.push(point)\n          }\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))\n          points.push(point)\n\n          polygons.push(fromPoints(points))\n\n          // cylinder rounding, end\n          points = []\n          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          if (slice2 < qsegments) {\n            point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))\n            vec3.add(point, point, end)\n            points.push(point)\n          }\n          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          points.reverse()\n\n          polygons.push(fromPoints(points))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = roundedCylinder\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\nconst rectangle = require('./rectangle')\n\n/**\n * Construct an axis-aligned rectangle in two dimensional space with rounded corners.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of rounded rectangle\n * @param {Array} [options.size=[2,2]] - dimension of rounded rectangle; width and length\n * @param {Number} [options.roundRadius=0.2] - round radius of corners\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.roundedRectangle\n *\n * @example\n * let myshape = roundedRectangle({size: [10, 20], roundRadius: 2})\n */\nconst roundedRectangle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: [2, 2],\n    roundRadius: 0.2,\n    segments: 32\n  }\n  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')\n  if (!size.every((n) => n >= 0)) throw new Error('size values must be positive')\n  if (!isGTE(roundRadius, 0)) throw new Error('roundRadius must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  // if any size is zero return empty geometry\n  if (size[0] === 0 || size[1] === 0) return geom2.create()\n\n  // if roundRadius is zero, return rectangle\n  if (roundRadius === 0) return rectangle({ center, size })\n\n  size = size.map((v) => v / 2) // convert to radius\n\n  if (roundRadius > (size[0] - EPS) ||\n      roundRadius > (size[1] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')\n\n  const cornersegments = Math.floor(segments / 4)\n\n  // create sets of points that define the corners\n  const corner0 = vec2.add(vec2.create(), center, [size[0] - roundRadius, size[1] - roundRadius])\n  const corner1 = vec2.add(vec2.create(), center, [roundRadius - size[0], size[1] - roundRadius])\n  const corner2 = vec2.add(vec2.create(), center, [roundRadius - size[0], roundRadius - size[1]])\n  const corner3 = vec2.add(vec2.create(), center, [size[0] - roundRadius, roundRadius - size[1]])\n  const corner0Points = []\n  const corner1Points = []\n  const corner2Points = []\n  const corner3Points = []\n  for (let i = 0; i <= cornersegments; i++) {\n    const radians = TAU / 4 * i / cornersegments\n    const point = vec2.fromAngleRadians(vec2.create(), radians)\n    vec2.scale(point, point, roundRadius)\n    corner0Points.push(vec2.add(vec2.create(), corner0, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner1Points.push(vec2.add(vec2.create(), corner1, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner2Points.push(vec2.add(vec2.create(), corner2, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner3Points.push(vec2.add(vec2.create(), corner3, point))\n  }\n\n  return geom2.fromPoints(corner0Points.concat(corner1Points, corner2Points, corner3Points))\n}\n\nmodule.exports = roundedRectangle\n", "const ellipsoid = require('./ellipsoid')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct a sphere in three dimensional space where all points are at the same distance from the center.\n * @see [ellipsoid]{@link module:modeling/primitives.ellipsoid} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of sphere\n * @param {Number} [options.radius=1] - radius of sphere\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.sphere\n *\n * @example\n * let myshape = sphere({radius: 5})\n */\nconst sphere = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    radius: 1,\n    segments: 32,\n    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]\n  }\n  let { center, radius, segments, axes } = Object.assign({}, defaults, options)\n\n  if (!isGTE(radius, 0)) throw new Error('radius must be positive')\n\n  radius = [radius, radius, radius]\n\n  return ellipsoid({ center, radius, segments, axes })\n}\n\nmodule.exports = sphere\n", "const rectangle = require('./rectangle')\n\nconst { isGTE } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned square in two dimensional space with four equal sides at right angles.\n * @see [rectangle]{@link module:modeling/primitives.rectangle} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of square\n * @param {Number} [options.size=2] - dimension of square\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.square\n *\n * @example\n * let myshape = square({size: 10})\n */\nconst square = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: 2\n  }\n  let { center, size } = Object.assign({}, defaults, options)\n\n  if (!isGTE(size, 0)) throw new Error('size must be positive')\n\n  size = [size, size]\n\n  return rectangle({ center, size })\n}\n\nmodule.exports = square\n", "const { TAU } = require('../maths/constants')\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n// @see http://www.jdawiseman.com/papers/easymath/surds_star_inner_radius.html\nconst getRadiusRatio = (vertices, density) => {\n  if (vertices > 0 && density > 1 && density < vertices / 2) {\n    return Math.cos(Math.PI * density / vertices) / Math.cos(Math.PI * (density - 1) / vertices)\n  }\n  return 0\n}\n\nconst getPoints = (vertices, radius, startAngle, center) => {\n  const a = TAU / vertices\n\n  const points = []\n  for (let i = 0; i < vertices; i++) {\n    const point = vec2.fromAngleRadians(vec2.create(), a * i + startAngle)\n    vec2.scale(point, point, radius)\n    vec2.add(point, center, point)\n    points.push(point)\n  }\n  return points\n}\n\n/**\n * Construct a star in two dimensional space.\n * @see https://en.wikipedia.org/wiki/Star_polygon\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of star\n * @param {Number} [options.vertices=5] - number of vertices (P) on the star\n * @param {Number} [options.density=2] - density (Q) of star\n * @param {Number} [options.outerRadius=1] - outer radius of vertices\n * @param {Number} [options.innerRadius=0] - inner radius of vertices, or zero to calculate\n * @param {Number} [options.startAngle=0] - starting angle for first vertice, in radians\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.star\n *\n * @example\n * let star1 = star({vertices: 8, outerRadius: 10}) // star with 8/2 density\n * let star2 = star({vertices: 12, outerRadius: 40, innerRadius: 20}) // star with given radius\n */\nconst star = (options) => {\n  const defaults = {\n    center: [0, 0],\n    vertices: 5,\n    outerRadius: 1,\n    innerRadius: 0,\n    density: 2,\n    startAngle: 0\n  }\n  let { center, vertices, outerRadius, innerRadius, density, startAngle } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isGTE(vertices, 2)) throw new Error('vertices must be two or more')\n  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')\n  if (!isGTE(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be greater than zero')\n\n  // force integers\n  vertices = Math.floor(vertices)\n  density = Math.floor(density)\n\n  startAngle = startAngle % TAU\n\n  if (innerRadius === 0) {\n    if (!isGTE(density, 2)) throw new Error('density must be two or more')\n    innerRadius = outerRadius * getRadiusRatio(vertices, density)\n  }\n\n  const centerv = vec2.clone(center)\n\n  const outerPoints = getPoints(vertices, outerRadius, startAngle, centerv)\n  const innerPoints = getPoints(vertices, innerRadius, startAngle + Math.PI / vertices, centerv)\n\n  const allPoints = []\n  for (let i = 0; i < vertices; i++) {\n    allPoints.push(outerPoints[i])\n    allPoints.push(innerPoints[i])\n  }\n\n  return geom2.fromPoints(allPoints)\n}\n\nmodule.exports = star\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\nconst plane = require('../../maths/plane')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Mirror the given objects using the given options.\n * @param {Object} options - options for mirror\n * @param {Array} [options.origin=[0,0,0]] - the origin of the plane\n * @param {Array} [options.normal=[0,0,1]] - the normal vector of the plane\n * @param {...Object} objects - the objects to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirror\n *\n * @example\n * let myshape = mirror({normal: [0,0,10]}, cube({center: [0,0,15], radius: [20, 25, 5]}))\n */\nconst mirror = (options, ...objects) => {\n  const defaults = {\n    origin: [0, 0, 0],\n    normal: [0, 0, 1] // Z axis\n  }\n  const { origin, normal } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const planeOfMirror = plane.fromNormalAndPoint(plane.create(), normal, origin)\n  // verify the plane, i.e. check that the given normal was valid\n  if (Number.isNaN(planeOfMirror[0])) {\n    throw new Error('the given origin and normal do not define a proper plane')\n  }\n\n  const matrix = mat4.mirrorByPlane(mat4.create(), planeOfMirror)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Mirror the given objects about the X axis.\n * @param {...Object} objects - the objects to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorX\n */\nconst mirrorX = (...objects) => mirror({ normal: [1, 0, 0] }, objects)\n\n/**\n * Mirror the given objects about the Y axis.\n * @param {...Object} objects - the geometries to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorY\n */\nconst mirrorY = (...objects) => mirror({ normal: [0, 1, 0] }, objects)\n\n/**\n * Mirror the given objects about the Z axis.\n * @param {...Object} objects - the geometries to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorZ\n */\nconst mirrorZ = (...objects) => mirror({ normal: [0, 0, 1] }, objects)\n\nmodule.exports = {\n  mirror,\n  mirrorX,\n  mirrorY,\n  mirrorZ\n}\n", "const plane = require('../../../maths/plane')\nconst vec3 = require('../../../maths/vec3')\n\n/**\n * Calculate the plane of the given slice.\n * NOTE: The slice (and all points) are assumed to be planar from the beginning.\n * @param {slice} slice - the slice\n * @returns {plane} the plane of the slice\n * @alias module:modeling/extrusions/slice.calculatePlane\n *\n * @example\n * let myplane = calculatePlane(slice)\n */\nconst calculatePlane = (slice) => {\n  const edges = slice.edges\n  if (edges.length < 3) throw new Error('slices must have 3 or more edges to calculate a plane')\n\n  // find the midpoint of the slice, which will lie on the plane by definition\n  const midpoint = edges.reduce((point, edge) => vec3.add(vec3.create(), point, edge[0]), vec3.create())\n  vec3.scale(midpoint, midpoint, 1 / edges.length)\n\n  // find the farthest edge from the midpoint, which will be on an outside edge\n  let farthestEdge\n  let distance = 0\n  edges.forEach((edge) => {\n    // Make sure that the farthest edge is not a self-edge\n    if (!vec3.equals(edge[0], edge[1])) {\n      const d = vec3.squaredDistance(midpoint, edge[0])\n      if (d > distance) {\n        farthestEdge = edge\n        distance = d\n      }\n    }\n  })\n  // find the before edge\n  const beforeEdge = edges.find((edge) => vec3.equals(edge[1], farthestEdge[0]))\n\n  return plane.fromPoints(plane.create(), beforeEdge[0], farthestEdge[0], farthestEdge[1])\n}\n\nmodule.exports = calculatePlane\n", "/**\n * Represents a 3D geometry consisting of a list of edges.\n * @typedef {Object} slice\n * @property {Array} edges - list of edges, each edge containing two points (3D)\n */\n\n/**\n * Creates a new empty slice.\n *\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.create\n */\nconst create = (edges) => {\n  if (!edges) {\n    edges = []\n  }\n  return { edges }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\nconst vec3 = require('../../../maths/vec3')\n\n/**\n * Create a deep clone of the given slice.\n *\n * @param {slice} [out] - receiving slice\n * @param {slice} slice - slice to clone\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.clone\n */\nconst clone = (...params) => {\n  let out\n  let slice\n  if (params.length === 1) {\n    out = create()\n    slice = params[0]\n  } else {\n    out = params[0]\n    slice = params[1]\n  }\n  // deep clone of edges\n  out.edges = slice.edges.map((edge) => [vec3.clone(edge[0]), vec3.clone(edge[1])])\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../../../maths/vec3')\n\n/**\n * Determine if the given slices have the same edges.\n * @param {slice} a - the first slice to compare\n * @param {slice} b - the second slice to compare\n * @returns {Boolean} true if the slices are equal\n * @alias module:modeling/extrusions/slice.equals\n */\nconst equals = (a, b) => {\n  const aedges = a.edges\n  const bedges = b.edges\n\n  if (aedges.length !== bedges.length) {\n    return false\n  }\n\n  const isEqual = aedges.reduce((acc, aedge, i) => {\n    const bedge = bedges[i]\n    const d = vec3.squaredDistance(aedge[0], bedge[0])\n    return acc && (d < Number.EPSILON)\n  }, true)\n\n  return isEqual\n}\n\nmodule.exports = equals\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a slice from the given points.\n *\n * @param {Array} points - list of points, where each point is either 2D or 3D\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.fromPoints\n *\n * @example\n * const points = [\n *   [0,  0],\n *   [0, 10],\n *   [0, 10]\n * ]\n * const slice = fromPoints(points)\n */\nconst fromPoints = (points) => {\n  if (!Array.isArray(points)) throw new Error('the given points must be an array')\n  if (points.length < 3) throw new Error('the given points must contain THREE or more points')\n\n  // create a list of edges from the points\n  const edges = []\n  let prevpoint = points[points.length - 1]\n  points.forEach((point) => {\n    if (point.length === 2) edges.push([vec3.fromVec2(vec3.create(), prevpoint), vec3.fromVec2(vec3.create(), point)])\n    if (point.length === 3) edges.push([prevpoint, point])\n    prevpoint = point\n  })\n  return create(edges)\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a slice from the given sides (see geom2).\n *\n * @param {Array} sides - list of sides from geom2\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.fromSides\n *\n * @example\n * const myshape = circle({radius: 10})\n * const slice = fromSides(geom2.toSides(myshape))\n */\nconst fromSides = (sides) => {\n  if (!Array.isArray(sides)) throw new Error('the given sides must be an array')\n\n  // create a list of edges from the sides\n  const edges = []\n  sides.forEach((side) => {\n    edges.push([vec3.fromVec2(vec3.create(), side[0]), vec3.fromVec2(vec3.create(), side[1])])\n  })\n  return create(edges)\n}\n\nmodule.exports = fromSides\n", "/**\n * Determine if the given object is a slice.\n * @param {slice} object - the object to interrogate\n * @returns {Boolean} true if the object matches a slice\n * @alias module:modeling/extrusions/slice.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('edges' in object) {\n      if (Array.isArray(object.edges)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const create = require('./create')\n\n/**\n * Reverse the edges of the given slice.\n *\n * @param {slice} [out] - receiving slice\n * @param {slice} slice - slice to reverse\n * @returns {slice} reverse of the slice\n * @alias module:modeling/extrusions/slice.reverse\n */\nconst reverse = (...params) => {\n  let out\n  let slice\n  if (params.length === 1) {\n    out = create()\n    slice = params[0]\n  } else {\n    out = params[0]\n    slice = params[1]\n  }\n  // reverse the edges\n  out.edges = slice.edges.map((edge) => [edge[1], edge[0]])\n  return out\n}\n\nmodule.exports = reverse\n", "/**\n * Produces an array of edges from the given slice.\n * The returned array should not be modified as the data is shared with the slice.\n * @param {slice} slice - the slice\n * @returns {Array} an array of edges, each edge contains an array of two points (3D)\n * @alias module:modeling/extrusions/slice.toEdges\n *\n * @example\n * let sharededges = toEdges(slice)\n */\nconst toEdges = (slice) => slice.edges\n\nmodule.exports = toEdges\n", "\n// Simon Tatham's linked list merge sort algorithm\n// https://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nconst sortLinked = (list, fn) => {\n  let i, p, q, e, numMerges\n  let inSize = 1\n\n  do {\n    p = list\n    list = null\n    let tail = null\n    numMerges = 0\n\n    while (p) {\n      numMerges++\n      q = p\n      let pSize = 0\n      for (i = 0; i < inSize; i++) {\n        pSize++\n        q = q.nextZ\n        if (!q) break\n      }\n\n      let qSize = inSize\n\n      while (pSize > 0 || (qSize > 0 && q)) {\n        if (pSize !== 0 && (qSize === 0 || !q || fn(p) <= fn(q))) {\n          e = p\n          p = p.nextZ\n          pSize--\n        } else {\n          e = q\n          q = q.nextZ\n          qSize--\n        }\n\n        if (tail) tail.nextZ = e\n        else list = e\n\n        e.prevZ = tail\n        tail = e\n      }\n\n      p = q\n    }\n\n    tail.nextZ = null\n    inSize *= 2\n  } while (numMerges > 1)\n\n  return list\n}\n\nmodule.exports = sortLinked\n", "const sortLinked = require('./linkedListSort')\n\nclass Node {\n  constructor (i, x, y) {\n    // vertex index in coordinates array\n    this.i = i\n\n    // vertex coordinates\n    this.x = x\n    this.y = y\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null\n    this.next = null\n\n    // z-order curve value\n    this.z = null\n\n    // previous and next nodes in z-order\n    this.prevZ = null\n    this.nextZ = null\n\n    // indicates whether this is a steiner point\n    this.steiner = false\n  }\n}\n\n/*\n * create a node and optionally link it with previous one (in a circular doubly linked list)\n */\nconst insertNode = (i, x, y, last) => {\n  const p = new Node(i, x, y)\n\n  if (!last) {\n    p.prev = p\n    p.next = p\n  } else {\n    p.next = last.next\n    p.prev = last\n    last.next.prev = p\n    last.next = p\n  }\n\n  return p\n}\n\n/*\n * remove a node and join prev with next nodes\n */\nconst removeNode = (p) => {\n  p.next.prev = p.prev\n  p.prev.next = p.next\n\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ\n}\n\nmodule.exports = { Node, insertNode, removeNode, sortLinked }\n", "\n/*\n * check if a point lies within a convex triangle\n */\nconst pointInTriangle = (ax, ay, bx, by, cx, cy, px, py) => (\n  (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n      (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n      (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0\n)\n\n/*\n * signed area of a triangle\n */\nconst area = (p, q, r) => (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)\n\nmodule.exports = { area, pointInTriangle }\n", "const { Node, insertNode, removeNode } = require('./linkedList')\nconst { area } = require('./triangle')\n\n/*\n * create a circular doubly linked list from polygon points in the specified winding order\n */\nconst linkedPolygon = (data, start, end, dim, clockwise) => {\n  let last\n\n  if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n    for (let i = start; i < end; i += dim) {\n      last = insertNode(i, data[i], data[i + 1], last)\n    }\n  } else {\n    for (let i = end - dim; i >= start; i -= dim) {\n      last = insertNode(i, data[i], data[i + 1], last)\n    }\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last)\n    last = last.next\n  }\n\n  return last\n}\n\n/*\n * eliminate colinear or duplicate points\n */\nconst filterPoints = (start, end) => {\n  if (!start) return start\n  if (!end) end = start\n\n  let p = start\n  let again\n  do {\n    again = false\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p)\n      p = end = p.prev\n      if (p === p.next) break\n      again = true\n    } else {\n      p = p.next\n    }\n  } while (again || p !== end)\n\n  return end\n}\n\n/*\n * go through all polygon nodes and cure small local self-intersections\n */\nconst cureLocalIntersections = (start, triangles, dim) => {\n  let p = start\n  do {\n    const a = p.prev\n    const b = p.next.next\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim)\n      triangles.push(p.i / dim)\n      triangles.push(b.i / dim)\n\n      // remove two nodes involved\n      removeNode(p)\n      removeNode(p.next)\n\n      p = start = b\n    }\n\n    p = p.next\n  } while (p !== start)\n\n  return filterPoints(p)\n}\n\n/*\n * check if a polygon diagonal intersects any polygon segments\n */\nconst intersectsPolygon = (a, b) => {\n  let p = a\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n        intersects(p, p.next, a, b)) return true\n    p = p.next\n  } while (p !== a)\n\n  return false\n}\n\n/*\n * check if a polygon diagonal is locally inside the polygon\n */\nconst locallyInside = (a, b) => area(a.prev, a, a.next) < 0\n  ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\n  : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0\n\n/*\n * check if the middle point of a polygon diagonal is inside the polygon\n */\nconst middleInside = (a, b) => {\n  let p = a\n  let inside = false\n  const px = (a.x + b.x) / 2\n  const py = (a.y + b.y) / 2\n  do {\n    if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n        (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) { inside = !inside }\n    p = p.next\n  } while (p !== a)\n\n  return inside\n}\n\n/*\n * link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two\n * if one belongs to the outer ring and another to a hole, it merges it into a single ring\n */\nconst splitPolygon = (a, b) => {\n  const a2 = new Node(a.i, a.x, a.y)\n  const b2 = new Node(b.i, b.x, b.y)\n  const an = a.next\n  const bp = b.prev\n\n  a.next = b\n  b.prev = a\n\n  a2.next = an\n  an.prev = a2\n\n  b2.next = a2\n  a2.prev = b2\n\n  bp.next = b2\n  b2.prev = bp\n\n  return b2\n}\n\n/*\n * check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n */\nconst isValidDiagonal = (a, b) => a.next.i !== b.i &&\n    a.prev.i !== b.i &&\n    !intersectsPolygon(a, b) && // doesn't intersect other edges\n    (\n      locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n        (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n        equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0\n    )\n\n/*\n * check if two segments intersect\n */\nconst intersects = (p1, q1, p2, q2) => {\n  const o1 = Math.sign(area(p1, q1, p2))\n  const o2 = Math.sign(area(p1, q1, q2))\n  const o3 = Math.sign(area(p2, q2, p1))\n  const o4 = Math.sign(area(p2, q2, q1))\n\n  if (o1 !== o2 && o3 !== o4) return true // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true // p1, q1 and p2 are colinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true // p1, q1 and q2 are colinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true // p2, q2 and p1 are colinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true // p2, q2 and q1 are colinear and q1 lies on p2q2\n\n  return false\n}\n\n/*\n * for colinear points p, q, r, check if point q lies on segment pr\n */\nconst onSegment = (p, q, r) => q.x <= Math.max(p.x, r.x) &&\n    q.x >= Math.min(p.x, r.x) &&\n    q.y <= Math.max(p.y, r.y) &&\n    q.y >= Math.min(p.y, r.y)\n\nconst signedArea = (data, start, end, dim) => {\n  let sum = 0\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1])\n    j = i\n  }\n\n  return sum\n}\n\n/*\n * check if two points are equal\n */\nconst equals = (p1, p2) => p1.x === p2.x && p1.y === p2.y\n\nmodule.exports = { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, locallyInside, splitPolygon }\n", "const { filterPoints, linkedPolygon, locallyInside, splitPolygon } = require('./linkedPolygon')\nconst { area, pointInTriangle } = require('./triangle')\n\n/*\n * link every hole into the outer loop, producing a single-ring polygon without holes\n *\n * Original source from https://github.com/mapbox/earcut\n * Copyright (c) 2016 Mapbox\n */\nconst eliminateHoles = (data, holeIndices, outerNode, dim) => {\n  const queue = []\n\n  for (let i = 0, len = holeIndices.length; i < len; i++) {\n    const start = holeIndices[i] * dim\n    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length\n    const list = linkedPolygon(data, start, end, dim, false)\n    if (list === list.next) list.steiner = true\n    queue.push(getLeftmost(list))\n  }\n\n  queue.sort((a, b) => a.x - b.x) // compare X\n\n  // process holes from left to right\n  for (let i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode)\n    outerNode = filterPoints(outerNode, outerNode.next)\n  }\n\n  return outerNode\n}\n\n/*\n * find a bridge between vertices that connects hole with an outer ring and link it\n */\nconst eliminateHole = (hole, outerNode) => {\n  const bridge = findHoleBridge(hole, outerNode)\n  if (!bridge) {\n    return outerNode\n  }\n\n  const bridgeReverse = splitPolygon(bridge, hole)\n\n  // filter colinear points around the cuts\n  const filteredBridge = filterPoints(bridge, bridge.next)\n  filterPoints(bridgeReverse, bridgeReverse.next)\n\n  // Check if input node was removed by the filtering\n  return outerNode === bridge ? filteredBridge : outerNode\n}\n\n/*\n * David Eberly's algorithm for finding a bridge between hole and outer polygon\n */\nconst findHoleBridge = (hole, outerNode) => {\n  let p = outerNode\n  const hx = hole.x\n  const hy = hole.y\n  let qx = -Infinity\n  let m\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left\n  // segment's endpoint with lesser x will be potential connection point\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y)\n      if (x <= hx && x > qx) {\n        qx = x\n        if (x === hx) {\n          if (hy === p.y) return p\n          if (hy === p.next.y) return p.next\n        }\n\n        m = p.x < p.next.x ? p : p.next\n      }\n    }\n\n    p = p.next\n  } while (p !== outerNode)\n\n  if (!m) return null\n\n  if (hx === qx) return m // hole touches outer segment; pick leftmost endpoint\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint\n  // if there are no points found, we have a valid connection\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m\n  const mx = m.x\n  const my = m.y\n  let tanMin = Infinity\n\n  p = m\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x &&\n        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      const tan = Math.abs(hy - p.y) / (hx - p.x) // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n        m = p\n        tanMin = tan\n      }\n    }\n\n    p = p.next\n  } while (p !== stop)\n\n  return m\n}\n\n/*\n * whether sector in vertex m contains sector in vertex p in the same coordinates\n */\nconst sectorContainsSector = (m, p) => area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0\n\n/*\n * find the leftmost node of a polygon ring\n */\nconst getLeftmost = (start) => {\n  let p = start\n  let leftmost = start\n  do {\n    if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p\n    p = p.next\n  } while (p !== start)\n\n  return leftmost\n}\n\nmodule.exports = eliminateHoles\n", "const eliminateHoles = require('./eliminateHoles')\nconst { removeNode, sortLinked } = require('./linkedList')\nconst { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, splitPolygon } = require('./linkedPolygon')\nconst { area, pointInTriangle } = require('./triangle')\n\n/*\n * An implementation of the earcut polygon triangulation algorithm.\n *\n * Original source from https://github.com/mapbox/earcut\n * Copyright (c) 2016 Mapbox\n *\n * @param {data} A flat array of vertex coordinates.\n * @param {holeIndices} An array of hole indices if any.\n * @param {dim} The number of coordinates per vertex in the input array.\n */\nconst triangulate = (data, holeIndices, dim = 2) => {\n  const hasHoles = holeIndices && holeIndices.length\n  const outerLen = hasHoles ? holeIndices[0] * dim : data.length\n  let outerNode = linkedPolygon(data, 0, outerLen, dim, true)\n  const triangles = []\n\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles\n\n  let minX, minY, maxX, maxY, invSize\n\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim)\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0]\n    minY = maxY = data[1]\n\n    for (let i = dim; i < outerLen; i += dim) {\n      const x = data[i]\n      const y = data[i + 1]\n      if (x < minX) minX = x\n      if (y < minY) minY = y\n      if (x > maxX) maxX = x\n      if (y > maxY) maxY = y\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY)\n    invSize = invSize !== 0 ? 1 / invSize : 0\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize)\n\n  return triangles\n}\n\n/*\n * main ear slicing loop which triangulates a polygon (given as a linked list)\n */\nconst earcutLinked = (ear, triangles, dim, minX, minY, invSize, pass) => {\n  if (!ear) return\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize)\n\n  let stop = ear\n  let prev\n  let next\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    prev = ear.prev\n    next = ear.next\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim)\n      triangles.push(ear.i / dim)\n      triangles.push(next.i / dim)\n\n      removeNode(ear)\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next\n      stop = next.next\n\n      continue\n    }\n\n    ear = next\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1)\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim)\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2)\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize)\n      }\n\n      break\n    }\n  }\n}\n\n/*\n * check whether a polygon node forms a valid ear with adjacent nodes\n */\nconst isEar = (ear) => {\n  const a = ear.prev\n  const b = ear\n  const c = ear.next\n\n  if (area(a, b, c) >= 0) return false // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  let p = ear.next.next\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {\n      return false\n    }\n    p = p.next\n  }\n\n  return true\n}\n\nconst isEarHashed = (ear, minX, minY, invSize) => {\n  const a = ear.prev\n  const b = ear\n  const c = ear.next\n\n  if (area(a, b, c) >= 0) return false // reflex, can't be an ear\n\n  // triangle bbox; min & max are calculated like this for speed\n  const minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x)\n  const minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y)\n  const maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x)\n  const maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y)\n\n  // z-order range for the current triangle bbox\n  const minZ = zOrder(minTX, minTY, minX, minY, invSize)\n  const maxZ = zOrder(maxTX, maxTY, minX, minY, invSize)\n\n  let p = ear.prevZ\n  let n = ear.nextZ\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0) return false\n    p = p.prevZ\n\n    if (n !== ear.prev && n !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0) return false\n    n = n.nextZ\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0) return false\n    p = p.prevZ\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (n !== ear.prev && n !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0) return false\n    n = n.nextZ\n  }\n\n  return true\n}\n\n/*\n * try splitting polygon into two and triangulate them independently\n */\nconst splitEarcut = (start, triangles, dim, minX, minY, invSize) => {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start\n  do {\n    let b = a.next.next\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b)\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next)\n        c = filterPoints(c, c.next)\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize)\n        earcutLinked(c, triangles, dim, minX, minY, invSize)\n        return\n      }\n\n      b = b.next\n    }\n\n    a = a.next\n  } while (a !== start)\n}\n\n/*\n * interlink polygon nodes in z-order\n */\nconst indexCurve = (start, minX, minY, invSize) => {\n  let p = start\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize)\n    p.prevZ = p.prev\n    p.nextZ = p.next\n    p = p.next\n  } while (p !== start)\n\n  p.prevZ.nextZ = null\n  p.prevZ = null\n\n  sortLinked(p, (p) => p.z)\n}\n\n/*\n * z-order of a point given coords and inverse of the longer side of data bbox\n */\nconst zOrder = (x, y, minX, minY, invSize) => {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) * invSize\n  y = 32767 * (y - minY) * invSize\n\n  x = (x | (x << 8)) & 0x00FF00FF\n  x = (x | (x << 4)) & 0x0F0F0F0F\n  x = (x | (x << 2)) & 0x33333333\n  x = (x | (x << 1)) & 0x55555555\n\n  y = (y | (y << 8)) & 0x00FF00FF\n  y = (y | (y << 4)) & 0x0F0F0F0F\n  y = (y | (y << 2)) & 0x33333333\n  y = (y | (y << 1)) & 0x55555555\n\n  return x | (y << 1)\n}\n\nmodule.exports = triangulate\n", "const { area } = require('../../../maths/utils')\nconst { toOutlines } = require('../../../geometries/geom2')\nconst { arePointsInside } = require('../../../geometries/poly2')\n\n/*\n * Constructs a polygon hierarchy of solids and holes.\n * The hierarchy is represented as a forest of trees. All trees shall be depth at most 2.\n * If a solid exists inside the hole of another solid, it will be split out as its own root.\n *\n * @param {geom2} geometry\n * @returns {Array} an array of polygons with associated holes\n * @alias module:modeling/geometries/geom2.toTree\n *\n * @example\n * const geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))\n * console.log(assignHoles(geometry))\n * [{\n *   \"solid\": [[-2.5,-2.5],[2.5,-2.5],[2.5,2.5],[-2.5,2.5]],\n *   \"holes\": [[[-1.5,1.5],[1.5,1.5],[1.5,-1.5],[-1.5,-1.5]]]\n * }]\n */\nconst assignHoles = (geometry) => {\n  const outlines = toOutlines(geometry)\n  const solids = [] // solid indices\n  const holes = [] // hole indices\n  outlines.forEach((outline, i) => {\n    const a = area(outline)\n    if (a < 0) {\n      holes.push(i)\n    } else if (a > 0) {\n      solids.push(i)\n    }\n  })\n\n  // for each hole, determine what solids it is inside of\n  const children = [] // child holes of solid[i]\n  const parents = [] // parent solids of hole[i]\n  solids.forEach((s, i) => {\n    const solid = outlines[s]\n    children[i] = []\n    holes.forEach((h, j) => {\n      const hole = outlines[h]\n      // check if a point of hole j is inside solid i\n      if (arePointsInside([hole[0]], { vertices: solid })) {\n        children[i].push(h)\n        if (!parents[j]) parents[j] = []\n        parents[j].push(i)\n      }\n    })\n  })\n\n  // check if holes have multiple parents and choose one with fewest children\n  holes.forEach((h, j) => {\n    // ensure at least one parent exists\n    if (parents[j] && parents[j].length > 1) {\n      // the solid directly containing this hole\n      const directParent = minIndex(parents[j], (p) => children[p].length)\n      parents[j].forEach((p, i) => {\n        if (i !== directParent) {\n          // Remove hole from skip level parents\n          children[p] = children[p].filter((c) => c !== h)\n        }\n      })\n    }\n  })\n\n  // map indices back to points\n  return children.map((holes, i) => ({\n    solid: outlines[solids[i]],\n    holes: holes.map((h) => outlines[h])\n  }))\n}\n\n/*\n * Find the item in the list with smallest score(item).\n * If the list is empty, return undefined.\n */\nconst minIndex = (list, score) => {\n  let bestIndex\n  let best\n  list.forEach((item, index) => {\n    const value = score(item)\n    if (best === undefined || value < best) {\n      bestIndex = index\n      best = value\n    }\n  })\n  return bestIndex\n}\n\nmodule.exports = assignHoles\n", "const geom2 = require('../../../geometries/geom2')\nconst plane = require('../../../maths/plane')\nconst vec2 = require('../../../maths/vec2')\nconst vec3 = require('../../../maths/vec3')\nconst calculatePlane = require('../slice/calculatePlane')\nconst assignHoles = require('./assignHoles')\n\n/*\n * Constructs a polygon hierarchy which associates holes with their outer solids.\n * This class maps a 3D polygon onto a 2D space using an orthonormal basis.\n * It tracks the mapping so that points can be reversed back to 3D losslessly.\n */\nclass PolygonHierarchy {\n  constructor (slice) {\n    this.plane = calculatePlane(slice)\n\n    // create an orthonormal basis\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal\n    const rightvector = vec3.orthogonal(vec3.create(), this.plane)\n    const perp = vec3.cross(vec3.create(), this.plane, rightvector)\n    this.v = vec3.normalize(perp, perp)\n    this.u = vec3.cross(vec3.create(), this.v, this.plane)\n\n    // map from 2D to original 3D points\n    this.basisMap = new Map()\n\n    // project slice onto 2D plane\n    const projected = slice.edges.map((e) => e.map((v) => this.to2D(v)))\n\n    // compute polygon hierarchies, assign holes to solids\n    const geometry = geom2.create(projected)\n    this.roots = assignHoles(geometry)\n  }\n\n  /*\n   * project a 3D point onto the 2D plane\n   */\n  to2D (vector3) {\n    const vector2 = vec2.fromValues(vec3.dot(vector3, this.u), vec3.dot(vector3, this.v))\n    this.basisMap.set(vector2, vector3)\n    return vector2\n  }\n\n  /*\n   * un-project a 2D point back into 3D\n   */\n  to3D (vector2) {\n    // use a map to get the original 3D, no floating point error\n    const original = this.basisMap.get(vector2)\n    if (original) {\n      return original\n    } else {\n      console.log('Warning: point not in original slice')\n      const v1 = vec3.scale(vec3.create(), this.u, vector2[0])\n      const v2 = vec3.scale(vec3.create(), this.v, vector2[1])\n\n      const planeOrigin = vec3.scale(vec3.create(), plane, plane[3])\n      const v3 = vec3.add(v1, v1, planeOrigin)\n      return vec3.add(v2, v2, v3)\n    }\n  }\n}\n\nmodule.exports = PolygonHierarchy\n", "const poly3 = require('../../../geometries/poly3')\nconst earcut = require('../earcut')\nconst PolygonHierarchy = require('../earcut/polygonHierarchy')\n\n/**\n * Return a list of polygons which are enclosed by the slice.\n * @param {slice} slice - the slice\n * @return {Array} a list of polygons (3D)\n * @alias module:modeling/extrusions/slice.toPolygons\n */\nconst toPolygons = (slice) => {\n  const hierarchy = new PolygonHierarchy(slice)\n\n  const polygons = []\n  hierarchy.roots.forEach(({ solid, holes }) => {\n    // hole indices\n    let index = solid.length\n    const holesIndex = []\n    holes.forEach((hole, i) => {\n      holesIndex.push(index)\n      index += hole.length\n    })\n\n    // compute earcut triangulation for each solid\n    const vertices = [solid, ...holes].flat()\n    const data = vertices.flat()\n    // Get original 3D vertex by index\n    const getVertex = (i) => hierarchy.to3D(vertices[i])\n    const indices = earcut(data, holesIndex)\n    for (let i = 0; i < indices.length; i += 3) {\n      // Map back to original vertices\n      const tri = indices.slice(i, i + 3).map(getVertex)\n      polygons.push(poly3.fromPointsAndPlane(tri, hierarchy.plane))\n    }\n  })\n\n  return polygons\n}\n\nmodule.exports = toPolygons\n", "const vec3 = require('../../../maths/vec3')\n\nconst edgesToString = (edges) =>\n  edges.reduce((result, edge) => (\n    result += `[${vec3.toString(edge[0])}, ${vec3.toString(edge[1])}], `\n  ), '')\n\n/**\n * @param {slice} slice - the slice\n * @return {String} the string representation\n * @alias module:modeling/extrusions/slice.toString\n */\nconst toString = (slice) => `[${edgesToString(slice.edges)}]`\n\nmodule.exports = toString\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Transform the given slice using the given matrix.\n * @param {mat4} matrix - transform matrix\n * @param {slice} slice - slice to transform\n * @returns {slice} the transformed slice\n * @alias module:modeling/extrusions/slice.transform\n *\n * @example\n * let matrix = mat4.fromTranslation([1, 2, 3])\n * let newslice = transform(matrix, oldslice)\n */\nconst transform = (matrix, slice) => {\n  const edges = slice.edges.map((edge) => [vec3.transform(vec3.create(), edge[0], matrix), vec3.transform(vec3.create(), edge[1], matrix)])\n  return create(edges)\n}\n\nmodule.exports = transform\n", "/**\n * Represents a 3D geometry consisting of a list of edges.\n * @see {@link slice} for data structure information.\n * @module modeling/extrusions/slice\n */\nmodule.exports = {\n  calculatePlane: require('./calculatePlane'),\n  clone: require('./clone'),\n  create: require('./create'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromSides: require('./fromSides'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toEdges: require('./toEdges'),\n  toPolygons: require('./toPolygons'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec3 = require('../../../maths/vec3')\nconst create = require('./create')\n\n/*\n * Mend gaps in a 2D slice to make it a closed polygon\n */\nconst repair = (slice) => {\n  if (!slice.edges) return slice\n  let edges = slice.edges\n  const vertexMap = new Map() // string key to vertex map\n  const edgeCount = new Map() // count of (in - out) edges\n\n  // Remove self-edges\n  edges = edges.filter((e) => !vec3.equals(e[0], e[1]))\n\n  // build vertex and edge count maps\n  edges.forEach((edge) => {\n    const inKey = edge[0].toString()\n    const outKey = edge[1].toString()\n    vertexMap.set(inKey, edge[0])\n    vertexMap.set(outKey, edge[1])\n    edgeCount.set(inKey, (edgeCount.get(inKey) || 0) + 1) // in\n    edgeCount.set(outKey, (edgeCount.get(outKey) || 0) - 1) // out\n  })\n\n  // find vertices which are missing in or out edges\n  const missingIn = []\n  const missingOut = []\n  edgeCount.forEach((count, vertex) => {\n    if (count < 0) missingIn.push(vertex)\n    if (count > 0) missingOut.push(vertex)\n  })\n\n  // pairwise distance of bad vertices\n  missingIn.forEach((key1) => {\n    const v1 = vertexMap.get(key1)\n\n    // find the closest vertex that is missing an out edge\n    let bestDistance = Infinity\n    let bestReplacement\n    missingOut.forEach((key2) => {\n      const v2 = vertexMap.get(key2)\n      const distance = vec3.distance(v1, v2)\n      if (distance < bestDistance) {\n        bestDistance = distance\n        bestReplacement = v2\n      }\n    })\n    console.warn(`slice.repair: repairing vertex gap ${v1} to ${bestReplacement} distance ${bestDistance}`)\n\n    // merge broken vertices\n    edges = edges.map((edge) => {\n      if (edge[0].toString() === key1) return [bestReplacement, edge[1]]\n      if (edge[1].toString() === key1) return [edge[0], bestReplacement]\n      return edge\n    })\n  })\n\n  return create(edges)\n}\n\nmodule.exports = repair\n", "const { EPS } = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\nconst slice = require('./slice')\n\n// https://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid's_algorithm\nconst gcd = (a, b) => {\n  if (a === b) { return a }\n  if (a < b) { return gcd(b, a) }\n  if (b === 1) { return 1 }\n  if (b === 0) { return a }\n  return gcd(b, a % b)\n}\n\nconst lcm = (a, b) => (a * b) / gcd(a, b)\n\n// Return a set of edges that encloses the same area by splitting\n// the given edges to have newlength total edges.\nconst repartitionEdges = (newlength, edges) => {\n  // NOTE: This implementation splits each edge evenly.\n  const multiple = newlength / edges.length\n  if (multiple === 1) {\n    return edges\n  }\n\n  const divisor = vec3.fromValues(multiple, multiple, multiple)\n\n  const newEdges = []\n  edges.forEach((edge) => {\n    const increment = vec3.subtract(vec3.create(), edge[1], edge[0])\n    vec3.divide(increment, increment, divisor)\n\n    // repartition the edge\n    let prev = edge[0]\n    for (let i = 1; i <= multiple; ++i) {\n      const next = vec3.add(vec3.create(), prev, increment)\n      newEdges.push([prev, next])\n      prev = next\n    }\n  })\n  return newEdges\n}\n\nconst EPSAREA = (EPS * EPS / 2) * Math.sin(Math.PI / 3)\n\n/*\n * Extrude (build) walls between the given slices.\n * Each wall consists of two triangles, which may be invalid if slices are overlapping.\n */\nconst extrudeWalls = (slice0, slice1) => {\n  let edges0 = slice.toEdges(slice0)\n  let edges1 = slice.toEdges(slice1)\n\n  if (edges0.length !== edges1.length) {\n    // different shapes, so adjust one or both to the same number of edges\n    const newlength = lcm(edges0.length, edges1.length)\n    if (newlength !== edges0.length) edges0 = repartitionEdges(newlength, edges0)\n    if (newlength !== edges1.length) edges1 = repartitionEdges(newlength, edges1)\n  }\n\n  const walls = []\n  edges0.forEach((edge0, i) => {\n    const edge1 = edges1[i]\n\n    const poly0 = poly3.create([edge0[0], edge0[1], edge1[1]])\n    const poly0area = poly3.measureArea(poly0)\n    if (Number.isFinite(poly0area) && poly0area > EPSAREA) walls.push(poly0)\n\n    const poly1 = poly3.create([edge0[0], edge1[1], edge1[0]])\n    const poly1area = poly3.measureArea(poly1)\n    if (Number.isFinite(poly1area) && poly1area > EPSAREA) walls.push(poly1)\n  })\n  return walls\n}\n\nmodule.exports = extrudeWalls\n", "const mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst slice = require('./slice')\nconst repairSlice = require('./slice/repair')\n\nconst extrudeWalls = require('./extrudeWalls')\n\nconst defaultCallback = (progress, index, base) => {\n  let baseSlice = null\n  if (geom2.isA(base)) baseSlice = slice.fromSides(geom2.toSides(base))\n  if (poly3.isA(base)) baseSlice = slice.fromPoints(poly3.toPoints(base))\n\n  return progress === 0 || progress === 1 ? slice.transform(mat4.fromTranslation(mat4.create(), [0, 0, progress]), baseSlice) : null\n}\n\n/**\n * Extrude a solid from the slices as returned by the callback function.\n * @see slice\n *\n * @param {Object} options - options for extrude\n * @param {Integer} [options.numberOfSlices=2] the number of slices to be generated by the callback\n * @param {Boolean} [options.capStart=true] the solid should have a cap at the start\n * @param {Boolean} [options.capEnd=true] the solid should have a cap at the end\n * @param {Boolean} [options.close=false] the solid should have a closing section between start and end\n * @param {Boolean} [options.repair=true] - repair gaps in the geometry\n * @param {Function} [options.callback] the callback function that generates each slice\n * @param {Object} base - the base object which is used to create slices (see the example for callback information)\n * @return {geom3} the extruded shape\n * @alias module:modeling/extrusions.extrudeFromSlices\n *\n * @example\n * // Parameters:\n * //   progress : the percent complete [0..1]\n * //   index : the index of the current slice [0..numberOfSlices - 1]\n * //   base : the base object as given\n * // Return Value:\n * //   slice or null (to skip)\n * const callback = (progress, index, base) => {\n *   ...\n *   return slice\n * }\n */\nconst extrudeFromSlices = (options, base) => {\n  const defaults = {\n    numberOfSlices: 2,\n    capStart: true,\n    capEnd: true,\n    close: false,\n    repair: true,\n    callback: defaultCallback\n  }\n  const { numberOfSlices, capStart, capEnd, close, repair, callback: generate } = Object.assign({ }, defaults, options)\n\n  if (numberOfSlices < 2) throw new Error('numberOfSlices must be 2 or more')\n\n  // Repair gaps in the base slice\n  if (repair) {\n    // note: base must be a slice, if base is geom2 this doesn't repair\n    base = repairSlice(base)\n  }\n\n  const sMax = numberOfSlices - 1\n\n  let startSlice = null\n  let endSlice = null\n  let prevSlice = null\n  let polygons = []\n  for (let s = 0; s < numberOfSlices; s++) {\n    // invoke the callback function to get the next slice\n    // NOTE: callback can return null to skip the slice\n    const currentSlice = generate(s / sMax, s, base)\n\n    if (currentSlice) {\n      if (!slice.isA(currentSlice)) throw new Error('the callback function must return slice objects')\n\n      const edges = slice.toEdges(currentSlice)\n      if (edges.length === 0) throw new Error('the callback function must return slices with one or more edges')\n\n      if (prevSlice) {\n        polygons = polygons.concat(extrudeWalls(prevSlice, currentSlice))\n      }\n\n      // save start and end slices for caps if necessary\n      if (s === 0) startSlice = currentSlice\n      if (s === (numberOfSlices - 1)) endSlice = currentSlice\n\n      prevSlice = currentSlice\n    }\n  }\n\n  if (capEnd) {\n    // create a cap at the end\n    const endPolygons = slice.toPolygons(endSlice)\n    polygons = polygons.concat(endPolygons)\n  }\n  if (capStart) {\n    // create a cap at the start\n    const startPolygons = slice.toPolygons(startSlice).map(poly3.invert)\n    polygons = polygons.concat(startPolygons)\n  }\n  if (!capStart && !capEnd) {\n    // create walls between end and start slices\n    if (close && !slice.equals(endSlice, startSlice)) {\n      polygons = polygons.concat(extrudeWalls(endSlice, startSlice))\n    }\n  }\n  return geom3.create(polygons)\n}\n\nmodule.exports = extrudeFromSlices\n", "const { TAU } = require('../../maths/constants')\nconst mat4 = require('../../maths/mat4')\n\nconst { mirrorX } = require('../transforms/mirror')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst slice = require('./slice')\n\nconst extrudeFromSlices = require('./extrudeFromSlices')\n\n/**\n * Rotate extrude the given geometry using the given options.\n *\n * @param {Object} options - options for extrusion\n * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS)\n * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)\n * @param {String} [options.overflow='cap'] - what to do with points outside of bounds (+ / - x) :\n * defaults to capping those points to 0 (only supported behaviour for now)\n * @param {Number} [options.segments=12] - number of segments of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded geometry\n * @alias module:modeling/extrusions.extrudeRotate\n *\n * @example\n * const myshape = extrudeRotate({segments: 8, angle: TAU / 2}, circle({size: 3, center: [4, 0]}))\n */\nconst extrudeRotate = (options, geometry) => {\n  const defaults = {\n    segments: 12,\n    startAngle: 0,\n    angle: TAU,\n    overflow: 'cap'\n  }\n  let { segments, startAngle, angle, overflow } = Object.assign({}, defaults, options)\n\n  if (segments < 3) throw new Error('segments must be greater then 3')\n\n  startAngle = Math.abs(startAngle) > TAU ? startAngle % TAU : startAngle\n  angle = Math.abs(angle) > TAU ? angle % TAU : angle\n\n  let endAngle = startAngle + angle\n  endAngle = Math.abs(endAngle) > TAU ? endAngle % TAU : endAngle\n\n  if (endAngle < startAngle) {\n    const x = startAngle\n    startAngle = endAngle\n    endAngle = x\n  }\n  let totalRotation = endAngle - startAngle\n  if (totalRotation <= 0.0) totalRotation = TAU\n\n  if (Math.abs(totalRotation) < TAU) {\n    // adjust the segments to achieve the total rotation requested\n    const anglePerSegment = TAU / segments\n    segments = Math.floor(Math.abs(totalRotation) / anglePerSegment)\n    if (Math.abs(totalRotation) > (segments * anglePerSegment)) segments++\n  }\n\n  // console.log('startAngle: '+startAngle)\n  // console.log('endAngle: '+endAngle)\n  // console.log(totalRotation)\n  // console.log(segments)\n\n  // convert geometry to an array of sides, easier to deal with\n  let shapeSides = geom2.toSides(geometry)\n  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // determine if the rotate extrude can be computed in the first place\n  // ie all the points have to be either x > 0 or x < 0\n\n  // generic solution to always have a valid solid, even if points go beyond x/ -x\n  // 1. split points up between all those on the 'left' side of the axis (x<0) & those on the 'righ' (x>0)\n  // 2. for each set of points do the extrusion operation IN OPOSITE DIRECTIONS\n  // 3. union the two resulting solids\n\n  // 1. alt : OR : just cap of points at the axis ?\n\n  const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))\n  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))\n  const arePointsWithNegAndPosX = pointsWithNegativeX.length > 0 && pointsWithPositiveX.length > 0\n\n  // FIXME actually there are cases where setting X=0 will change the basic shape\n  // - Alternative #1 : don't allow shapes with both negative and positive X values\n  // - Alternative #2 : remove one half of the shape (costly)\n  if (arePointsWithNegAndPosX && overflow === 'cap') {\n    if (pointsWithNegativeX.length > pointsWithPositiveX.length) {\n      shapeSides = shapeSides.map((side) => {\n        let point0 = side[0]\n        let point1 = side[1]\n        point0 = [Math.min(point0[0], 0), point0[1]]\n        point1 = [Math.min(point1[0], 0), point1[1]]\n        return [point0, point1]\n      })\n      // recreate the geometry from the (-) capped points\n      geometry = geom2.reverse(geom2.create(shapeSides))\n      geometry = mirrorX(geometry)\n    } else if (pointsWithPositiveX.length >= pointsWithNegativeX.length) {\n      shapeSides = shapeSides.map((side) => {\n        let point0 = side[0]\n        let point1 = side[1]\n        point0 = [Math.max(point0[0], 0), point0[1]]\n        point1 = [Math.max(point1[0], 0), point1[1]]\n        return [point0, point1]\n      })\n      // recreate the geometry from the (+) capped points\n      geometry = geom2.create(shapeSides)\n    }\n  }\n\n  const rotationPerSlice = totalRotation / segments\n  const isCapped = Math.abs(totalRotation) < TAU\n  const baseSlice = slice.fromSides(geom2.toSides(geometry))\n  slice.reverse(baseSlice, baseSlice)\n\n  const matrix = mat4.create()\n  const createSlice = (progress, index, base) => {\n    let Zrotation = rotationPerSlice * index + startAngle\n    // fix rounding error when rotating TAU radians\n    if (totalRotation === TAU && index === segments) {\n      Zrotation = startAngle\n    }\n    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromXRotation(mat4.create(), TAU / 4))\n\n    return slice.transform(matrix, base)\n  }\n\n  options = {\n    numberOfSlices: segments + 1,\n    capStart: isCapped,\n    capEnd: isCapped,\n    close: !isCapped,\n    callback: createSlice\n  }\n  return extrudeFromSlices(options, baseSlice)\n}\n\nmodule.exports = extrudeRotate\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Rotate the given objects using the given options.\n * @param {Array} angles - angle (RADIANS) of rotations about X, Y, and Z axis\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotate\n *\n * @example\n * const newsphere = rotate([TAU / 8, 0, 0], sphere())\n */\nconst rotate = (angles, ...objects) => {\n  if (!Array.isArray(angles)) throw new Error('angles must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the angles if necessary\n  angles = angles.slice() // don't modify the original\n  while (angles.length < 3) angles.push(0)\n\n  const yaw = angles[2]\n  const pitch = angles[1]\n  const roll = angles[0]\n\n  const matrix = mat4.fromTaitBryanRotation(mat4.create(), yaw, pitch, roll)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Rotate the given objects about the X axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about X\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateX\n */\nconst rotateX = (angle, ...objects) => rotate([angle, 0, 0], objects)\n\n/**\n * Rotate the given objects about the Y axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about Y\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateY\n */\nconst rotateY = (angle, ...objects) => rotate([0, angle, 0], objects)\n\n/**\n * Rotate the given objects about the Z axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about Z\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateZ\n */\nconst rotateZ = (angle, ...objects) => rotate([0, 0, angle], objects)\n\nmodule.exports = {\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Translate the given objects using the given options.\n * @param {Array} offset - offset (vector) of which to translate the objects\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translate\n *\n * @example\n * const newsphere = translate([5, 0, 10], sphere())\n */\nconst translate = (offset, ...objects) => {\n  if (!Array.isArray(offset)) throw new Error('offset must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the offset if necessary\n  offset = offset.slice() // don't modify the original\n  while (offset.length < 3) offset.push(0)\n\n  const matrix = mat4.fromTranslation(mat4.create(), offset)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Translate the given objects along the X axis using the given options.\n * @param {Number} offset - X offset of which to translate the objects\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateX\n */\nconst translateX = (offset, ...objects) => translate([offset, 0, 0], objects)\n\n/**\n * Translate the given objects along the Y axis using the given options.\n * @param {Number} offset - Y offset of which to translate the geometries\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateY\n */\nconst translateY = (offset, ...objects) => translate([0, offset, 0], objects)\n\n/**\n * Translate the given objects along the Z axis using the given options.\n * @param {Number} offset - Z offset of which to translate the geometries\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateZ\n */\nconst translateZ = (offset, ...objects) => translate([0, 0, offset], objects)\n\nmodule.exports = {\n  translate,\n  translateX,\n  translateY,\n  translateZ\n}\n", "const { TAU } = require('../maths/constants')\n\nconst extrudeRotate = require('../operations/extrusions/extrudeRotate')\nconst { rotate } = require('../operations/transforms/rotate')\nconst { translate } = require('../operations/transforms/translate')\n\nconst circle = require('./circle')\n\nconst { isGT, isGTE } = require('./commonChecks')\n\n/**\n * Construct a torus by revolving a small circle (inner) about the circumference of a large (outer) circle.\n * @param {Object} [options] - options for construction\n * @param {Number} [options.innerRadius=1] - radius of small (inner) circle\n * @param {Number} [options.outerRadius=4] - radius of large (outer) circle\n * @param {Integer} [options.innerSegments=32] - number of segments to create per rotation\n * @param {Integer} [options.outerSegments=32] - number of segments to create per rotation\n * @param {Integer} [options.innerRotation=0] - rotation of small (inner) circle in radians\n * @param {Number} [options.outerRotation=TAU] - rotation (outer) of the torus (RADIANS)\n * @param {Number} [options.startAngle=0] - start angle of the torus (RADIANS)\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.torus\n *\n * @example\n * let myshape = torus({ innerRadius: 10, outerRadius: 100 })\n */\nconst torus = (options) => {\n  const defaults = {\n    innerRadius: 1,\n    innerSegments: 32,\n    outerRadius: 4,\n    outerSegments: 32,\n    innerRotation: 0,\n    startAngle: 0,\n    outerRotation: TAU\n  }\n  const { innerRadius, innerSegments, outerRadius, outerSegments, innerRotation, startAngle, outerRotation } = Object.assign({}, defaults, options)\n\n  if (!isGT(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')\n  if (!isGTE(innerSegments, 3)) throw new Error('innerSegments must be three or more')\n  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')\n  if (!isGTE(outerSegments, 3)) throw new Error('outerSegments must be three or more')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGT(outerRotation, 0)) throw new Error('outerRotation must be greater than zero')\n\n  if (innerRadius >= outerRadius) throw new Error('inner circle is two large to rotate about the outer circle')\n\n  let innerCircle = circle({ radius: innerRadius, segments: innerSegments })\n\n  if (innerRotation !== 0) {\n    innerCircle = rotate([0, 0, innerRotation], innerCircle)\n  }\n\n  innerCircle = translate([outerRadius, 0], innerCircle)\n\n  const extrudeOptions = {\n    startAngle: startAngle,\n    angle: outerRotation,\n    segments: outerSegments\n  }\n  return extrudeRotate(extrudeOptions, innerCircle)\n}\n\nmodule.exports = torus\n", "const { NEPS } = require('../maths/constants')\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isNumberArray } = require('./commonChecks')\n\n// returns angle C\nconst solveAngleFromSSS = (a, b, c) => Math.acos(((a * a) + (b * b) - (c * c)) / (2 * a * b))\n\n// returns side c\nconst solveSideFromSAS = (a, C, b) => {\n  if (C > NEPS) {\n    return Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(C))\n  }\n\n  // Explained in https://www.nayuki.io/page/numerically-stable-law-of-cosines\n  return Math.sqrt((a - b) * (a - b) + a * b * C * C * (1 - C * C / 12))\n}\n\n// AAA is when three angles of a triangle, but no sides\nconst solveAAA = (angles) => {\n  const eps = Math.abs(angles[0] + angles[1] + angles[2] - Math.PI)\n  if (eps > NEPS) throw new Error('AAA triangles require angles that sum to PI')\n\n  const A = angles[0]\n  const B = angles[1]\n  const C = Math.PI - A - B\n\n  // Note: This is not 100% proper but...\n  // default the side c length to 1\n  // solve the other lengths\n  const c = 1\n  const a = (c / Math.sin(C)) * Math.sin(A)\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// AAS is when two angles and one side are known, and the side is not between the angles\nconst solveAAS = (values) => {\n  const A = values[0]\n  const B = values[1]\n  const C = Math.PI + NEPS - A - B\n\n  if (C < NEPS) throw new Error('AAS triangles require angles that sum to PI')\n\n  const a = values[2]\n  const b = (a / Math.sin(A)) * Math.sin(B)\n  const c = (a / Math.sin(A)) * Math.sin(C)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// ASA is when two angles and the side between the angles are known\nconst solveASA = (values) => {\n  const A = values[0]\n  const B = values[2]\n  const C = Math.PI + NEPS - A - B\n\n  if (C < NEPS) throw new Error('ASA triangles require angles that sum to PI')\n\n  const c = values[1]\n  const a = (c / Math.sin(C)) * Math.sin(A)\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SAS is when two sides and the angle between them are known\nconst solveSAS = (values) => {\n  const c = values[0]\n  const B = values[1]\n  const a = values[2]\n\n  const b = solveSideFromSAS(c, B, a)\n\n  const A = solveAngleFromSSS(b, c, a) // solve for A\n  const C = Math.PI - A - B\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SSA is when two sides and an angle that is not the angle between the sides are known\nconst solveSSA = (values) => {\n  const c = values[0]\n  const a = values[1]\n  const C = values[2]\n\n  const A = Math.asin(a * Math.sin(C) / c)\n  const B = Math.PI - A - C\n\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SSS is when we know three sides of the triangle\nconst solveSSS = (lengths) => {\n  const a = lengths[1]\n  const b = lengths[2]\n  const c = lengths[0]\n  if (((a + b) <= c) || ((b + c) <= a) || ((c + a) <= b)) {\n    throw new Error('SSS triangle is incorrect, as the longest side is longer than the sum of the other sides')\n  }\n\n  const A = solveAngleFromSSS(b, c, a) // solve for A\n  const B = solveAngleFromSSS(c, a, b) // solve for B\n  const C = Math.PI - A - B\n  return createTriangle(A, B, C, a, b, c)\n}\n\nconst createTriangle = (A, B, C, a, b, c) => {\n  const p0 = vec2.fromValues(0, 0) // everything starts from 0, 0\n  const p1 = vec2.fromValues(c, 0)\n  const p2 = vec2.fromValues(a, 0)\n  vec2.add(p2, vec2.rotate(p2, p2, [0, 0], Math.PI - B), p1)\n  return geom2.fromPoints([p0, p1, p2])\n}\n\n/**\n * Construct a triangle in two dimensional space from the given options.\n * The triangle is always constructed CCW from the origin, [0, 0, 0].\n * @see https://www.mathsisfun.com/algebra/trig-solving-triangles.html\n * @param {Object} [options] - options for construction\n * @param {String} [options.type='SSS'] - type of triangle to construct; A ~ angle, S ~ side\n * @param {Array} [options.values=[1,1,1]] - angle (radians) of corners or length of sides\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.triangle\n *\n * @example\n * let myshape = triangle({type: 'AAS', values: [degToRad(62), degToRad(35), 7]})\n */\nconst triangle = (options) => {\n  const defaults = {\n    type: 'SSS',\n    values: [1, 1, 1]\n  }\n  let { type, values } = Object.assign({}, defaults, options)\n\n  if (typeof (type) !== 'string') throw new Error('triangle type must be a string')\n  type = type.toUpperCase()\n  if (!((type[0] === 'A' || type[0] === 'S') &&\n        (type[1] === 'A' || type[1] === 'S') &&\n        (type[2] === 'A' || type[2] === 'S'))) throw new Error('triangle type must contain three letters; A or S')\n\n  if (!isNumberArray(values, 3)) throw new Error('triangle values must contain three values')\n  if (!values.every((n) => n > 0)) throw new Error('triangle values must be greater than zero')\n\n  switch (type) {\n    case 'AAA':\n      return solveAAA(values)\n    case 'AAS':\n      return solveAAS(values)\n    case 'ASA':\n      return solveASA(values)\n    case 'SAS':\n      return solveSAS(values)\n    case 'SSA':\n      return solveSSA(values)\n    case 'SSS':\n      return solveSSS(values)\n    default:\n      throw new Error('invalid triangle type, try again')\n  }\n}\n\nmodule.exports = triangle\n", "/**\n * Primitives provide the building blocks for complex parts.\n * Each primitive is a geometrical object that can be described mathematically, and therefore precise.\n * Primitives can be logically combined, transformed, extruded, etc.\n * @module modeling/primitives\n * @example\n * const { cube, ellipse, star } = require('@jscad/modeling').primitives\n */\nmodule.exports = {\n  arc: require('./arc'),\n  circle: require('./circle'),\n  cube: require('./cube'),\n  cuboid: require('./cuboid'),\n  cylinder: require('./cylinder'),\n  cylinderElliptic: require('./cylinderElliptic'),\n  ellipse: require('./ellipse'),\n  ellipsoid: require('./ellipsoid'),\n  geodesicSphere: require('./geodesicSphere'),\n  line: require('./line'),\n  polygon: require('./polygon'),\n  polyhedron: require('./polyhedron'),\n  rectangle: require('./rectangle'),\n  roundedCuboid: require('./roundedCuboid'),\n  roundedCylinder: require('./roundedCylinder'),\n  roundedRectangle: require('./roundedRectangle'),\n  sphere: require('./sphere'),\n  square: require('./square'),\n  star: require('./star'),\n  torus: require('./torus'),\n  triangle: require('./triangle')\n}\n", "// -- data source from from http://paulbourke.net/dataformats/hershey/\n// -- reduced to save some bytes...\n// { [ascii code]: [width, x, y, ...] } - undefined value as path separator\nmodule.exports = {\n  height: 14,\n  32: [16],\n  33: [10, 5, 21, 5, 7, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  34: [16, 4, 21, 4, 14, undefined, 12, 21, 12, 14],\n  35: [21, 11, 25, 4, -7, undefined, 17, 25, 10, -7, undefined, 4, 12, 18, 12, undefined, 3, 6, 17, 6],\n  36: [20, 8, 25, 8, -4, undefined, 12, 25, 12, -4, undefined, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  37: [24, 21, 21, 3, 0, undefined, 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21, 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, undefined, 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3, 21, 5, 19, 7, 17, 7],\n  38: [26, 23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3, 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16, 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2],\n  39: [10, 5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15],\n  40: [14, 11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7],\n  41: [14, 3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7],\n  42: [16, 8, 21, 8, 9, undefined, 3, 18, 13, 12, undefined, 13, 18, 3, 12],\n  43: [26, 13, 18, 13, 0, undefined, 4, 9, 22, 9],\n  44: [10, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  45: [26, 4, 9, 22, 9],\n  46: [10, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  47: [22, 20, 25, 2, -7],\n  48: [20, 9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20, 11, 21, 9, 21],\n  49: [20, 6, 17, 8, 18, 11, 21, 11, 0],\n  50: [20, 4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0],\n  51: [20, 5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  52: [20, 13, 21, 3, 7, 18, 7, undefined, 13, 21, 13, 0],\n  53: [20, 15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  54: [20, 16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17, 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7],\n  55: [20, 17, 21, 7, 0, undefined, 3, 21, 17, 21],\n  56: [20, 8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8, 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21],\n  57: [20, 16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15, 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3],\n  58: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  59: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  60: [24, 20, 18, 4, 9, 20, 0],\n  61: [26, 4, 12, 22, 12, undefined, 4, 6, 22, 6],\n  62: [24, 4, 18, 20, 9, 4, 0],\n  63: [18, 3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7, undefined, 9, 2, 8, 1, 9, 0, 10, 1, 9, 2],\n  64: [27, 18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, undefined, 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, undefined, 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10, 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, undefined, 19, 16, 18, 8, 18, 6, 19, 5],\n  65: [18, 9, 21, 1, 0, undefined, 9, 21, 17, 0, undefined, 4, 7, 14, 7],\n  66: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, undefined, 4, 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0],\n  67: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5],\n  68: [21, 4, 21, 4, 0, undefined, 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0, 4, 0],\n  69: [19, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11, undefined, 4, 0, 17, 0],\n  70: [18, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11],\n  71: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 18, 8, undefined, 13, 8, 18, 8],\n  72: [22, 4, 21, 4, 0, undefined, 18, 21, 18, 0, undefined, 4, 11, 18, 11],\n  73: [8, 4, 21, 4, 0],\n  74: [16, 12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7],\n  75: [21, 4, 21, 4, 0, undefined, 18, 21, 4, 7, undefined, 9, 12, 18, 0],\n  76: [17, 4, 21, 4, 0, undefined, 4, 0, 16, 0],\n  77: [24, 4, 21, 4, 0, undefined, 4, 21, 12, 0, undefined, 20, 21, 12, 0, undefined, 20, 21, 20, 0],\n  78: [22, 4, 21, 4, 0, undefined, 4, 21, 18, 0, undefined, 18, 21, 18, 0],\n  79: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21],\n  80: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10],\n  81: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, undefined, 12, 4, 18, -2],\n  82: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, undefined, 11, 11, 18, 0],\n  83: [20, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  84: [16, 8, 21, 8, 0, undefined, 1, 21, 15, 21],\n  85: [22, 4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21],\n  86: [18, 1, 21, 9, 0, undefined, 17, 21, 9, 0],\n  87: [24, 2, 21, 7, 0, undefined, 12, 21, 7, 0, undefined, 12, 21, 17, 0, undefined, 22, 21, 17, 0],\n  88: [20, 3, 21, 17, 0, undefined, 17, 21, 3, 0],\n  89: [18, 1, 21, 9, 11, 9, 0, undefined, 17, 21, 9, 11],\n  90: [20, 17, 21, 3, 0, undefined, 3, 21, 17, 21, undefined, 3, 0, 17, 0],\n  91: [14, 4, 25, 4, -7, undefined, 5, 25, 5, -7, undefined, 4, 25, 11, 25, undefined, 4, -7, 11, -7],\n  92: [14, 0, 21, 14, -3],\n  93: [14, 9, 25, 9, -7, undefined, 10, 25, 10, -7, undefined, 3, 25, 10, 25, undefined, 3, -7, 10, -7],\n  94: [16, 6, 15, 8, 18, 10, 15, undefined, 3, 12, 8, 17, 13, 12, undefined, 8, 17, 8, 0],\n  95: [16, 0, -2, 16, -2],\n  96: [10, 6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17],\n  97: [19, 15, 14, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  98: [19, 4, 21, 4, 0, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  99: [18, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  100: [19, 15, 21, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  101: [18, 3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  102: [12, 10, 21, 8, 21, 6, 20, 5, 17, 5, 0, undefined, 2, 14, 9, 14],\n  103: [19, 15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  104: [19, 4, 21, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  105: [8, 3, 21, 4, 20, 5, 21, 4, 22, 3, 21, undefined, 4, 14, 4, 0],\n  106: [10, 5, 21, 6, 20, 7, 21, 6, 22, 5, 21, undefined, 6, 14, 6, -3, 5, -6, 3, -7, 1, -7],\n  107: [17, 4, 21, 4, 0, undefined, 14, 14, 4, 4, undefined, 8, 8, 15, 0],\n  108: [8, 4, 21, 4, 0],\n  109: [30, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, undefined, 15, 10, 18, 13, 20, 14, 23, 14, 25, 13, 26, 10, 26, 0],\n  110: [19, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  111: [19, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13, 11, 14, 8, 14],\n  112: [19, 4, 14, 4, -7, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  113: [19, 15, 14, 15, -7, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  114: [13, 4, 14, 4, 0, undefined, 4, 8, 5, 11, 7, 13, 9, 14, 12, 14],\n  115: [17, 14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7, 0, 4, 1, 3, 3],\n  116: [12, 5, 21, 5, 4, 6, 1, 8, 0, 10, 0, undefined, 2, 14, 9, 14],\n  117: [19, 4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, undefined, 15, 14, 15, 0],\n  118: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0],\n  119: [22, 3, 14, 7, 0, undefined, 11, 14, 7, 0, undefined, 11, 14, 15, 0, undefined, 19, 14, 15, 0],\n  120: [17, 3, 14, 14, 0, undefined, 14, 14, 3, 0],\n  121: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7],\n  122: [17, 14, 14, 3, 0, undefined, 3, 14, 14, 14, undefined, 3, 0, 14, 0],\n  123: [14, 9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, undefined, 7, 24, 6, 22, 6, 20, 7, 18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, undefined, 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7],\n  124: [8, 4, 25, 4, -7],\n  125: [14, 5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, undefined, 7, 24, 8, 22, 8, 20, 7, 18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, undefined, 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7],\n  126: [24, 3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, undefined, 3, 8, 4, 10, 6, 11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12]\n}\n", "const defaultFont = require('./fonts/single-line/hershey/simplex.js')\n\nconst defaultsVectorParams = {\n  xOffset: 0,\n  yOffset: 0,\n  input: '?',\n  align: 'left',\n  font: defaultFont,\n  height: 14, // == old vector_xxx simplex font height\n  lineSpacing: 2.142857142857143, // == 30/14 == old vector_xxx ratio\n  letterSpacing: 1,\n  extrudeOffset: 0\n}\n\n// vectorsXXX parameters handler\nconst vectorParams = (options, input) => {\n  if (!input && typeof options === 'string') {\n    options = { input: options }\n  }\n  options = options || {}\n  const params = Object.assign({}, defaultsVectorParams, options)\n  params.input = input || params.input\n  return params\n}\n\nmodule.exports = vectorParams\n", "const vectorParams = require('./vectorParams')\n\n/**\n * Represents a character as a list of segments\n * @typedef {Object} VectorCharObject\n * @property {Float} width - character width\n * @property {Float} height - character height (uppercase)\n * @property {Array} segments - character segments [[[x, y], ...], ...]\n */\n\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\n* if the character is not supported it is replaced by a question mark.\n* @param {Object|String} [options] - options for construction or ascii character\n* @param {Float} [options.xOffset=0] - x offset\n* @param {Float} [options.yOffset=0] - y offset\n* @param {Float} [options.height=21] - font size (uppercase height)\n* @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n* @param {String} [options.input='?'] - ascii character (ignored/overwrited if provided as seconds parameter)\n* @param {String} [char='?'] - ascii character\n* @returns {VectorCharObject}\n* @alias module:modeling/text.vectorChar\n*\n* @example\n* let vectorCharObject = vectorChar()\n* or\n* let vectorCharObject = vectorChar('A')\n* or\n* let vectorCharObject = vectorChar({ xOffset: 57 }, 'C')\n* or\n* let vectorCharObject = vectorChar({ xOffset: 78, input: '!' })\n*/\nconst vectorChar = (options, char) => {\n  const {\n    xOffset, yOffset, input, font, height, extrudeOffset\n  } = vectorParams(options, char)\n  let code = input.charCodeAt(0)\n  if (!code || !font[code]) {\n    code = 63 // 63 => ?\n  }\n  const glyph = [].concat(font[code])\n  const ratio = (height - extrudeOffset) / font.height\n  const extrudeYOffset = (extrudeOffset / 2)\n  const width = glyph.shift() * ratio\n  const segments = []\n  let polyline = []\n  for (let i = 0, il = glyph.length; i < il; i += 2) {\n    const gx = ratio * glyph[i] + xOffset\n    const gy = ratio * glyph[i + 1] + yOffset + extrudeYOffset\n    if (glyph[i] !== undefined) {\n      polyline.push([gx, gy])\n      continue\n    }\n    segments.push(polyline)\n    polyline = []\n    i--\n  }\n  if (polyline.length) {\n    segments.push(polyline)\n  }\n  return { width, height, segments }\n}\n\nmodule.exports = vectorChar\n", "const vectorChar = require('./vectorChar')\nconst vectorParams = require('./vectorParams')\n\n// translate text line\nconst translateLine = (options, line) => {\n  const { x, y } = Object.assign({ x: 0, y: 0 }, options || {})\n  const segments = line.segments\n  let segment = null\n  let point = null\n  for (let i = 0, il = segments.length; i < il; i++) {\n    segment = segments[i]\n    for (let j = 0, jl = segment.length; j < jl; j++) {\n      point = segment[j]\n      segment[j] = [point[0] + x, point[1] + y]\n    }\n  }\n  return line\n}\n\n/**\n * Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\n * if one character is not supported it is replaced by a question mark.\n * @param {Object|String} [options] - options for construction or ascii string\n * @param {Float} [options.xOffset=0] - x offset\n * @param {Float} [options.yOffset=0] - y offset\n * @param {Float} [options.height=21] - font size (uppercase height)\n * @param {Float} [options.lineSpacing=1.4] - line spacing expressed as a percentage of font size\n * @param {Float} [options.letterSpacing=1] - extra letter spacing expressed as a percentage of font size\n * @param {String} [options.align='left'] - multi-line text alignment: left, center, right\n * @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n * @param {String} [options.input='?'] - ascii string (ignored/overwrited if provided as seconds parameter)\n * @param {String} [text='?'] - ascii string\n * @returns {Array} characters segments [[[x, y], ...], ...]\n * @alias module:modeling/text.vectorText\n *\n * @example\n * let textSegments = vectorText()\n * or\n * let textSegments = vectorText('OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -50 }, 'OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -80, input: 'OpenJSCAD' })\n */\nconst vectorText = (options, text) => {\n  const {\n    xOffset, yOffset, input, font, height, align, extrudeOffset, lineSpacing, letterSpacing\n  } = vectorParams(options, text)\n  let [x, y] = [xOffset, yOffset]\n  let i, il, char, vect, width, diff\n  let line = { width: 0, segments: [] }\n  const lines = []\n  let output = []\n  let maxWidth = 0\n  const lineStart = x\n  const pushLine = () => {\n    lines.push(line)\n    maxWidth = Math.max(maxWidth, line.width)\n    line = { width: 0, segments: [] }\n  }\n  for (i = 0, il = input.length; i < il; i++) {\n    char = input[i]\n    vect = vectorChar({ xOffset: x, yOffset: y, font, height, extrudeOffset }, char)\n    if (char === '\\n') {\n      x = lineStart\n      y -= vect.height * lineSpacing\n      pushLine()\n      continue\n    }\n    width = vect.width * letterSpacing\n    line.width += width\n    x += width\n    if (char !== ' ') {\n      line.segments = line.segments.concat(vect.segments)\n    }\n  }\n  if (line.segments.length) {\n    pushLine()\n  }\n  for (i = 0, il = lines.length; i < il; i++) {\n    line = lines[i]\n    if (maxWidth > line.width) {\n      diff = maxWidth - line.width\n      if (align === 'right') {\n        line = translateLine({ x: diff }, line)\n      } else if (align === 'center') {\n        line = translateLine({ x: diff / 2 }, line)\n      }\n    }\n    output = output.concat(line.segments)\n  }\n  return output\n}\n\nmodule.exports = vectorText\n", "/**\n * Texts provide sets of segments for each character or text strings.\n * The segments can be used to create outlines for both 2D and 3D geometry.\n * Note: Only ASCII characters are supported.\n * @module modeling/text\n * @example\n * const { vectorChar, vectorText } = require('@jscad/modeling').text\n */\nmodule.exports = {\n  vectorChar: require('./vectorChar'),\n  vectorText: require('./vectorText')\n}\n", "// list of supported geometries\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\n\n/**\n * @param {Array} shapes - list of shapes to compare\n * @returns {Boolean} true if the given shapes are of the same type\n * @alias module:modeling/utils.areAllShapesTheSameType\n */\nconst areAllShapesTheSameType = (shapes) => {\n  let previousType\n  for (const shape of shapes) {\n    let currentType = 0\n    if (geom2.isA(shape)) currentType = 1\n    if (geom3.isA(shape)) currentType = 2\n    if (path2.isA(shape)) currentType = 3\n\n    if (previousType && currentType !== previousType) return false\n    previousType = currentType\n  }\n  return true\n}\n\nmodule.exports = areAllShapesTheSameType\n", "/**\n * Convert the given angle (degrees) to radians.\n * @param {Number} degrees - angle in degrees\n * @returns {Number} angle in radians\n * @alias module:modeling/utils.degToRad\n */\nconst degToRad = (degrees) => degrees * 0.017453292519943295\n\nmodule.exports = degToRad\n", "/**\n * @alias module:modeling/utils.fnNumberSort\n */\nconst fnNumberSort = (a, b) => a - b\n\nmodule.exports = fnNumberSort\n", "/**\n * Insert the given element into the given array using the compareFunction.\n * @alias module:modeling/utils.insertSorted\n */\nconst insertSorted = (array, element, comparefunc) => {\n  let leftbound = 0\n  let rightbound = array.length\n  while (rightbound > leftbound) {\n    const testindex = Math.floor((leftbound + rightbound) / 2)\n    const testelement = array[testindex]\n    const compareresult = comparefunc(element, testelement)\n    if (compareresult > 0) { // element > testelement\n      leftbound = testindex + 1\n    } else {\n      rightbound = testindex\n    }\n  }\n  array.splice(leftbound, 0, element)\n}\n\nmodule.exports = insertSorted\n", "const { TAU } = require('../maths/constants')\n\n/**\n * Calculate the number of segments from the given radius based on minimum length or angle.\n * @param {Number} radius - radius of the requested shape\n * @param {Number} minimumLength - minimum length of segments; length > 0\n * @param {Number} minimumAngle - minimum angle (radians) between segments; 0 > angle < TAU\n * @returns {Number} number of segments to complete the radius\n * @alias module:modeling/utils.radiusToSegments\n */\nconst radiusToSegments = (radius, minimumLength, minimumAngle) => {\n  const ss = minimumLength > 0 ? radius * TAU / minimumLength : 0\n  const as = minimumAngle > 0 ? TAU / minimumAngle : 0\n  // minimum segments is four(4) for round primitives\n  return Math.ceil(Math.max(ss, as, 4))\n}\n\nmodule.exports = radiusToSegments\n", "/**\n * Convert the given angle (radians) to degrees.\n * @param {Number} radians - angle in radians\n * @returns {Number} angle in degrees\n * @alias module:modeling/utils.radToDeg\n */\nconst radToDeg = (radians) => radians * 57.29577951308232\n\nmodule.exports = radToDeg\n", "/**\n * Utility functions of various sorts.\n * @module modeling/utils\n * @example\n * const { flatten, insertSorted } = require('@jscad/modeling').utils\n */\nmodule.exports = {\n  areAllShapesTheSameType: require('./areAllShapesTheSameType'),\n  degToRad: require('./degToRad'),\n  flatten: require('./flatten'),\n  fnNumberSort: require('./fnNumberSort'),\n  insertSorted: require('./insertSorted'),\n  radiusToSegments: require('./radiusToSegments'),\n  radToDeg: require('./radToDeg')\n}\n", "const vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst fromFakePolygon = (epsilon, polygon) => {\n  // this can happen based on union, seems to be residuals -\n  // return null and handle in caller\n  if (polygon.vertices.length < 4) {\n    return null\n  }\n  const vert1Indices = []\n  const points3D = polygon.vertices.filter((vertex, i) => {\n    if (vertex[2] > 0) {\n      vert1Indices.push(i)\n      return true\n    }\n    return false\n  })\n\n  if (points3D.length !== 2) {\n    throw new Error('Assertion failed: fromFakePolygon: not enough points found') // TBD remove later\n  }\n\n  const points2D = points3D.map((v3) => {\n    const x = Math.round(v3[0] / epsilon) * epsilon + 0 // no more -0\n    const y = Math.round(v3[1] / epsilon) * epsilon + 0 // no more -0\n    return vec2.fromValues(x, y)\n  })\n\n  if (vec2.equals(points2D[0], points2D[1])) return null\n\n  const d = vert1Indices[1] - vert1Indices[0]\n  if (d === 1 || d === 3) {\n    if (d === 1) {\n      points2D.reverse()\n    }\n  } else {\n    throw new Error('Assertion failed: fromFakePolygon: unknown index ordering')\n  }\n  return points2D\n}\n\n/*\n * Convert the given polygons to a list of sides.\n * The polygons must have only z coordinates +1 and -1, as constructed by to3DWalls().\n */\nconst fromFakePolygons = (epsilon, polygons) => {\n  const sides = polygons.map((polygon) => fromFakePolygon(epsilon, polygon)).filter((polygon) => (polygon !== null))\n  return geom2.create(sides)\n}\n\nmodule.exports = fromFakePolygons\n", "const vec3 = require('../../maths/vec3')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\n/*\n * Create a polygon (wall) from the given Z values and side.\n */\nconst to3DWall = (z0, z1, side) => {\n  const points = [\n    vec3.fromVec2(vec3.create(), side[0], z0),\n    vec3.fromVec2(vec3.create(), side[1], z0),\n    vec3.fromVec2(vec3.create(), side[1], z1),\n    vec3.fromVec2(vec3.create(), side[0], z1)\n  ]\n  return poly3.create(points)\n}\n\n/*\n * Create a 3D geometry with walls, as constructed from the given options and geometry.\n *\n * @param {Object} options - options with Z offsets\n * @param {geom2} geometry - geometry used as base of walls\n * @return {geom3} the new geometry\n */\nconst to3DWalls = (options, geometry) => {\n  const sides = geom2.toSides(geometry)\n\n  const polygons = sides.map((side) => to3DWall(options.z0, options.z1, side))\n\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = to3DWalls\n", "const mat4 = require('./mat4')\n\nconst vec2 = require('./vec2')\nconst vec3 = require('./vec3')\n\n/*\n * Class OrthoNormalBasis\n * Reprojects points on a 3D plane onto a 2D plane\n * or from a 2D plane back onto the 3D plane\n * @param  {plane} plane\n * @param  {vec3} rightvector\n */\nconst OrthoNormalBasis = function (plane, rightvector) {\n  if (arguments.length < 2) {\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:\n    rightvector = vec3.orthogonal(vec3.create(), plane)\n  }\n  this.v = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), plane, rightvector))\n  this.u = vec3.cross(vec3.create(), this.v, plane)\n  this.plane = plane\n  this.planeorigin = vec3.scale(vec3.create(), plane, plane[3])\n}\n\n// Get an orthonormal basis for the standard XYZ planes.\n// Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y\n// axis will map to the second.\n// Prepend the axis with a \"-\" to invert the direction of this axis.\n// For example: OrthoNormalBasis.GetCartesian(\"-Y\",\"Z\")\n//   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and\n//   the 2d Y axis maps to the 3D Z axis.\nOrthoNormalBasis.GetCartesian = function (xaxisid, yaxisid) {\n  const axisid = xaxisid + '/' + yaxisid\n  let planenormal, rightvector\n  if (axisid === 'X/Y') {\n    planenormal = [0, 0, 1]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Y/-X') {\n    planenormal = [0, 0, 1]\n    rightvector = [0, 1, 0]\n  } else if (axisid === '-X/-Y') {\n    planenormal = [0, 0, 1]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Y/X') {\n    planenormal = [0, 0, 1]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-X/Y') {\n    planenormal = [0, 0, -1]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Y/-X') {\n    planenormal = [0, 0, -1]\n    rightvector = [0, -1, 0]\n  } else if (axisid === 'X/-Y') {\n    planenormal = [0, 0, -1]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Y/X') {\n    planenormal = [0, 0, -1]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'X/Z') {\n    planenormal = [0, -1, 0]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Z/-X') {\n    planenormal = [0, -1, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === '-X/-Z') {\n    planenormal = [0, -1, 0]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Z/X') {\n    planenormal = [0, -1, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === '-X/Z') {\n    planenormal = [0, 1, 0]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Z/-X') {\n    planenormal = [0, 1, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === 'X/-Z') {\n    planenormal = [0, 1, 0]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Z/X') {\n    planenormal = [0, 1, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === 'Y/Z') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'Z/-Y') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === '-Y/-Z') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-Z/Y') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === '-Y/Z') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-Z/-Y') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === 'Y/-Z') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'Z/Y') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 0, 1]\n  } else {\n    throw new Error('OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.')\n  }\n  return new OrthoNormalBasis(new Plane(new Vector3D(planenormal), 0), new Vector3D(rightvector))\n}\n\n/*\n// test code for OrthoNormalBasis.GetCartesian()\nOrthoNormalBasis.GetCartesian_Test=function() {\n  let axisnames=[\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"];\n  let axisvectors=[[1,0,0], [0,1,0], [0,0,1], [-1,0,0], [0,-1,0], [0,0,-1]];\n  for(let axis1=0; axis1 < 3; axis1++) {\n    for(let axis1inverted=0; axis1inverted < 2; axis1inverted++) {\n      let axis1name=axisnames[axis1+3*axis1inverted];\n      let axis1vector=axisvectors[axis1+3*axis1inverted];\n      for(let axis2=0; axis2 < 3; axis2++) {\n        if(axis2 != axis1) {\n          for(let axis2inverted=0; axis2inverted < 2; axis2inverted++) {\n            let axis2name=axisnames[axis2+3*axis2inverted];\n            let axis2vector=axisvectors[axis2+3*axis2inverted];\n            let orthobasis=OrthoNormalBasis.GetCartesian(axis1name, axis2name);\n            let test1=orthobasis.to3D(new Vector2D([1,0]));\n            let test2=orthobasis.to3D(new Vector2D([0,1]));\n            let expected1=new Vector3D(axis1vector);\n            let expected2=new Vector3D(axis2vector);\n            let d1=test1.distanceTo(expected1);\n            let d2=test2.distanceTo(expected2);\n            if( (d1 > 0.01) || (d2 > 0.01) ) {\n              throw new Error(\"Wrong!\");\n  }}}}}}\n  throw new Error(\"OK\");\n};\n*/\n\n// The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector\nOrthoNormalBasis.Z0Plane = function () {\n  const plane = new Plane(new Vector3D([0, 0, 1]), 0)\n  return new OrthoNormalBasis(plane, new Vector3D([1, 0, 0]))\n}\n\nOrthoNormalBasis.prototype = {\n\n  getProjectionMatrix: function () {\n    return mat4.fromValues(\n      this.u[0], this.v[0], this.plane[0], 0,\n      this.u[1], this.v[1], this.plane[1], 0,\n      this.u[2], this.v[2], this.plane[2], 0,\n      0, 0, -this.plane[3], 1\n    )\n  },\n\n  getInverseProjectionMatrix: function () {\n    const p = vec3.scale(vec3.create(), this.plane, this.plane[3])\n    return mat4.fromValues(\n      this.u[0], this.u[1], this.u[2], 0,\n      this.v[0], this.v[1], this.v[2], 0,\n      this.plane[0], this.plane[1], this.plane[2], 0,\n      p[0], p[1], p[2], 1\n    )\n  },\n\n  to2D: function (point) {\n    return vec2.fromValues(vec3.dot(point, this.u), vec3.dot(point, this.v))\n  },\n\n  to3D: function (point) {\n    const v1 = vec3.scale(vec3.create(), this.u, point[0])\n    const v2 = vec3.scale(vec3.create(), this.v, point[1])\n\n    const v3 = vec3.add(v1, v1, this.planeorigin)\n    const v4 = vec3.add(v2, v2, v3)\n    return v4\n  },\n\n  line3Dto2D: function (line3d) {\n    const a = line3d.point\n    const b = line3d.direction.plus(a)\n    const a2d = this.to2D(a)\n    const b2d = this.to2D(b)\n    return Line2D.fromPoints(a2d, b2d)\n  },\n\n  line2Dto3D: function (line2d) {\n    const a = line2d.origin()\n    const b = line2d.direction().plus(a)\n    const a3d = this.to3D(a)\n    const b3d = this.to3D(b)\n    return Line3D.fromPoints(a3d, b3d)\n  },\n\n  transform: function (matrix4x4) {\n    // todo: this may not work properly in case of mirroring\n    const newplane = this.plane.transform(matrix4x4)\n    const rightpointTransformed = this.u.transform(matrix4x4)\n    const originTransformed = new Vector3D(0, 0, 0).transform(matrix4x4)\n    const newrighthandvector = rightpointTransformed.minus(originTransformed)\n    const newbasis = new OrthoNormalBasis(newplane, newrighthandvector)\n    return newbasis\n  }\n}\n\nmodule.exports = OrthoNormalBasis\n", "const { EPS } = require('../../maths/constants')\n\nconst line2 = require('../../maths/line2')\nconst vec2 = require('../../maths/vec2')\nconst OrthoNormalBasis = require('../../maths/OrthoNormalBasis')\nconst interpolateBetween2DPointsForY = require('../../maths/utils/interpolateBetween2DPointsForY')\n\nconst { insertSorted, fnNumberSort } = require('../../utils')\n\nconst poly3 = require('../../geometries/poly3')\n\n/*\n * Retesselation for a set of COPLANAR polygons.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst reTesselateCoplanarPolygons = (sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const destpolygons = []\n  const numpolygons = sourcepolygons.length\n  const plane = poly3.plane(sourcepolygons[0])\n  const orthobasis = new OrthoNormalBasis(plane)\n  const polygonvertices2d = [] // array of array of Vector2D\n  const polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon\n  const topy2polygonindexes = new Map()\n  const ycoordinatetopolygonindexes = new Map()\n\n  // convert all polygon vertices to 2D\n  // Make a list of all encountered y coordinates\n  // And build a map of all polygons that have a vertex at a certain y coordinate:\n  const ycoordinatebins = new Map()\n  const ycoordinateBinningFactor = 10 / EPS\n  for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n    const poly3d = sourcepolygons[polygonindex]\n    let vertices2d = []\n    let numvertices = poly3d.vertices.length\n    let minindex = -1\n    if (numvertices > 0) {\n      let miny\n      let maxy\n      for (let i = 0; i < numvertices; i++) {\n        let pos2d = orthobasis.to2D(poly3d.vertices[i])\n        // perform binning of y coordinates: If we have multiple vertices very\n        // close to each other, give them the same y coordinate:\n        const ycoordinatebin = Math.floor(pos2d[1] * ycoordinateBinningFactor)\n        let newy\n        if (ycoordinatebins.has(ycoordinatebin)) {\n          newy = ycoordinatebins.get(ycoordinatebin)\n        } else if (ycoordinatebins.has(ycoordinatebin + 1)) {\n          newy = ycoordinatebins.get(ycoordinatebin + 1)\n        } else if (ycoordinatebins.has(ycoordinatebin - 1)) {\n          newy = ycoordinatebins.get(ycoordinatebin - 1)\n        } else {\n          newy = pos2d[1]\n          ycoordinatebins.set(ycoordinatebin, pos2d[1])\n        }\n        pos2d = vec2.fromValues(pos2d[0], newy)\n        vertices2d.push(pos2d)\n        const y = pos2d[1]\n        if ((i === 0) || (y < miny)) {\n          miny = y\n          minindex = i\n        }\n        if ((i === 0) || (y > maxy)) {\n          maxy = y\n        }\n        let polygonindexes = ycoordinatetopolygonindexes.get(y)\n        if (!polygonindexes) {\n          polygonindexes = {} // PERF\n          ycoordinatetopolygonindexes.set(y, polygonindexes)\n        }\n        polygonindexes[polygonindex] = true\n      }\n      if (miny >= maxy) {\n        // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\n        vertices2d = []\n        numvertices = 0\n        minindex = -1\n      } else {\n        let polygonindexes = topy2polygonindexes.get(miny)\n        if (!polygonindexes) {\n          polygonindexes = []\n          topy2polygonindexes.set(miny, polygonindexes)\n        }\n        polygonindexes.push(polygonindex)\n      }\n    } // if(numvertices > 0)\n    // reverse the vertex order:\n    vertices2d.reverse()\n    minindex = numvertices - minindex - 1\n    polygonvertices2d.push(vertices2d)\n    polygontopvertexindexes.push(minindex)\n  }\n\n  const ycoordinates = []\n  ycoordinatetopolygonindexes.forEach((polylist, y) => ycoordinates.push(y))\n  ycoordinates.sort(fnNumberSort)\n\n  // Now we will iterate over all y coordinates, from lowest to highest y coordinate\n  // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\n  //   Is sorted so the polygons are in left to right order\n  // Each element in activepolygons has these properties:\n  //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\n  //                      and polygonvertices2d arrays)\n  //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\n  //                         that is at or just above the current y coordinate\n  //        rightvertexindex: dito at right hand side of polygon\n  //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\n  //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\n  let activepolygons = []\n  let prevoutpolygonrow = []\n  for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\n    const newoutpolygonrow = []\n    const ycoordinate = ycoordinates[yindex]\n\n    // update activepolygons for this y coordinate:\n    // - Remove any polygons that end at this y coordinate\n    // - update leftvertexindex and rightvertexindex (which point to the current vertex index\n    //   at the the left and right side of the polygon\n    // Iterate over all polygons that have a corner at this y coordinate:\n    const polygonindexeswithcorner = ycoordinatetopolygonindexes.get(ycoordinate)\n    for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\n      const activepolygon = activepolygons[activepolygonindex]\n      const polygonindex = activepolygon.polygonindex\n      if (polygonindexeswithcorner[polygonindex]) {\n        // this active polygon has a corner at this y coordinate:\n        const vertices2d = polygonvertices2d[polygonindex]\n        const numvertices = vertices2d.length\n        let newleftvertexindex = activepolygon.leftvertexindex\n        let newrightvertexindex = activepolygon.rightvertexindex\n        // See if we need to increase leftvertexindex or decrease rightvertexindex:\n        while (true) {\n          let nextleftvertexindex = newleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          if (vertices2d[nextleftvertexindex][1] !== ycoordinate) break\n          newleftvertexindex = nextleftvertexindex\n        }\n        let nextrightvertexindex = newrightvertexindex - 1\n        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n        if (vertices2d[nextrightvertexindex][1] === ycoordinate) {\n          newrightvertexindex = nextrightvertexindex\n        }\n        if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\n          // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\n          // This means that this is the bottom point of the polygon. We'll remove it:\n          activepolygons.splice(activepolygonindex, 1)\n          --activepolygonindex\n        } else {\n          activepolygon.leftvertexindex = newleftvertexindex\n          activepolygon.rightvertexindex = newrightvertexindex\n          activepolygon.topleft = vertices2d[newleftvertexindex]\n          activepolygon.topright = vertices2d[newrightvertexindex]\n          let nextleftvertexindex = newleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          activepolygon.bottomleft = vertices2d[nextleftvertexindex]\n          let nextrightvertexindex = newrightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          activepolygon.bottomright = vertices2d[nextrightvertexindex]\n        }\n      } // if polygon has corner here\n    } // for activepolygonindex\n    let nextycoordinate\n    if (yindex >= ycoordinates.length - 1) {\n      // last row, all polygons must be finished here:\n      activepolygons = []\n      nextycoordinate = null\n    } else { // yindex < ycoordinates.length-1\n      nextycoordinate = Number(ycoordinates[yindex + 1])\n      const middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)\n      // update activepolygons by adding any polygons that start here:\n      const startingpolygonindexes = topy2polygonindexes.get(ycoordinate)\n      for (const polygonindexKey in startingpolygonindexes) {\n        const polygonindex = startingpolygonindexes[polygonindexKey]\n        const vertices2d = polygonvertices2d[polygonindex]\n        const numvertices = vertices2d.length\n        const topvertexindex = polygontopvertexindexes[polygonindex]\n        // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\n        // Find the left and right topmost vertices which have the current y coordinate:\n        let topleftvertexindex = topvertexindex\n        while (true) {\n          let i = topleftvertexindex + 1\n          if (i >= numvertices) i = 0\n          if (vertices2d[i][1] !== ycoordinate) break\n          if (i === topvertexindex) break // should not happen, but just to prevent endless loops\n          topleftvertexindex = i\n        }\n        let toprightvertexindex = topvertexindex\n        while (true) {\n          let i = toprightvertexindex - 1\n          if (i < 0) i = numvertices - 1\n          if (vertices2d[i][1] !== ycoordinate) break\n          if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops\n          toprightvertexindex = i\n        }\n        let nextleftvertexindex = topleftvertexindex + 1\n        if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n        let nextrightvertexindex = toprightvertexindex - 1\n        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n        const newactivepolygon = {\n          polygonindex: polygonindex,\n          leftvertexindex: topleftvertexindex,\n          rightvertexindex: toprightvertexindex,\n          topleft: vertices2d[topleftvertexindex],\n          topright: vertices2d[toprightvertexindex],\n          bottomleft: vertices2d[nextleftvertexindex],\n          bottomright: vertices2d[nextrightvertexindex]\n        }\n        insertSorted(activepolygons, newactivepolygon, (el1, el2) => {\n          const x1 = interpolateBetween2DPointsForY(el1.topleft, el1.bottomleft, middleycoordinate)\n          const x2 = interpolateBetween2DPointsForY(el2.topleft, el2.bottomleft, middleycoordinate)\n          if (x1 > x2) return 1\n          if (x1 < x2) return -1\n          return 0\n        })\n      } // for(let polygonindex in startingpolygonindexes)\n    } //  yindex < ycoordinates.length-1\n\n    // Now activepolygons is up to date\n    // Build the output polygons for the next row in newoutpolygonrow:\n    for (const activepolygonKey in activepolygons) {\n      const activepolygon = activepolygons[activepolygonKey]\n\n      let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)\n      const topleft = vec2.fromValues(x, ycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)\n      const topright = vec2.fromValues(x, ycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)\n      const bottomleft = vec2.fromValues(x, nextycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)\n      const bottomright = vec2.fromValues(x, nextycoordinate)\n      const outpolygon = {\n        topleft: topleft,\n        topright: topright,\n        bottomleft: bottomleft,\n        bottomright: bottomright,\n        leftline: line2.fromPoints(line2.create(), topleft, bottomleft),\n        rightline: line2.fromPoints(line2.create(), bottomright, topright)\n      }\n      if (newoutpolygonrow.length > 0) {\n        const prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]\n        const d1 = vec2.distance(outpolygon.topleft, prevoutpolygon.topright)\n        const d2 = vec2.distance(outpolygon.bottomleft, prevoutpolygon.bottomright)\n        if ((d1 < EPS) && (d2 < EPS)) {\n          // we can join this polygon with the one to the left:\n          outpolygon.topleft = prevoutpolygon.topleft\n          outpolygon.leftline = prevoutpolygon.leftline\n          outpolygon.bottomleft = prevoutpolygon.bottomleft\n          newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)\n        }\n      }\n      newoutpolygonrow.push(outpolygon)\n    } // for(activepolygon in activepolygons)\n    if (yindex > 0) {\n      // try to match the new polygons against the previous row:\n      const prevcontinuedindexes = new Set()\n      const matchedindexes = new Set()\n      for (let i = 0; i < newoutpolygonrow.length; i++) {\n        const thispolygon = newoutpolygonrow[i]\n        for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n          if (!matchedindexes.has(ii)) { // not already processed?\n            // We have a match if the sidelines are equal or if the top coordinates\n            // are on the sidelines of the previous polygon\n            const prevpolygon = prevoutpolygonrow[ii]\n            if (vec2.distance(prevpolygon.bottomleft, thispolygon.topleft) < EPS) {\n              if (vec2.distance(prevpolygon.bottomright, thispolygon.topright) < EPS) {\n                // Yes, the top of this polygon matches the bottom of the previous:\n                matchedindexes.add(ii)\n                // Now check if the joined polygon would remain convex:\n                const v1 = line2.direction(thispolygon.leftline)\n                const v2 = line2.direction(prevpolygon.leftline)\n                const d1 = v1[0] - v2[0]\n\n                const v3 = line2.direction(thispolygon.rightline)\n                const v4 = line2.direction(prevpolygon.rightline)\n                const d2 = v3[0] - v4[0]\n\n                const leftlinecontinues = Math.abs(d1) < EPS\n                const rightlinecontinues = Math.abs(d2) < EPS\n                const leftlineisconvex = leftlinecontinues || (d1 >= 0)\n                const rightlineisconvex = rightlinecontinues || (d2 >= 0)\n                if (leftlineisconvex && rightlineisconvex) {\n                  // yes, both sides have convex corners:\n                  // This polygon will continue the previous polygon\n                  thispolygon.outpolygon = prevpolygon.outpolygon\n                  thispolygon.leftlinecontinues = leftlinecontinues\n                  thispolygon.rightlinecontinues = rightlinecontinues\n                  prevcontinuedindexes.add(ii)\n                }\n                break\n              }\n            }\n          } // if(!prevcontinuedindexes.has(ii))\n        } // for ii\n      } // for i\n      for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n        if (!prevcontinuedindexes.has(ii)) {\n          // polygon ends here\n          // Finish the polygon with the last point(s):\n          const prevpolygon = prevoutpolygonrow[ii]\n          prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)\n          if (vec2.distance(prevpolygon.bottomright, prevpolygon.bottomleft) > EPS) {\n            // polygon ends with a horizontal line:\n            prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)\n          }\n          // reverse the left half so we get a counterclockwise circle:\n          prevpolygon.outpolygon.leftpoints.reverse()\n          const points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)\n          const vertices3d = points2d.map((point2d) => orthobasis.to3D(point2d))\n          const polygon = poly3.fromPointsAndPlane(vertices3d, plane) // TODO support shared\n\n          // if we let empty polygon out, next retesselate will crash\n          if (polygon.vertices.length) destpolygons.push(polygon)\n        }\n      }\n    } // if(yindex > 0)\n    for (let i = 0; i < newoutpolygonrow.length; i++) {\n      const thispolygon = newoutpolygonrow[i]\n      if (!thispolygon.outpolygon) {\n        // polygon starts here:\n        thispolygon.outpolygon = {\n          leftpoints: [],\n          rightpoints: []\n        }\n        thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n        if (vec2.distance(thispolygon.topleft, thispolygon.topright) > EPS) {\n          // we have a horizontal line at the top:\n          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n        }\n      } else {\n        // continuation of a previous row\n        if (!thispolygon.leftlinecontinues) {\n          thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n        }\n        if (!thispolygon.rightlinecontinues) {\n          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n        }\n      }\n    }\n    prevoutpolygonrow = newoutpolygonrow\n  } // for yindex\n  return destpolygons\n}\n\nmodule.exports = reTesselateCoplanarPolygons\n", "const geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\nconst { NEPS } = require('../../maths/constants')\nconst reTesselateCoplanarPolygons = require('./reTesselateCoplanarPolygons')\n\n/*\n  After boolean operations all coplanar polygon fragments are joined by a retesselating\n  operation. geom3.reTesselate(geom).\n  Retesselation is done through a linear sweep over the polygon surface.\n  The sweep line passes over the y coordinates of all vertices in the polygon.\n  Polygons are split at each sweep line, and the fragments are joined horizontally and vertically into larger polygons\n  (making sure that we will end up with convex polygons).\n*/\nconst retessellate = (geometry) => {\n  if (geometry.isRetesselated) {\n    return geometry\n  }\n\n  const polygons = geom3.toPolygons(geometry).map((polygon, index) => ({ vertices: polygon.vertices, plane: poly3.plane(polygon), index: index }))\n  const classified = classifyPolygons(polygons)\n\n  const destPolygons = []\n  classified.forEach((group) => {\n    if (Array.isArray(group)) {\n      const reTessellateCoplanarPolygons = reTesselateCoplanarPolygons(group)\n      destPolygons.push(...reTessellateCoplanarPolygons)\n    } else {\n      destPolygons.push(group)\n    }\n  })\n\n  const result = geom3.create(destPolygons)\n  result.isRetesselated = true\n\n  return result\n}\n\nconst classifyPolygons = (polygons) => {\n  let clusters = [polygons] // a cluster is an array of potentially coplanar polygons\n  const nonCoplanar = [] // polygons that are known to be non-coplanar\n  // go through each component of the plane starting with the last one (the distance from origin)\n  for (let component = 3; component >= 0; component--) {\n    const maybeCoplanar = []\n    const tolerance = component === 3 ? 0.000000015 : NEPS\n    clusters.forEach((cluster) => {\n      // sort the cluster by the current component\n      cluster.sort(byPlaneComponent(component, tolerance))\n      // iterate through the cluster and check if there are polygons which are not coplanar with the others\n      // or if there are sub-clusters of coplanar polygons\n      let startIndex = 0\n      for (let i = 1; i < cluster.length; i++) {\n        // if there's a difference larger than the tolerance, split the cluster\n        if (cluster[i].plane[component] - cluster[startIndex].plane[component] > tolerance) {\n          // if there's a single polygon it's definitely not coplanar with any others\n          if (i - startIndex === 1) {\n            nonCoplanar.push(cluster[startIndex])\n          } else { // we have a new sub cluster of potentially coplanar polygons\n            maybeCoplanar.push(cluster.slice(startIndex, i))\n          }\n          startIndex = i\n        }\n      }\n      // handle the last elements of the cluster\n      if (cluster.length - startIndex === 1) {\n        nonCoplanar.push(cluster[startIndex])\n      } else {\n        maybeCoplanar.push(cluster.slice(startIndex))\n      }\n    })\n    // replace previous clusters with the new ones\n    clusters = maybeCoplanar\n  }\n  // restore the original order of the polygons\n  const result = []\n  // polygons inside the cluster should already be sorted by index\n  clusters.forEach((cluster) => {\n    if (cluster[0]) result[cluster[0].index] = cluster\n  })\n  nonCoplanar.forEach((polygon) => { result[polygon.index] = polygon })\n\n  return result\n}\n\nconst byPlaneComponent = (component, tolerance) => (a, b) => {\n  if (a.plane[component] - b.plane[component] > tolerance) {\n    return 1\n  } else if (b.plane[component] - a.plane[component] > tolerance) {\n    return -1\n  }\n  return 0\n}\n\nmodule.exports = retessellate\n", "const { EPS } = require('../../maths/constants')\n\nconst measureBoundingBox = require('../../measurements/measureBoundingBox')\n\n/*\n * Determine if the given geometries overlap by comparing min and max bounds.\n * NOTE: This is used in union for performance gains.\n * @param {geom3} geometry1 - geometry for comparison\n * @param {geom3} geometry2 - geometry for comparison\n * @returns {boolean} true if the geometries overlap\n */\nconst mayOverlap = (geometry1, geometry2) => {\n  // FIXME accessing the data structure of the geometry should not be allowed\n  if ((geometry1.polygons.length === 0) || (geometry2.polygons.length === 0)) {\n    return false\n  }\n\n  const bounds1 = measureBoundingBox(geometry1)\n  const min1 = bounds1[0]\n  const max1 = bounds1[1]\n\n  const bounds2 = measureBoundingBox(geometry2)\n  const min2 = bounds2[0]\n  const max2 = bounds2[1]\n\n  if ((min2[0] - max1[0]) > EPS) return false\n  if ((min1[0] - max2[0]) > EPS) return false\n  if ((min2[1] - max1[1]) > EPS) return false\n  if ((min1[1] - max2[1]) > EPS) return false\n  if ((min2[2] - max1[2]) > EPS) return false\n  if ((min1[2] - max2[2]) > EPS) return false\n  return true\n}\n\nmodule.exports = mayOverlap\n", "const plane = require('../../../maths/plane')\nconst poly3 = require('../../../geometries/poly3')\n\n// # class Node\n// Holds a node in a BSP tree.\n// A BSP tree is built from a collection of polygons by picking a polygon to split along.\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in this.polygontreenodes.\n// Those PolygonTreeNodes are children of the owning Tree.polygonTree.\n// This is not a leafy BSP tree since there is no distinction between internal and leaf nodes.\nclass Node {\n  constructor (parent) {\n    this.plane = null\n    this.front = null\n    this.back = null\n    this.polygontreenodes = []\n    this.parent = parent\n  }\n\n  // Convert solid space to empty space and empty space to solid space.\n  invert () {\n    const queue = [this]\n    let node\n    for (let i = 0; i < queue.length; i++) {\n      node = queue[i]\n      if (node.plane) node.plane = plane.flip(plane.create(), node.plane)\n      if (node.front) queue.push(node.front)\n      if (node.back) queue.push(node.back)\n      const temp = node.front\n      node.front = node.back\n      node.back = temp\n    }\n  }\n\n  // clip polygontreenodes to our plane\n  // calls remove() for all clipped PolygonTreeNodes\n  clipPolygons (polygontreenodes, alsoRemovecoplanarFront) {\n    let current = { node: this, polygontreenodes: polygontreenodes }\n    let node\n    const stack = []\n\n    do {\n      node = current.node\n      polygontreenodes = current.polygontreenodes\n\n      if (node.plane) {\n        const plane = node.plane\n\n        const backnodes = []\n        const frontnodes = []\n        const coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes\n        const numpolygontreenodes = polygontreenodes.length\n        for (let i = 0; i < numpolygontreenodes; i++) {\n          const treenode = polygontreenodes[i]\n          if (!treenode.isRemoved()) {\n            // split this polygon tree node using the plane\n            // NOTE: children are added to the tree if there are spanning polygons\n            treenode.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)\n          }\n        }\n\n        if (node.front && (frontnodes.length > 0)) {\n          // add front node for further splitting\n          stack.push({ node: node.front, polygontreenodes: frontnodes })\n        }\n        const numbacknodes = backnodes.length\n        if (node.back && (numbacknodes > 0)) {\n          // add back node for further splitting\n          stack.push({ node: node.back, polygontreenodes: backnodes })\n        } else {\n          // remove all back nodes from processing\n          for (let i = 0; i < numbacknodes; i++) {\n            backnodes[i].remove()\n          }\n        }\n      }\n      current = stack.pop()\n    } while (current !== undefined)\n  }\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo (tree, alsoRemovecoplanarFront) {\n    let node = this\n    const stack = []\n    do {\n      if (node.polygontreenodes.length > 0) {\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)\n      }\n      if (node.front) stack.push(node.front)\n      if (node.back) stack.push(node.back)\n      node = stack.pop()\n    } while (node !== undefined)\n  }\n\n  addPolygonTreeNodes (newpolygontreenodes) {\n    let current = { node: this, polygontreenodes: newpolygontreenodes }\n    const stack = []\n    do {\n      const node = current.node\n      const polygontreenodes = current.polygontreenodes\n\n      if (polygontreenodes.length === 0) {\n        current = stack.pop()\n        continue\n      }\n      if (!node.plane) {\n        let index = 0 // default\n        index = Math.floor(polygontreenodes.length / 2)\n        // index = polygontreenodes.length >> 1\n        // index = Math.floor(Math.random()*polygontreenodes.length)\n        const bestpoly = polygontreenodes[index].getPolygon()\n        node.plane = poly3.plane(bestpoly)\n      }\n      const frontnodes = []\n      const backnodes = []\n      const n = polygontreenodes.length\n      for (let i = 0; i < n; ++i) {\n        polygontreenodes[i].splitByPlane(node.plane, node.polygontreenodes, backnodes, frontnodes, backnodes)\n      }\n\n      if (frontnodes.length > 0) {\n        if (!node.front) node.front = new Node(node)\n\n        // unable to split by any of the current nodes\n        const stopCondition = n === frontnodes.length && backnodes.length === 0\n        if (stopCondition) node.front.polygontreenodes = frontnodes\n        else stack.push({ node: node.front, polygontreenodes: frontnodes })\n      }\n      if (backnodes.length > 0) {\n        if (!node.back) node.back = new Node(node)\n\n        // unable to split by any of the current nodes\n        const stopCondition = n === backnodes.length && frontnodes.length === 0\n\n        if (stopCondition) node.back.polygontreenodes = backnodes\n        else stack.push({ node: node.back, polygontreenodes: backnodes })\n      }\n\n      current = stack.pop()\n    } while (current !== undefined)\n  }\n}\n\nmodule.exports = Node\n", "const vec3 = require('../../../maths/vec3')\n\nconst splitLineSegmentByPlane = (plane, p1, p2) => {\n  const direction = vec3.subtract(vec3.create(), p2, p1)\n  let lambda = (plane[3] - vec3.dot(plane, p1)) / vec3.dot(plane, direction)\n  if (Number.isNaN(lambda)) lambda = 0\n  if (lambda > 1) lambda = 1\n  if (lambda < 0) lambda = 0\n\n  vec3.scale(direction, direction, lambda)\n  vec3.add(direction, p1, direction)\n  return direction\n}\n\nmodule.exports = splitLineSegmentByPlane\n", "const { EPS } = require('../../../maths/constants')\n\nconst plane = require('../../../maths/plane')\nconst vec3 = require('../../../maths/vec3')\n\nconst poly3 = require('../../../geometries/poly3')\n\nconst splitLineSegmentByPlane = require('./splitLineSegmentByPlane')\n\n// Returns object:\n// .type:\n//   0: coplanar-front\n//   1: coplanar-back\n//   2: front\n//   3: back\n//   4: spanning\n// In case the polygon is spanning, returns:\n// .front: a Polygon3 of the front part\n// .back: a Polygon3 of the back part\nconst splitPolygonByPlane = (splane, polygon) => {\n  const result = {\n    type: null,\n    front: null,\n    back: null\n  }\n  // cache in local lets (speedup):\n  const vertices = polygon.vertices\n  const numvertices = vertices.length\n  const pplane = poly3.plane(polygon)\n  if (plane.equals(pplane, splane)) {\n    result.type = 0\n  } else {\n    let hasfront = false\n    let hasback = false\n    const vertexIsBack = []\n    const MINEPS = -EPS\n    for (let i = 0; i < numvertices; i++) {\n      const t = vec3.dot(splane, vertices[i]) - splane[3]\n      const isback = (t < MINEPS)\n      vertexIsBack.push(isback)\n      if (t > EPS) hasfront = true\n      if (t < MINEPS) hasback = true\n    }\n    if ((!hasfront) && (!hasback)) {\n      // all points coplanar\n      const t = vec3.dot(splane, pplane)\n      result.type = (t >= 0) ? 0 : 1\n    } else if (!hasback) {\n      result.type = 2\n    } else if (!hasfront) {\n      result.type = 3\n    } else {\n      // spanning\n      result.type = 4\n      const frontvertices = []\n      const backvertices = []\n      let isback = vertexIsBack[0]\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        const vertex = vertices[vertexindex]\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex >= numvertices) nextvertexindex = 0\n        const nextisback = vertexIsBack[nextvertexindex]\n        if (isback === nextisback) {\n          // line segment is on one side of the plane:\n          if (isback) {\n            backvertices.push(vertex)\n          } else {\n            frontvertices.push(vertex)\n          }\n        } else {\n          // line segment intersects plane:\n          const nextpoint = vertices[nextvertexindex]\n          const intersectionpoint = splitLineSegmentByPlane(splane, vertex, nextpoint)\n          if (isback) {\n            backvertices.push(vertex)\n            backvertices.push(intersectionpoint)\n            frontvertices.push(intersectionpoint)\n          } else {\n            frontvertices.push(vertex)\n            frontvertices.push(intersectionpoint)\n            backvertices.push(intersectionpoint)\n          }\n        }\n        isback = nextisback\n      } // for vertexindex\n      // remove duplicate vertices:\n      const EPS_SQUARED = EPS * EPS\n      if (backvertices.length >= 3) {\n        let prevvertex = backvertices[backvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\n          const vertex = backvertices[vertexindex]\n          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {\n            backvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        let prevvertex = frontvertices[frontvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\n          const vertex = frontvertices[vertexindex]\n          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {\n            frontvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        result.front = poly3.fromPointsAndPlane(frontvertices, pplane)\n      }\n      if (backvertices.length >= 3) {\n        result.back = poly3.fromPointsAndPlane(backvertices, pplane)\n      }\n    }\n  }\n  return result\n}\n\nmodule.exports = splitPolygonByPlane\n", "const { EPS } = require('../../../maths/constants')\n\nconst vec3 = require('../../../maths/vec3')\n\nconst poly3 = require('../../../geometries/poly3')\n\nconst splitPolygonByPlane = require('./splitPolygonByPlane')\n\n// # class PolygonTreeNode\n// This class manages hierarchical splits of polygons.\n// At the top is a root node which does not hold a polygon, only child PolygonTreeNodes.\n// Below that are zero or more 'top' nodes; each holds a polygon.\n// The polygons can be in different planes.\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\n// are created holding the splitted polygon.\n// getPolygons() retrieves the polygons from the tree. If for PolygonTreeNode the polygon is split but\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\n// getPolygons() will return the original unsplit polygon instead of the fragments.\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\n// since they are no longer intact.\nclass PolygonTreeNode {\n  // constructor creates the root node\n  constructor (parent, polygon) {\n    this.parent = parent\n    this.children = []\n    this.polygon = polygon\n    this.removed = false // state of branch or leaf\n  }\n\n  // fill the tree with polygons. Should be called on the root node only; child nodes must\n  // always be a derivate (split) of the parent node.\n  addPolygons (polygons) {\n    // new polygons can only be added to root node; children can only be splitted polygons\n    if (!this.isRootNode()) {\n      throw new Error('Assertion failed')\n    }\n    const _this = this\n    polygons.forEach((polygon) => {\n      _this.addChild(polygon)\n    })\n  }\n\n  // remove a node\n  // - the siblings become toplevel nodes\n  // - the parent is removed recursively\n  remove () {\n    if (!this.removed) {\n      this.removed = true\n      this.polygon = null\n\n      // remove ourselves from the parent's children list:\n      const parentschildren = this.parent.children\n      const i = parentschildren.indexOf(this)\n      if (i < 0) throw new Error('Assertion failed')\n      parentschildren.splice(i, 1)\n\n      // invalidate the parent's polygon, and of all parents above it:\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  }\n\n  isRemoved () {\n    return this.removed\n  }\n\n  isRootNode () {\n    return !this.parent\n  }\n\n  // invert all polygons in the tree. Call on the root node\n  invert () {\n    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node\n    this.invertSub()\n  }\n\n  getPolygon () {\n    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down\n    return this.polygon\n  }\n\n  getPolygons (result) {\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        if (node.polygon) {\n          // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\n          result.push(node.polygon)\n        } else {\n          // our polygon has been split up and broken, so gather all subpolygons from the children\n          if (node.children.length > 0) queue.push(node.children)\n        }\n      }\n    }\n  }\n\n  // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\n  // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\n  // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\n  //  and added to both arrays.\n  splitByPlane (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    if (this.children.length) {\n      const queue = [this.children]\n      let i\n      let j\n      let l\n      let node\n      let nodes\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\n        nodes = queue[i]\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\n          node = nodes[j]\n          if (node.children.length > 0) {\n            queue.push(node.children)\n          } else {\n            // no children. Split the polygon:\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n          }\n        }\n      }\n    } else {\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n    }\n  }\n\n  // only to be called for nodes with no children\n  _splitByPlane (splane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    const polygon = this.polygon\n    if (polygon) {\n      const bound = poly3.measureBoundingSphere(polygon)\n      const sphereradius = bound[3] + EPS // ensure radius is LARGER then polygon\n      const spherecenter = bound\n      const d = vec3.dot(splane, spherecenter) - splane[3]\n      if (d > sphereradius) {\n        frontnodes.push(this)\n      } else if (d < -sphereradius) {\n        backnodes.push(this)\n      } else {\n        const splitresult = splitPolygonByPlane(splane, polygon)\n        switch (splitresult.type) {\n          case 0:\n            // coplanar front:\n            coplanarfrontnodes.push(this)\n            break\n\n          case 1:\n            // coplanar back:\n            coplanarbacknodes.push(this)\n            break\n\n          case 2:\n            // front:\n            frontnodes.push(this)\n            break\n\n          case 3:\n            // back:\n            backnodes.push(this)\n            break\n\n          case 4:\n            // spanning:\n            if (splitresult.front) {\n              const frontnode = this.addChild(splitresult.front)\n              frontnodes.push(frontnode)\n            }\n            if (splitresult.back) {\n              const backnode = this.addChild(splitresult.back)\n              backnodes.push(backnode)\n            }\n            break\n        }\n      }\n    }\n  }\n\n  // PRIVATE methods from here:\n  // add child to a node\n  // this should be called whenever the polygon is split\n  // a child should be created for every fragment of the split polygon\n  // returns the newly created child\n  addChild (polygon) {\n    const newchild = new PolygonTreeNode(this, polygon)\n    this.children.push(newchild)\n    return newchild\n  }\n\n  invertSub () {\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; i++) {\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) {\n        node = children[j]\n        if (node.polygon) {\n          node.polygon = poly3.invert(node.polygon)\n        }\n        if (node.children.length > 0) queue.push(node.children)\n      }\n    }\n  }\n\n  // private method\n  // remove the polygon from the node, and all parent nodes above it\n  // called to invalidate parents of removed nodes\n  recursivelyInvalidatePolygon () {\n    this.polygon = null\n    if (this.parent) {\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  }\n\n  clear () {\n    let children = [this]\n    const queue = [children]\n    for (let i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      const l = children.length\n      for (let j = 0; j < l; j++) {\n        const node = children[j]\n        if (node.polygon) {\n          node.polygon = null\n        }\n        if (node.parent) {\n          node.parent = null\n        }\n        if (node.children.length > 0) queue.push(node.children)\n        node.children = []\n      }\n    }\n  }\n\n  toString () {\n    let result = ''\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      const prefix = ' '.repeat(i)\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        result += `${prefix}PolygonTreeNode (${node.isRootNode()}): ${node.children.length}`\n        if (node.polygon) {\n          result += `\\n ${prefix}polygon: ${node.polygon.vertices}\\n`\n        } else {\n          result += '\\n'\n        }\n        if (node.children.length > 0) queue.push(node.children)\n      }\n    }\n    return result\n  }\n}\n\nmodule.exports = PolygonTreeNode\n", "const Node = require('./Node')\nconst PolygonTreeNode = require('./PolygonTreeNode')\n\n// # class Tree\n// This is the root of a BSP tree.\n// This separate class for the root of the tree in order to hold the PolygonTreeNode root.\n// The actual tree is kept in this.rootnode\nclass Tree {\n  constructor (polygons) {\n    this.polygonTree = new PolygonTreeNode()\n    this.rootnode = new Node(null)\n    if (polygons) this.addPolygons(polygons)\n  }\n\n  invert () {\n    this.polygonTree.invert()\n    this.rootnode.invert()\n  }\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo (tree, alsoRemovecoplanarFront = false) {\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)\n  }\n\n  allPolygons () {\n    const result = []\n    this.polygonTree.getPolygons(result)\n    return result\n  }\n\n  addPolygons (polygons) {\n    const polygontreenodes = new Array(polygons.length)\n    for (let i = 0; i < polygons.length; i++) {\n      polygontreenodes[i] = this.polygonTree.addChild(polygons[i])\n    }\n    this.rootnode.addPolygonTreeNodes(polygontreenodes)\n  }\n\n  clear () {\n    this.polygonTree.clear()\n  }\n\n  toString () {\n    const result = 'Tree: ' + this.polygonTree.toString('')\n    return result\n  }\n}\n\nmodule.exports = Tree\n", "module.exports = {\n  Tree: require('./Tree')\n}\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in both the first geometry and\n * the second geometry. None of the given geometries are modified.\n * @param {geom3} geometry1 - a geometry\n * @param {geom3} geometry2 - a geometry\n * @returns {geom3} new 3D geometry\n */\nconst intersectGeom3Sub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return geom3.create() // empty geometry\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.invert()\n  b.clipTo(a)\n  b.invert()\n  a.clipTo(b)\n  b.clipTo(a)\n  a.addPolygons(b.allPolygons())\n  a.invert()\n\n  const newpolygons = a.allPolygons()\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = intersectGeom3Sub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst intersectSub = require('./intersectGeom3Sub')\n\n/*\n * Return a new 3D geometry representing space in both the first geometry and\n * in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom3} geometries - list of 3D geometries\n * @returns {geom3} new 3D geometry\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n\n  let newgeometry = geometries.shift()\n  geometries.forEach((geometry) => {\n    newgeometry = intersectSub(newgeometry, geometry)\n  })\n\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = intersect\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst intersectGeom3 = require('./intersectGeom3')\n\n/*\n * Return a new 2D geometry representing space in both the first geometry and\n * in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom2} geometries - list of 2D geometries\n * @returns {geom2} new 2D geometry\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = intersectGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = intersect\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst intersectGeom2 = require('./intersectGeom2')\nconst intersectGeom3 = require('./intersectGeom3')\n\n/**\n * Return a new geometry representing space in both the first geometry and\n * all subsequent geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.intersect\n *\n * @example\n * let myshape = intersect(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+\n * |       |\n * |   A   |\n * |    +--+----+   =   +--+\n * +----+--+    |       +--+\n *      |   B   |\n *      |       |\n *      +-------+\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only intersect of the types are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathintersect(matrix, geometries)\n  if (geom2.isA(geometry)) return intersectGeom2(geometries)\n  if (geom3.isA(geometry)) return intersectGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = intersect\n", "const vec3 = require('../../maths/vec3')\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst geom3 = require('../../geometries/geom3')\n\n// returns array numerically sorted and duplicates removed\nconst sortNb = (array) => array.sort((a, b) => a - b).filter((item, pos, ary) => !pos || item !== ary[pos - 1])\n\nconst insertMapping = (map, point, index) => {\n  const key = `${point}`\n  const mapping = map.get(key)\n  if (mapping === undefined) {\n    map.set(key, [index])\n  } else {\n    mapping.push(index)\n  }\n}\n\nconst findMapping = (map, point) => {\n  const key = `${point}`\n  return map.get(key)\n}\n\nconst scissionGeom3 = (geometry) => {\n  // construit table de correspondance entre polygones\n  // build polygons lookup table\n  const eps = measureEpsilon(geometry)\n  const polygons = geom3.toPolygons(geometry)\n  const pl = polygons.length\n\n  const indexesPerPoint = new Map()\n  const temp = vec3.create()\n  polygons.forEach((polygon, index) => {\n    polygon.vertices.forEach((point) => {\n      insertMapping(indexesPerPoint, vec3.snap(temp, point, eps), index)\n    })\n  })\n\n  const indexesPerPolygon = polygons.map((polygon) => {\n    let indexes = []\n    polygon.vertices.forEach((point) => {\n      indexes = indexes.concat(findMapping(indexesPerPoint, vec3.snap(temp, point, eps)))\n    })\n    return { e: 1, d: sortNb(indexes) } // for each polygon, push the list of indexes\n  })\n\n  indexesPerPoint.clear()\n\n  // regroupe les correspondances des polygones se touchant\n  // boucle ne s'arrêtant que quand deux passages retournent le même nb de polygones\n  // merge lookup data from linked polygons as long as possible\n  let merges = 0\n  const ippl = indexesPerPolygon.length\n  for (let i = 0; i < ippl; i++) {\n    const mapi = indexesPerPolygon[i]\n    // merge mappings if necessary\n    if (mapi.e > 0) {\n      const indexes = new Array(pl)\n      indexes[i] = true // include ourself\n      do {\n        merges = 0\n        // loop through the known indexes\n        indexes.forEach((e, j) => {\n          const mapj = indexesPerPolygon[j]\n          // merge this mapping if necessary\n          if (mapj.e > 0) {\n            mapj.e = -1 // merged\n            for (let d = 0; d < mapj.d.length; d++) {\n              indexes[mapj.d[d]] = true\n            }\n            merges++\n          }\n        })\n      } while (merges > 0)\n      mapi.indexes = indexes\n    }\n  }\n\n  // construit le tableau des geometry à retourner\n  // build array of geometry to return\n  const newgeometries = []\n  for (let i = 0; i < ippl; i++) {\n    if (indexesPerPolygon[i].indexes) {\n      const newpolygons = []\n      indexesPerPolygon[i].indexes.forEach((e, p) => newpolygons.push(polygons[p]))\n      newgeometries.push(geom3.create(newpolygons))\n    }\n  }\n\n  return newgeometries\n}\n\nmodule.exports = scissionGeom3\n", "const flatten = require('../../utils/flatten')\n\n// const geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\n// const scissionGeom2 = require('./scissionGeom2')\nconst scissionGeom3 = require('./scissionGeom3')\n\n/**\n * Scission (divide) the given geometry into the component pieces.\n *\n * @param {...Object} objects - list of geometries\n * @returns {Array} list of pieces from each geometry\n * @alias module:modeling/booleans.scission\n *\n * @example\n * let figure = require('./my.stl')\n * let pieces = scission(figure)\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   +---+            | A +---+\n * |   |    +---+   =   |   |    +---+\n * +---+    |   |       +---+    |   |\n *      +---+   |            +---+   |\n *      |       |            |    B  |\n *      +-------+            +-------+\n */\nconst scission = (...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    // if (path2.isA(object)) return path2.transform(matrix, object)\n    // if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return scissionGeom3(object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = scission\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in the first geometry but not\n * in the second geometry. None of the given geometries are modified.\n * @param {geom3} geometry1 - a geometry\n * @param {geom3} geometry2 - a geometry\n * @returns {geom3} new 3D geometry\n */\nconst subtractGeom3Sub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return geom3.clone(geometry1)\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.invert()\n  a.clipTo(b)\n  b.clipTo(a, true)\n  a.addPolygons(b.allPolygons())\n  a.invert()\n\n  const newpolygons = a.allPolygons()\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = subtractGeom3Sub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst subtractSub = require('./subtractGeom3Sub')\n\n/*\n * Return a new 3D geometry representing space in this geometry but not in the given geometries.\n * Neither this geometry nor the given geometries are modified.\n * @param {...geom3} geometries - list of geometries\n * @returns {geom3} new 3D geometry\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n\n  let newgeometry = geometries.shift()\n  geometries.forEach((geometry) => {\n    newgeometry = subtractSub(newgeometry, geometry)\n  })\n\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = subtract\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst subtractGeom3 = require('./subtractGeom3')\n\n/*\n * Return a new 2D geometry representing space in the first geometry but\n * not in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom2} geometries - list of geometries\n * @returns {geom2} new 2D geometry\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = subtractGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = subtract\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst subtractGeom2 = require('./subtractGeom2')\nconst subtractGeom3 = require('./subtractGeom3')\n\n/**\n * Return a new geometry representing space in the first geometry but\n * not in all subsequent geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.subtract\n *\n * @example\n * let myshape = subtract(cuboid({size: [5,5,5]}), cuboid({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   A   |            |       |\n * |    +--+----+   =   |    +--+\n * +----+--+    |       +----+\n *      |   B   |\n *      |       |\n *      +-------+\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only subtract of the types are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathsubtract(matrix, geometries)\n  if (geom2.isA(geometry)) return subtractGeom2(geometries)\n  if (geom3.isA(geometry)) return subtractGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = subtract\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in the given geometries.\n * @param {geom3} geometry1 - geometry to union\n * @param {geom3} geometry2 - geometry to union\n * @returns {geom3} new 3D geometry\n */\nconst unionSub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return unionForNonIntersecting(geometry1, geometry2)\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.clipTo(b, false)\n  // b.clipTo(a, true); // ERROR: doesn't work\n  b.clipTo(a)\n  b.invert()\n  b.clipTo(a)\n  b.invert()\n\n  const newpolygons = a.allPolygons().concat(b.allPolygons())\n  const result = geom3.create(newpolygons)\n  return result\n}\n\n// Like union, but when we know that the two solids are not intersecting\n// Do not use if you are not completely sure that the solids do not intersect!\nconst unionForNonIntersecting = (geometry1, geometry2) => {\n  let newpolygons = geom3.toPolygons(geometry1)\n  newpolygons = newpolygons.concat(geom3.toPolygons(geometry2))\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = unionSub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst unionSub = require('./unionGeom3Sub')\n\n/*\n * Return a new 3D geometry representing the space in the given 3D geometries.\n * @param {...objects} geometries - list of geometries to union\n * @returns {geom3} new 3D geometry\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // combine geometries in a way that forms a balanced binary tree pattern\n  let i\n  for (i = 1; i < geometries.length; i += 2) {\n    geometries.push(unionSub(geometries[i - 1], geometries[i]))\n  }\n  let newgeometry = geometries[i - 1]\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = union\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst unionGeom3 = require('./unionGeom3')\n\n/*\n * Return a new 2D geometry representing the total space in the given 2D geometries.\n * @param {...geom2} geometries - list of 2D geometries to union\n * @returns {geom2} new 2D geometry\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = unionGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = union\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst unionGeom2 = require('./unionGeom2')\nconst unionGeom3 = require('./unionGeom3')\n\n/**\n * Return a new geometry representing the total space in the given geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.union\n *\n * @example\n * let myshape = union(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   A   |            |       |\n * |    +--+----+   =   |       +----+\n * +----+--+    |       +----+       |\n *      |   B   |            |       |\n *      |       |            |       |\n *      +-------+            +-------+\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only unions of the same type are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathunion(matrix, geometries)\n  if (geom2.isA(geometry)) return unionGeom2(geometries)\n  if (geom3.isA(geometry)) return unionGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = union\n", "/**\n * All shapes (primitives or the results of operations) can be passed to boolean functions\n * to perform logical operations, e.g. remove a hole from a board.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/booleans\n * @example\n * const { intersect, subtract, union } = require('@jscad/modeling').booleans\n */\nmodule.exports = {\n  intersect: require('./intersect'),\n  scission: require('./scission'),\n  subtract: require('./subtract'),\n  union: require('./union')\n}\n", "const { EPS, TAU } = require('../../maths/constants')\n\nconst intersect = require('../../maths/utils/intersect')\nconst line2 = require('../../maths/line2')\nconst vec2 = require('../../maths/vec2')\nconst area = require('../../maths/utils/area')\n\n/*\n * Create a set of offset points from the given points using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {Integer} [options.closed=false] - is the last point connected back to the first point?\n * @param {Array} points - array of 2D points\n * @returns {Array} new set of offset points, plus points for each rounded corner\n */\nconst offsetFromPoints = (options, points) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    closed: false,\n    segments: 16\n  }\n  let { delta, corners, closed, segments } = Object.assign({ }, defaults, options)\n\n  if (Math.abs(delta) < EPS) return points\n\n  let rotation = options.closed ? area(points) : 1.0 // + counter clockwise, - clockwise\n  if (rotation === 0) rotation = 1.0\n\n  // use right hand normal?\n  const orientation = ((rotation > 0) && (delta >= 0)) || ((rotation < 0) && (delta < 0))\n  delta = Math.abs(delta) // sign is no longer required\n\n  let previousSegment = null\n  let newPoints = []\n  const newCorners = []\n  const of = vec2.create()\n  const n = points.length\n  for (let i = 0; i < n; i++) {\n    const j = (i + 1) % n\n    const p0 = points[i]\n    const p1 = points[j]\n    // calculate the unit normal\n    orientation ? vec2.subtract(of, p0, p1) : vec2.subtract(of, p1, p0)\n    vec2.normal(of, of)\n    vec2.normalize(of, of)\n    // calculate the offset vector\n    vec2.scale(of, of, delta)\n    // calculate the new points (edge)\n    const n0 = vec2.add(vec2.create(), p0, of)\n    const n1 = vec2.add(vec2.create(), p1, of)\n\n    const currentSegment = [n0, n1]\n    if (previousSegment != null) {\n      if (closed || (!closed && j !== 0)) {\n        // check for intersection of new line segments\n        const ip = intersect(previousSegment[0], previousSegment[1], currentSegment[0], currentSegment[1])\n        if (ip) {\n          // adjust the previous points\n          newPoints.pop()\n          // adjust current points\n          currentSegment[0] = ip\n        } else {\n          newCorners.push({ c: p0, s0: previousSegment, s1: currentSegment })\n        }\n      }\n    }\n    previousSegment = [n0, n1]\n\n    if (j === 0 && !closed) continue\n\n    newPoints.push(currentSegment[0])\n    newPoints.push(currentSegment[1])\n  }\n  // complete the closure if required\n  if (closed && previousSegment != null) {\n    // check for intersection of closing line segments\n    const n0 = newPoints[0]\n    const n1 = newPoints[1]\n    const ip = intersect(previousSegment[0], previousSegment[1], n0, n1)\n    if (ip) {\n      // adjust the previous points\n      newPoints[0] = ip\n      newPoints.pop()\n    } else {\n      const p0 = points[0]\n      const cursegment = [n0, n1]\n      newCorners.push({ c: p0, s0: previousSegment, s1: cursegment })\n    }\n  }\n\n  // generate corners if necessary\n\n  if (corners === 'edge') {\n    // map for fast point index lookup\n    const pointIndex = new Map() // {point: index}\n    newPoints.forEach((point, index) => pointIndex.set(point, index))\n\n    // create edge corners\n    const line0 = line2.create()\n    const line1 = line2.create()\n    newCorners.forEach((corner) => {\n      line2.fromPoints(line0, corner.s0[0], corner.s0[1])\n      line2.fromPoints(line1, corner.s1[0], corner.s1[1])\n      const ip = line2.intersectPointOfLines(line0, line1)\n      if (Number.isFinite(ip[0]) && Number.isFinite(ip[1])) {\n        const p0 = corner.s0[1]\n        const i = pointIndex.get(p0)\n        newPoints[i] = ip\n        newPoints[(i + 1) % newPoints.length] = undefined\n      } else {\n        // paralell segments, drop one\n        const p0 = corner.s1[0]\n        const i = pointIndex.get(p0)\n        newPoints[i] = undefined\n      }\n    })\n    newPoints = newPoints.filter((p) => p !== undefined)\n  }\n\n  if (corners === 'round') {\n    // create rounded corners\n    let cornersegments = Math.floor(segments / 4)\n    const v0 = vec2.create()\n    newCorners.forEach((corner) => {\n      // calculate angle of rotation\n      let rotation = vec2.angle(vec2.subtract(v0, corner.s1[0], corner.c))\n      rotation -= vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))\n      if (orientation && rotation < 0) {\n        rotation = rotation + Math.PI\n        if (rotation < 0) rotation = rotation + Math.PI\n      }\n      if ((!orientation) && rotation > 0) {\n        rotation = rotation - Math.PI\n        if (rotation > 0) rotation = rotation - Math.PI\n      }\n\n      if (rotation !== 0.0) {\n        // generate the segments\n        cornersegments = Math.floor(segments * (Math.abs(rotation) / TAU))\n        const step = rotation / cornersegments\n        const start = vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))\n        const cornerpoints = []\n        for (let i = 1; i < cornersegments; i++) {\n          const radians = start + (step * i)\n          const point = vec2.fromAngleRadians(vec2.create(), radians)\n          vec2.scale(point, point, delta)\n          vec2.add(point, point, corner.c)\n          cornerpoints.push(point)\n        }\n        if (cornerpoints.length > 0) {\n          const p0 = corner.s0[1]\n          let i = newPoints.findIndex((point) => vec2.equals(p0, point))\n          i = (i + 1) % newPoints.length\n          newPoints.splice(i, 0, ...cornerpoints)\n        }\n      } else {\n        // paralell segments, drop one\n        const p0 = corner.s1[0]\n        const i = newPoints.findIndex((point) => vec2.equals(p0, point))\n        newPoints.splice(i, 1)\n      }\n    })\n  }\n  return newPoints\n}\n\nmodule.exports = offsetFromPoints\n", "const geom2 = require('../../geometries/geom2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Expand the given geometry (geom2) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {geom2} geometry - the geometry to expand\n * @returns {geom2} expanded geometry\n */\nconst expandGeom2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 16\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  // convert the geometry to outlines, and generate offsets from each\n  const outlines = geom2.toOutlines(geometry)\n  const newoutlines = outlines.map((outline) => {\n    options = {\n      delta,\n      corners,\n      closed: true,\n      segments\n    }\n    return offsetFromPoints(options, outline)\n  })\n\n  // create a composite geometry from the new outlines\n  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])\n  return geom2.create(allsides)\n}\n\nmodule.exports = expandGeom2\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\n// Extrude a polygon in the direction of the offsetvector.\n// Returns (geom3) a new geometry\nconst extrudePolygon = (offsetvector, polygon1) => {\n  const direction = vec3.dot(poly3.plane(polygon1), offsetvector)\n  if (direction > 0) {\n    polygon1 = poly3.invert(polygon1)\n  }\n\n  const newpolygons = [polygon1]\n\n  const polygon2 = poly3.transform(mat4.fromTranslation(mat4.create(), offsetvector), polygon1)\n  const numvertices = polygon1.vertices.length\n  for (let i = 0; i < numvertices; i++) {\n    const nexti = (i < (numvertices - 1)) ? i + 1 : 0\n    const sideFacePolygon = poly3.create([\n      polygon1.vertices[i],\n      polygon2.vertices[i],\n      polygon2.vertices[nexti],\n      polygon1.vertices[nexti]\n    ])\n    newpolygons.push(sideFacePolygon)\n  }\n  newpolygons.push(poly3.invert(polygon2))\n\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = extrudePolygon\n", "const { EPS, TAU } = require('../../maths/constants')\n\nconst mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst fnNumberSort = require('../../utils/fnNumberSort')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst sphere = require('../../primitives/sphere')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst unionGeom3Sub = require('../booleans/unionGeom3Sub')\n\nconst extrudePolygon = require('./extrudePolygon')\n\n/*\n * Collect all planes adjacent to each vertex\n */\nconst mapPlaneToVertex = (map, vertex, plane) => {\n  const key = vertex.toString()\n  if (!map.has(key)) {\n    const entry = [vertex, [plane]]\n    map.set(key, entry)\n  } else {\n    const planes = map.get(key)[1]\n    planes.push(plane)\n  }\n}\n\n/*\n * Collect all planes adjacent to each edge.\n * Combine undirected edges, no need for duplicate cylinders.\n */\nconst mapPlaneToEdge = (map, edge, plane) => {\n  const key0 = edge[0].toString()\n  const key1 = edge[1].toString()\n  // Sort keys to make edges undirected\n  const key = key0 < key1 ? `${key0},${key1}` : `${key1},${key0}`\n  if (!map.has(key)) {\n    const entry = [edge, [plane]]\n    map.set(key, entry)\n  } else {\n    const planes = map.get(key)[1]\n    planes.push(plane)\n  }\n}\n\nconst addUniqueAngle = (map, angle) => {\n  const i = map.findIndex((item) => item === angle)\n  if (i < 0) {\n    map.push(angle)\n  }\n}\n\n/*\n * Create the expanded shell of the solid:\n * All faces are extruded to 2 times delta\n * Cylinders are constructed around every side\n * Spheres are placed on every vertex\n * the result is a true expansion of the solid\n * @param  {Number} delta\n * @param  {Integer} segments\n */\nconst expandShell = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    segments: 12\n  }\n  const { delta, segments } = Object.assign({ }, defaults, options)\n\n  let result = geom3.create()\n  const vertices2planes = new Map() // {vertex: [vertex, [plane, ...]]}\n  const edges2planes = new Map() // {edge: [[vertex, vertex], [plane, ...]]}\n\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n\n  // loop through the polygons\n  // - extruded the polygon, and add to the composite result\n  // - add the plane to the unique vertice map\n  // - add the plane to the unique edge map\n  const polygons = geom3.toPolygons(geometry)\n  polygons.forEach((polygon, index) => {\n    const extrudevector = vec3.scale(vec3.create(), poly3.plane(polygon), 2 * delta)\n    const translatedpolygon = poly3.transform(mat4.fromTranslation(mat4.create(), vec3.scale(vec3.create(), extrudevector, -0.5)), polygon)\n    const extrudedface = extrudePolygon(extrudevector, translatedpolygon)\n    result = unionGeom3Sub(result, extrudedface)\n\n    const vertices = polygon.vertices\n    for (let i = 0; i < vertices.length; i++) {\n      mapPlaneToVertex(vertices2planes, vertices[i], poly3.plane(polygon))\n      const j = (i + 1) % vertices.length\n      const edge = [vertices[i], vertices[j]]\n      mapPlaneToEdge(edges2planes, edge, poly3.plane(polygon))\n    }\n  })\n\n  // now construct a cylinder on every side\n  // The cylinder is always an approximation of a true cylinder, having polygons\n  // around the sides. We will make sure though that the cylinder will have an edge at every\n  // face that touches this side. This ensures that we will get a smooth fill even\n  // if two edges are at, say, 10 degrees and the segments is low.\n  edges2planes.forEach((item) => {\n    const edge = item[0]\n    const planes = item[1]\n    const startpoint = edge[0]\n    const endpoint = edge[1]\n\n    // our x,y and z vectors:\n    const zbase = vec3.subtract(vec3.create(), endpoint, startpoint)\n    vec3.normalize(zbase, zbase)\n    const xbase = planes[0]\n    const ybase = vec3.cross(vec3.create(), xbase, zbase)\n\n    // make a list of angles that the cylinder should traverse:\n    let angles = []\n\n    // first of all equally spaced around the cylinder:\n    for (let i = 0; i < segments; i++) {\n      addUniqueAngle(angles, (i * TAU / segments))\n    }\n\n    // and also at every normal of all touching planes:\n    for (let i = 0, iMax = planes.length; i < iMax; i++) {\n      const planenormal = planes[i]\n      const si = vec3.dot(ybase, planenormal)\n      const co = vec3.dot(xbase, planenormal)\n      let angle = Math.atan2(si, co)\n\n      if (angle < 0) angle += TAU\n      addUniqueAngle(angles, angle)\n      angle = Math.atan2(-si, -co)\n      if (angle < 0) angle += TAU\n      addUniqueAngle(angles, angle)\n    }\n\n    // this will result in some duplicate angles but we will get rid of those later.\n    angles = angles.sort(fnNumberSort)\n\n    // Now construct the cylinder by traversing all angles:\n    const numangles = angles.length\n    let prevp1\n    let prevp2\n    const startfacevertices = []\n    const endfacevertices = []\n    const polygons = []\n    for (let i = -1; i < numangles; i++) {\n      const angle = angles[(i < 0) ? (i + numangles) : i]\n      const si = Math.sin(angle)\n      const co = Math.cos(angle)\n      vec3.scale(v1, xbase, co * delta)\n      vec3.scale(v2, ybase, si * delta)\n      vec3.add(v1, v1, v2)\n      const p1 = vec3.add(vec3.create(), startpoint, v1)\n      const p2 = vec3.add(vec3.create(), endpoint, v1)\n      let skip = false\n      if (i >= 0) {\n        if (vec3.distance(p1, prevp1) < EPS) {\n          skip = true\n        }\n      }\n      if (!skip) {\n        if (i >= 0) {\n          startfacevertices.push(p1)\n          endfacevertices.push(p2)\n          const points = [prevp2, p2, p1, prevp1]\n          const polygon = poly3.create(points)\n          polygons.push(polygon)\n        }\n        prevp1 = p1\n        prevp2 = p2\n      }\n    }\n    endfacevertices.reverse()\n    polygons.push(poly3.create(startfacevertices))\n    polygons.push(poly3.create(endfacevertices))\n\n    const cylinder = geom3.create(polygons)\n    result = unionGeom3Sub(result, cylinder)\n  })\n\n  // build spheres at each unique vertex\n  // We will try to set the x and z axis to the normals of 2 planes\n  // This will ensure that our sphere tesselation somewhat matches 2 planes\n  vertices2planes.forEach((item) => {\n    const vertex = item[0]\n    const planes = item[1]\n    // use the first normal to be the x axis of our sphere:\n    const xaxis = planes[0]\n    // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:\n    let bestzaxis = null\n    let bestzaxisorthogonality = 0\n    for (let i = 1; i < planes.length; i++) {\n      const normal = planes[i]\n      const cross = vec3.cross(v1, xaxis, normal)\n      const crosslength = vec3.length(cross)\n      if (crosslength > 0.05) { // FIXME why 0.05?\n        if (crosslength > bestzaxisorthogonality) {\n          bestzaxisorthogonality = crosslength\n          bestzaxis = normal\n        }\n      }\n    }\n    if (!bestzaxis) {\n      bestzaxis = vec3.orthogonal(v1, xaxis)\n    }\n    const yaxis = vec3.cross(v1, xaxis, bestzaxis)\n    vec3.normalize(yaxis, yaxis)\n    const zaxis = vec3.cross(v2, yaxis, xaxis)\n    const corner = sphere({\n      center: [vertex[0], vertex[1], vertex[2]],\n      radius: delta,\n      segments: segments,\n      axes: [xaxis, yaxis, zaxis]\n    })\n    result = unionGeom3Sub(result, corner)\n  })\n  return retessellate(result)\n}\n\nmodule.exports = expandShell\n", "const geom3 = require('../../geometries/geom3')\n\nconst union = require('../booleans/union')\n\nconst expandShell = require('./expandShell')\n\n/*\n * Expand the given geometry (geom3) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='round'] - type corner to create during of expansion; round\n * @param {Integer} [options.segments=12] - number of segments when creating round corners\n * @param {geom3} geometry - the geometry to expand\n * @returns {geom3} expanded geometry\n */\nconst expandGeom3 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'round',\n    segments: 12\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'round')) {\n    throw new Error('corners must be \"round\" for 3D geometries')\n  }\n\n  const polygons = geom3.toPolygons(geometry)\n  if (polygons.length === 0) throw new Error('the given geometry cannot be empty')\n\n  options = { delta, corners, segments }\n  const expanded = expandShell(options, geometry)\n  return union(geometry, expanded)\n}\n\nmodule.exports = expandGeom3\n", "const area = require('../../maths/utils/area')\n\nconst vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\nconst createGeometryFromClosedOffsets = (paths) => {\n  let { external, internal } = paths\n  if (area(external) < 0) {\n    external = external.reverse()\n  } else {\n    internal = internal.reverse()\n  }\n  // NOTE: creating path2 from the points ensures proper closure\n  const externalPath = path2.fromPoints({ closed: true }, external)\n  const internalPath = path2.fromPoints({ closed: true }, internal)\n  const externalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(externalPath)))\n  const internalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(internalPath)))\n  externalSides.push(...internalSides)\n  return geom2.create(externalSides)\n}\n\nconst createGeometryFromExpandedOpenPath = (paths, segments, corners, delta) => {\n  const { points, external, internal } = paths\n  const capSegments = Math.floor(segments / 2) // rotation is 180 degrees\n  const e2iCap = []\n  const i2eCap = []\n  if (corners === 'round' && capSegments > 0) {\n    // added round caps to the geometry\n    const step = Math.PI / capSegments\n    const eCorner = points[points.length - 1]\n    const e2iStart = vec2.angle(vec2.subtract(vec2.create(), external[external.length - 1], eCorner))\n    const iCorner = points[0]\n    const i2eStart = vec2.angle(vec2.subtract(vec2.create(), internal[0], iCorner))\n    for (let i = 1; i < capSegments; i++) {\n      let radians = e2iStart + (step * i)\n      let point = vec2.fromAngleRadians(vec2.create(), radians)\n      vec2.scale(point, point, delta)\n      vec2.add(point, point, eCorner)\n      e2iCap.push(point)\n\n      radians = i2eStart + (step * i)\n      point = vec2.fromAngleRadians(vec2.create(), radians)\n      vec2.scale(point, point, delta)\n      vec2.add(point, point, iCorner)\n      i2eCap.push(point)\n    }\n  }\n  const allPoints = []\n  allPoints.push(...external, ...e2iCap, ...internal.reverse(), ...i2eCap)\n  return geom2.fromPoints(allPoints)\n}\n\n/*\n * Expand the given geometry (path2) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+) of expansion\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {path2} geometry - the geometry to expand\n * @returns {geom2} expanded geometry\n */\nconst expandPath2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 16\n  }\n\n  options = Object.assign({ }, defaults, options)\n  const { delta, corners, segments } = options\n\n  if (delta <= 0) throw new Error('the given delta must be positive for paths')\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  const closed = geometry.isClosed\n  const points = path2.toPoints(geometry)\n  if (points.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const paths = {\n    points: points,\n    external: offsetFromPoints({ delta, corners, segments, closed }, points),\n    internal: offsetFromPoints({ delta: -delta, corners, segments, closed }, points)\n  }\n\n  if (geometry.isClosed) {\n    return createGeometryFromClosedOffsets(paths)\n  } else {\n    return createGeometryFromExpandedOpenPath(paths, segments, corners, delta)\n  }\n}\n\nmodule.exports = expandPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst expandGeom2 = require('./expandGeom2')\nconst expandGeom3 = require('./expandGeom3')\nconst expandPath2 = require('./expandPath2')\n\n/**\n * Expand the given geometry using the given options.\n * Both internal and external space is expanded for 2D and 3D shapes.\n *\n * Note: Contract is expand using a negative delta.\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='edge'] - type of corner to create after expanding; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {...Objects} objects - the geometries to expand\n * @return {Object|Array} new geometry, or list of new geometries\n * @alias module:modeling/expansions.expand\n *\n * @example\n * let newarc = expand({delta: 5, corners: 'edge'}, arc({}))\n * let newsquare = expand({delta: 5, corners: 'chamfer'}, square({size: 30}))\n * let newsphere = expand({delta: 2, corners: 'round'}, cuboid({size: [20, 25, 5]}))\n */\nconst expand = (options, ...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return expandPath2(options, object)\n    if (geom2.isA(object)) return expandGeom2(options, object)\n    if (geom3.isA(object)) return expandGeom3(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = expand\n", "const geom2 = require('../../geometries/geom2')\nconst poly2 = require('../../geometries/poly2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Create a offset geometry from the given geom2 using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {geom2} geometry - geometry from which to create the offset\n * @returns {geom2} offset geometry, plus rounded corners\n */\nconst offsetGeom2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 0\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  // convert the geometry to outlines, and generate offsets from each\n  const outlines = geom2.toOutlines(geometry)\n  const newoutlines = outlines.map((outline) => {\n    const level = outlines.reduce((acc, polygon) => acc + poly2.arePointsInside(outline, poly2.create(polygon)), 0)\n    const outside = (level % 2) === 0\n\n    options = {\n      delta: outside ? delta : -delta,\n      corners,\n      closed: true,\n      segments\n    }\n    return offsetFromPoints(options, outline)\n  })\n\n  // create a composite geometry from the new outlines\n  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])\n  return geom2.create(allsides)\n}\n\nmodule.exports = offsetGeom2\n", "const path2 = require('../../geometries/path2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Create a offset geometry from the given path using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {path2} geometry - geometry from which to create the offset\n * @returns {path2} offset geometry, plus rounded corners\n */\nconst offsetPath2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    closed: geometry.isClosed,\n    segments: 16\n  }\n  const { delta, corners, closed, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  options = { delta, corners, closed, segments }\n  const newpoints = offsetFromPoints(options, path2.toPoints(geometry))\n  return path2.fromPoints({ closed: closed }, newpoints)\n}\n\nmodule.exports = offsetPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst offsetGeom2 = require('./offsetGeom2')\nconst offsetPath2 = require('./offsetPath2')\n\n/**\n * Create offset geometry from the given geometry using the given options.\n * Offsets from internal and external space are created.\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type of corner to create after offseting; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {...Object} objects - the geometries to offset\n * @return {Object|Array} new geometry, or list of new geometries\n * @alias module:modeling/expansions.offset\n *\n * @example\n * let small = offset({ delta: -4, corners: 'chamfer' }, square({size: 40})) // contract\n */\nconst offset = (options, ...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return offsetPath2(options, object)\n    if (geom2.isA(object)) return offsetGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = offset\n", "/**\n * All shapes (primitives or the results of operations) can be expanded (or contracted.)\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/expansions\n * @example\n * const { expand, offset } = require('@jscad/modeling').expansions\n */\nmodule.exports = {\n  expand: require('./expand'),\n  offset: require('./offset')\n}\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst slice = require('./slice')\n\nconst extrudeFromSlices = require('./extrudeFromSlices')\n\n/*\n * Extrude the given geometry using the given options.\n *\n * @param {Object} [options] - options for extrude\n * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector\n * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin\n * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)\n * @param {Boolean} [options.repair] - repair gaps in the geometry\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded 3D geometry\n*/\nconst extrudeGeom2 = (options, geometry) => {\n  const defaults = {\n    offset: [0, 0, 1],\n    twistAngle: 0,\n    twistSteps: 12,\n    repair: true\n  }\n  let { offset, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)\n\n  if (twistSteps < 1) throw new Error('twistSteps must be 1 or more')\n\n  if (twistAngle === 0) {\n    twistSteps = 1\n  }\n\n  // convert to vector in order to perform transforms\n  const offsetv = vec3.clone(offset)\n\n  const baseSides = geom2.toSides(geometry)\n  if (baseSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const baseSlice = slice.fromSides(baseSides)\n  if (offsetv[2] < 0) slice.reverse(baseSlice, baseSlice)\n\n  const matrix = mat4.create()\n  const createTwist = (progress, index, base) => {\n    const Zrotation = index / twistSteps * twistAngle\n    const Zoffset = vec3.scale(vec3.create(), offsetv, index / twistSteps)\n    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromTranslation(mat4.create(), Zoffset))\n\n    return slice.transform(matrix, base)\n  }\n\n  options = {\n    numberOfSlices: twistSteps + 1,\n    capStart: true,\n    capEnd: true,\n    repair,\n    callback: createTwist\n  }\n  return extrudeFromSlices(options, baseSlice)\n}\n\nmodule.exports = extrudeGeom2\n", "const geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Extrude the given geometry using the given options.\n *\n * @param {Object} [options] - options for extrude\n * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector\n * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin\n * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)\n * @param {path2} geometry - the geometry to extrude\n * @returns {geom3} the extruded 3D geometry\n*/\nconst extrudePath2 = (options, geometry) => {\n  if (!geometry.isClosed) throw new Error('extruded path must be closed')\n  // Convert path2 to geom2\n  const points = path2.toPoints(geometry)\n  const geometry2 = geom2.fromPoints(points)\n  return extrudeLinearGeom2(options, geometry2)\n}\n\nmodule.exports = extrudePath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\nconst extrudeLinearPath2 = require('./extrudeLinearPath2')\n\n/**\n * Extrude the given geometry in an upward linear direction using the given options.\n * Accepts path2 or geom2 objects as input. Paths must be closed.\n *\n * @param {Object} options - options for extrude\n * @param {Number} [options.height=1] the height of the extrusion\n * @param {Number} [options.twistAngle=0] the final rotation (RADIANS) about the origin of the shape (if any)\n * @param {Integer} [options.twistSteps=1] the resolution of the twist about the axis (if any)\n * @param {...Object} objects - the geometries to extrude\n * @return {Object|Array} the extruded geometry, or a list of extruded geometry\n * @alias module:modeling/extrusions.extrudeLinear\n *\n * @example\n * let myshape = extrudeLinear({height: 10}, rectangle({size: [20, 25]}))\n */\nconst extrudeLinear = (options, ...objects) => {\n  const defaults = {\n    height: 1,\n    twistAngle: 0,\n    twistSteps: 1,\n    repair: true\n  }\n  const { height, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  options = { offset: [0, 0, height], twistAngle, twistSteps, repair }\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return extrudeLinearPath2(options, object)\n    if (geom2.isA(object)) return extrudeLinearGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.extrude(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = extrudeLinear\n", "const path2 = require('../../geometries/path2')\n\nconst expand = require('../expansions/expand')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Expand and extrude the given geometry (path2).\n * @See expand for addition options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {path2} geometry - the geometry to extrude\n * @return {geom3} the extruded geometry\n */\nconst extrudeRectangularPath2 = (options, geometry) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({ }, defaults, options)\n\n  options.delta = size\n  options.offset = [0, 0, height]\n\n  const points = path2.toPoints(geometry)\n  if (points.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const newgeometry = expand(options, geometry)\n  return extrudeLinearGeom2(options, newgeometry)\n}\n\nmodule.exports = extrudeRectangularPath2\n", "const { area } = require('../../maths/utils')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst expand = require('../expansions/expand')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Expand and extrude the given geometry (geom2).\n * @see expand for additional options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @return {geom3} the extruded geometry\n */\nconst extrudeRectangularGeom2 = (options, geometry) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({ }, defaults, options)\n\n  options.delta = size\n  options.offset = [0, 0, height]\n\n  // convert the geometry to outlines\n  const outlines = geom2.toOutlines(geometry)\n  if (outlines.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // expand the outlines\n  const newparts = outlines.map((outline) => {\n    if (area(outline) < 0) outline.reverse() // all outlines must wind counter clockwise\n    return expand(options, path2.fromPoints({ closed: true }, outline))\n  })\n\n  // create a composite geometry\n  const allsides = newparts.reduce((sides, part) => sides.concat(geom2.toSides(part)), [])\n  const newgeometry = geom2.create(allsides)\n\n  return extrudeLinearGeom2(options, newgeometry)\n}\n\nmodule.exports = extrudeRectangularGeom2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeRectangularPath2 = require('./extrudeRectangularPath2')\nconst extrudeRectangularGeom2 = require('./extrudeRectangularGeom2')\n\n/**\n * Extrude the given geometry by following the outline(s) with a rectangle.\n * @See expand for addition options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {...Object} objects - the geometries to extrude\n * @return {Object|Array} the extruded object, or a list of extruded objects\n * @alias module:modeling/extrusions.extrudeRectangular\n *\n * @example\n * let mywalls = extrudeRectangular({size: 1, height: 3}, square({size: 20}))\n * let mywalls = extrudeRectangular({size: 1, height: 300, twistAngle: TAU / 2}, square({size: 20}))\n */\nconst extrudeRectangular = (options, ...objects) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  if (size <= 0) throw new Error('size must be positive')\n  if (height <= 0) throw new Error('height must be positive')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return extrudeRectangularPath2(options, object)\n    if (geom2.isA(object)) return extrudeRectangularGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = extrudeRectangular\n", "const { TAU } = require('../../maths/constants')\nconst slice = require('./slice')\nconst mat4 = require('../../maths/mat4')\nconst extrudeFromSlices = require('./extrudeFromSlices')\nconst geom2 = require('../../geometries/geom2')\n\n/**\n * Perform a helical extrude of the geometry, using the given options.\n *\n * @param {Object} options - options for extrusion\n * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS) positive for right-hand rotation, negative for left-hand\n * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)\n * @param {Number} [options.pitch=10] - elevation gain for each turn\n * @param {Number} [options.height] - total height of the helix path. Ignored if pitch is set.\n * @param {Number} [options.endOffset=0] - offset the final radius of the extrusion, allowing for tapered helix, and or spiral\n * @param {Number} [options.segmentsPerRotation=32] - number of segments per full rotation of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded geometry\n * @alias module:modeling/extrusions.extrudeHelical\n *\n * @example\n * const myshape = extrudeHelical(\n *  {\n *      angle: Math.PI * 4,\n *      pitch: 10,\n *      segmentsPerRotation: 64\n *  },\n *  circle({size: 3, center: [10, 0]})\n * )\n */\nconst extrudeHelical = (options, geometry) => {\n  const defaults = {\n    angle: TAU,\n    startAngle: 0,\n    pitch: 10,\n    endOffset: 0,\n    segmentsPerRotation: 32\n  }\n  const { angle, endOffset, segmentsPerRotation, startAngle } = Object.assign({}, defaults, options)\n\n  let pitch\n  // ignore height if pitch is set\n  if (!options.pitch && options.height) {\n    pitch = options.height / (angle / TAU)\n  } else {\n    pitch = options.pitch ? options.pitch : defaults.pitch\n  }\n\n  // needs at least 3 segments for each revolution\n  const minNumberOfSegments = 3\n\n  if (segmentsPerRotation < minNumberOfSegments) { throw new Error('The number of segments per rotation needs to be at least 3.') }\n\n  const shapeSides = geom2.toSides(geometry)\n  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))\n  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))\n\n  let baseSlice = slice.fromSides(shapeSides)\n\n  if (pointsWithPositiveX.length === 0) {\n    // only points in negative x plane, reverse\n    baseSlice = slice.reverse(baseSlice)\n  }\n\n  const calculatedSegments = Math.round(segmentsPerRotation / TAU * Math.abs(angle))\n  const segments = calculatedSegments >= 2 ? calculatedSegments : 2\n  // define transform matrix variables for performance increase\n  const step1 = mat4.create()\n  let matrix\n  const sliceCallback = (progress, index, base) => {\n    const zRotation = startAngle + angle / segments * index\n    const xOffset = endOffset / segments * index\n    const zOffset = (zRotation - startAngle) / TAU * pitch\n\n    // TODO: check for valid geometry after translations\n    // ie all the points have to be either x > -xOffset or x < -xOffset\n    // this would have to be checked for every transform, and handled\n    //\n    // not implementing, as this currently doesn't break anything,\n    // only creates inside-out polygons\n\n    // create transformation matrix\n    mat4.multiply(\n      step1,\n      // then apply offsets\n      mat4.fromTranslation(mat4.create(), [xOffset, 0, zOffset * Math.sign(angle)]),\n      // first rotate \"flat\" 2D shape from XY to XZ plane\n      mat4.fromXRotation(mat4.create(), -TAU / 4 * Math.sign(angle)) // rotate the slice correctly to not create inside-out polygon\n    )\n\n    matrix = mat4.create()\n    mat4.multiply(\n      matrix,\n      // finally rotate around Z axis\n      mat4.fromZRotation(mat4.create(), zRotation),\n      step1\n    )\n    return slice.transform(matrix, base)\n  }\n\n  return extrudeFromSlices(\n    {\n      // \"base\" slice is counted as segment, so add one for complete final rotation\n      numberOfSlices: segments + 1,\n      callback: sliceCallback\n    },\n    baseSlice\n  )\n}\n\nmodule.exports = extrudeHelical\n", "const flatten = require('../../utils/flatten')\n\nconst aboutEqualNormals = require('../../maths/utils/aboutEqualNormals')\nconst plane = require('../../maths/plane')\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst unionGeom2 = require('../booleans/unionGeom2')\n\nconst projectGeom3 = (options, geometry) => {\n  // create a plane from the options, and verify\n  const projplane = plane.fromNormalAndPoint(plane.create(), options.axis, options.origin)\n  if (Number.isNaN(projplane[0]) || Number.isNaN(projplane[1]) || Number.isNaN(projplane[2]) || Number.isNaN(projplane[3])) {\n    throw new Error('project: invalid axis or origin')\n  }\n\n  const epsilon = measureEpsilon(geometry)\n  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)\n\n  if (epsilon === 0) return geom2.create()\n\n  // project the polygons to the plane\n  const polygons = geom3.toPolygons(geometry)\n  let projpolys = []\n  for (let i = 0; i < polygons.length; i++) {\n    const newpoints = polygons[i].vertices.map((v) => plane.projectionOfPoint(projplane, v))\n    const newpoly = poly3.create(newpoints)\n    // only keep projections that face the same direction as the plane\n    const newplane = poly3.plane(newpoly)\n    if (!aboutEqualNormals(projplane, newplane)) continue\n    // only keep projections that have a measurable area\n    if (poly3.measureArea(newpoly) < epsilonArea) continue\n    projpolys.push(newpoly)\n  }\n\n  // rotate the polygons to lay on X/Y axes if necessary\n  if (!aboutEqualNormals(projplane, [0, 0, 1])) {\n    const rotation = mat4.fromVectorRotation(mat4.create(), projplane, [0, 0, 1])\n    projpolys = projpolys.map((p) => poly3.transform(rotation, p))\n  }\n\n  // sort the polygons to allow the union to ignore small pieces efficiently\n  projpolys = projpolys.sort((a, b) => poly3.measureArea(b) - poly3.measureArea(a))\n\n  // convert polygons to geometry, and union all pieces into a single geometry\n  const projgeoms = projpolys.map((p) => geom2.fromPoints(p.vertices))\n  return unionGeom2(projgeoms)\n}\n\n/**\n * Project the given 3D geometry on to the given plane.\n * @param {Object} options - options for project\n * @param {Array} [options.axis=[0,0,1]] the axis of the plane (default is Z axis)\n * @param {Array} [options.origin=[0,0,0]] the origin of the plane\n * @param {...Object} objects - the list of 3D geometry to project\n * @return {geom2|Array} the projected 2D geometry, or a list of 2D projected geometry\n * @alias module:modeling/extrusions.project\n *\n * @example\n * let myshape = project({}, sphere({radius: 20, segments: 5}))\n */\nconst project = (options, ...objects) => {\n  const defaults = {\n    axis: [0, 0, 1], // Z axis\n    origin: [0, 0, 0]\n  }\n  const { axis, origin } = Object.assign({ }, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  options = { axis, origin }\n\n  const results = objects.map((object) => {\n    // if (path.isA(object)) return project(options, object)\n    // if (geom2.isA(object)) return project(options, object)\n    if (geom3.isA(object)) return projectGeom3(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = project\n", "/**\n * All 2D shapes (primitives or the results of operations) can be extruded in various ways.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/extrusions\n * @example\n * const { extrudeLinear, extrudeRectangular, extrudeRotate } = require('@jscad/modeling').extrusions\n */\nmodule.exports = {\n  extrudeFromSlices: require('./extrudeFromSlices'),\n  extrudeLinear: require('./extrudeLinear'),\n  extrudeRectangular: require('./extrudeRectangular'),\n  extrudeRotate: require('./extrudeRotate'),\n  extrudeHelical: require('./extrudeHelical'),\n  project: require('./project'),\n  slice: require('./slice')\n}\n", "const vec2 = require('../../maths/vec2')\n\n/*\n * Create a convex hull of the given set of points, where each point is an array of [x,y].\n * Uses https://en.wikipedia.org/wiki/Graham_scan\n * @param {Array} uniquePoints - list of UNIQUE points from which to create a hull\n * @returns {Array} a list of points that form the hull\n */\nconst hullPoints2 = (uniquePoints) => {\n  // find min point\n  let min = vec2.fromValues(Infinity, Infinity)\n  uniquePoints.forEach((point) => {\n    if (point[1] < min[1] || (point[1] === min[1] && point[0] < min[0])) {\n      min = point\n    }\n  })\n\n  // gather information for sorting by polar coordinates (point, angle, distSq)\n  const points = []\n  uniquePoints.forEach((point) => {\n    // use faster fakeAtan2 instead of Math.atan2\n    const angle = fakeAtan2(point[1] - min[1], point[0] - min[0])\n    const distSq = vec2.squaredDistance(point, min)\n    points.push({ point, angle, distSq })\n  })\n\n  // sort by polar coordinates\n  points.sort((pt1, pt2) => pt1.angle !== pt2.angle\n    ? pt1.angle - pt2.angle\n    : pt1.distSq - pt2.distSq)\n\n  const stack = [] // start with empty stack\n  points.forEach((point) => {\n    let cnt = stack.length\n    while (cnt > 1 && ccw(stack[cnt - 2], stack[cnt - 1], point.point) <= Number.EPSILON) {\n      stack.pop() // get rid of colinear and interior (clockwise) points\n      cnt = stack.length\n    }\n    stack.push(point.point)\n  })\n\n  return stack\n}\n\n// returns: < 0 clockwise, 0 colinear, > 0 counter-clockwise\nconst ccw = (v1, v2, v3) => (v2[0] - v1[0]) * (v3[1] - v1[1]) - (v2[1] - v1[1]) * (v3[0] - v1[0])\n\n// Returned \"angle\" is really 1/tan (inverse of slope) made negative to increase with angle.\n// This function is strictly for sorting in this algorithm.\nconst fakeAtan2 = (y, x) => {\n  // The \"if\" is a special case for when the minimum vector found in loop above is present.\n  // We need to ensure that it sorts as the minimum point. Otherwise, this becomes NaN.\n  if (y === 0 && x === 0) {\n    return -Infinity\n  } else {\n    return -x / y\n  }\n}\n\nmodule.exports = hullPoints2\n", "const geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/*\n * Return the unique vertices of a geometry\n */\nconst toUniquePoints = (geometries) => {\n  const found = new Set()\n  const uniquePoints = []\n\n  const addPoint = (point) => {\n    const key = point.toString()\n    if (!found.has(key)) {\n      uniquePoints.push(point)\n      found.add(key)\n    }\n  }\n\n  geometries.forEach((geometry) => {\n    if (geom2.isA(geometry)) {\n      geom2.toPoints(geometry).forEach(addPoint)\n    } else if (geom3.isA(geometry)) {\n      // points are grouped by polygon\n      geom3.toPoints(geometry).forEach((points) => points.forEach(addPoint))\n    } else if (path2.isA(geometry)) {\n      path2.toPoints(geometry).forEach(addPoint)\n    }\n  })\n\n  return uniquePoints\n}\n\nmodule.exports = toUniquePoints\n", "const flatten = require('../../utils/flatten')\n\nconst path2 = require('../../geometries/path2')\n\nconst hullPoints2 = require('./hullPoints2')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geometries (path2).\n * @param {...geometries} geometries - list of path2 geometries\n * @returns {path2} new geometry\n */\nconst hullPath2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const hullPoints = hullPoints2(unique)\n\n  // assemble a new geometry from the list of points\n  return path2.fromPoints({ closed: true }, hullPoints)\n}\n\nmodule.exports = hullPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst hullPoints2 = require('./hullPoints2')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geom2 geometries.\n * @param {...geometries} geometries - list of geom2 geometries\n * @returns {geom2} new geometry\n */\nconst hullGeom2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const hullPoints = hullPoints2(unique)\n\n  // NOTE: more than three points are required to create a new geometry\n  if (hullPoints.length < 3) return geom2.create()\n\n  // assemble a new geometry from the list of points\n  return geom2.fromPoints(hullPoints)\n}\n\nmodule.exports = hullGeom2\n", "const cross = require('../../../maths/vec3/cross')\nconst subtract = require('../../../maths/vec3/subtract')\nconst squaredLength = require('../../../maths/vec3/squaredLength')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst distanceSquared = (p, a, b) => {\n  // == parallelogram solution\n  //\n  //            s\n  //      __a________b__\n  //       /   |    /\n  //      /   h|   /\n  //     /_____|__/\n  //    p\n  //\n  //  s = b - a\n  //  area = s * h\n  //  |ap x s| = s * h\n  //  h = |ap x s| / s\n  //\n  const ab = []\n  const ap = []\n  const cr = []\n  subtract(ab, b, a)\n  subtract(ap, p, a)\n  const area = squaredLength(cross(cr, ap, ab))\n  const s = squaredLength(ab)\n  if (s === 0) {\n    throw Error('a and b are the same point')\n  }\n  return area / s\n}\n\nconst pointLineDistance = (point, a, b) => Math.sqrt(distanceSquared(point, a, b))\n\nmodule.exports = pointLineDistance\n", "const cross = require('../../../maths/vec3/cross')\nconst normalize = require('../../../maths/vec3/normalize')\nconst subtract = require('../../../maths/vec3/subtract')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst planeNormal = (out, point1, point2, point3) => {\n  const tmp = [0, 0, 0]\n  subtract(out, point1, point2)\n  subtract(tmp, point2, point3)\n  cross(out, out, tmp)\n  return normalize(out, out)\n}\n\nmodule.exports = planeNormal\n", "/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass VertexList {\n  constructor () {\n    this.head = null\n    this.tail = null\n  }\n\n  clear () {\n    this.head = this.tail = null\n  }\n\n  /**\n   * Inserts a `node` before `target`, it's assumed that\n   * `target` belongs to this doubly linked list\n   *\n   * @param {*} target\n   * @param {*} node\n   */\n  insertBefore (target, node) {\n    node.prev = target.prev\n    node.next = target\n    if (!node.prev) {\n      this.head = node\n    } else {\n      node.prev.next = node\n    }\n    target.prev = node\n  }\n\n  /**\n   * Inserts a `node` after `target`, it's assumed that\n   * `target` belongs to this doubly linked list\n   *\n   * @param {Vertex} target\n   * @param {Vertex} node\n   */\n  insertAfter (target, node) {\n    node.prev = target\n    node.next = target.next\n    if (!node.next) {\n      this.tail = node\n    } else {\n      node.next.prev = node\n    }\n    target.next = node\n  }\n\n  /**\n   * Appends a `node` to the end of this doubly linked list\n   * Note: `node.next` will be unlinked from `node`\n   * Note: if `node` is part of another linked list call `addAll` instead\n   *\n   * @param {*} node\n   */\n  add (node) {\n    if (!this.head) {\n      this.head = node\n    } else {\n      this.tail.next = node\n    }\n    node.prev = this.tail\n    // since node is the new end it doesn't have a next node\n    node.next = null\n    this.tail = node\n  }\n\n  /**\n   * Appends a chain of nodes where `node` is the head,\n   * the difference with `add` is that it correctly sets the position\n   * of the node list `tail` property\n   *\n   * @param {*} node\n   */\n  addAll (node) {\n    if (!this.head) {\n      this.head = node\n    } else {\n      this.tail.next = node\n    }\n    node.prev = this.tail\n\n    // find the end of the list\n    while (node.next) {\n      node = node.next\n    }\n    this.tail = node\n  }\n\n  /**\n   * Deletes a `node` from this linked list, it's assumed that `node` is a\n   * member of this linked list\n   *\n   * @param {*} node\n   */\n  remove (node) {\n    if (!node.prev) {\n      this.head = node.next\n    } else {\n      node.prev.next = node.next\n    }\n\n    if (!node.next) {\n      this.tail = node.prev\n    } else {\n      node.next.prev = node.prev\n    }\n  }\n\n  /**\n   * Removes a chain of nodes whose head is `a` and whose tail is `b`,\n   * it's assumed that `a` and `b` belong to this list and also that `a`\n   * comes before `b` in the linked list\n   *\n   * @param {*} a\n   * @param {*} b\n   */\n  removeChain (a, b) {\n    if (!a.prev) {\n      this.head = b.next\n    } else {\n      a.prev.next = b.next\n    }\n\n    if (!b.next) {\n      this.tail = a.prev\n    } else {\n      b.next.prev = a.prev\n    }\n  }\n\n  first () {\n    return this.head\n  }\n\n  isEmpty () {\n    return !this.head\n  }\n}\n\nmodule.exports = VertexList\n", "/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass Vertex {\n  constructor (point, index) {\n    this.point = point\n    // index in the input array\n    this.index = index\n    // vertex is a double linked list node\n    this.next = null\n    this.prev = null\n    // the face that is able to see this point\n    this.face = null\n  }\n}\n\nmodule.exports = Vertex\n", "const distance = require('../../../maths/vec3/distance')\nconst squaredDistance = require('../../../maths/vec3/squaredDistance')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass HalfEdge {\n  constructor (vertex, face) {\n    this.vertex = vertex\n    this.face = face\n    this.next = null\n    this.prev = null\n    this.opposite = null\n  }\n\n  head () {\n    return this.vertex\n  }\n\n  tail () {\n    return this.prev\n      ? this.prev.vertex\n      : null\n  }\n\n  length () {\n    if (this.tail()) {\n      return distance(\n        this.tail().point,\n        this.head().point\n      )\n    }\n    return -1\n  }\n\n  lengthSquared () {\n    if (this.tail()) {\n      return squaredDistance(\n        this.tail().point,\n        this.head().point\n      )\n    }\n    return -1\n  }\n\n  setOpposite (edge) {\n    this.opposite = edge\n    edge.opposite = this\n  }\n}\n\nmodule.exports = HalfEdge\n", "const add = require('../../../maths/vec3/add')\nconst copy = require('../../../maths/vec3/copy')\nconst cross = require('../../../maths/vec3/cross')\nconst dot = require('../../../maths/vec3/dot')\nconst length = require('../../../maths/vec3/length')\nconst normalize = require('../../../maths/vec3/normalize')\nconst scale = require('../../../maths/vec3/scale')\nconst subtract = require('../../../maths/vec3/subtract')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst HalfEdge = require('./HalfEdge')\n\nconst VISIBLE = 0\nconst NON_CONVEX = 1\nconst DELETED = 2\n\nclass Face {\n  constructor () {\n    this.normal = []\n    this.centroid = []\n    // signed distance from face to the origin\n    this.offset = 0\n    // pointer to the a vertex in a double linked list this face can see\n    this.outside = null\n    this.mark = VISIBLE\n    this.edge = null\n    this.nVertices = 0\n  }\n\n  getEdge (i) {\n    if (typeof i !== 'number') {\n      throw Error('requires a number')\n    }\n    let it = this.edge\n    while (i > 0) {\n      it = it.next\n      i -= 1\n    }\n    while (i < 0) {\n      it = it.prev\n      i += 1\n    }\n    return it\n  }\n\n  computeNormal () {\n    const e0 = this.edge\n    const e1 = e0.next\n    let e2 = e1.next\n    const v2 = subtract([], e1.head().point, e0.head().point)\n    const t = []\n    const v1 = []\n\n    this.nVertices = 2\n    this.normal = [0, 0, 0]\n    while (e2 !== e0) {\n      copy(v1, v2)\n      subtract(v2, e2.head().point, e0.head().point)\n      add(this.normal, this.normal, cross(t, v1, v2))\n      e2 = e2.next\n      this.nVertices += 1\n    }\n    this.area = length(this.normal)\n    // normalize the vector, since we've already calculated the area\n    // it's cheaper to scale the vector using this quantity instead of\n    // doing the same operation again\n    this.normal = scale(this.normal, this.normal, 1 / this.area)\n  }\n\n  computeNormalMinArea (minArea) {\n    this.computeNormal()\n    if (this.area < minArea) {\n      // compute the normal without the longest edge\n      let maxEdge\n      let maxSquaredLength = 0\n      let edge = this.edge\n\n      // find the longest edge (in length) in the chain of edges\n      do {\n        const lengthSquared = edge.lengthSquared()\n        if (lengthSquared > maxSquaredLength) {\n          maxEdge = edge\n          maxSquaredLength = lengthSquared\n        }\n        edge = edge.next\n      } while (edge !== this.edge)\n\n      const p1 = maxEdge.tail().point\n      const p2 = maxEdge.head().point\n      const maxVector = subtract([], p2, p1)\n      const maxLength = Math.sqrt(maxSquaredLength)\n      // maxVector is normalized after this operation\n      scale(maxVector, maxVector, 1 / maxLength)\n      // compute the projection of maxVector over this face normal\n      const maxProjection = dot(this.normal, maxVector)\n      // subtract the quantity maxEdge adds on the normal\n      scale(maxVector, maxVector, -maxProjection)\n      add(this.normal, this.normal, maxVector)\n      // renormalize `this.normal`\n      normalize(this.normal, this.normal)\n    }\n  }\n\n  computeCentroid () {\n    this.centroid = [0, 0, 0]\n    let edge = this.edge\n    do {\n      add(this.centroid, this.centroid, edge.head().point)\n      edge = edge.next\n    } while (edge !== this.edge)\n    scale(this.centroid, this.centroid, 1 / this.nVertices)\n  }\n\n  computeNormalAndCentroid (minArea) {\n    if (typeof minArea !== 'undefined') {\n      this.computeNormalMinArea(minArea)\n    } else {\n      this.computeNormal()\n    }\n    this.computeCentroid()\n    this.offset = dot(this.normal, this.centroid)\n  }\n\n  distanceToPlane (point) {\n    return dot(this.normal, point) - this.offset\n  }\n\n  /**\n   * @private\n   *\n   * Connects two edges assuming that prev.head().point === next.tail().point\n   *\n   * @param {HalfEdge} prev\n   * @param {HalfEdge} next\n   */\n  connectHalfEdges (prev, next) {\n    let discardedFace\n    if (prev.opposite.face === next.opposite.face) {\n      // `prev` is remove a redundant edge\n      const oppositeFace = next.opposite.face\n      let oppositeEdge\n      if (prev === this.edge) {\n        this.edge = next\n      }\n      if (oppositeFace.nVertices === 3) {\n        // case:\n        // remove the face on the right\n        //\n        //       /|\\\n        //      / | \\ the face on the right\n        //     /  |  \\ --> opposite edge\n        //    / a |   \\\n        //   *----*----*\n        //  /     b  |  \\\n        //           ▾\n        //      redundant edge\n        //\n        // Note: the opposite edge is actually in the face to the right\n        // of the face to be destroyed\n        oppositeEdge = next.opposite.prev.opposite\n        oppositeFace.mark = DELETED\n        discardedFace = oppositeFace\n      } else {\n        // case:\n        //          t\n        //        *----\n        //       /| <- right face's redundant edge\n        //      / | opposite edge\n        //     /  |  ▴   /\n        //    / a |  |  /\n        //   *----*----*\n        //  /     b  |  \\\n        //           ▾\n        //      redundant edge\n        oppositeEdge = next.opposite.next\n        // make sure that the link `oppositeFace.edge` points correctly even\n        // after the right face redundant edge is removed\n        if (oppositeFace.edge === oppositeEdge.prev) {\n          oppositeFace.edge = oppositeEdge\n        }\n\n        //       /|   /\n        //      / | t/opposite edge\n        //     /  | / ▴  /\n        //    / a |/  | /\n        //   *----*----*\n        //  /     b     \\\n        oppositeEdge.prev = oppositeEdge.prev.prev\n        oppositeEdge.prev.next = oppositeEdge\n      }\n      //       /|\n      //      / |\n      //     /  |\n      //    / a |\n      //   *----*----*\n      //  /     b  ▴  \\\n      //           |\n      //     redundant edge\n      next.prev = prev.prev\n      next.prev.next = next\n\n      //       / \\  \\\n      //      /   \\->\\\n      //     /     \\<-\\ opposite edge\n      //    / a     \\  \\\n      //   *----*----*\n      //  /     b  ^  \\\n      next.setOpposite(oppositeEdge)\n\n      oppositeFace.computeNormalAndCentroid()\n    } else {\n      // trivial case\n      //        *\n      //       /|\\\n      //      / | \\\n      //     /  |--> next\n      //    / a |   \\\n      //   *----*----*\n      //    \\ b |   /\n      //     \\  |--> prev\n      //      \\ | /\n      //       \\|/\n      //        *\n      prev.next = next\n      next.prev = prev\n    }\n    return discardedFace\n  }\n\n  mergeAdjacentFaces (adjacentEdge, discardedFaces) {\n    const oppositeEdge = adjacentEdge.opposite\n    const oppositeFace = oppositeEdge.face\n\n    discardedFaces.push(oppositeFace)\n    oppositeFace.mark = DELETED\n\n    // find the chain of edges whose opposite face is `oppositeFace`\n    //\n    //                ===>\n    //      \\         face         /\n    //       * ---- * ---- * ---- *\n    //      /     opposite face    \\\n    //                <===\n    //\n    let adjacentEdgePrev = adjacentEdge.prev\n    let adjacentEdgeNext = adjacentEdge.next\n    let oppositeEdgePrev = oppositeEdge.prev\n    let oppositeEdgeNext = oppositeEdge.next\n\n    // left edge\n    while (adjacentEdgePrev.opposite.face === oppositeFace) {\n      adjacentEdgePrev = adjacentEdgePrev.prev\n      oppositeEdgeNext = oppositeEdgeNext.next\n    }\n    // right edge\n    while (adjacentEdgeNext.opposite.face === oppositeFace) {\n      adjacentEdgeNext = adjacentEdgeNext.next\n      oppositeEdgePrev = oppositeEdgePrev.prev\n    }\n    // adjacentEdgePrev  \\         face         / adjacentEdgeNext\n    //                    * ---- * ---- * ---- *\n    // oppositeEdgeNext  /     opposite face    \\ oppositeEdgePrev\n\n    // fix the face reference of all the opposite edges that are not part of\n    // the edges whose opposite face is not `face` i.e. all the edges that\n    // `face` and `oppositeFace` do not have in common\n    let edge\n    for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {\n      edge.face = this\n    }\n\n    // make sure that `face.edge` is not one of the edges to be destroyed\n    // Note: it's important for it to be a `next` edge since `prev` edges\n    // might be destroyed on `connectHalfEdges`\n    this.edge = adjacentEdgeNext\n\n    // connect the extremes\n    // Note: it might be possible that after connecting the edges a triangular\n    // face might be redundant\n    let discardedFace\n    discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext)\n    if (discardedFace) {\n      discardedFaces.push(discardedFace)\n    }\n    discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext)\n    if (discardedFace) {\n      discardedFaces.push(discardedFace)\n    }\n\n    this.computeNormalAndCentroid()\n    // TODO: additional consistency checks\n    return discardedFaces\n  }\n\n  collectIndices () {\n    const indices = []\n    let edge = this.edge\n    do {\n      indices.push(edge.head().index)\n      edge = edge.next\n    } while (edge !== this.edge)\n    return indices\n  }\n\n  static createTriangle (v0, v1, v2, minArea = 0) {\n    const face = new Face()\n    const e0 = new HalfEdge(v0, face)\n    const e1 = new HalfEdge(v1, face)\n    const e2 = new HalfEdge(v2, face)\n\n    // join edges\n    e0.next = e2.prev = e1\n    e1.next = e0.prev = e2\n    e2.next = e1.prev = e0\n\n    // main half edge reference\n    face.edge = e0\n    face.computeNormalAndCentroid(minArea)\n    return face\n  }\n}\n\nmodule.exports = {\n  VISIBLE,\n  NON_CONVEX,\n  DELETED,\n  Face\n}\n", "const dot = require('../../../maths/vec3/dot')\n\nconst pointLineDistance = require('./point-line-distance')\nconst getPlaneNormal = require('./get-plane-normal')\n\nconst VertexList = require('./VertexList')\nconst Vertex = require('./Vertex')\nconst { Face, VISIBLE, NON_CONVEX, DELETED } = require('./Face')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\n// merge types\n// non convex with respect to the large face\nconst MERGE_NON_CONVEX_WRT_LARGER_FACE = 1\nconst MERGE_NON_CONVEX = 2\n\nclass QuickHull {\n  constructor (points) {\n    if (!Array.isArray(points)) {\n      throw TypeError('input is not a valid array')\n    }\n    if (points.length < 4) {\n      throw Error('cannot build a simplex out of <4 points')\n    }\n\n    this.tolerance = -1\n\n    // buffers\n    this.nFaces = 0\n    this.nPoints = points.length\n\n    this.faces = []\n    this.newFaces = []\n    // helpers\n    //\n    // let `a`, `b` be `Face` instances\n    // let `v` be points wrapped as instance of `Vertex`\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n    this.claimed = new VertexList()\n    this.unclaimed = new VertexList()\n\n    // vertices of the hull(internal representation of points)\n    this.vertices = []\n    for (let i = 0; i < points.length; i += 1) {\n      this.vertices.push(new Vertex(points[i], i))\n    }\n    this.discardedFaces = []\n    this.vertexPointIndices = []\n  }\n\n  addVertexToFace (vertex, face) {\n    vertex.face = face\n    if (!face.outside) {\n      this.claimed.add(vertex)\n    } else {\n      this.claimed.insertBefore(face.outside, vertex)\n    }\n    face.outside = vertex\n  }\n\n  /**\n   * Removes `vertex` for the `claimed` list of vertices, it also makes sure\n   * that the link from `face` to the first vertex it sees in `claimed` is\n   * linked correctly after the removal\n   *\n   * @param {Vertex} vertex\n   * @param {Face} face\n   */\n  removeVertexFromFace (vertex, face) {\n    if (vertex === face.outside) {\n      // fix face.outside link\n      if (vertex.next && vertex.next.face === face) {\n        // face has at least 2 outside vertices, move the `outside` reference\n        face.outside = vertex.next\n      } else {\n        // vertex was the only outside vertex that face had\n        face.outside = null\n      }\n    }\n    this.claimed.remove(vertex)\n  }\n\n  /**\n   * Removes all the visible vertices that `face` is able to see which are\n   * stored in the `claimed` vertext list\n   *\n   * @param {Face} face\n   * @return {Vertex|undefined} If face had visible vertices returns\n   * `face.outside`, otherwise undefined\n   */\n  removeAllVerticesFromFace (face) {\n    if (face.outside) {\n      // pointer to the last vertex of this face\n      // [..., outside, ..., end, outside, ...]\n      //          |           |      |\n      //          a           a      b\n      let end = face.outside\n      while (end.next && end.next.face === face) {\n        end = end.next\n      }\n      this.claimed.removeChain(face.outside, end)\n      //                            b\n      //                       [ outside, ...]\n      //                            |  removes this link\n      //     [ outside, ..., end ] -┘\n      //          |           |\n      //          a           a\n      end.next = null\n      return face.outside\n    }\n  }\n\n  /**\n   * Removes all the visible vertices that `face` is able to see, additionally\n   * checking the following:\n   *\n   * If `absorbingFace` doesn't exist then all the removed vertices will be\n   * added to the `unclaimed` vertex list\n   *\n   * If `absorbingFace` exists then this method will assign all the vertices of\n   * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`\n   * it's added to the `unclaimed` vertex list\n   *\n   * @param {Face} face\n   * @param {Face} [absorbingFace]\n   */\n  deleteFaceVertices (face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face)\n    if (faceVertices) {\n      if (!absorbingFace) {\n        // mark the vertices to be reassigned to some other face\n        this.unclaimed.addAll(faceVertices)\n      } else {\n        // if there's an absorbing face try to assign as many vertices\n        // as possible to it\n\n        // the reference `vertex.next` might be destroyed on\n        // `this.addVertexToFace` (see VertexList#add), nextVertex is a\n        // reference to it\n        let nextVertex\n        for (let vertex = faceVertices; vertex; vertex = nextVertex) {\n          nextVertex = vertex.next\n          const distance = absorbingFace.distanceToPlane(vertex.point)\n\n          // check if `vertex` is able to see `absorbingFace`\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace)\n          } else {\n            this.unclaimed.add(vertex)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Reassigns as many vertices as possible from the unclaimed list to the new\n   * faces\n   *\n   * @param {Faces[]} newFaces\n   */\n  resolveUnclaimedPoints (newFaces) {\n    // cache next vertex so that if `vertex.next` is destroyed it's still\n    // recoverable\n    let vertexNext = this.unclaimed.first()\n    for (let vertex = vertexNext; vertex; vertex = vertexNext) {\n      vertexNext = vertex.next\n      let maxDistance = this.tolerance\n      let maxFace\n      for (let i = 0; i < newFaces.length; i += 1) {\n        const face = newFaces[i]\n        if (face.mark === VISIBLE) {\n          const dist = face.distanceToPlane(vertex.point)\n          if (dist > maxDistance) {\n            maxDistance = dist\n            maxFace = face\n          }\n          if (maxDistance > 1000 * this.tolerance) {\n            break\n          }\n        }\n      }\n\n      if (maxFace) {\n        this.addVertexToFace(vertex, maxFace)\n      }\n    }\n  }\n\n  /**\n   * Computes the extremes of a tetrahedron which will be the initial hull\n   *\n   * @return {number[]} The min/max vertices in the x,y,z directions\n   */\n  computeExtremes () {\n    const min = []\n    const max = []\n\n    // min vertex on the x,y,z directions\n    const minVertices = []\n    // max vertex on the x,y,z directions\n    const maxVertices = []\n\n    let i, j\n\n    // initially assume that the first vertex is the min/max\n    for (i = 0; i < 3; i += 1) {\n      minVertices[i] = maxVertices[i] = this.vertices[0]\n    }\n    // copy the coordinates of the first vertex to min/max\n    for (i = 0; i < 3; i += 1) {\n      min[i] = max[i] = this.vertices[0].point[i]\n    }\n\n    // compute the min/max vertex on all 6 directions\n    for (i = 1; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      const point = vertex.point\n      // update the min coordinates\n      for (j = 0; j < 3; j += 1) {\n        if (point[j] < min[j]) {\n          min[j] = point[j]\n          minVertices[j] = vertex\n        }\n      }\n      // update the max coordinates\n      for (j = 0; j < 3; j += 1) {\n        if (point[j] > max[j]) {\n          max[j] = point[j]\n          maxVertices[j] = vertex\n        }\n      }\n    }\n\n    // compute epsilon\n    this.tolerance = 3 * Number.EPSILON * (\n      Math.max(Math.abs(min[0]), Math.abs(max[0])) +\n      Math.max(Math.abs(min[1]), Math.abs(max[1])) +\n      Math.max(Math.abs(min[2]), Math.abs(max[2]))\n    )\n    return [minVertices, maxVertices]\n  }\n\n  /**\n   * Compues the initial tetrahedron assigning to its faces all the points that\n   * are candidates to form part of the hull\n   */\n  createInitialSimplex () {\n    const vertices = this.vertices\n    const [min, max] = this.computeExtremes()\n    let v2, v3\n    let i, j\n\n    // Find the two vertices with the greatest 1d separation\n    // (max.x - min.x)\n    // (max.y - min.y)\n    // (max.z - min.z)\n    let maxDistance = 0\n    let indexMax = 0\n    for (i = 0; i < 3; i += 1) {\n      const distance = max[i].point[i] - min[i].point[i]\n      if (distance > maxDistance) {\n        maxDistance = distance\n        indexMax = i\n      }\n    }\n    const v0 = min[indexMax]\n    const v1 = max[indexMax]\n\n    // the next vertex is the one farthest to the line formed by `v0` and `v1`\n    maxDistance = 0\n    for (i = 0; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      if (vertex !== v0 && vertex !== v1) {\n        const distance = pointLineDistance(\n          vertex.point, v0.point, v1.point\n        )\n        if (distance > maxDistance) {\n          maxDistance = distance\n          v2 = vertex\n        }\n      }\n    }\n\n    // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`\n    // normalize((v2 - v1) x (v0 - v1))\n    const normal = getPlaneNormal([], v0.point, v1.point, v2.point)\n    // distance from the origin to the plane\n    const distPO = dot(v0.point, normal)\n    maxDistance = -1\n    for (i = 0; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(dot(normal, vertex.point) - distPO)\n        if (distance > maxDistance) {\n          maxDistance = distance\n          v3 = vertex\n        }\n      }\n    }\n\n    // initial simplex\n    // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron\n    //\n    //                              v2\n    //                             ,|,\n    //                           ,7``\\'VA,\n    //                         ,7`   |, `'VA,\n    //                       ,7`     `\\    `'VA,\n    //                     ,7`        |,      `'VA,\n    //                   ,7`          `\\         `'VA,\n    //                 ,7`             |,           `'VA,\n    //               ,7`               `\\       ,..ooOOTK` v3\n    //             ,7`                  |,.ooOOT''`    AV\n    //           ,7`            ,..ooOOT`\\`           /7\n    //         ,7`      ,..ooOOT''`      |,          AV\n    //        ,T,..ooOOT''`              `\\         /7\n    //     v0 `'TTs.,                     |,       AV\n    //            `'TTs.,                 `\\      /7\n    //                 `'TTs.,             |,    AV\n    //                      `'TTs.,        `\\   /7\n    //                           `'TTs.,    |, AV\n    //                                `'TTs.,\\/7\n    //                                     `'T`\n    //                                       v1\n    //\n    const faces = []\n    if (dot(v3.point, normal) - distPO < 0) {\n      // the face is not able to see the point so `planeNormal`\n      // is pointing outside the tetrahedron\n      faces.push(\n        Face.createTriangle(v0, v1, v2),\n        Face.createTriangle(v3, v1, v0),\n        Face.createTriangle(v3, v2, v1),\n        Face.createTriangle(v3, v0, v2)\n      )\n\n      // set the opposite edge\n      for (i = 0; i < 3; i += 1) {\n        const j = (i + 1) % 3\n        // join face[i] i > 0, with the first face\n        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(j))\n        // join face[i] with face[i + 1], 1 <= i <= 3\n        faces[i + 1].getEdge(1).setOpposite(faces[j + 1].getEdge(0))\n      }\n    } else {\n      // the face is able to see the point so `planeNormal`\n      // is pointing inside the tetrahedron\n      faces.push(\n        Face.createTriangle(v0, v2, v1),\n        Face.createTriangle(v3, v0, v1),\n        Face.createTriangle(v3, v1, v2),\n        Face.createTriangle(v3, v2, v0)\n      )\n\n      // set the opposite edge\n      for (i = 0; i < 3; i += 1) {\n        const j = (i + 1) % 3\n        // join face[i] i > 0, with the first face\n        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3))\n        // join face[i] with face[i + 1]\n        faces[i + 1].getEdge(0).setOpposite(faces[j + 1].getEdge(1))\n      }\n    }\n\n    // the initial hull is the tetrahedron\n    for (i = 0; i < 4; i += 1) {\n      this.faces.push(faces[i])\n    }\n\n    // initial assignment of vertices to the faces of the tetrahedron\n    for (i = 0; i < vertices.length; i += 1) {\n      const vertex = vertices[i]\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance\n        let maxFace\n        for (j = 0; j < 4; j += 1) {\n          const distance = faces[j].distanceToPlane(vertex.point)\n          if (distance > maxDistance) {\n            maxDistance = distance\n            maxFace = faces[j]\n          }\n        }\n\n        if (maxFace) {\n          this.addVertexToFace(vertex, maxFace)\n        }\n      }\n    }\n  }\n\n  reindexFaceAndVertices () {\n    // remove inactive faces\n    const activeFaces = []\n    for (let i = 0; i < this.faces.length; i += 1) {\n      const face = this.faces[i]\n      if (face.mark === VISIBLE) {\n        activeFaces.push(face)\n      }\n    }\n    this.faces = activeFaces\n  }\n\n  collectFaces (skipTriangulation) {\n    const faceIndices = []\n    for (let i = 0; i < this.faces.length; i += 1) {\n      if (this.faces[i].mark !== VISIBLE) {\n        throw Error('attempt to include a destroyed face in the hull')\n      }\n      const indices = this.faces[i].collectIndices()\n      if (skipTriangulation) {\n        faceIndices.push(indices)\n      } else {\n        for (let j = 0; j < indices.length - 2; j += 1) {\n          faceIndices.push(\n            [indices[0], indices[j + 1], indices[j + 2]]\n          )\n        }\n      }\n    }\n    return faceIndices\n  }\n\n  /**\n   * Finds the next vertex to make faces with the current hull\n   *\n   * - let `face` be the first face existing in the `claimed` vertex list\n   *  - if `face` doesn't exist then return since there're no vertices left\n   *  - otherwise for each `vertex` that face sees find the one furthest away\n   *  from `face`\n   *\n   * @return {Vertex|undefined} Returns undefined when there're no more\n   * visible vertices\n   */\n  nextVertexToAdd () {\n    if (!this.claimed.isEmpty()) {\n      let eyeVertex, vertex\n      let maxDistance = 0\n      const eyeFace = this.claimed.first().face\n      for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {\n        const distance = eyeFace.distanceToPlane(vertex.point)\n        if (distance > maxDistance) {\n          maxDistance = distance\n          eyeVertex = vertex\n        }\n      }\n      return eyeVertex\n    }\n  }\n\n  /**\n   * Computes a chain of half edges in ccw order called the `horizon`, for an\n   * edge to be part of the horizon it must join a face that can see\n   * `eyePoint` and a face that cannot see `eyePoint`\n   *\n   * @param {number[]} eyePoint - The coordinates of a point\n   * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`\n   * @param {Face} face - The current face being tested\n   * @param {HalfEdge[]} horizon - The edges that form part of the horizon in\n   * ccw order\n   */\n  computeHorizon (eyePoint, crossEdge, face, horizon) {\n    // moves face's vertices to the `unclaimed` vertex list\n    this.deleteFaceVertices(face)\n\n    face.mark = DELETED\n\n    let edge\n    if (!crossEdge) {\n      edge = crossEdge = face.getEdge(0)\n    } else {\n      // start from the next edge since `crossEdge` was already analyzed\n      // (actually `crossEdge.opposite` was the face who called this method\n      // recursively)\n      edge = crossEdge.next\n    }\n\n    // All the faces that are able to see `eyeVertex` are defined as follows\n    //\n    //       v    /\n    //           / <== visible face\n    //          /\n    //         |\n    //         | <== not visible face\n    //\n    //  dot(v, visible face normal) - visible face offset > this.tolerance\n    //\n    do {\n      const oppositeEdge = edge.opposite\n      const oppositeFace = oppositeEdge.face\n      if (oppositeFace.mark === VISIBLE) {\n        if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {\n          this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon)\n        } else {\n          horizon.push(edge)\n        }\n      }\n      edge = edge.next\n    } while (edge !== crossEdge)\n  }\n\n  /**\n   * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and\n   * `horizonEdge.tail` in ccw order\n   *\n   * @param {Vertex} eyeVertex\n   * @param {HalfEdge} horizonEdge\n   * @return {HalfEdge} The half edge whose vertex is the eyeVertex\n   */\n  addAdjoiningFace (eyeVertex, horizonEdge) {\n    // all the half edges are created in ccw order thus the face is always\n    // pointing outside the hull\n    // edges:\n    //\n    //                  eyeVertex.point\n    //                       / \\\n    //                      /   \\\n    //                  1  /     \\  0\n    //                    /       \\\n    //                   /         \\\n    //                  /           \\\n    //          horizon.tail --- horizon.head\n    //                        2\n    //\n    const face = Face.createTriangle(\n      eyeVertex,\n      horizonEdge.tail(),\n      horizonEdge.head()\n    )\n    this.faces.push(face)\n    // join face.getEdge(-1) with the horizon's opposite edge\n    // face.getEdge(-1) = face.getEdge(2)\n    face.getEdge(-1).setOpposite(horizonEdge.opposite)\n    return face.getEdge(0)\n  }\n\n  /**\n   * Adds horizon.length faces to the hull, each face will be 'linked' with the\n   * horizon opposite face and the face on the left/right\n   *\n   * @param {Vertex} eyeVertex\n   * @param {HalfEdge[]} horizon - A chain of half edges in ccw order\n   */\n  addNewFaces (eyeVertex, horizon) {\n    this.newFaces = []\n    let firstSideEdge, previousSideEdge\n    for (let i = 0; i < horizon.length; i += 1) {\n      const horizonEdge = horizon[i]\n      // returns the right side edge\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge)\n      if (!firstSideEdge) {\n        firstSideEdge = sideEdge\n      } else {\n        // joins face.getEdge(1) with previousFace.getEdge(0)\n        sideEdge.next.setOpposite(previousSideEdge)\n      }\n      this.newFaces.push(sideEdge.face)\n      previousSideEdge = sideEdge\n    }\n    firstSideEdge.next.setOpposite(previousSideEdge)\n  }\n\n  /**\n   * Computes the distance from `edge` opposite face's centroid to\n   * `edge.face`\n   *\n   * @param {HalfEdge} edge\n   * @return {number}\n   * - A positive number when the centroid of the opposite face is above the\n   *   face i.e. when the faces are concave\n   * - A negative number when the centroid of the opposite face is below the\n   *   face i.e. when the faces are convex\n   */\n  oppositeFaceDistance (edge) {\n    return edge.face.distanceToPlane(edge.opposite.face.centroid)\n  }\n\n  /**\n   * Merges a face with none/any/all its neighbors according to the strategy\n   * used\n   *\n   * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be\n   * decided based on the face with the larger area, the centroid of the face\n   * with the smaller area will be checked against the one with the larger area\n   * to see if it's in the merge range [tolerance, -tolerance] i.e.\n   *\n   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n   *\n   * Note that the first check (with +tolerance) was done on `computeHorizon`\n   *\n   * If the above is not true then the check is done with respect to the smaller\n   * face i.e.\n   *\n   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n   *\n   * If true then it means that two faces are non convex (concave), even if the\n   * dot(...) - offset value is > 0 (that's the point of doing the merge in the\n   * first place)\n   *\n   * If two faces are concave then the check must also be done on the other face\n   * but this is done in another merge pass, for this to happen the face is\n   * marked in a temporal NON_CONVEX state\n   *\n   * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if\n   * they pass the following conditions\n   *\n   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n   *\n   * @param {Face} face\n   * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or\n   * MERGE_NON_CONVEX\n   */\n  doAdjacentMerge (face, mergeType) {\n    let edge = face.edge\n    let convex = true\n    let it = 0\n    do {\n      if (it >= face.nVertices) {\n        throw Error('merge recursion limit exceeded')\n      }\n      const oppositeFace = edge.opposite.face\n      let merge = false\n\n      // Important notes about the algorithm to merge faces\n      //\n      // - Given a vertex `eyeVertex` that will be added to the hull\n      //   all the faces that cannot see `eyeVertex` are defined as follows\n      //\n      //      dot(v, not visible face normal) - not visible offset < tolerance\n      //\n      // - Two faces can be merged when the centroid of one of these faces\n      // projected to the normal of the other face minus the other face offset\n      // is in the range [tolerance, -tolerance]\n      // - Since `face` (given in the input for this method) has passed the\n      // check above we only have to check the lower bound e.g.\n      //\n      //      dot(v, not visible face normal) - not visible offset > -tolerance\n      //\n      if (mergeType === MERGE_NON_CONVEX) {\n        if (this.oppositeFaceDistance(edge) > -this.tolerance ||\n            this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n          merge = true\n        }\n      } else {\n        if (face.area > oppositeFace.area) {\n          if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n            merge = true\n          } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            convex = false\n          }\n        } else {\n          if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            merge = true\n          } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n            convex = false\n          }\n        }\n      }\n\n      if (merge) {\n        // when two faces are merged it might be possible that redundant faces\n        // are destroyed, in that case move all the visible vertices from the\n        // destroyed faces to the `unclaimed` vertex list\n        const discardedFaces = face.mergeAdjacentFaces(edge, [])\n        for (let i = 0; i < discardedFaces.length; i += 1) {\n          this.deleteFaceVertices(discardedFaces[i], face)\n        }\n        return true\n      }\n\n      edge = edge.next\n      it += 1\n    } while (edge !== face.edge)\n    if (!convex) {\n      face.mark = NON_CONVEX\n    }\n    return false\n  }\n\n  /**\n   * Adds a vertex to the hull with the following algorithm\n   *\n   * - Compute the `horizon` which is a chain of half edges, for an edge to\n   *   belong to this group it must be the edge connecting a face that can\n   *   see `eyeVertex` and a face which cannot see `eyeVertex`\n   * - All the faces that can see `eyeVertex` have its visible vertices removed\n   *   from the claimed VertexList\n   * - A new set of faces is created with each edge of the `horizon` and\n   *   `eyeVertex`, each face is connected with the opposite horizon face and\n   *   the face on the left/right\n   * - The new faces are merged if possible with the opposite horizon face first\n   *   and then the faces on the right/left\n   * - The vertices removed from all the visible faces are assigned to the new\n   *   faces if possible\n   *\n   * @param {Vertex} eyeVertex\n   */\n  addVertexToHull (eyeVertex) {\n    const horizon = []\n\n    this.unclaimed.clear()\n\n    // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the\n    // `unclaimed` vertex list\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face)\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon)\n    this.addNewFaces(eyeVertex, horizon)\n\n    // first merge pass\n    // Do the merge with respect to the larger face\n    for (let i = 0; i < this.newFaces.length; i += 1) {\n      const face = this.newFaces[i]\n      if (face.mark === VISIBLE) {\n        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {} // eslint-disable-line no-empty\n      }\n    }\n\n    // second merge pass\n    // Do the merge on non convex faces (a face is marked as non convex in the\n    // first pass)\n    for (let i = 0; i < this.newFaces.length; i += 1) {\n      const face = this.newFaces[i]\n      if (face.mark === NON_CONVEX) {\n        face.mark = VISIBLE\n        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX)) {} // eslint-disable-line no-empty\n      }\n    }\n\n    // reassign `unclaimed` vertices to the new faces\n    this.resolveUnclaimedPoints(this.newFaces)\n  }\n\n  build () {\n    let eyeVertex\n    this.createInitialSimplex()\n    while ((eyeVertex = this.nextVertexToAdd())) {\n      this.addVertexToHull(eyeVertex)\n    }\n    this.reindexFaceAndVertices()\n  }\n}\n\nmodule.exports = QuickHull\n", "const QuickHull = require('./QuickHull')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst runner = (points, options = {}) => {\n  const instance = new QuickHull(points)\n  instance.build()\n  return instance.collectFaces(options.skipTriangulation)\n}\n\nmodule.exports = runner\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst quickhull = require('./quickhull')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geometries (geom3).\n * @param {...geometries} geometries - list of geom3 geometries\n * @returns {geom3} new geometry\n */\nconst hullGeom3 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  if (geometries.length === 1) return geometries[0]\n\n  // extract the unique vertices from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const faces = quickhull(unique, { skipTriangulation: true })\n\n  const polygons = faces.map((face) => {\n    const vertices = face.map((index) => unique[index])\n    return poly3.create(vertices)\n  })\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = hullGeom3\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst hullPath2 = require('./hullPath2')\nconst hullGeom2 = require('./hullGeom2')\nconst hullGeom3 = require('./hullGeom3')\n\n/**\n * Create a convex hull of the given geometries.\n * The given geometries should be of the same type, either geom2 or geom3 or path2.\n * @param {...Objects} geometries - list of geometries from which to create a hull\n * @returns {geom2|geom3} new geometry\n * @alias module:modeling/hulls.hull\n *\n * @example\n * let myshape = hull(rectangle({center: [-5,-5]}), ellipse({center: [5,5]}))\n *\n * @example\n * +-------+           +-------+\n * |       |           |        \\\n * |   A   |           |         \\\n * |       |           |          \\\n * +-------+           +           \\\n *                  =   \\           \\\n *       +-------+       \\           +\n *       |       |        \\          |\n *       |   B   |         \\         |\n *       |       |          \\        |\n *       +-------+           +-------+\n */\nconst hull = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only hulls of the same type are supported')\n  }\n\n  const geometry = geometries[0]\n  if (path2.isA(geometry)) return hullPath2(geometries)\n  if (geom2.isA(geometry)) return hullGeom2(geometries)\n  if (geom3.isA(geometry)) return hullGeom3(geometries)\n\n  // FIXME should this throw an error for unknown geometries?\n  return geometry\n}\n\nmodule.exports = hull\n", "const flatten = require('../../utils/flatten')\n\nconst union = require('../booleans/union')\n\nconst hull = require('./hull')\n\n/**\n * Create a chain of hulled geometries from the given geometries.\n * Essentially hull A+B, B+C, C+D, etc., then union the results.\n * The given geometries should be of the same type, either geom2 or geom3 or path2.\n *\n * @param {...Objects} geometries - list of geometries from which to create a hull\n * @returns {geom2|geom3} new geometry\n * @alias module:modeling/hulls.hullChain\n *\n * @example\n * let newshape = hullChain(rectangle({center: [-5,-5]}), circle({center: [0,0]}), rectangle({center: [5,5]}))\n *\n * @example\n * +-------+   +-------+     +-------+   +------+\n * |       |   |       |     |        \\ /       |\n * |   A   |   |   C   |     |         |        |\n * |       |   |       |     |                  |\n * +-------+   +-------+     +                  +\n *                       =   \\                 /\n *       +-------+            \\               /\n *       |       |             \\             /\n *       |   B   |              \\           /\n *       |       |               \\         /\n *       +-------+                +-------+\n */\nconst hullChain = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length < 2) throw new Error('wrong number of arguments')\n\n  const hulls = []\n  for (let i = 1; i < geometries.length; i++) {\n    hulls.push(hull(geometries[i - 1], geometries[i]))\n  }\n  return union(hulls)\n}\n\nmodule.exports = hullChain\n", "/**\n * All shapes (primitives or the results of operations) can be passed to hull functions\n * to determine the convex hull of all points.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/hulls\n * @example\n * const { hull, hullChain } = require('@jscad/modeling').hulls\n */\nmodule.exports = {\n  hull: require('./hull'),\n  hullChain: require('./hullChain')\n}\n", "const vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\nconst isValidPoly3 = (epsilon, polygon) => {\n  const area = Math.abs(poly3.measureArea(polygon))\n  return (Number.isFinite(area) && area > epsilon)\n}\n\n/*\n * Snap the given list of polygons to the epsilon.\n */\nconst snapPolygons = (epsilon, polygons) => {\n  let newpolygons = polygons.map((polygon) => {\n    const snapvertices = polygon.vertices.map((vertice) => vec3.snap(vec3.create(), vertice, epsilon))\n    // only retain unique vertices\n    const newvertices = []\n    for (let i = 0; i < snapvertices.length; i++) {\n      const j = (i + 1) % snapvertices.length\n      if (!vec3.equals(snapvertices[i], snapvertices[j])) newvertices.push(snapvertices[i])\n    }\n    const newpolygon = poly3.create(newvertices)\n    if (polygon.color) newpolygon.color = polygon.color\n    return newpolygon\n  })\n  // snap can produce polygons with zero (0) area, remove those\n  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)\n  newpolygons = newpolygons.filter((polygon) => isValidPoly3(epsilonArea, polygon))\n  return newpolygons\n}\n\nmodule.exports = snapPolygons\n", "const aboutEqualNormals = require('../../maths/utils/aboutEqualNormals')\nconst vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\n// create a set of edges from the given polygon, and link the edges as well\nconst createEdges = (polygon) => {\n  const points = poly3.toPoints(polygon)\n  const edges = []\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    const edge = {\n      v1: points[i],\n      v2: points[j]\n    }\n    edges.push(edge)\n  }\n  // link the edges together\n  for (let i = 0; i < edges.length; i++) {\n    const j = (i + 1) % points.length\n    edges[i].next = edges[j]\n    edges[j].prev = edges[i]\n  }\n  return edges\n}\n\nconst insertEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.set(key, edge)\n}\n\nconst deleteEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.delete(key)\n}\n\nconst findOppositeEdge = (edges, edge) => {\n  const key = `${edge.v2}:${edge.v1}` // NOTE: OPPOSITE OF INSERT KEY\n  return edges.get(key)\n}\n\n// calculate the two adjoining angles between the opposing edges\nconst calculateAnglesBetween = (current, opposite, normal) => {\n  let v0 = current.prev.v1\n  let v1 = current.prev.v2\n  let v2 = opposite.next.v2\n  const angle1 = calculateAngle(v0, v1, v2, normal)\n\n  v0 = opposite.prev.v1\n  v1 = opposite.prev.v2\n  v2 = current.next.v2\n  const angle2 = calculateAngle(v0, v1, v2, normal)\n\n  return [angle1, angle2]\n}\n\nconst v1 = vec3.create()\nconst v2 = vec3.create()\n\nconst calculateAngle = (prevpoint, point, nextpoint, normal) => {\n  const d0 = vec3.subtract(v1, point, prevpoint)\n  const d1 = vec3.subtract(v2, nextpoint, point)\n  vec3.cross(d0, d0, d1)\n  return vec3.dot(d0, normal)\n}\n\n// create a polygon starting from the given edge (if possible)\nconst createPolygonAnd = (edge) => {\n  let polygon\n  const points = []\n  while (edge.next) {\n    const next = edge.next\n\n    points.push(edge.v1)\n\n    edge.v1 = null\n    edge.v2 = null\n    edge.next = null\n    edge.prev = null\n\n    edge = next\n  }\n  if (points.length > 0) polygon = poly3.create(points)\n  return polygon\n}\n\n/*\n * Merge COPLANAR polygons that share common edges.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst mergeCoplanarPolygons = (sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const normal = sourcepolygons[0].plane\n  const polygons = sourcepolygons.slice()\n  const edgeList = new Map()\n\n  while (polygons.length > 0) { // NOTE: the length of polygons WILL change\n    const polygon = polygons.shift()\n    const edges = createEdges(polygon)\n    for (let i = 0; i < edges.length; i++) {\n      const current = edges[i]\n      const opposite = findOppositeEdge(edgeList, current)\n      if (opposite) {\n        const angles = calculateAnglesBetween(current, opposite, normal)\n        if (angles[0] >= 0 && angles[1] >= 0) {\n          const edge1 = opposite.next\n          const edge2 = current.next\n          // adjust the edges, linking together opposing polygons\n          current.prev.next = opposite.next\n          current.next.prev = opposite.prev\n\n          opposite.prev.next = current.next\n          opposite.next.prev = current.prev\n\n          // remove the opposing edges\n          current.v1 = null\n          current.v2 = null\n          current.next = null\n          current.prev = null\n\n          deleteEdge(edgeList, opposite)\n\n          opposite.v1 = null\n          opposite.v2 = null\n          opposite.next = null\n          opposite.prev = null\n\n          const mergeEdges = (list, e1, e2) => {\n            const newedge = {\n              v1: e2.v1,\n              v2: e1.v2,\n              next: e1.next,\n              prev: e2.prev\n            }\n            // link in newedge\n            e2.prev.next = newedge\n            e1.next.prev = newedge\n            // remove old edges\n            deleteEdge(list, e1)\n            e1.v1 = null\n            e1.v2 = null\n            e1.next = null\n            e1.prev = null\n\n            deleteEdge(list, e2)\n            e2.v1 = null\n            e2.v2 = null\n            e2.next = null\n            e2.prev = null\n          }\n\n          if (angles[0] === 0.0) {\n            mergeEdges(edgeList, edge1, edge1.prev)\n          }\n          if (angles[1] === 0.0) {\n            mergeEdges(edgeList, edge2, edge2.prev)\n          }\n        }\n      } else {\n        if (current.next) insertEdge(edgeList, current)\n      }\n    }\n  }\n\n  // build a set of polygons from the remaining edges\n  const destpolygons = []\n  edgeList.forEach((edge) => {\n    const polygon = createPolygonAnd(edge)\n    if (polygon) destpolygons.push(polygon)\n  })\n\n  edgeList.clear()\n\n  return destpolygons\n}\n\nconst coplanar = (plane1, plane2) => {\n  // expect the same distance from the origin, within tolerance\n  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {\n    return aboutEqualNormals(plane1, plane2)\n  }\n  return false\n}\n\nconst mergePolygons = (epsilon, polygons) => {\n  const polygonsPerPlane = [] // elements: [plane, [poly3...]]\n  polygons.forEach((polygon) => {\n    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))\n    if (mapping) {\n      const polygons = mapping[1]\n      polygons.push(polygon)\n    } else {\n      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])\n    }\n  })\n\n  let destpolygons = []\n  polygonsPerPlane.forEach((mapping) => {\n    const sourcepolygons = mapping[1]\n    const retesselayedpolygons = mergeCoplanarPolygons(sourcepolygons)\n    destpolygons = destpolygons.concat(retesselayedpolygons)\n  })\n  return destpolygons\n}\n\nmodule.exports = mergePolygons\n", "const constants = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst assert = false\n\nconst getTag = (vertex) => `${vertex}`\n\nconst addSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {\n  const starttag = getTag(vertex0)\n  const endtag = getTag(vertex1)\n  if (assert && starttag === endtag) throw new Error('assert failed')\n  const newsidetag = `${starttag}/${endtag}`\n  const reversesidetag = `${endtag}/${starttag}`\n  if (sidemap.has(reversesidetag)) {\n    // remove the opposing side from mappings\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null)\n    return null\n  }\n  // add the side to the mappings\n  const newsideobj = {\n    vertex0: vertex0,\n    vertex1: vertex1,\n    polygonindex: polygonindex\n  }\n  if (!(sidemap.has(newsidetag))) {\n    sidemap.set(newsidetag, [newsideobj])\n  } else {\n    sidemap.get(newsidetag).push(newsideobj)\n  }\n  if (vertextag2sidestart.has(starttag)) {\n    vertextag2sidestart.get(starttag).push(newsidetag)\n  } else {\n    vertextag2sidestart.set(starttag, [newsidetag])\n  }\n  if (vertextag2sideend.has(endtag)) {\n    vertextag2sideend.get(endtag).push(newsidetag)\n  } else {\n    vertextag2sideend.set(endtag, [newsidetag])\n  }\n  return newsidetag\n}\n\nconst deleteSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {\n  const starttag = getTag(vertex0)\n  const endtag = getTag(vertex1)\n  const sidetag = `${starttag}/${endtag}`\n  if (assert && !(sidemap.has(sidetag))) throw new Error('assert failed')\n  let idx = -1\n  const sideobjs = sidemap.get(sidetag)\n  for (let i = 0; i < sideobjs.length; i++) {\n    const sideobj = sideobjs[i]\n    let sidetag = getTag(sideobj.vertex0)\n    if (sidetag !== starttag) continue\n    sidetag = getTag(sideobj.vertex1)\n    if (sidetag !== endtag) continue\n    if (polygonindex !== null) {\n      if (sideobj.polygonindex !== polygonindex) continue\n    }\n    idx = i\n    break\n  }\n  if (assert && idx < 0) throw new Error('assert failed')\n  sideobjs.splice(idx, 1)\n  if (sideobjs.length === 0) {\n    sidemap.delete(sidetag)\n  }\n\n  // adjust start and end lists\n  idx = vertextag2sidestart.get(starttag).indexOf(sidetag)\n  if (assert && idx < 0) throw new Error('assert failed')\n  vertextag2sidestart.get(starttag).splice(idx, 1)\n  if (vertextag2sidestart.get(starttag).length === 0) {\n    vertextag2sidestart.delete(starttag)\n  }\n\n  idx = vertextag2sideend.get(endtag).indexOf(sidetag)\n  if (assert && idx < 0) throw new Error('assert failed')\n  vertextag2sideend.get(endtag).splice(idx, 1)\n  if (vertextag2sideend.get(endtag).length === 0) {\n    vertextag2sideend.delete(endtag)\n  }\n}\n\n/*\n  Suppose we have two polygons ACDB and EDGF:\n\n   A-----B\n   |     |\n   |     E--F\n   |     |  |\n   C-----D--G\n\n  Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\n  that the solid is not watertight. This is because the watertightness check is done by checking if\n  each side DE is matched by another side ED.\n\n  This function will return a new solid with ACDB replaced by ACDEB\n\n  Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should\n  not be used for further CSG operations!\n\n  Note this function is meant to be used to preprocess geometries when triangulation is required, i.e. AMF, STL, etc.\n  Do not use the results in other operations.\n*/\n\n/*\n * Insert missing vertices for T junctions, which creates polygons that can be triangulated.\n * @param {Array} polygons - the original polygons which may or may not have T junctions\n * @return original polygons (if no T junctions found) or new polygons with updated vertices\n */\nconst insertTjunctions = (polygons) => {\n  // STEP 1 : build a map of 'unmatched' sides from the polygons\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\n  const sidemap = new Map()\n  for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {\n    const polygon = polygons[polygonindex]\n    const numvertices = polygon.vertices.length\n    if (numvertices >= 3) {\n      let vertex = polygon.vertices[0]\n      let vertextag = getTag(vertex)\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex === numvertices) nextvertexindex = 0\n\n        const nextvertex = polygon.vertices[nextvertexindex]\n        const nextvertextag = getTag(nextvertex)\n\n        const sidetag = `${vertextag}/${nextvertextag}`\n        const reversesidetag = `${nextvertextag}/${vertextag}`\n        if (sidemap.has(reversesidetag)) {\n          // this side matches the same side in another polygon. Remove from sidemap\n          // FIXME is this check necessary? there should only be ONE(1) opposing side\n          // FIXME assert ?\n          const ar = sidemap.get(reversesidetag)\n          ar.splice(-1, 1)\n          if (ar.length === 0) {\n            sidemap.delete(reversesidetag)\n          }\n        } else {\n          const sideobj = {\n            vertex0: vertex,\n            vertex1: nextvertex,\n            polygonindex: polygonindex\n          }\n          if (!(sidemap.has(sidetag))) {\n            sidemap.set(sidetag, [sideobj])\n          } else {\n            sidemap.get(sidetag).push(sideobj)\n          }\n        }\n        vertex = nextvertex\n        vertextag = nextvertextag\n      }\n    } else {\n      console.warn('warning: invalid polygon found during insertTjunctions')\n    }\n  }\n\n  if (sidemap.size > 0) {\n    // STEP 2 : create a list of starting sides and ending sides\n    const vertextag2sidestart = new Map()\n    const vertextag2sideend = new Map()\n    const sidesToCheck = new Map()\n    for (const [sidetag, sideobjs] of sidemap) {\n      sidesToCheck.set(sidetag, true)\n      sideobjs.forEach((sideobj) => {\n        const starttag = getTag(sideobj.vertex0)\n        const endtag = getTag(sideobj.vertex1)\n        if (vertextag2sidestart.has(starttag)) {\n          vertextag2sidestart.get(starttag).push(sidetag)\n        } else {\n          vertextag2sidestart.set(starttag, [sidetag])\n        }\n        if (vertextag2sideend.has(endtag)) {\n          vertextag2sideend.get(endtag).push(sidetag)\n        } else {\n          vertextag2sideend.set(endtag, [sidetag])\n        }\n      })\n    }\n\n    // STEP 3 : if sidemap is not empty\n    const newpolygons = polygons.slice(0) // make a copy in order to replace polygons inline\n    while (true) {\n      if (sidemap.size === 0) break\n\n      for (const sidetag of sidemap.keys()) {\n        sidesToCheck.set(sidetag, true)\n      }\n\n      let donesomething = false\n      while (true) {\n        const sidetags = Array.from(sidesToCheck.keys())\n        if (sidetags.length === 0) break // sidesToCheck is empty, we're done!\n        const sidetagtocheck = sidetags[0]\n        let donewithside = true\n        if (sidemap.has(sidetagtocheck)) {\n          const sideobjs = sidemap.get(sidetagtocheck)\n          if (assert && sideobjs.length === 0) throw new Error('assert failed')\n          const sideobj = sideobjs[0]\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\n            const startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1\n            const endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0\n            const startvertextag = getTag(startvertex)\n            const endvertextag = getTag(endvertex)\n            let matchingsides = []\n            if (directionindex === 0) {\n              if (vertextag2sideend.has(startvertextag)) {\n                matchingsides = vertextag2sideend.get(startvertextag)\n              }\n            } else {\n              if (vertextag2sidestart.has(startvertextag)) {\n                matchingsides = vertextag2sidestart.get(startvertextag)\n              }\n            }\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\n              const matchingsidetag = matchingsides[matchingsideindex]\n              const matchingside = sidemap.get(matchingsidetag)[0]\n              const matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1\n              const matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0\n              const matchingsidestartvertextag = getTag(matchingsidestartvertex)\n              const matchingsideendvertextag = getTag(matchingsideendvertex)\n              if (assert && matchingsideendvertextag !== startvertextag) throw new Error('assert failed')\n              if (matchingsidestartvertextag === endvertextag) {\n                // matchingside cancels sidetagtocheck\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null)\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null)\n                donewithside = false\n                directionindex = 2 // skip reverse direction check\n                donesomething = true\n                break\n              } else {\n                const startpos = startvertex\n                const endpos = endvertex\n                const checkpos = matchingsidestartvertex\n                const direction = vec3.subtract(vec3.create(), checkpos, startpos)\n                // Now we need to check if endpos is on the line startpos-checkpos:\n                const t = vec3.dot(vec3.subtract(vec3.create(), endpos, startpos), direction) / vec3.dot(direction, direction)\n                if ((t > 0) && (t < 1)) {\n                  const closestpoint = vec3.scale(vec3.create(), direction, t)\n                  vec3.add(closestpoint, closestpoint, startpos)\n                  const distancesquared = vec3.squaredDistance(closestpoint, endpos)\n                  if (distancesquared < (constants.EPS * constants.EPS)) {\n                    // Yes it's a t-junction! We need to split matchingside in two:\n                    const polygonindex = matchingside.polygonindex\n                    const polygon = newpolygons[polygonindex]\n                    // find the index of startvertextag in polygon:\n                    const insertionvertextag = getTag(matchingside.vertex1)\n                    let insertionvertextagindex = -1\n                    for (let i = 0; i < polygon.vertices.length; i++) {\n                      if (getTag(polygon.vertices[i]) === insertionvertextag) {\n                        insertionvertextagindex = i\n                        break\n                      }\n                    }\n                    if (assert && insertionvertextagindex < 0) throw new Error('assert failed')\n                    // split the side by inserting the vertex:\n                    const newvertices = polygon.vertices.slice(0)\n                    newvertices.splice(insertionvertextagindex, 0, endvertex)\n                    const newpolygon = poly3.create(newvertices)\n\n                    newpolygons[polygonindex] = newpolygon\n\n                    // remove the original sides from our maps\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, matchingside.vertex1, polygonindex)\n                    const newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, endvertex, polygonindex)\n                    const newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, matchingside.vertex1, polygonindex)\n                    if (newsidetag1 !== null) sidesToCheck.set(newsidetag1, true)\n                    if (newsidetag2 !== null) sidesToCheck.set(newsidetag2, true)\n                    donewithside = false\n                    directionindex = 2 // skip reverse direction check\n                    donesomething = true\n                    break\n                  } // if(distancesquared < 1e-10)\n                } // if( (t > 0) && (t < 1) )\n              } // if(endingstidestartvertextag === endvertextag)\n            } // for matchingsideindex\n          } // for directionindex\n        } // if(sidetagtocheck in sidemap)\n        if (donewithside) {\n          sidesToCheck.delete(sidetagtocheck)\n        }\n      }\n      if (!donesomething) break\n    }\n    polygons = newpolygons\n  }\n  sidemap.clear()\n\n  return polygons\n}\n\nmodule.exports = insertTjunctions\n", "const vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst triangulatePolygon = (epsilon, polygon, triangles) => {\n  const nv = polygon.vertices.length\n  if (nv > 3) {\n    if (nv > 4) {\n      // split the polygon using a midpoint\n      const midpoint = [0, 0, 0]\n      polygon.vertices.forEach((vertice) => vec3.add(midpoint, midpoint, vertice))\n      vec3.snap(midpoint, vec3.divide(midpoint, midpoint, [nv, nv, nv]), epsilon)\n      for (let i = 0; i < nv; i++) {\n        const poly = poly3.create([midpoint, polygon.vertices[i], polygon.vertices[(i + 1) % nv]])\n        if (polygon.color) poly.color = polygon.color\n        triangles.push(poly)\n      }\n      return\n    }\n    // exactly 4 vertices, use simple triangulation\n    const poly0 = poly3.create([polygon.vertices[0], polygon.vertices[1], polygon.vertices[2]])\n    const poly1 = poly3.create([polygon.vertices[0], polygon.vertices[2], polygon.vertices[3]])\n    if (polygon.color) {\n      poly0.color = polygon.color\n      poly1.color = polygon.color\n    }\n    triangles.push(poly0, poly1)\n    return\n  }\n  // exactly 3 vertices, so return the original\n  triangles.push(polygon)\n}\n\n/*\n * Convert the given polygons into a list of triangles (polygons with 3 vertices).\n * NOTE: this is possible because poly3 is CONVEX by definition\n */\nconst triangulatePolygons = (epsilon, polygons) => {\n  const triangles = []\n  polygons.forEach((polygon) => {\n    triangulatePolygon(epsilon, polygon, triangles)\n  })\n  return triangles\n}\n\nmodule.exports = triangulatePolygons\n", "const flatten = require('../../utils/flatten')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst snapPolygons = require('./snapPolygons')\nconst mergePolygons = require('./mergePolygons')\nconst insertTjunctions = require('./insertTjunctions')\nconst triangulatePolygons = require('./triangulatePolygons')\n\n/*\n */\nconst generalizePath2 = (options, geometry) => geometry\n\n/*\n */\nconst generalizeGeom2 = (options, geometry) => geometry\n\n/*\n */\nconst generalizeGeom3 = (options, geometry) => {\n  const defaults = {\n    snap: false,\n    simplify: false,\n    triangulate: false\n  }\n  const { snap, simplify, triangulate } = Object.assign({}, defaults, options)\n\n  const epsilon = measureEpsilon(geometry)\n  let polygons = geom3.toPolygons(geometry)\n\n  // snap the given geometry if requested\n  if (snap) {\n    polygons = snapPolygons(epsilon, polygons)\n  }\n\n  // simplify the polygons if requested\n  if (simplify) {\n    // TODO implement some mesh decimations\n    polygons = mergePolygons(epsilon, polygons)\n  }\n\n  // triangulate the polygons if requested\n  if (triangulate) {\n    polygons = insertTjunctions(polygons)\n    polygons = triangulatePolygons(epsilon, polygons)\n  }\n\n  // FIXME replace with geom3.cloneShallow() when available\n  const clone = Object.assign({}, geometry)\n  clone.polygons = polygons\n\n  return clone\n}\n\n/**\n * Apply various modifications in proper order to produce a generalized geometry.\n * @param {Object} options - options for modifications\n * @param {Boolean} [options.snap=false] the geometries should be snapped to epsilons\n * @param {Boolean} [options.simplify=false] the geometries should be simplified\n * @param {Boolean} [options.triangulate=false] the geometries should be triangulated\n * @param {...Object} geometries - the geometries to generalize\n * @return {Object|Array} the modified geometry, or a list of modified geometries\n * @alias module:modeling/modifiers.generalize\n */\nconst generalize = (options, ...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return generalizePath2(options, geometry)\n    if (geom2.isA(geometry)) return generalizeGeom2(options, geometry)\n    if (geom3.isA(geometry)) return generalizeGeom3(options, geometry)\n    throw new Error('invalid geometry')\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = generalize\n", "const flatten = require('../../utils/flatten')\n\nconst vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst snapPolygons = require('./snapPolygons')\n\nconst snapPath2 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const points = path2.toPoints(geometry)\n  const newpoints = points.map((point) => vec2.snap(vec2.create(), point, epsilon))\n  // snap can produce duplicate points, remove those\n  return path2.create(newpoints)\n}\n\nconst snapGeom2 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const sides = geom2.toSides(geometry)\n  let newsides = sides.map((side) => [vec2.snap(vec2.create(), side[0], epsilon), vec2.snap(vec2.create(), side[1], epsilon)])\n  // snap can produce sides with zero (0) length, remove those\n  newsides = newsides.filter((side) => !vec2.equals(side[0], side[1]))\n  return geom2.create(newsides)\n}\n\nconst snapGeom3 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const polygons = geom3.toPolygons(geometry)\n  const newpolygons = snapPolygons(epsilon, polygons)\n  return geom3.create(newpolygons)\n}\n\n/**\n * Snap the given geometries to the overall precision (epsilon) of the geometry.\n * @see measurements.measureEpsilon()\n * @param {...Object} geometries - the geometries to snap\n * @return {Object|Array} the snapped geometry, or a list of snapped geometries\n * @alias module:modeling/modifiers.snap\n */\nconst snap = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return snapPath2(geometry)\n    if (geom2.isA(geometry)) return snapGeom2(geometry)\n    if (geom3.isA(geometry)) return snapGeom3(geometry)\n    return geometry\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = snap\n", "/**\n * All shapes (primitives or the results of operations) can be modified to correct issues, etc.\n * In all cases, these functions returns the results, and never changes the original geometry.\n * @module modeling/modifiers\n * @example\n * const { snap } = require('@jscad/modeling').modifiers\n */\nmodule.exports = {\n  generalize: require('./generalize'),\n  snap: require('./snap'),\n  retessellate: require('./retessellate')\n}\n", "/**\n * Build an array of at minimum a specified length from an existing array and a padding value. IF the array is already larger than the target length, it will not be shortened.\n * @param {Array} anArray - the source array to copy into the result.\n * @param {*} padding - the value to add to the new array to reach the desired length.\n * @param {Number} targetLength - The desired length of the return array.\n * @returns {Array} an array of at least 'targetLength' length\n * @alias module:modeling/utils.padArrayToLength\n */\nconst padArrayToLength = (anArray, padding, targetLength) => {\n  anArray = anArray.slice()\n  while (anArray.length < targetLength) {\n    anArray.push(padding)\n  }\n  return anArray\n}\n\nmodule.exports = padArrayToLength\n", "const flatten = require('../../utils/flatten')\nconst padArrayToLength = require('../../utils/padArrayToLength')\nconst measureAggregateBoundingBox = require('../../measurements/measureAggregateBoundingBox')\nconst { translate } = require('./translate')\n\nconst validateOptions = (options) => {\n  if (!Array.isArray(options.modes) || options.modes.length > 3) throw new Error('align(): modes must be an array of length <= 3')\n  options.modes = padArrayToLength(options.modes, 'none', 3)\n  if (options.modes.filter((mode) => ['center', 'max', 'min', 'none'].includes(mode)).length !== 3) throw new Error('align(): all modes must be one of \"center\", \"max\" or \"min\"')\n\n  if (!Array.isArray(options.relativeTo) || options.relativeTo.length > 3) throw new Error('align(): relativeTo must be an array of length <= 3')\n  options.relativeTo = padArrayToLength(options.relativeTo, 0, 3)\n  if (options.relativeTo.filter((alignVal) => (Number.isFinite(alignVal) || alignVal == null)).length !== 3) throw new Error('align(): all relativeTo values must be a number, or null.')\n\n  if (typeof options.grouped !== 'boolean') throw new Error('align(): grouped must be a boolean value.')\n\n  return options\n}\n\nconst populateRelativeToFromBounds = (relativeTo, modes, bounds) => {\n  for (let i = 0; i < 3; i++) {\n    if (relativeTo[i] == null) {\n      if (modes[i] === 'center') {\n        relativeTo[i] = (bounds[0][i] + bounds[1][i]) / 2\n      } else if (modes[i] === 'max') {\n        relativeTo[i] = bounds[1][i]\n      } else if (modes[i] === 'min') {\n        relativeTo[i] = bounds[0][i]\n      }\n    }\n  }\n  return relativeTo\n}\n\nconst alignGeometries = (geometry, modes, relativeTo) => {\n  const bounds = measureAggregateBoundingBox(geometry)\n  const translation = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    if (modes[i] === 'center') {\n      translation[i] = relativeTo[i] - (bounds[0][i] + bounds[1][i]) / 2\n    } else if (modes[i] === 'max') {\n      translation[i] = relativeTo[i] - bounds[1][i]\n    } else if (modes[i] === 'min') {\n      translation[i] = relativeTo[i] - bounds[0][i]\n    }\n  }\n\n  return translate(translation, geometry)\n}\n\n/**\n * Align the boundaries of the given geometries using the given options.\n * @param {Object} options - options for aligning\n * @param {Array} [options.modes = ['center', 'center', 'min']] - the point on the geometries to align to for each axis. Valid options are \"center\", \"max\", \"min\", and \"none\".\n * @param {Array} [options.relativeTo = [0,0,0]] - The point one each axis on which to align the geometries upon.  If the value is null, then the corresponding value from the group's bounding box is used.\n * @param {Boolean} [options.grouped = false] - if true, transform all geometries by the same amount, maintaining the relative positions to each other.\n * @param {...Object} geometries - the geometries to align\n * @return {Object|Array} the aligned geometry, or a list of aligned geometries\n * @alias module:modeling/transforms.align\n *\n * @example\n * let alignedGeometries = align({modes: ['min', 'center', 'none'], relativeTo: [10, null, 10], grouped: true }, geometries)\n */\nconst align = (options, ...geometries) => {\n  const defaults = {\n    modes: ['center', 'center', 'min'],\n    relativeTo: [0, 0, 0],\n    grouped: false\n  }\n  options = Object.assign({}, defaults, options)\n\n  options = validateOptions(options)\n  let { modes, relativeTo, grouped } = options\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('align(): No geometries were provided to act upon')\n\n  if (relativeTo.filter((val) => val == null).length) {\n    const bounds = measureAggregateBoundingBox(geometries)\n    relativeTo = populateRelativeToFromBounds(relativeTo, modes, bounds)\n  }\n  if (grouped) {\n    geometries = alignGeometries(geometries, modes, relativeTo)\n  } else {\n    geometries = geometries.map((geometry) => alignGeometries(geometry, modes, relativeTo))\n  }\n  return geometries.length === 1 ? geometries[0] : geometries\n}\n\nmodule.exports = align\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst measureBoundingBox = require('../../measurements/measureBoundingBox')\n\nconst { translate } = require('./translate')\n\nconst centerGeometry = (options, object) => {\n  const defaults = {\n    axes: [true, true, true],\n    relativeTo: [0, 0, 0]\n  }\n  const { axes, relativeTo } = Object.assign({}, defaults, options)\n\n  const bounds = measureBoundingBox(object)\n  const offset = [0, 0, 0]\n  if (axes[0]) offset[0] = relativeTo[0] - (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2))\n  if (axes[1]) offset[1] = relativeTo[1] - (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2))\n  if (axes[2]) offset[2] = relativeTo[2] - (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))\n  return translate(offset, object)\n}\n\n/**\n * Center the given objects using the given options.\n * @param {Object} options - options for centering\n * @param {Array} [options.axes=[true,true,true]] - axis of which to center, true or false\n * @param {Array} [options.relativeTo=[0,0,0]] - relative point of which to center the objects\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.center\n *\n * @example\n * let myshape = center({axes: [true,false,false]}, sphere()) // center about the X axis\n */\nconst center = (options, ...objects) => {\n  const defaults = {\n    axes: [true, true, true],\n    relativeTo: [0, 0, 0]\n  // TODO: Add additional 'methods' of centering: midpoint, centroid\n  }\n  const { axes, relativeTo } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n  if (relativeTo.length !== 3) throw new Error('relativeTo must be an array of length 3')\n\n  options = { axes, relativeTo }\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return centerGeometry(options, object)\n    if (geom2.isA(object)) return centerGeometry(options, object)\n    if (geom3.isA(object)) return centerGeometry(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Center the given objects about the X axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerX\n */\nconst centerX = (...objects) => center({ axes: [true, false, false] }, objects)\n\n/**\n * Center the given objects about the Y axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerY\n */\nconst centerY = (...objects) => center({ axes: [false, true, false] }, objects)\n\n/**\n * Center the given objects about the Z axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerZ\n */\nconst centerZ = (...objects) => center({ axes: [false, false, true] }, objects)\n\nmodule.exports = {\n  center,\n  centerX,\n  centerY,\n  centerZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Scale the given objects using the given options.\n * @param {Array} factors - X, Y, Z factors by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scale\n *\n * @example\n * let myshape = scale([5, 0, 10], sphere())\n */\nconst scale = (factors, ...objects) => {\n  if (!Array.isArray(factors)) throw new Error('factors must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the factors if necessary\n  factors = factors.slice() // don't modify the original\n  while (factors.length < 3) factors.push(1)\n\n  if (factors[0] <= 0 || factors[1] <= 0 || factors[2] <= 0) throw new Error('factors must be positive')\n\n  const matrix = mat4.fromScaling(mat4.create(), factors)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Scale the given objects about the X axis using the given options.\n * @param {Number} factor - X factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleX\n */\nconst scaleX = (factor, ...objects) => scale([factor, 1, 1], objects)\n\n/**\n * Scale the given objects about the Y axis using the given options.\n * @param {Number} factor - Y factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleY\n */\nconst scaleY = (factor, ...objects) => scale([1, factor, 1], objects)\n\n/**\n * Scale the given objects about the Z axis using the given options.\n * @param {Number} factor - Z factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleZ\n */\nconst scaleZ = (factor, ...objects) => scale([1, 1, factor], objects)\n\nmodule.exports = {\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Transform the given objects using the given matrix.\n * @param {mat4} matrix - a transformation matrix\n * @param {...Object} objects - the objects to transform\n * @return {Object|Array} the transformed object, or a list of transformed objects\n * @alias module:modeling/transforms.transform\n *\n * @example\n * const newsphere = transform(mat4.rotateX(TAU / 8), sphere())\n */\nconst transform = (matrix, ...objects) => {\n  // TODO how to check that the matrix is REAL?\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = transform\n", "/**\n * All shapes (primitives or the results of operations) can be transformed, such as scaled or rotated.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/transforms\n * @example\n * const { center, rotateX, translate } = require('@jscad/modeling').transforms\n */\nmodule.exports = {\n  align: require('./align'),\n\n  center: require('./center').center,\n  centerX: require('./center').centerX,\n  centerY: require('./center').centerY,\n  centerZ: require('./center').centerZ,\n\n  mirror: require('./mirror').mirror,\n  mirrorX: require('./mirror').mirrorX,\n  mirrorY: require('./mirror').mirrorY,\n  mirrorZ: require('./mirror').mirrorZ,\n\n  rotate: require('./rotate').rotate,\n  rotateX: require('./rotate').rotateX,\n  rotateY: require('./rotate').rotateY,\n  rotateZ: require('./rotate').rotateZ,\n\n  scale: require('./scale').scale,\n  scaleX: require('./scale').scaleX,\n  scaleY: require('./scale').scaleY,\n  scaleZ: require('./scale').scaleZ,\n\n  transform: require('./transform'),\n\n  translate: require('./translate').translate,\n  translateX: require('./translate').translateX,\n  translateY: require('./translate').translateY,\n  translateZ: require('./translate').translateZ\n}\n", "module.exports = {\n  colors: require('./colors'),\n  curves: require('./curves'),\n  geometries: require('./geometries'),\n  maths: require('./maths'),\n  measurements: require('./measurements'),\n  primitives: require('./primitives'),\n  text: require('./text'),\n  utils: require('./utils'),\n\n  booleans: require('./operations/booleans'),\n  expansions: require('./operations/expansions'),\n  extrusions: require('./operations/extrusions'),\n  hulls: require('./operations/hulls'),\n  modifiers: require('./operations/modifiers'),\n  transforms: require('./operations/transforms')\n}\n"],
  "mappings": "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",
  "names": ["require_clone", "require_add", "require_create", "require_clone", "require_copy", "require_equals", "require_fromValues", "require_multiply", "require_rotateX", "require_rotateY", "require_rotateZ", "require_scale", "require_subtract", "require_toString", "require_create", "require_abs", "require_add", "require_angle", "require_create", "require_clone", "require_copy", "require_cross", "require_distance", "require_divide", "require_dot", "require_equals", "require_fromScalar", "require_fromValues", "require_length", "require_lerp", "require_max", "require_min", "require_multiply", "require_negate", "require_rotate", "require_normalize", "require_scale", "require_snap", "require_squaredDistance", "require_squaredLength", "require_subtract", "require_toString", "require_transform", "nextSide", "require_toString", "require_transform", "require_clone", "require_create", "require_create", "require_clone", "require_fromPoints", "require_create", "require_clone", "require_copy", "require_equals", "require_fromValues", "require_fromPoints", "require_toString", "require_transform", "require_invert", "require_isA", "require_plane", "require_dot", "require_fromScalar", "require_transform", "require_toPoints", "require_toString", "require_transform", "require_validate", "require_fromPoints", "require_fromCompactBinary", "require_applyTransforms", "require_invert", "require_isA", "require_toPoints", "require_toString", "require_toCompactBinary", "require_transform", "require_validate", "require_clone", "require_create", "require_fromPoints", "require_applyTransforms", "require_toPoints", "require_equals", "require_fromCompactBinary", "require_isA", "require_reverse", "require_toString", "require_toCompactBinary", "require_transform", "require_validate", "area", "require_measureArea", "require_create", "require_flip", "require_create", "require_clone", "require_copy", "require_equals", "require_fromPoints", "require_fromValues", "require_reverse", "require_toString", "require_transform", "require_create", "require_clone", "require_closestPoint", "require_copy", "require_direction", "require_distanceToPoint", "require_equals", "require_fromPoints", "require_origin", "require_reverse", "require_toString", "require_transform", "require_measureArea", "area", "result", "require_measureBoundingBox", "result", "dimensions", "volume", "result", "require_measureBoundingSphere", "point", "frequency", "offset", "require_create", "require_clone", "require_equals", "require_fromPoints", "require_isA", "require_reverse", "p", "holes", "require_toPolygons", "require_toString", "require_transform", "require_rotate", "require_translate", "require_triangle", "require_utils", "nextrightvertexindex", "plane", "require_intersect", "require_subtract", "rotation", "polygons", "j", "v1", "v2", "polygons", "sidetag", "require_snap", "require_scale", "require_transform"]
}
