{
  "version": 3,
  "sources": ["../../@jscad/modeling/src/curves/bezier/create.js"],
  "sourcesContent": ["/**\n * Represents a bezier easing function.\n * @typedef {Object} bezier\n * @property {Array} points - The control points for the bezier curve. The first and last point will also be the start and end of the curve\n * @property {string} pointType - A reference to the type and dimensionality of the points that the curve was created from\n * @property {number} dimensions - The dimensionality of the bezier\n * @property {Array} permutations - A pre-calculation of the bezier algorithm's co-efficients\n * @property {Array} tangentPermutations - A pre-calculation of the bezier algorithm's tangent co-efficients\n *\n */\n\n/**\n * Creates an object representing a bezier easing curve.\n * Curves can have both an arbitrary number of control points, and an arbitrary number of dimensions.\n *\n * @example\n * const b = bezier.create([0,10]) // a linear progression from 0 to 10\n * const b = bezier.create([0, 0, 10, 10]) // a symmetrical cubic easing curve that starts slowly and ends slowly from 0 to 10\n * const b = bezier.create([0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling\n * // Usage\n * let position = bezier.valueAt(t,b) // where 0 < t < 1\n * let tangent = bezier.tangentAt(t,b) // where 0 < t < 1\n *\n * @param {Array} points An array with at least 2 elements of either all numbers, or all arrays of numbers that are the same size.\n * @returns {bezier} a new bezier data object\n * @alias module:modeling/curves/bezier.create\n */\nconst create = (points) => {\n  if (!Array.isArray(points)) throw new Error('Bezier points must be a valid array/')\n  if (points.length < 2) throw new Error('Bezier points must contain at least 2 values.')\n  const pointType = getPointType(points)\n\n  return {\n    points: points,\n    pointType: pointType,\n    dimensions: pointType === 'float_single' ? 0 : points[0].length,\n    permutations: getPermutations(points.length - 1),\n    tangentPermutations: getPermutations(points.length - 2)\n  }\n}\n\nconst getPointType = function (points) {\n  let firstPointType = null\n  points.forEach((point) => {\n    let pType = ''\n    if (Number.isFinite(point)) {\n      pType = 'float_single'\n    } else if (Array.isArray(point)) {\n      point.forEach((val) => {\n        if (!Number.isFinite(val)) throw new Error('Bezier point values must all be numbers.')\n      })\n      pType = 'float_' + point.length\n    } else throw new Error('Bezier points must all be numbers or arrays of number.')\n    if (firstPointType == null) {\n      firstPointType = pType\n    } else {\n      if (firstPointType !== pType) {\n        throw new Error('Bezier points must be either all numbers or all arrays of numbers of the same size.')\n      }\n    }\n  })\n  return firstPointType\n}\n\nconst getPermutations = function (c) {\n  const permutations = []\n  for (let i = 0; i <= c; i++) {\n    permutations.push(factorial(c) / (factorial(i) * factorial(c - i)))\n  }\n  return permutations\n}\n\nconst factorial = function (b) {\n  let out = 1\n  for (let i = 2; i <= b; i++) {\n    out *= i\n  }\n  return out\n}\n\nmodule.exports = create\n"],
  "mappings": ";;;;;AAAA;AAAA;AA2BA,QAAM,SAAS,CAAC,WAAW;AACzB,UAAI,CAAC,MAAM,QAAQ,MAAM;AAAG,cAAM,IAAI,MAAM,sCAAsC;AAClF,UAAI,OAAO,SAAS;AAAG,cAAM,IAAI,MAAM,+CAA+C;AACtF,YAAM,YAAY,aAAa,MAAM;AAErC,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,YAAY,cAAc,iBAAiB,IAAI,OAAO,CAAC,EAAE;AAAA,QACzD,cAAc,gBAAgB,OAAO,SAAS,CAAC;AAAA,QAC/C,qBAAqB,gBAAgB,OAAO,SAAS,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,QAAM,eAAe,SAAU,QAAQ;AACrC,UAAI,iBAAiB;AACrB,aAAO,QAAQ,CAAC,UAAU;AACxB,YAAI,QAAQ;AACZ,YAAI,OAAO,SAAS,KAAK,GAAG;AAC1B,kBAAQ;AAAA,QACV,WAAW,MAAM,QAAQ,KAAK,GAAG;AAC/B,gBAAM,QAAQ,CAAC,QAAQ;AACrB,gBAAI,CAAC,OAAO,SAAS,GAAG;AAAG,oBAAM,IAAI,MAAM,0CAA0C;AAAA,UACvF,CAAC;AACD,kBAAQ,WAAW,MAAM;AAAA,QAC3B;AAAO,gBAAM,IAAI,MAAM,wDAAwD;AAC/E,YAAI,kBAAkB,MAAM;AAC1B,2BAAiB;AAAA,QACnB,OAAO;AACL,cAAI,mBAAmB,OAAO;AAC5B,kBAAM,IAAI,MAAM,qFAAqF;AAAA,UACvG;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAEA,QAAM,kBAAkB,SAAU,GAAG;AACnC,YAAM,eAAe,CAAC;AACtB,eAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,qBAAa,KAAK,UAAU,CAAC,KAAK,UAAU,CAAC,IAAI,UAAU,IAAI,CAAC,EAAE;AAAA,MACpE;AACA,aAAO;AAAA,IACT;AAEA,QAAM,YAAY,SAAU,GAAG;AAC7B,UAAI,MAAM;AACV,eAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
