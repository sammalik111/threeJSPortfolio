{
  "version": 3,
  "sources": ["../../three-csg/index.js"],
  "sourcesContent": ["'use strict';\nvar ThreeBSP,\n\tEPSILON = 1e-5,\n\tCOPLANAR = 0,\n\tFRONT = 1,\n\tBACK = 2,\n\tSPANNING = 3;\n\nThreeBSP = function( geometry ) {\n\t// Convert THREE.Geometry to ThreeBSP\n\tvar i, _length_i,\n\t\tface, vertex, faceVertexUvs, uvs,\n\t\tpolygon,\n\t\tpolygons = [],\n\t\ttree;\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\t\tthis.matrix = new THREE.Matrix4;\n\t} else if ( geometry instanceof THREE.Mesh ) {\n\t\t// #todo: add hierarchy support\n\t\tgeometry.updateMatrix();\n\t\tthis.matrix = geometry.matrix.clone();\n\t\tgeometry = geometry.geometry;\n\t} else if ( geometry instanceof ThreeBSP.Node ) {\n\t\tthis.tree = geometry;\n\t\tthis.matrix = new THREE.Matrix4;\n\t\treturn this;\n\t} else {\n\t\tthrow 'ThreeBSP: Given geometry is unsupported';\n\t}\n\n\tfor ( i = 0, _length_i = geometry.faces.length; i < _length_i; i++ ) {\n\t\tface = geometry.faces[i];\n\t\tfaceVertexUvs = geometry.faceVertexUvs[0][i];\n\t\tpolygon = new ThreeBSP.Polygon;\n\n\t\tif ( face instanceof THREE.Face3 ) {\n\t\t\tvertex = geometry.vertices[ face.a ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.b ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.c ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\t\t} else if ( typeof THREE.Face4 ) {\n\t\t\tvertex = geometry.vertices[ face.a ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.b ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[1], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.c ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.d ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[3].x, faceVertexUvs[3].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[3], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\t\t} else {\n\t\t\tthrow 'Invalid face type at index ' + i;\n\t\t}\n\n\t\tpolygon.calculateProperties();\n\t\tpolygons.push( polygon );\n\t};\n\n\tthis.tree = new ThreeBSP.Node( polygons );\n};\nThreeBSP.prototype.subtract = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.invert();\n\ta.clipTo( b );\n\tb.clipTo( a );\n\tb.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.build( b.allPolygons() );\n\ta.invert();\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.union = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.clipTo( b );\n\tb.clipTo( a );\n\tb.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.build( b.allPolygons() );\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.intersect = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.clipTo( b );\n\tb.clipTo( a );\n\ta.build( b.allPolygons() );\n\ta.invert();\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.toGeometry = function() {\n\tvar i, j,\n\t\tmatrix = new THREE.Matrix4().getInverse( this.matrix ),\n\t\tgeometry = new THREE.Geometry(),\n\t\tpolygons = this.tree.allPolygons(),\n\t\tpolygon_count = polygons.length,\n\t\tpolygon, polygon_vertice_count,\n\t\tvertice_dict = {},\n\t\tvertex_idx_a, vertex_idx_b, vertex_idx_c,\n\t\tvertex, face,\n\t\tverticeUvs;\n\n\tfor ( i = 0; i < polygon_count; i++ ) {\n\t\tpolygon = polygons[i];\n\t\tpolygon_vertice_count = polygon.vertices.length;\n\n\t\tfor ( j = 2; j < polygon_vertice_count; j++ ) {\n\t\t\tverticeUvs = [];\n\n\t\t\tvertex = polygon.vertices[0];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tvertex = polygon.vertices[j-1];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tvertex = polygon.vertices[j];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tface = new THREE.Face3(\n\t\t\t\tvertex_idx_a,\n\t\t\t\tvertex_idx_b,\n\t\t\t\tvertex_idx_c,\n\t\t\t\tnew THREE.Vector3( polygon.normal.x, polygon.normal.y, polygon.normal.z )\n\t\t\t);\n\n\t\t\tgeometry.faces.push( face );\n\t\t\tgeometry.faceVertexUvs[0].push( verticeUvs );\n\t\t}\n\n\t}\n\treturn geometry;\n};\nThreeBSP.prototype.toMesh = function( material ) {\n\tvar geometry = this.toGeometry(),\n\t\tmesh = new THREE.Mesh( geometry, material );\n\n\tmesh.position.setFromMatrixPosition( this.matrix );\n\tmesh.rotation.setFromRotationMatrix( this.matrix );\n\n\treturn mesh;\n};\n\n\nThreeBSP.Polygon = function( vertices, normal, w ) {\n\tif ( !( vertices instanceof Array ) ) {\n\t\tvertices = [];\n\t}\n\n\tthis.vertices = vertices;\n\tif ( vertices.length > 0 ) {\n\t\tthis.calculateProperties();\n\t} else {\n\t\tthis.normal = this.w = undefined;\n\t}\n};\nThreeBSP.Polygon.prototype.calculateProperties = function() {\n\tvar a = this.vertices[0],\n\t\tb = this.vertices[1],\n\t\tc = this.vertices[2];\n\n\tthis.normal = b.clone().subtract( a ).cross(\n\t\tc.clone().subtract( a )\n\t).normalize();\n\n\tthis.w = this.normal.clone().dot( a );\n\n\treturn this;\n};\nThreeBSP.Polygon.prototype.clone = function() {\n\tvar i, vertice_count,\n\t\tpolygon = new ThreeBSP.Polygon;\n\n\tfor ( i = 0, vertice_count = this.vertices.length; i < vertice_count; i++ ) {\n\t\tpolygon.vertices.push( this.vertices[i].clone() );\n\t};\n\tpolygon.calculateProperties();\n\n\treturn polygon;\n};\n\nThreeBSP.Polygon.prototype.flip = function() {\n\tvar i, vertices = [];\n\n\tthis.normal.multiplyScalar( -1 );\n\tthis.w *= -1;\n\n\tfor ( i = this.vertices.length - 1; i >= 0; i-- ) {\n\t\tvertices.push( this.vertices[i] );\n\t};\n\tthis.vertices = vertices;\n\n\treturn this;\n};\nThreeBSP.Polygon.prototype.classifyVertex = function( vertex ) {\n\tvar side_value = this.normal.dot( vertex ) - this.w;\n\n\tif ( side_value < -EPSILON ) {\n\t\treturn BACK;\n\t} else if ( side_value > EPSILON ) {\n\t\treturn FRONT;\n\t} else {\n\t\treturn COPLANAR;\n\t}\n};\nThreeBSP.Polygon.prototype.classifySide = function( polygon ) {\n\tvar i, vertex, classification,\n\t\tnum_positive = 0,\n\t\tnum_negative = 0,\n\t\tvertice_count = polygon.vertices.length;\n\n\tfor ( i = 0; i < vertice_count; i++ ) {\n\t\tvertex = polygon.vertices[i];\n\t\tclassification = this.classifyVertex( vertex );\n\t\tif ( classification === FRONT ) {\n\t\t\tnum_positive++;\n\t\t} else if ( classification === BACK ) {\n\t\t\tnum_negative++;\n\t\t}\n\t}\n\n\tif ( num_positive > 0 && num_negative === 0 ) {\n\t\treturn FRONT;\n\t} else if ( num_positive === 0 && num_negative > 0 ) {\n\t\treturn BACK;\n\t} else if ( num_positive === 0 && num_negative === 0 ) {\n\t\treturn COPLANAR;\n\t} else {\n\t\treturn SPANNING;\n\t}\n};\nThreeBSP.Polygon.prototype.splitPolygon = function( polygon, coplanar_front, coplanar_back, front, back ) {\n\tvar classification = this.classifySide( polygon );\n\n\tif ( classification === COPLANAR ) {\n\n\t\t( this.normal.dot( polygon.normal ) > 0 ? coplanar_front : coplanar_back ).push( polygon );\n\n\t} else if ( classification === FRONT ) {\n\n\t\tfront.push( polygon );\n\n\t} else if ( classification === BACK ) {\n\n\t\tback.push( polygon );\n\n\t} else {\n\n\t\tvar vertice_count,\n\t\t\ti, j, ti, tj, vi, vj,\n\t\t\tt, v,\n\t\t\tf = [],\n\t\t\tb = [];\n\n\t\tfor ( i = 0, vertice_count = polygon.vertices.length; i < vertice_count; i++ ) {\n\n\t\t\tj = (i + 1) % vertice_count;\n\t\t\tvi = polygon.vertices[i];\n\t\t\tvj = polygon.vertices[j];\n\t\t\tti = this.classifyVertex( vi );\n\t\t\ttj = this.classifyVertex( vj );\n\n\t\t\tif ( ti != BACK ) f.push( vi );\n\t\t\tif ( ti != FRONT ) b.push( vi );\n\t\t\tif ( (ti | tj) === SPANNING ) {\n\t\t\t\tt = ( this.w - this.normal.dot( vi ) ) / this.normal.dot( vj.clone().subtract( vi ) );\n\t\t\t\tv = vi.interpolate( vj, t );\n\t\t\t\tf.push( v );\n\t\t\t\tb.push( v );\n\t\t\t}\n\t\t}\n\n\n\t\tif ( f.length >= 3 ) front.push( new ThreeBSP.Polygon( f ).calculateProperties() );\n\t\tif ( b.length >= 3 ) back.push( new ThreeBSP.Polygon( b ).calculateProperties() );\n\t}\n};\n\nThreeBSP.Vertex = function( x, y, z, normal, uv ) {\n\tthis.x = x;\n\tthis.y = y;\n\tthis.z = z;\n\tthis.normal = normal || new THREE.Vector3;\n\tthis.uv = uv || new THREE.Vector2;\n};\nThreeBSP.Vertex.prototype.clone = function() {\n\treturn new ThreeBSP.Vertex( this.x, this.y, this.z, this.normal.clone(), this.uv.clone() );\n};\nThreeBSP.Vertex.prototype.add = function( vertex ) {\n\tthis.x += vertex.x;\n\tthis.y += vertex.y;\n\tthis.z += vertex.z;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.subtract = function( vertex ) {\n\tthis.x -= vertex.x;\n\tthis.y -= vertex.y;\n\tthis.z -= vertex.z;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.multiplyScalar = function( scalar ) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\tthis.z *= scalar;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.cross = function( vertex ) {\n\tvar x = this.x,\n\t\ty = this.y,\n\t\tz = this.z;\n\n\tthis.x = y * vertex.z - z * vertex.y;\n\tthis.y = z * vertex.x - x * vertex.z;\n\tthis.z = x * vertex.y - y * vertex.x;\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.normalize = function() {\n\tvar length = Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\tthis.x /= length;\n\tthis.y /= length;\n\tthis.z /= length;\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.dot = function( vertex ) {\n\treturn this.x * vertex.x + this.y * vertex.y + this.z * vertex.z;\n};\nThreeBSP.Vertex.prototype.lerp = function( a, t ) {\n\tthis.add(\n\t\ta.clone().subtract( this ).multiplyScalar( t )\n\t);\n\n\tthis.normal.add(\n\t\ta.normal.clone().sub( this.normal ).multiplyScalar( t )\n\t);\n\n\tthis.uv.add(\n\t\ta.uv.clone().sub( this.uv ).multiplyScalar( t )\n\t);\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.interpolate = function( other, t ) {\n\treturn this.clone().lerp( other, t );\n};\nThreeBSP.Vertex.prototype.applyMatrix4 = function ( m ) {\n\n\t// input: THREE.Matrix4 affine matrix\n\n\tvar x = this.x, y = this.y, z = this.z;\n\n\tvar e = m.elements;\n\n\tthis.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\n\tthis.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\n\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n\treturn this;\n\n}\n\n\nThreeBSP.Node = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront = [],\n\t\tback = [];\n\n\tthis.polygons = [];\n\tthis.front = this.back = undefined;\n\n\tif ( !(polygons instanceof Array) || polygons.length === 0 ) return;\n\n\tthis.divider = polygons[0].clone();\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n\t}\n\n\tif ( front.length > 0 ) {\n\t\tthis.front = new ThreeBSP.Node( front );\n\t}\n\n\tif ( back.length > 0 ) {\n\t\tthis.back = new ThreeBSP.Node( back );\n\t}\n};\nThreeBSP.Node.isConvex = function( polygons ) {\n\tvar i, j;\n\tfor ( i = 0; i < polygons.length; i++ ) {\n\t\tfor ( j = 0; j < polygons.length; j++ ) {\n\t\t\tif ( i !== j && polygons[i].classifySide( polygons[j] ) !== BACK ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n};\nThreeBSP.Node.prototype.build = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront = [],\n\t\tback = [];\n\n\tif ( !this.divider ) {\n\t\tthis.divider = polygons[0].clone();\n\t}\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n\t}\n\n\tif ( front.length > 0 ) {\n\t\tif ( !this.front ) this.front = new ThreeBSP.Node();\n\t\tthis.front.build( front );\n\t}\n\n\tif ( back.length > 0 ) {\n\t\tif ( !this.back ) this.back = new ThreeBSP.Node();\n\t\tthis.back.build( back );\n\t}\n};\nThreeBSP.Node.prototype.allPolygons = function() {\n\tvar polygons = this.polygons.slice();\n\tif ( this.front ) polygons = polygons.concat( this.front.allPolygons() );\n\tif ( this.back ) polygons = polygons.concat( this.back.allPolygons() );\n\treturn polygons;\n};\nThreeBSP.Node.prototype.clone = function() {\n\tvar node = new ThreeBSP.Node();\n\n\tnode.divider = this.divider.clone();\n\tnode.polygons = this.polygons.map( function( polygon ) { return polygon.clone(); } );\n\tnode.front = this.front && this.front.clone();\n\tnode.back = this.back && this.back.clone();\n\n\treturn node;\n};\nThreeBSP.Node.prototype.invert = function() {\n\tvar i, polygon_count, temp;\n\n\tfor ( i = 0, polygon_count = this.polygons.length; i < polygon_count; i++ ) {\n\t\tthis.polygons[i].flip();\n\t}\n\n\tthis.divider.flip();\n\tif ( this.front ) this.front.invert();\n\tif ( this.back ) this.back.invert();\n\n\ttemp = this.front;\n\tthis.front = this.back;\n\tthis.back = temp;\n\n\treturn this;\n};\nThreeBSP.Node.prototype.clipPolygons = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront, back;\n\n\tif ( !this.divider ) return polygons.slice();\n\n\tfront = [], back = [];\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], front, back, front, back );\n\t}\n\n\tif ( this.front ) front = this.front.clipPolygons( front );\n\tif ( this.back ) back = this.back.clipPolygons( back );\n\telse back = [];\n\n\treturn front.concat( back );\n};\n\nThreeBSP.Node.prototype.clipTo = function( node ) {\n\tthis.polygons = node.clipPolygons( this.polygons );\n\tif ( this.front ) this.front.clipTo( node );\n\tif ( this.back ) this.back.clipTo( node );\n};\n\n\nmodule.exports = ThreeBSP;\n"],
  "mappings": "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",
  "names": []
}
